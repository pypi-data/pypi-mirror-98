# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import metric_pb2 as metric__pb2


class MetricServiceStub(object):
    """---------------------- gRPCs

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMetricDescriptor = channel.unary_unary(
                '/calixa.domain.metric.MetricService/CreateMetricDescriptor',
                request_serializer=metric__pb2.CreateMetricDescriptorRequest.SerializeToString,
                response_deserializer=metric__pb2.MetricDescriptor.FromString,
                )
        self.GetMetricDescriptor = channel.unary_unary(
                '/calixa.domain.metric.MetricService/GetMetricDescriptor',
                request_serializer=metric__pb2.GetMetricDescriptorRequest.SerializeToString,
                response_deserializer=metric__pb2.MetricDescriptor.FromString,
                )
        self.FindOrCreateAutoMetricDescriptor = channel.unary_unary(
                '/calixa.domain.metric.MetricService/FindOrCreateAutoMetricDescriptor',
                request_serializer=metric__pb2.FindOrCreateAutoMetricDescriptorRequest.SerializeToString,
                response_deserializer=metric__pb2.MetricDescriptor.FromString,
                )
        self.GetMetricDescriptors = channel.unary_stream(
                '/calixa.domain.metric.MetricService/GetMetricDescriptors',
                request_serializer=metric__pb2.GetMetricDescriptorRequest.SerializeToString,
                response_deserializer=metric__pb2.MetricDescriptor.FromString,
                )
        self.UpdateMetricDescriptor = channel.unary_unary(
                '/calixa.domain.metric.MetricService/UpdateMetricDescriptor',
                request_serializer=metric__pb2.UpdateMetricDescriptorRequest.SerializeToString,
                response_deserializer=metric__pb2.MetricDescriptor.FromString,
                )
        self.RecordObservation = channel.unary_unary(
                '/calixa.domain.metric.MetricService/RecordObservation',
                request_serializer=metric__pb2.MetricObservation.SerializeToString,
                response_deserializer=metric__pb2.RecordObservationResponse.FromString,
                )
        self.GetTimeSeries = channel.unary_stream(
                '/calixa.domain.metric.MetricService/GetTimeSeries',
                request_serializer=metric__pb2.MetricTimeSeriesRequest.SerializeToString,
                response_deserializer=metric__pb2.MetricObservationAtTime.FromString,
                )
        self.GetLogEntries = channel.unary_stream(
                '/calixa.domain.metric.MetricService/GetLogEntries',
                request_serializer=metric__pb2.MetricLogRequest.SerializeToString,
                response_deserializer=metric__pb2.MetricObservation.FromString,
                )
        self.GetCounterKeyDomain = channel.unary_unary(
                '/calixa.domain.metric.MetricService/GetCounterKeyDomain',
                request_serializer=metric__pb2.GetCounterKeyDomainRequest.SerializeToString,
                response_deserializer=metric__pb2.GetCounterKeyDomainResponse.FromString,
                )


class MetricServiceServicer(object):
    """---------------------- gRPCs

    """

    def CreateMetricDescriptor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetricDescriptor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindOrCreateAutoMetricDescriptor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetricDescriptors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMetricDescriptor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordObservation(self, request, context):
        """For the following methods, we only require specification of the OrganizationId and MetricDescriptorId.
        This is out of pure convenience to the API. Callers need only retain an ID within their systems for
        fetching a time series or updating a metric.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimeSeries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogEntries(self, request, context):
        """rpc GetMetricLatestValue (GetMetricLatestValueRequest) returns (GetMetricLatestValueResponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCounterKeyDomain(self, request, context):
        """Helper methods to get available metric descriptor ids by entity_type
        It delegates to one of the counter repository which can find this information
        from actual recorded observations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMetricDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMetricDescriptor,
                    request_deserializer=metric__pb2.CreateMetricDescriptorRequest.FromString,
                    response_serializer=metric__pb2.MetricDescriptor.SerializeToString,
            ),
            'GetMetricDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetricDescriptor,
                    request_deserializer=metric__pb2.GetMetricDescriptorRequest.FromString,
                    response_serializer=metric__pb2.MetricDescriptor.SerializeToString,
            ),
            'FindOrCreateAutoMetricDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.FindOrCreateAutoMetricDescriptor,
                    request_deserializer=metric__pb2.FindOrCreateAutoMetricDescriptorRequest.FromString,
                    response_serializer=metric__pb2.MetricDescriptor.SerializeToString,
            ),
            'GetMetricDescriptors': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMetricDescriptors,
                    request_deserializer=metric__pb2.GetMetricDescriptorRequest.FromString,
                    response_serializer=metric__pb2.MetricDescriptor.SerializeToString,
            ),
            'UpdateMetricDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMetricDescriptor,
                    request_deserializer=metric__pb2.UpdateMetricDescriptorRequest.FromString,
                    response_serializer=metric__pb2.MetricDescriptor.SerializeToString,
            ),
            'RecordObservation': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordObservation,
                    request_deserializer=metric__pb2.MetricObservation.FromString,
                    response_serializer=metric__pb2.RecordObservationResponse.SerializeToString,
            ),
            'GetTimeSeries': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTimeSeries,
                    request_deserializer=metric__pb2.MetricTimeSeriesRequest.FromString,
                    response_serializer=metric__pb2.MetricObservationAtTime.SerializeToString,
            ),
            'GetLogEntries': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLogEntries,
                    request_deserializer=metric__pb2.MetricLogRequest.FromString,
                    response_serializer=metric__pb2.MetricObservation.SerializeToString,
            ),
            'GetCounterKeyDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCounterKeyDomain,
                    request_deserializer=metric__pb2.GetCounterKeyDomainRequest.FromString,
                    response_serializer=metric__pb2.GetCounterKeyDomainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.metric.MetricService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetricService(object):
    """---------------------- gRPCs

    """

    @staticmethod
    def CreateMetricDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.metric.MetricService/CreateMetricDescriptor',
            metric__pb2.CreateMetricDescriptorRequest.SerializeToString,
            metric__pb2.MetricDescriptor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetricDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.metric.MetricService/GetMetricDescriptor',
            metric__pb2.GetMetricDescriptorRequest.SerializeToString,
            metric__pb2.MetricDescriptor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindOrCreateAutoMetricDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.metric.MetricService/FindOrCreateAutoMetricDescriptor',
            metric__pb2.FindOrCreateAutoMetricDescriptorRequest.SerializeToString,
            metric__pb2.MetricDescriptor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetricDescriptors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/calixa.domain.metric.MetricService/GetMetricDescriptors',
            metric__pb2.GetMetricDescriptorRequest.SerializeToString,
            metric__pb2.MetricDescriptor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMetricDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.metric.MetricService/UpdateMetricDescriptor',
            metric__pb2.UpdateMetricDescriptorRequest.SerializeToString,
            metric__pb2.MetricDescriptor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordObservation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.metric.MetricService/RecordObservation',
            metric__pb2.MetricObservation.SerializeToString,
            metric__pb2.RecordObservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTimeSeries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/calixa.domain.metric.MetricService/GetTimeSeries',
            metric__pb2.MetricTimeSeriesRequest.SerializeToString,
            metric__pb2.MetricObservationAtTime.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLogEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/calixa.domain.metric.MetricService/GetLogEntries',
            metric__pb2.MetricLogRequest.SerializeToString,
            metric__pb2.MetricObservation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCounterKeyDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.metric.MetricService/GetCounterKeyDomain',
            metric__pb2.GetCounterKeyDomainRequest.SerializeToString,
            metric__pb2.GetCounterKeyDomainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
