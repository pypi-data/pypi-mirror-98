syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";



import "event_label.proto";
import "integration_source.proto";
import "common.proto";
import "counter.proto";

option java_package = "io.calixa.domain.metric";
option java_multiple_files = true;
option optimize_for = SPEED;

package calixa.domain.metric;

enum MetricStatus {
    METRIC_STATUS_UNSPECIFIED = 0;
    ACTIVE = 1;
    DELETED = 2;
}

enum MetricType {
    METRIC_TYPE_UNSPECIFIED = 0;

    // A value accumulated over a time interval.
    CUMULATIVE = 1;

    // An instantaneous measurement of a value.
    GAUGE = 2;
}

enum MetricValueType {
    METRIC_VALUE_TYPE_UNSPECIFIED = 0;

    // The value is a signed 64-bit integer.
    INT64 = 1;

    // The value is a double precision floating point number.
    DOUBLE = 2;

    // The value is money.
    MONEY = 3;
}

// Captures the entity to which to associate the metric
//TODO: reconcile this with EntityType
enum MetricExternalEntityType {
    METRIC_EXTERNAL_ENTITY_UNSPECIFIED = 0;

    ORGANIZATION = 1;
    ACCOUNT = 2;
    ACCOUNT_USER = 3;
}

enum MetricOrigin {
    METRIC_ORIGIN_UNSPECIFIED = 0;

    // The metric was created by the Customer via the API.
    METRIC_ORIGIN_API = 1;

    // The metric was created by AutoMetrics system.
    METRIC_ORIGIN_AUTOMATIC = 2;
}

message MetricDescriptor {
    string metric_descriptor_id = 1;
    string organization_id = 2;

    MetricStatus status = 5;
    MetricType metric_type = 6;
    MetricValueType value_type = 7;
    MetricOrigin metric_origin = 8;

    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;

    string name = 100;
    string description = 101;
    google.protobuf.Struct properties = 102;
}

// ---------------------- gRPCs

service MetricService {
    rpc CreateMetricDescriptor (CreateMetricDescriptorRequest) returns (MetricDescriptor);
    rpc GetMetricDescriptor (GetMetricDescriptorRequest) returns (MetricDescriptor);
    rpc FindOrCreateAutoMetricDescriptor (FindOrCreateAutoMetricDescriptorRequest) returns (MetricDescriptor);
    rpc GetMetricDescriptors (GetMetricDescriptorRequest) returns (stream MetricDescriptor);
    rpc UpdateMetricDescriptor (UpdateMetricDescriptorRequest) returns (MetricDescriptor);

    // For the following methods, we only require specification of the OrganizationId and MetricDescriptorId.
    // This is out of pure convenience to the API. Callers need only retain an ID within their systems for
    // fetching a time series or updating a metric.

    rpc RecordObservation (MetricObservation) returns (RecordObservationResponse);
    rpc GetTimeSeries (MetricTimeSeriesRequest) returns (stream MetricObservationAtTime);
    rpc GetLogEntries (MetricLogRequest) returns (stream MetricObservation);
    //    rpc GetMetricLatestValue (GetMetricLatestValueRequest) returns (GetMetricLatestValueResponse);

    // Helper methods to get available metric descriptor ids by entity_type
    // It delegates to one of the counter repository which can find this information
    // from actual recorded observations
    rpc GetCounterKeyDomain (GetCounterKeyDomainRequest) returns (GetCounterKeyDomainResponse);
}

message MetricLogRequest {
    string organization_id = 1;
    // old mds are shorter than newer ones
    string metric_descriptor_id = 2;
    google.protobuf.Timestamp from = 3;
    google.protobuf.Timestamp to = 4;
}

message GetCounterKeyDomainRequest {
    string organization_id = 1;
}

message GetCounterKeyDomainResponse {
    repeated CounterKeyDomain keys = 1;
}

message CounterKeyDomain {
    calixa.domain.common.EntityType entity_type = 1;
    // these are only metric descriptor ids now
    repeated MetricDescriptor counter_keys = 2;
}

message CreateMetricDescriptorRequest {
    MetricDescriptor metric_descriptor = 1;
    calixa.domain.common.RequestContext request_context = 2;
}

message GetMetricDescriptorRequest {
    // OrganizationId must be specified
    string organization_id = 1;

    // If metric_descriptor_id is specified, the specific metric descriptor is returned; otherwise
    // all metric descriptors are returned for the specified organization.
    string metric_descriptor_id = 4;

    MetricOrigin metric_origin = 5;
}

message FindOrCreateAutoMetricDescriptorRequest {
    string organization_id = 1;
    calixa.domain.integration.IntegrationSource source = 2;
    calixa.domain.entity.EventLabel event_label = 3;
    MetricType metric_type = 4;
    MetricValueType value_type = 5;
    google.protobuf.Struct properties = 6;
    string name = 7;
}

message UpdateMetricDescriptorRequest {
    MetricDescriptor metric_descriptor = 1;
    google.protobuf.FieldMask update_mask = 2;
    calixa.domain.common.RequestContext request_context = 3;
}

message RecordObservationResponse {
    // TODO(freds): return back the current value or a specific success code?
}

message MetricObservation {
    string metric_descriptor_id = 1;
    string organization_id = 2;

    MetricExternalEntityType external_entity_type = 3;
    // TODO: this is confusing; should we split external entity observation to that of
    // internal observations?

    // THIS IS Api* Entity id. only to support API-posts from external world
    string external_entity_id = 4;
    // This is SHELL's canonical id - in-line with how we tag auto-metrics
    string canonical_entity_id = 9;

    // the timestamp when the Customer measured the metric. This could be anytime in the past and is different
    // than when we receive the event. reports will render based on the measured_at field.
    google.protobuf.Timestamp measured_at = 5;

    // when publishing a metric, this is the time at which the event was received by the API. this field is
    // used to manage internally consistency of data; if we receive multiple events for the same measured_at time,
    // the "last" received event wins.
    google.protobuf.Timestamp received_at = 6;

    // The value for the metric.
    MetricValue metric_value = 7;

    calixa.domain.common.RequestContext request_context = 8;
}

message MetricValue {
    MetricValueType value_type = 1;
    oneof values {
        int64 value_as_int64 = 11;
        double value_as_double = 12;
        double value_as_money = 13;
    }
}

message MetricObservationAtTime {
    bool valuePresent = 1;
    MetricValue metric_value = 2;
    google.protobuf.Timestamp time = 3;
}

message MetricTimeSeriesRequest {
    reserved 4;

    string metric_descriptor_id = 1;
    string organization_id = 2;

    MetricExternalEntityType external_entity_type = 3;
    // string external_entity_id = 4;
    // THIS IS SHELL's canonical-id.
    string canonical_entity_id = 5;

    calixa.domain.counter.GroupBy group_by = 100;
    string time_zone = 101;
    google.protobuf.Timestamp from = 102;
    google.protobuf.Timestamp to = 103;

    calixa.domain.counter.AggregateOperation aggregate_operation = 104;
}

