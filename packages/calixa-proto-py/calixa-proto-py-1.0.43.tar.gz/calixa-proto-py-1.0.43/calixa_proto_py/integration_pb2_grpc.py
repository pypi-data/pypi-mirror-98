# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import integration_pb2 as integration__pb2


class IntegrationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/HealthCheck',
                request_serializer=integration__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=integration__pb2.HealthCheckResponse.FromString,
                )
        self.Verify = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/Verify',
                request_serializer=integration__pb2.VerifyRequest.SerializeToString,
                response_deserializer=integration__pb2.VerifyResponse.FromString,
                )
        self.Install = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/Install',
                request_serializer=integration__pb2.InstallRequest.SerializeToString,
                response_deserializer=integration__pb2.InstallResponse.FromString,
                )
        self.InitializeBackfill = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/InitializeBackfill',
                request_serializer=integration__pb2.InitializeBackfillRequest.SerializeToString,
                response_deserializer=integration__pb2.InitializeBackfillResponse.FromString,
                )
        self.BackfillPartial = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/BackfillPartial',
                request_serializer=integration__pb2.BackfillPartialRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ProcessLogEntry = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/ProcessLogEntry',
                request_serializer=integration__pb2.ProcessLogEntryRequest.SerializeToString,
                response_deserializer=integration__pb2.ProcessLogEntryResponse.FromString,
                )
        self.GetOAuthAuthenticationUrl = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/GetOAuthAuthenticationUrl',
                request_serializer=integration__pb2.OAuthAuthenticationUrlRequest.SerializeToString,
                response_deserializer=integration__pb2.OAuthAuthenticationUrlResponse.FromString,
                )
        self.FinalizeOAuthIntegration = channel.unary_unary(
                '/calixa.domain.integration.IntegrationService/FinalizeOAuthIntegration',
                request_serializer=integration__pb2.FinalizeOAuthIntegrationRequest.SerializeToString,
                response_deserializer=integration__pb2.FinalizeOAuthIntegrationResponse.FromString,
                )


class IntegrationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """HealthCheck can be called periodically by the Platform to ensure that an integration
        is doing well.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Verify(self, request, context):
        """Verifies that the credentials (parameters, config, etc) for an integration is correct
        and ready for an install and on-going webhooks/incremental updates and backfill.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Install(self, request, context):
        """Performs a full install (this is different than verifying that credentials work) of
        the integration for the Organization (and InstanceID).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeBackfill(self, request, context):
        """The backfill process is broken down into two components.
        1) InitializeBackfill is called by the Platform to fetch the "size of the data"
        required to be backfilled.
        2) BackfillPartial will be called by the Platform to fetch a subset of the full
        data to be backfilled. The backfill progress will be managed by the Platform
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackfillPartial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessLogEntry(self, request, context):
        """Called by the platform after a log entry for the integration has been
        durably written.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOAuthAuthenticationUrl(self, request, context):
        """Called by the IntegrationManager when a user tries to install an integration. This RPC
        must return the URL that the browser is redirected to initiate the OAuth flow.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeOAuthIntegration(self, request, context):
        """This RPC is called when the final step in the OAuth flow completes. The RPC must fetch
        the access token (and other OAuth properties) from the third-party and return the OAuthCredentials
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntegrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=integration__pb2.HealthCheckRequest.FromString,
                    response_serializer=integration__pb2.HealthCheckResponse.SerializeToString,
            ),
            'Verify': grpc.unary_unary_rpc_method_handler(
                    servicer.Verify,
                    request_deserializer=integration__pb2.VerifyRequest.FromString,
                    response_serializer=integration__pb2.VerifyResponse.SerializeToString,
            ),
            'Install': grpc.unary_unary_rpc_method_handler(
                    servicer.Install,
                    request_deserializer=integration__pb2.InstallRequest.FromString,
                    response_serializer=integration__pb2.InstallResponse.SerializeToString,
            ),
            'InitializeBackfill': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeBackfill,
                    request_deserializer=integration__pb2.InitializeBackfillRequest.FromString,
                    response_serializer=integration__pb2.InitializeBackfillResponse.SerializeToString,
            ),
            'BackfillPartial': grpc.unary_unary_rpc_method_handler(
                    servicer.BackfillPartial,
                    request_deserializer=integration__pb2.BackfillPartialRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ProcessLogEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessLogEntry,
                    request_deserializer=integration__pb2.ProcessLogEntryRequest.FromString,
                    response_serializer=integration__pb2.ProcessLogEntryResponse.SerializeToString,
            ),
            'GetOAuthAuthenticationUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOAuthAuthenticationUrl,
                    request_deserializer=integration__pb2.OAuthAuthenticationUrlRequest.FromString,
                    response_serializer=integration__pb2.OAuthAuthenticationUrlResponse.SerializeToString,
            ),
            'FinalizeOAuthIntegration': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeOAuthIntegration,
                    request_deserializer=integration__pb2.FinalizeOAuthIntegrationRequest.FromString,
                    response_serializer=integration__pb2.FinalizeOAuthIntegrationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.integration.IntegrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IntegrationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/HealthCheck',
            integration__pb2.HealthCheckRequest.SerializeToString,
            integration__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Verify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/Verify',
            integration__pb2.VerifyRequest.SerializeToString,
            integration__pb2.VerifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Install(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/Install',
            integration__pb2.InstallRequest.SerializeToString,
            integration__pb2.InstallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeBackfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/InitializeBackfill',
            integration__pb2.InitializeBackfillRequest.SerializeToString,
            integration__pb2.InitializeBackfillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackfillPartial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/BackfillPartial',
            integration__pb2.BackfillPartialRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessLogEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/ProcessLogEntry',
            integration__pb2.ProcessLogEntryRequest.SerializeToString,
            integration__pb2.ProcessLogEntryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOAuthAuthenticationUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/GetOAuthAuthenticationUrl',
            integration__pb2.OAuthAuthenticationUrlRequest.SerializeToString,
            integration__pb2.OAuthAuthenticationUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinalizeOAuthIntegration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.integration.IntegrationService/FinalizeOAuthIntegration',
            integration__pb2.FinalizeOAuthIntegrationRequest.SerializeToString,
            integration__pb2.FinalizeOAuthIntegrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
