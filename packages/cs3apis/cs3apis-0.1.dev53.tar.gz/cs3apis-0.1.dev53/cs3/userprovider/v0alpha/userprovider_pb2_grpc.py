# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from cs3.userprovider.v0alpha import userprovider_pb2 as cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2


class UserProviderServiceStub(object):
  """UserProvider API.

  The UserProvider API is responsible for creating
  a key-value map according to user userprovider.

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
  NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
  "OPTIONAL" in this document are to be interpreted as described in
  RFC 2119.

  The following are global requirements that apply to all methods:
  Any method MUST return CODE_OK on a succesful operation.
  Any method MAY return NOT_IMPLEMENTED.
  Any method MAY return INTERNAL.
  Any method MAY return UNKNOWN.
  Any method MAY return UNAUTHENTICATED.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetUser = channel.unary_unary(
        '/cs3.userproviderv0alpha.UserProviderService/GetUser',
        request_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserRequest.SerializeToString,
        response_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserResponse.FromString,
        )
    self.GetUserGroups = channel.unary_unary(
        '/cs3.userproviderv0alpha.UserProviderService/GetUserGroups',
        request_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserGroupsRequest.SerializeToString,
        response_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserGroupsResponse.FromString,
        )
    self.IsInGroup = channel.unary_unary(
        '/cs3.userproviderv0alpha.UserProviderService/IsInGroup',
        request_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.IsInGroupRequest.SerializeToString,
        response_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.IsInGroupResponse.FromString,
        )
    self.FindUsers = channel.unary_unary(
        '/cs3.userproviderv0alpha.UserProviderService/FindUsers',
        request_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.FindUsersRequest.SerializeToString,
        response_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.FindUsersResponse.FromString,
        )


class UserProviderServiceServicer(object):
  """UserProvider API.

  The UserProvider API is responsible for creating
  a key-value map according to user userprovider.

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
  NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
  "OPTIONAL" in this document are to be interpreted as described in
  RFC 2119.

  The following are global requirements that apply to all methods:
  Any method MUST return CODE_OK on a succesful operation.
  Any method MAY return NOT_IMPLEMENTED.
  Any method MAY return INTERNAL.
  Any method MAY return UNKNOWN.
  Any method MAY return UNAUTHENTICATED.

  """

  def GetUser(self, request, context):
    """Gets the information about an user by its user id.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetUserGroups(self, request, context):
    """Gets the groups of a user.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IsInGroup(self, request, context):
    """Tells if the user is in a certain group.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindUsers(self, request, context):
    """Finds users by any attribute of the user?
    TODO(labkode): to define the filters that make more sense.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UserProviderServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetUser': grpc.unary_unary_rpc_method_handler(
          servicer.GetUser,
          request_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserRequest.FromString,
          response_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserResponse.SerializeToString,
      ),
      'GetUserGroups': grpc.unary_unary_rpc_method_handler(
          servicer.GetUserGroups,
          request_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserGroupsRequest.FromString,
          response_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.GetUserGroupsResponse.SerializeToString,
      ),
      'IsInGroup': grpc.unary_unary_rpc_method_handler(
          servicer.IsInGroup,
          request_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.IsInGroupRequest.FromString,
          response_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.IsInGroupResponse.SerializeToString,
      ),
      'FindUsers': grpc.unary_unary_rpc_method_handler(
          servicer.FindUsers,
          request_deserializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.FindUsersRequest.FromString,
          response_serializer=cs3_dot_userprovider_dot_v0alpha_dot_userprovider__pb2.FindUsersResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cs3.userproviderv0alpha.UserProviderService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
