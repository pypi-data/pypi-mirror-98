# coding: utf8
#
# Copyright 2021 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#
# Do not edit this file manually!
#

from __future__ import unicode_literals

from delphixpy.v1_5_1.web.objects.Operation import Operation
from delphixpy.v1_5_1 import common

class __Undef(object):
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

try:
    TEXT_TYPE = unicode
except NameError:
    TEXT_TYPE = str

class RegisterOracleHomeOperation(Operation):
    """
    *(extends* :py:class:`v1_5_1.web.vo.Operation` *)* Register a manually
    created Oracle Home with the Delphix Engine.
    """
    def __init__(self, undef_enabled=True):
        super(RegisterOracleHomeOperation, self).__init__()
        self._type = ("RegisterOracleHomeOperation", True)
        self._environment = (self.__undef__, True)
        self._install_home = (self.__undef__, True)

    API_VERSION = "1.5.1"

    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super(RegisterOracleHomeOperation, cls).from_dict(data, dirty, undef_enabled)
        obj._environment = (data.get("environment", obj.__undef__), dirty)
        if obj._environment[0] is not None and obj._environment[0] is not obj.__undef__:
            assert isinstance(obj._environment[0], TEXT_TYPE), ("Expected one of ['string'], but got %s of type %s" % (obj._environment[0], type(obj._environment[0])))
            common.validate_format(obj._environment[0], "objectReference", None, None)
        obj._install_home = (data.get("installHome", obj.__undef__), dirty)
        if obj._install_home[0] is not None and obj._install_home[0] is not obj.__undef__:
            assert isinstance(obj._install_home[0], TEXT_TYPE), ("Expected one of ['string'], but got %s of type %s" % (obj._install_home[0], type(obj._install_home[0])))
            common.validate_format(obj._install_home[0], "None", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super(RegisterOracleHomeOperation, self).to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "environment" == "type" or (self.environment is not self.__undef__ and (not (dirty and not self._environment[1]) or isinstance(self.environment, list) or belongs_to_parent)):
            dct["environment"] = dictify(self.environment)
        if "install_home" == "type" or (self.install_home is not self.__undef__ and (not (dirty and not self._install_home[1]))):
            dct["installHome"] = dictify(self.install_home)
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._environment = (self._environment[0], True)
        self._install_home = (self._install_home[0], True)

    def is_dirty(self):
        return any([self._environment[1], self._install_home[1]])

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, RegisterOracleHomeOperation):
            return False
        return super(RegisterOracleHomeOperation, self).__eq__(other) and \
               self.environment == other.environment and \
               self.install_home == other.install_home

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return id(self)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def environment(self):
        """
        The environment to run discovery on.

        :rtype: ``TEXT_TYPE``
        """
        return self._environment[0]

    @environment.setter
    def environment(self, value):
        self._environment = (value, True)

    @property
    def install_home(self):
        """
        Absolute path to the Oracle installation home to register.

        :rtype: ``TEXT_TYPE``
        """
        return self._install_home[0]

    @install_home.setter
    def install_home(self, value):
        self._install_home = (value, True)

