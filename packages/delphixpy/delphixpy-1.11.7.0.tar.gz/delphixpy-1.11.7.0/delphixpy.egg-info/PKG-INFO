Metadata-Version: 1.1
Name: delphixpy
Version: 1.11.7.0
Summary: Delphix Client Bindings
Home-page: http://www.delphix.com
Author: Delphix
Author-email: support@delphix.com
License: UNKNOWN
Description: DelphixPy
        =========
        
        DelphixPy is a set of auto-generated Python API wrappers to the
        Delphix Virtualization Engine.
        
        Usage
        ------------
        
        .. code:: python
        
           # Simple script to refresh a Database
           from delphixpy.delphix_engine import DelphixEngine
           engine = DelphixEngine(
               "delphix-address",
               "delphix-user",
               "delphix-password",
               "DOMAIN",  # Instead of DOMAIN, use SYSTEM if you are using the sysadmin user.
               use_https=True,  # Connect through HTTPS instead of default HTTP
            )
           database.refresh(engine, "ORACLE_DB_CONTAINER-3")
        
        Many more examples can be found in the `DelphixPy Examples Repository <https://github.com/delphix/delphixpy-examples>`_
        
        
        Supported API Versions
        ----------------------
        
        DelphixPy supports Delphix Engines versioned 4.0.0.x or equivalently
        Delphix Engines running API version 1.3.0 and on.
        
        
        Changelog
        ---------
        
        1.10.5
        ^^^^^^
        - Python3.7 introduces backwards incompatible syntax which breaks
          DelphixPy, to accomodate the `job_context.async` function has been
          renamed to `job_context.asyncly`.
        - Drop support for Delphix Engines older than 4.1. API Versions: 1.3.0, 1.3.1, 1.3.2, 1.3.3
        - Publish universal wheels.
        
        1.10.3
        ^^^^^^
        - API objects are now hashable in Python3
        - Undefined objects now raise errors when their attributes are modified
        - Various bug fixes
        
        1.10.2
        ^^^^^^
        
        - Python3 compatibility. Python2 and Python3 are both supported
          now. The Python2 wrappers will now require all strings be of
          type `unicode` and the Python3 wrappers will now require all
          strings to be of type `str`.
        
          This may cause regressions on existing Python2 code as seen by:
          `AssertionError: Expected one of [u'string'], but got <type 'str'>`
        
        - Https support
        - Various speed improvements
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
