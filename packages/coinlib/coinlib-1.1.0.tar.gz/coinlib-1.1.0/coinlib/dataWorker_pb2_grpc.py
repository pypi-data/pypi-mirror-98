# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import coinlib.dataWorker_pb2 as dataWorker__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ChartsWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_unary(
                '/coinlib.ChartsWorker/GetConfig',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=dataWorker__pb2.ChartsWorkerConfig.FromString,
                )
        self.OnIndicatorErrorOccured = channel.unary_unary(
                '/coinlib.ChartsWorker/OnIndicatorErrorOccured',
                request_serializer=dataWorker__pb2.IndicatorError.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.OnPartialChartLayout = channel.unary_unary(
                '/coinlib.ChartsWorker/OnPartialChartLayout',
                request_serializer=dataWorker__pb2.ChartsWorkerPartialDataLayout.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class ChartsWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnIndicatorErrorOccured(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnPartialChartLayout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChartsWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=dataWorker__pb2.ChartsWorkerConfig.SerializeToString,
            ),
            'OnIndicatorErrorOccured': grpc.unary_unary_rpc_method_handler(
                    servicer.OnIndicatorErrorOccured,
                    request_deserializer=dataWorker__pb2.IndicatorError.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'OnPartialChartLayout': grpc.unary_unary_rpc_method_handler(
                    servicer.OnPartialChartLayout,
                    request_deserializer=dataWorker__pb2.ChartsWorkerPartialDataLayout.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.ChartsWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChartsWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.ChartsWorker/GetConfig',
            dataWorker__pb2.WorkerJob.SerializeToString,
            dataWorker__pb2.ChartsWorkerConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnIndicatorErrorOccured(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.ChartsWorker/OnIndicatorErrorOccured',
            dataWorker__pb2.IndicatorError.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnPartialChartLayout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.ChartsWorker/OnPartialChartLayout',
            dataWorker__pb2.ChartsWorkerPartialDataLayout.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StatisticsMethodWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_unary(
                '/coinlib.StatisticsMethodWorker/GetConfig',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=dataWorker__pb2.StatisticsBulkedWorkerConfig.FromString,
                )
        self.OnStatisticPartiallyData = channel.unary_unary(
                '/coinlib.StatisticsMethodWorker/OnStatisticPartiallyData',
                request_serializer=dataWorker__pb2.StatisticBulkedPartiallyData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.OnStatisticFunctionErrorOccured = channel.unary_unary(
                '/coinlib.StatisticsMethodWorker/OnStatisticFunctionErrorOccured',
                request_serializer=dataWorker__pb2.StatisticFunctionError.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class StatisticsMethodWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnStatisticPartiallyData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnStatisticFunctionErrorOccured(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatisticsMethodWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=dataWorker__pb2.StatisticsBulkedWorkerConfig.SerializeToString,
            ),
            'OnStatisticPartiallyData': grpc.unary_unary_rpc_method_handler(
                    servicer.OnStatisticPartiallyData,
                    request_deserializer=dataWorker__pb2.StatisticBulkedPartiallyData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'OnStatisticFunctionErrorOccured': grpc.unary_unary_rpc_method_handler(
                    servicer.OnStatisticFunctionErrorOccured,
                    request_deserializer=dataWorker__pb2.StatisticFunctionError.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.StatisticsMethodWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatisticsMethodWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.StatisticsMethodWorker/GetConfig',
            dataWorker__pb2.WorkerJob.SerializeToString,
            dataWorker__pb2.StatisticsBulkedWorkerConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnStatisticPartiallyData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.StatisticsMethodWorker/OnStatisticPartiallyData',
            dataWorker__pb2.StatisticBulkedPartiallyData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnStatisticFunctionErrorOccured(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.StatisticsMethodWorker/OnStatisticFunctionErrorOccured',
            dataWorker__pb2.StatisticFunctionError.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LogicRunnerOfflineServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_unary(
                '/coinlib.LogicRunnerOfflineService/GetConfig',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=dataWorker__pb2.LogicRunnerOfflineWorkerConfig.FromString,
                )
        self.OnRunnerPartiallyData = channel.unary_unary(
                '/coinlib.LogicRunnerOfflineService/OnRunnerPartiallyData',
                request_serializer=dataWorker__pb2.LogicRunnerOfflineWorkerPartiallyData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.OnRunnerErrorOccured = channel.unary_unary(
                '/coinlib.LogicRunnerOfflineService/OnRunnerErrorOccured',
                request_serializer=dataWorker__pb2.LogicRunnerOfflineWorkerError.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LogicRunnerOfflineServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnRunnerPartiallyData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnRunnerErrorOccured(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogicRunnerOfflineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=dataWorker__pb2.LogicRunnerOfflineWorkerConfig.SerializeToString,
            ),
            'OnRunnerPartiallyData': grpc.unary_unary_rpc_method_handler(
                    servicer.OnRunnerPartiallyData,
                    request_deserializer=dataWorker__pb2.LogicRunnerOfflineWorkerPartiallyData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'OnRunnerErrorOccured': grpc.unary_unary_rpc_method_handler(
                    servicer.OnRunnerErrorOccured,
                    request_deserializer=dataWorker__pb2.LogicRunnerOfflineWorkerError.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.LogicRunnerOfflineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogicRunnerOfflineService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.LogicRunnerOfflineService/GetConfig',
            dataWorker__pb2.WorkerJob.SerializeToString,
            dataWorker__pb2.LogicRunnerOfflineWorkerConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnRunnerPartiallyData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.LogicRunnerOfflineService/OnRunnerPartiallyData',
            dataWorker__pb2.LogicRunnerOfflineWorkerPartiallyData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnRunnerErrorOccured(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.LogicRunnerOfflineService/OnRunnerErrorOccured',
            dataWorker__pb2.LogicRunnerOfflineWorkerError.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AcceptWorkerJob = channel.unary_unary(
                '/coinlib.DataWorker/AcceptWorkerJob',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DeclineWorkerJob = channel.unary_unary(
                '/coinlib.DataWorker/DeclineWorkerJob',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.RegisterWorker = channel.unary_unary(
                '/coinlib.DataWorker/RegisterWorker',
                request_serializer=dataWorker__pb2.Worker.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetAllPlugins = channel.unary_unary(
                '/coinlib.DataWorker/GetAllPlugins',
                request_serializer=dataWorker__pb2.Worker.SerializeToString,
                response_deserializer=dataWorker__pb2.WorkerSettings.FromString,
                )
        self.UpdateWorkerJob = channel.unary_unary(
                '/coinlib.DataWorker/UpdateWorkerJob',
                request_serializer=dataWorker__pb2.WorkerJobDataResponse.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.WatchWorkerJobs = channel.stream_stream(
                '/coinlib.DataWorker/WatchWorkerJobs',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=dataWorker__pb2.WorkerJob.FromString,
                )
        self.FinishedWorkerJob = channel.unary_unary(
                '/coinlib.DataWorker/FinishedWorkerJob',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ErroredWorkerJob = channel.unary_unary(
                '/coinlib.DataWorker/ErroredWorkerJob',
                request_serializer=dataWorker__pb2.WorkerJobError.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class DataWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AcceptWorkerJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeclineWorkerJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllPlugins(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkerJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchWorkerJobs(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishedWorkerJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ErroredWorkerJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AcceptWorkerJob': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptWorkerJob,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeclineWorkerJob': grpc.unary_unary_rpc_method_handler(
                    servicer.DeclineWorkerJob,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=dataWorker__pb2.Worker.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetAllPlugins': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllPlugins,
                    request_deserializer=dataWorker__pb2.Worker.FromString,
                    response_serializer=dataWorker__pb2.WorkerSettings.SerializeToString,
            ),
            'UpdateWorkerJob': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkerJob,
                    request_deserializer=dataWorker__pb2.WorkerJobDataResponse.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'WatchWorkerJobs': grpc.stream_stream_rpc_method_handler(
                    servicer.WatchWorkerJobs,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
            ),
            'FinishedWorkerJob': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishedWorkerJob,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ErroredWorkerJob': grpc.unary_unary_rpc_method_handler(
                    servicer.ErroredWorkerJob,
                    request_deserializer=dataWorker__pb2.WorkerJobError.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.DataWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AcceptWorkerJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.DataWorker/AcceptWorkerJob',
            dataWorker__pb2.WorkerJob.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeclineWorkerJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.DataWorker/DeclineWorkerJob',
            dataWorker__pb2.WorkerJob.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.DataWorker/RegisterWorker',
            dataWorker__pb2.Worker.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllPlugins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.DataWorker/GetAllPlugins',
            dataWorker__pb2.Worker.SerializeToString,
            dataWorker__pb2.WorkerSettings.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateWorkerJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.DataWorker/UpdateWorkerJob',
            dataWorker__pb2.WorkerJobDataResponse.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchWorkerJobs(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/coinlib.DataWorker/WatchWorkerJobs',
            dataWorker__pb2.WorkerJob.SerializeToString,
            dataWorker__pb2.WorkerJob.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishedWorkerJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.DataWorker/FinishedWorkerJob',
            dataWorker__pb2.WorkerJob.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ErroredWorkerJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.DataWorker/ErroredWorkerJob',
            dataWorker__pb2.WorkerJobError.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PluginWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_unary(
                '/coinlib.PluginWorker/GetConfig',
                request_serializer=dataWorker__pb2.WorkerJob.SerializeToString,
                response_deserializer=dataWorker__pb2.PluginConfig.FromString,
                )
        self.OnInstallationOutput = channel.stream_unary(
                '/coinlib.PluginWorker/OnInstallationOutput',
                request_serializer=dataWorker__pb2.PluginInstallationOutput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class PluginWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnInstallationOutput(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=dataWorker__pb2.WorkerJob.FromString,
                    response_serializer=dataWorker__pb2.PluginConfig.SerializeToString,
            ),
            'OnInstallationOutput': grpc.stream_unary_rpc_method_handler(
                    servicer.OnInstallationOutput,
                    request_deserializer=dataWorker__pb2.PluginInstallationOutput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.PluginWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PluginWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.PluginWorker/GetConfig',
            dataWorker__pb2.WorkerJob.SerializeToString,
            dataWorker__pb2.PluginConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnInstallationOutput(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/coinlib.PluginWorker/OnInstallationOutput',
            dataWorker__pb2.PluginInstallationOutput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SimulatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.simulateChart = channel.unary_unary(
                '/coinlib.Simulator/simulateChart',
                request_serializer=dataWorker__pb2.SimulatorChartConfig.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.simulateStatisticsRule = channel.unary_unary(
                '/coinlib.Simulator/simulateStatisticsRule',
                request_serializer=dataWorker__pb2.SimulatorStatisticChartConfig.SerializeToString,
                response_deserializer=dataWorker__pb2.SimulatorResponse.FromString,
                )
        self.simulateStatisticsMethod = channel.unary_unary(
                '/coinlib.Simulator/simulateStatisticsMethod',
                request_serializer=dataWorker__pb2.SimulatorMethodCallChartConfig.SerializeToString,
                response_deserializer=dataWorker__pb2.SimulatorResponse.FromString,
                )


class SimulatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def simulateChart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def simulateStatisticsRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def simulateStatisticsMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimulatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'simulateChart': grpc.unary_unary_rpc_method_handler(
                    servicer.simulateChart,
                    request_deserializer=dataWorker__pb2.SimulatorChartConfig.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'simulateStatisticsRule': grpc.unary_unary_rpc_method_handler(
                    servicer.simulateStatisticsRule,
                    request_deserializer=dataWorker__pb2.SimulatorStatisticChartConfig.FromString,
                    response_serializer=dataWorker__pb2.SimulatorResponse.SerializeToString,
            ),
            'simulateStatisticsMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.simulateStatisticsMethod,
                    request_deserializer=dataWorker__pb2.SimulatorMethodCallChartConfig.FromString,
                    response_serializer=dataWorker__pb2.SimulatorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.Simulator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Simulator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def simulateChart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Simulator/simulateChart',
            dataWorker__pb2.SimulatorChartConfig.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def simulateStatisticsRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Simulator/simulateStatisticsRule',
            dataWorker__pb2.SimulatorStatisticChartConfig.SerializeToString,
            dataWorker__pb2.SimulatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def simulateStatisticsMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Simulator/simulateStatisticsMethod',
            dataWorker__pb2.SimulatorMethodCallChartConfig.SerializeToString,
            dataWorker__pb2.SimulatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FunctionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerIndicatorFunction = channel.unary_unary(
                '/coinlib.Functions/registerIndicatorFunction',
                request_serializer=dataWorker__pb2.ChartWorkerIndicatorRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class FunctionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerIndicatorFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FunctionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerIndicatorFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.registerIndicatorFunction,
                    request_deserializer=dataWorker__pb2.ChartWorkerIndicatorRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.Functions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Functions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerIndicatorFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Functions/registerIndicatorFunction',
            dataWorker__pb2.ChartWorkerIndicatorRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LogicStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerTrader = channel.unary_unary(
                '/coinlib.Logic/registerTrader',
                request_serializer=dataWorker__pb2.LogicTraderRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.registerAlert = channel.unary_unary(
                '/coinlib.Logic/registerAlert',
                request_serializer=dataWorker__pb2.LogicAlertRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.registerScreener = channel.unary_unary(
                '/coinlib.Logic/registerScreener',
                request_serializer=dataWorker__pb2.LogicScreenerRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.registerAdvisor = channel.unary_unary(
                '/coinlib.Logic/registerAdvisor',
                request_serializer=dataWorker__pb2.LogicAdvisorRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.addLogicToWorkspace = channel.unary_unary(
                '/coinlib.Logic/addLogicToWorkspace',
                request_serializer=dataWorker__pb2.WorkspaceLogicRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LogicServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerTrader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerAlert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerScreener(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerAdvisor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addLogicToWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerTrader': grpc.unary_unary_rpc_method_handler(
                    servicer.registerTrader,
                    request_deserializer=dataWorker__pb2.LogicTraderRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'registerAlert': grpc.unary_unary_rpc_method_handler(
                    servicer.registerAlert,
                    request_deserializer=dataWorker__pb2.LogicAlertRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'registerScreener': grpc.unary_unary_rpc_method_handler(
                    servicer.registerScreener,
                    request_deserializer=dataWorker__pb2.LogicScreenerRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'registerAdvisor': grpc.unary_unary_rpc_method_handler(
                    servicer.registerAdvisor,
                    request_deserializer=dataWorker__pb2.LogicAdvisorRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'addLogicToWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.addLogicToWorkspace,
                    request_deserializer=dataWorker__pb2.WorkspaceLogicRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.Logic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Logic(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerTrader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Logic/registerTrader',
            dataWorker__pb2.LogicTraderRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerAlert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Logic/registerAlert',
            dataWorker__pb2.LogicAlertRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerScreener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Logic/registerScreener',
            dataWorker__pb2.LogicScreenerRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerAdvisor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Logic/registerAdvisor',
            dataWorker__pb2.LogicAdvisorRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addLogicToWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Logic/addLogicToWorkspace',
            dataWorker__pb2.WorkspaceLogicRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FeaturesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerSymbolFeatureData = channel.unary_unary(
                '/coinlib.Features/registerSymbolFeatureData',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.registerMarketFeatureData = channel.unary_unary(
                '/coinlib.Features/registerMarketFeatureData',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class FeaturesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerSymbolFeatureData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerMarketFeatureData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FeaturesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerSymbolFeatureData': grpc.unary_unary_rpc_method_handler(
                    servicer.registerSymbolFeatureData,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'registerMarketFeatureData': grpc.unary_unary_rpc_method_handler(
                    servicer.registerMarketFeatureData,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.Features', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Features(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerSymbolFeatureData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Features/registerSymbolFeatureData',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerMarketFeatureData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Features/registerMarketFeatureData',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StatisticsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerStatisticRuleFunction = channel.unary_unary(
                '/coinlib.Statistics/registerStatisticRuleFunction',
                request_serializer=dataWorker__pb2.StatisticRuleFunctionRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.registerStatisticMethod = channel.unary_unary(
                '/coinlib.Statistics/registerStatisticMethod',
                request_serializer=dataWorker__pb2.StatisticMethodRegistration.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class StatisticsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerStatisticRuleFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerStatisticMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatisticsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerStatisticRuleFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.registerStatisticRuleFunction,
                    request_deserializer=dataWorker__pb2.StatisticRuleFunctionRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'registerStatisticMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.registerStatisticMethod,
                    request_deserializer=dataWorker__pb2.StatisticMethodRegistration.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinlib.Statistics', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Statistics(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerStatisticRuleFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Statistics/registerStatisticRuleFunction',
            dataWorker__pb2.StatisticRuleFunctionRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerStatisticMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinlib.Statistics/registerStatisticMethod',
            dataWorker__pb2.StatisticMethodRegistration.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
