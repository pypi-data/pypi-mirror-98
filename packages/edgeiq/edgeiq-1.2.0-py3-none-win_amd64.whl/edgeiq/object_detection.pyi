from edgeiq import bounding_box as bounding_box, constants as constants, processing as processing
from edgeiq.base_service import BaseService as BaseService
from typing import Any

SUPPORTED_ENGINES: Any

class ObjectDetectionPrediction(bounding_box.BoundingBoxPrediction):
    def __init__(self, box: Any, confidence: Any, label: Any, index: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def label(self): ...
    @label.setter
    def label(self, label: Any) -> None: ...
    @property
    def index(self): ...

class ObjectDetectionResults:
    def __init__(self, predictions: Any, duration: Any, image: Any, **kwargs: Any) -> None: ...
    @property
    def duration(self): ...
    @property
    def predictions(self): ...
    @property
    def image(self) -> None: ...

class ObjectDetection(BaseService):
    def __init__(self, model_id: Any) -> None: ...
    def detect_objects(self, image: Any, confidence_level: float = ..., overlap_threshold: float = ...): ...
