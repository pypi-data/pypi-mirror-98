import multiprocessing.queues
import threading
from edgeiq import edge_tools as edge_tools
from eventlet.green import threading as eventlet_threading
from typing import Any, Optional

class _CircularQueue(multiprocessing.queues.Queue):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def put(self, obj: Any) -> None: ...

class _RxThread(threading.Thread):
    def __init__(self, rx_queue: Any, exit_event: Any, error_queue: Any) -> None: ...
    def run(self) -> None: ...

class Streamer:
    def __init__(self, queue_depth: int = ..., inter_msg_time: int = ..., drop_frames: bool = ..., **kwargs: Any) -> None: ...
    def setup(self): ...
    def send_data(self, image: Optional[Any] = ..., text: Optional[Any] = ...) -> None: ...
    def wait(self) -> None: ...
    def check_exit(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    def __del__(self) -> None: ...

class _TxThread(eventlet_threading.Thread):
    def __init__(self, tx_queue: Any, inter_msg_time: Any, max_image_width: Any, max_image_height: Any, jpg_quality: Any, error_queue: Any) -> None: ...
    def run(self) -> None: ...

def handle_message(message: Any) -> None: ...
def stop(): ...

class _ServerProcess(multiprocessing.Process):
    def __init__(self, ipaddr: Any, port: Any, tx_queue: Any, inter_msg_time: Any, max_image_width: Any, max_image_height: Any, jpg_quality: Any, rx_queue: Any, error_queue: Any, *args: Any, **kwargs: Any) -> None: ...
    def run(self) -> None: ...
