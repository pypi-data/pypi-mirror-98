import threading
from edgeiq import bounding_box as bounding_box, constants as constants
from enum import Enum
from typing import Any, Optional

class CameraFailedToStart(RuntimeError):
    def __init__(self, cmd: Any, backend: Any, append: str = ...) -> None: ...

class CameraConnectionLost(RuntimeError):
    def __init__(self) -> None: ...

class _BaseVideoStream:
    def __init__(self, cmd: Any, backend: Any) -> None: ...
    def start(self): ...
    @property
    def fps(self): ...
    def read(self): ...
    def stop(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class WebcamVideoStream(_BaseVideoStream):
    def __init__(self, cam: int = ...) -> None: ...

class GStreamerVideoStream(_BaseVideoStream):
    def __init__(self, cam: int = ..., display_width: int = ..., display_height: int = ..., framerate: int = ...) -> None: ...

class FrameRotation(Enum):
    ROTATE_NONE: int = ...
    ROTATE_90: int = ...
    ROTATE_180: int = ...

class JetsonCameraMode(Enum):
    IMX219_3264x2468_21_0: int = ...
    IMX219_3264x1848_28_1: int = ...
    IMX219_1920x1080_30_2: int = ...
    IMX219_1640x1232_30_3: int = ...
    IMX477_4032x3040_30_0: int = ...
    IMX477_1920x1080_60_1: int = ...
    IMX477_2560x1440_40_3: int = ...

class JetsonVideoStream(_BaseVideoStream):
    def __init__(self, cam: int = ..., rotation: Any = ..., camera_mode: Any = ..., display_width: int = ..., display_height: int = ...) -> None: ...

class IPVideoStream(_BaseVideoStream):
    def __init__(self, url: Any) -> None: ...

class FPS:
    def __init__(self) -> None: ...
    def start(self): ...
    def stop(self): ...
    def update(self) -> None: ...
    def get_elapsed_seconds(self): ...
    def compute_fps(self): ...

class NoMoreFrames(RuntimeError):
    def __init__(self) -> None: ...

class _FileVideoStreamThread(threading.Thread):
    def __init__(self, stream: Any, queue_size: Any, *args: Any, **kwargs: Any) -> None: ...
    @property
    def more(self): ...
    def read(self): ...
    def stop(self) -> None: ...
    def run(self) -> None: ...

class _RealtimeFileVideoStreamThread(threading.Thread):
    def __init__(self, stream: Any, *args: Any, **kwargs: Any) -> None: ...
    @property
    def more(self): ...
    def read(self): ...
    def stop(self) -> None: ...
    def run(self) -> None: ...

class FileVideoStream:
    def __init__(self, path: Any, queue_size: int = ..., play_realtime: bool = ...) -> None: ...
    def start(self): ...
    def read(self): ...
    def more(self): ...
    def stop(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    def __del__(self) -> None: ...

class VideoWriter:
    output_path: Any = ...
    fps: Any = ...
    color: Any = ...
    fourcc: Any = ...
    h: Any = ...
    w: Any = ...
    output: Any = ...
    writer: Any = ...
    def __init__(self, output_path: str = ..., fps: int = ..., color: bool = ..., codec: str = ...) -> None: ...
    def __del__(self) -> None: ...
    def write_frame(self, frame: Any) -> None: ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class EventVideoWriterState(Enum):
    IDLE: str = ...
    RECORDING: str = ...
    POST_ROLL: str = ...

class _EventVideoWriterThread(threading.Thread):
    def __init__(self, output_path: Any, fps: Any, color: Any, codec: Any, queue: Any, callback_function: Optional[Any] = ..., callback_args: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    def run(self) -> None: ...

class EventVideoWriter:
    def __init__(self, pre_roll: int = ..., post_roll: int = ..., fps: int = ..., color: bool = ..., codec: str = ...) -> None: ...
    @property
    def state(self): ...
    def update(self, frame: Any) -> None: ...
    def start_event(self, output_path: Any, callback_function: Optional[Any] = ..., callback_args: Any = ...) -> None: ...
    def finish_event(self) -> None: ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

def translate(image: Any, x: Any, y: Any): ...
def rotate(image: Any, angle: Any, center: Optional[Any] = ..., scale: float = ...): ...
def resize(image: Any, width: Optional[Any] = ..., height: Optional[Any] = ..., keep_scale: bool = ..., inter: Any = ...): ...
def list_images(base_path: Any, contains: Optional[Any] = ...): ...
def list_files(base_path: Any, valid_exts: Any = ..., contains: Optional[Any] = ...): ...
def markup_image(image: Any, predictions: Any, show_labels: bool = ..., show_confidences: bool = ..., colors: Optional[Any] = ..., line_thickness: int = ..., font_size: float = ..., font_thickness: int = ...): ...
def transparent_overlay_boxes(image: Any, predictions: Any, alpha: float = ..., colors: Optional[Any] = ..., show_labels: bool = ..., show_confidences: bool = ...): ...
def filter_predictions_by_label(predictions: Any, label_list: Any): ...
def filter_predictions_by_area(predictions: Any, min_area_thresh: Any): ...
def pad_to_aspect_ratio(image: Any, a_ratio: Any): ...
def find_usb_device(id_vendor: Any, id_product: Any): ...
def find_ncs2(): ...
def is_jetson(): ...
def is_jetson_nano(): ...
def is_jetson_tx2(): ...
def is_jetson_xavier_nx(): ...
def cutout_image(image: Any, box: Any): ...
def blur_objects(image: Any, predictions: Any): ...
def blend_images(foreground_image: Any, background_image: Any, alpha: Any): ...
def overlay_image(foreground_image: Any, background_image: Any, foreground_mask: Any): ...
