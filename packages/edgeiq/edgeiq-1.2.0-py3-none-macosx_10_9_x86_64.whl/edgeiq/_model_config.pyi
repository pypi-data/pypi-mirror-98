from edgeiq import constants as constants
from voluptuous import Any

SUPPORTED_FRAMEWORKS: Any
DNN_SUPPORTED_FRAMEWORKS: Any
CUDA_SUPPORTED_FRAMEWORKS: Any
MYRIAD_SUPPORTED_FRAMEWORKS: Any
TENSOR_RT_SUPPORTED_FRAMEWORKS: Any
TENSOR_RT_SUPPORTED_PURPOSES: Any
SUPPORTED_PURPOSES: Any
SUPPORTED_DEVICES: Any
GLOBAL_MODEL_PATH: Any

def is_existing_path(path: Any): ...
def is_supported_purpose(purpose: Any): ...
def is_supported_framework_type(framework: Any): ...
def is_supported_device(device: Any): ...
def load_model_json(model_json_path: Any): ...
def load_labels(label_file_path: Any): ...
def load_colors(color_file_path: Any, colors_dtype: Any): ...
def get_model_config(model_id: Any): ...

MODEL_CONFIG_SCHEMA: Any

class ModelConfig:
    def __init__(self, model_path: Any) -> None: ...
    @property
    def id(self): ...
    @property
    def label_file(self): ...
    @property
    def colors_file(self): ...
    @property
    def config_file(self): ...
    @property
    def model_file(self): ...
    @property
    def mean(self): ...
    @property
    def scalefactor(self): ...
    @property
    def size(self): ...
    @property
    def purpose(self): ...
    @property
    def framework_type(self): ...
    @framework_type.setter
    def framework_type(self, framework_type: Any) -> None: ...
    @property
    def crop(self): ...
    @property
    def colors_dtype(self): ...
    @property
    def labels(self): ...
    @property
    def colors(self): ...
    @colors.setter
    def colors(self, colors: Any) -> None: ...
    @property
    def swaprb(self): ...
    @property
    def architecture(self): ...
    @property
    def supported_engines(self): ...
    @property
    def softmax(self): ...
    @property
    def device(self): ...
    @property
    def output_layer_names(self): ...
    @property
    def dnn_support(self): ...
    @property
    def dnn_myriad_support(self): ...
    @property
    def dnn_cuda_support(self): ...
    @property
    def tensor_rt_support(self): ...
