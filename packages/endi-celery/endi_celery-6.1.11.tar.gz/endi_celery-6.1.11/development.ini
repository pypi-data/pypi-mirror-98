[app:main]
use = egg:endi_celery#worker

pyramid.default_locale_name = fr_FR
pyramid.includes =
                    pyramid_tm
                    pyramid_mailer.debug
                    pyramid_services
                    pyramid_layout
                    pyramid_mako
                    pyramid_chameleon
                    pyramid_celery

####  MAIL FROM WITHIN THE APPLICATION ####
# Add this one to pyramid.includes if you configured a mailbox
# mail.host = mysmtp
# mail.port=587
# mail.username=<mailbox>
# mail.password=<mailbox_password>
# mail.tls=True
# mail.default_sender=<mailbox>
# mail.optout_address=<optout_address>
# mail.bounce_url=<bound_address>

#### DATABASE ACCESS CONFIGURATION ####
sqlalchemy.url = mysql://endi:endi@localhost/endi?charset=utf8
sqlalchemy.encoding=UTF8
# Those variables should be improved to fit your configuration
sqlalchemy.pool_recycle=7200
sqlalchemy.pool_size=100

# Cache configuration used for file caching
cache.data_dir = %(here)s/data/cache/data
cache.regions = default_term, second, short_term, long_term
cache.type = file
cache.second.expire = 1
cache.short_term.expire = 60
cache.default_term.expire = 1
cache.long_term.expire = 20
#### MAKO SPECIFIC CONFIGURATION ####
mako.directories = endi:templates
mako.imports = from markupsafe import escape_silent
mako.default_filters = escape_silent
mako.module_directory = /home/gas/endi/filesystem/mako_compiled_templates
endi.depot_path = /home/gas/endi/data/coopetbat/var/endi/files/

# Path where we store asynchronously generated files
endi.static_tmp=/tmp
# The instance name
endi.instance_name=intranet.local.fr
# Pool where general_ledger and analytical balances are placed for treatment
endi.parsing_pool_parent = /home/gas/endi/filesystem/celery_pool
# Sysadmin mail address (used to send information messages)
endi.sysadmin_mail=admin@local.fr

endi.services.task_pdf_storage_service = endi.views.task.pdf_storage_service.PdfFileDepotStorageService

[celery]
broker_url = redis://localhost:6379/0
imports =
    endi_celery.tasks.tasks
    endi_celery.tasks.mail
    endi_celery.tasks.csv_import
    endi_celery.tasks.export
    endi_celery.tasks.accounting_measure_compute
    endi_celery.tasks.accounting_parser

task_serializer = json
accept_content=
                json
                yaml

[celerybeat:accounting_parser]
task = endi_celery.tasks.accounting_parser.handle_pool_task
type = timedelta
schedule = {"seconds": 30}

[server:main]
use = egg:waitress#main
host = 0.0.0.0
#host= 0.0.0.0
port = 8080

[pshell]
models = endi_celery.models
db=endi_base.models.base.DBSESSION
transaction=transaction

# Begin logging configuration
[loggers]
keys = root, sqlalchemy, celery

[handlers]
keys = console, file, sqlfile, celery_file

[formatters]
keys = generic, sqlfile

[logger_root]
level = DEBUG
handlers = file, console
propagate = 1

[logger_sqlalchemy]
level = INFO
handlers = file, sqlfile
qualname = sqlalchemy.engine
propagate=0
# level = INFO logs SQL queries.
# level = DEBUG logs SQL queries and results.
# level = WARN logs neither. (Recommended for production systems.)

[logger_celery]
level=DEBUG
handlers = celery_file, console
propagate=1
qualname = celery

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = FileHandler
args = ('logfile.log','a')
level = DEBUG
formatter = generic

[handler_celery_file]
class = FileHandler
args = ('celery.log','a')
level = INFO
formatter = generic

[handler_sqlfile]
class = FileHandler
args = ('sql.log','a')
level = DEBUG
formatter = sqlfile

[formatter_sqlfile]
format = %(message)s

[formatter_generic]
format = %(asctime)-15s %(levelname)-5.5s %(message)s ([%(name)s.%(funcName)s:%(lineno)d])
# End logging configuration
