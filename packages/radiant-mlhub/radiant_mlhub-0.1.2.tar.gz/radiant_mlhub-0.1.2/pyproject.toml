[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.tox]

legacy_tox_ini = """
[tox]
envlist = py36, py37, py38, py39

[testenv]
deps = -rrequirements_testing.txt
isolated_build = true
commands =
    pytest
    flake8
    flake8_nb examples/
    mypy radiant_mlhub

"""
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.1.2"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  -?
  (?P<release_level>a|b)?
  (?P<prerelease>\d+)?
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "setup.py"
search = 'version="{current_version}"'

[[tool.tbump.file]]
src = "radiant_mlhub/__version__.py"

[[tool.tbump.file]]
src = "test/test_session.py"

[[tool.tbump.file]]
src = "test/test_cli.py"

[[tool.tbump.file]]
src = "binder/requirements.txt"
search = "radiant-mlhub=={current_version}"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
