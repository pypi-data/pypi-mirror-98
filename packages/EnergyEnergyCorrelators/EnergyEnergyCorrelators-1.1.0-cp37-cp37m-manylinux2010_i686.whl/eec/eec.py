# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _eec
else:
    import _eec

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _eec.SWIG_PyInstanceMethod_New
_swig_new_static_method = _eec.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eec.delete_SwigPyIterator
    value = _swig_new_instance_method(_eec.SwigPyIterator_value)
    incr = _swig_new_instance_method(_eec.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_eec.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_eec.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_eec.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_eec.SwigPyIterator_copy)
    next = _swig_new_instance_method(_eec.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_eec.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_eec.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_eec.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_eec.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_eec.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_eec.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_eec.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_eec.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_eec.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _eec:
_eec.SwigPyIterator_swigregister(SwigPyIterator)


import numpy as _np

class vectorDouble(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eec.vectorDouble_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eec.vectorDouble___nonzero__)
    __bool__ = _swig_new_instance_method(_eec.vectorDouble___bool__)
    __len__ = _swig_new_instance_method(_eec.vectorDouble___len__)
    __getslice__ = _swig_new_instance_method(_eec.vectorDouble___getslice__)
    __setslice__ = _swig_new_instance_method(_eec.vectorDouble___setslice__)
    __delslice__ = _swig_new_instance_method(_eec.vectorDouble___delslice__)
    __delitem__ = _swig_new_instance_method(_eec.vectorDouble___delitem__)
    __getitem__ = _swig_new_instance_method(_eec.vectorDouble___getitem__)
    __setitem__ = _swig_new_instance_method(_eec.vectorDouble___setitem__)
    pop = _swig_new_instance_method(_eec.vectorDouble_pop)
    append = _swig_new_instance_method(_eec.vectorDouble_append)
    empty = _swig_new_instance_method(_eec.vectorDouble_empty)
    size = _swig_new_instance_method(_eec.vectorDouble_size)
    swap = _swig_new_instance_method(_eec.vectorDouble_swap)
    begin = _swig_new_instance_method(_eec.vectorDouble_begin)
    end = _swig_new_instance_method(_eec.vectorDouble_end)
    rbegin = _swig_new_instance_method(_eec.vectorDouble_rbegin)
    rend = _swig_new_instance_method(_eec.vectorDouble_rend)
    clear = _swig_new_instance_method(_eec.vectorDouble_clear)
    get_allocator = _swig_new_instance_method(_eec.vectorDouble_get_allocator)
    pop_back = _swig_new_instance_method(_eec.vectorDouble_pop_back)
    erase = _swig_new_instance_method(_eec.vectorDouble_erase)

    def __init__(self, *args):
        r"""
        __init__(vectorDouble self) -> vectorDouble
        __init__(vectorDouble self, vectorDouble other) -> vectorDouble
        __init__(vectorDouble self, std::vector< double >::size_type size) -> vectorDouble
        __init__(vectorDouble self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vectorDouble
        """
        _eec.vectorDouble_swiginit(self, _eec.new_vectorDouble(*args))
    push_back = _swig_new_instance_method(_eec.vectorDouble_push_back)
    front = _swig_new_instance_method(_eec.vectorDouble_front)
    back = _swig_new_instance_method(_eec.vectorDouble_back)
    assign = _swig_new_instance_method(_eec.vectorDouble_assign)
    resize = _swig_new_instance_method(_eec.vectorDouble_resize)
    insert = _swig_new_instance_method(_eec.vectorDouble_insert)
    reserve = _swig_new_instance_method(_eec.vectorDouble_reserve)
    capacity = _swig_new_instance_method(_eec.vectorDouble_capacity)
    __swig_destroy__ = _eec.delete_vectorDouble

# Register vectorDouble in _eec:
_eec.vectorDouble_swigregister(vectorDouble)

class vectorUnsigned(object):
    r"""Proxy of C++ std::vector< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eec.vectorUnsigned_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eec.vectorUnsigned___nonzero__)
    __bool__ = _swig_new_instance_method(_eec.vectorUnsigned___bool__)
    __len__ = _swig_new_instance_method(_eec.vectorUnsigned___len__)
    __getslice__ = _swig_new_instance_method(_eec.vectorUnsigned___getslice__)
    __setslice__ = _swig_new_instance_method(_eec.vectorUnsigned___setslice__)
    __delslice__ = _swig_new_instance_method(_eec.vectorUnsigned___delslice__)
    __delitem__ = _swig_new_instance_method(_eec.vectorUnsigned___delitem__)
    __getitem__ = _swig_new_instance_method(_eec.vectorUnsigned___getitem__)
    __setitem__ = _swig_new_instance_method(_eec.vectorUnsigned___setitem__)
    pop = _swig_new_instance_method(_eec.vectorUnsigned_pop)
    append = _swig_new_instance_method(_eec.vectorUnsigned_append)
    empty = _swig_new_instance_method(_eec.vectorUnsigned_empty)
    size = _swig_new_instance_method(_eec.vectorUnsigned_size)
    swap = _swig_new_instance_method(_eec.vectorUnsigned_swap)
    begin = _swig_new_instance_method(_eec.vectorUnsigned_begin)
    end = _swig_new_instance_method(_eec.vectorUnsigned_end)
    rbegin = _swig_new_instance_method(_eec.vectorUnsigned_rbegin)
    rend = _swig_new_instance_method(_eec.vectorUnsigned_rend)
    clear = _swig_new_instance_method(_eec.vectorUnsigned_clear)
    get_allocator = _swig_new_instance_method(_eec.vectorUnsigned_get_allocator)
    pop_back = _swig_new_instance_method(_eec.vectorUnsigned_pop_back)
    erase = _swig_new_instance_method(_eec.vectorUnsigned_erase)

    def __init__(self, *args):
        r"""
        __init__(vectorUnsigned self) -> vectorUnsigned
        __init__(vectorUnsigned self, vectorUnsigned other) -> vectorUnsigned
        __init__(vectorUnsigned self, std::vector< unsigned int >::size_type size) -> vectorUnsigned
        __init__(vectorUnsigned self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> vectorUnsigned
        """
        _eec.vectorUnsigned_swiginit(self, _eec.new_vectorUnsigned(*args))
    push_back = _swig_new_instance_method(_eec.vectorUnsigned_push_back)
    front = _swig_new_instance_method(_eec.vectorUnsigned_front)
    back = _swig_new_instance_method(_eec.vectorUnsigned_back)
    assign = _swig_new_instance_method(_eec.vectorUnsigned_assign)
    resize = _swig_new_instance_method(_eec.vectorUnsigned_resize)
    insert = _swig_new_instance_method(_eec.vectorUnsigned_insert)
    reserve = _swig_new_instance_method(_eec.vectorUnsigned_reserve)
    capacity = _swig_new_instance_method(_eec.vectorUnsigned_capacity)
    __swig_destroy__ = _eec.delete_vectorUnsigned

# Register vectorUnsigned in _eec:
_eec.vectorUnsigned_swigregister(vectorUnsigned)

class arrayUnsigned13(object):
    r"""Proxy of C++ std::array< unsigned int,13 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eec.arrayUnsigned13_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eec.arrayUnsigned13___nonzero__)
    __bool__ = _swig_new_instance_method(_eec.arrayUnsigned13___bool__)
    __len__ = _swig_new_instance_method(_eec.arrayUnsigned13___len__)
    __getslice__ = _swig_new_instance_method(_eec.arrayUnsigned13___getslice__)
    __setslice__ = _swig_new_instance_method(_eec.arrayUnsigned13___setslice__)
    __delslice__ = _swig_new_instance_method(_eec.arrayUnsigned13___delslice__)
    __delitem__ = _swig_new_instance_method(_eec.arrayUnsigned13___delitem__)
    __getitem__ = _swig_new_instance_method(_eec.arrayUnsigned13___getitem__)
    __setitem__ = _swig_new_instance_method(_eec.arrayUnsigned13___setitem__)

    def __init__(self, *args):
        r"""
        __init__(arrayUnsigned13 self) -> arrayUnsigned13
        __init__(arrayUnsigned13 self, arrayUnsigned13 other) -> arrayUnsigned13
        """
        _eec.arrayUnsigned13_swiginit(self, _eec.new_arrayUnsigned13(*args))
    empty = _swig_new_instance_method(_eec.arrayUnsigned13_empty)
    size = _swig_new_instance_method(_eec.arrayUnsigned13_size)
    swap = _swig_new_instance_method(_eec.arrayUnsigned13_swap)
    begin = _swig_new_instance_method(_eec.arrayUnsigned13_begin)
    end = _swig_new_instance_method(_eec.arrayUnsigned13_end)
    rbegin = _swig_new_instance_method(_eec.arrayUnsigned13_rbegin)
    rend = _swig_new_instance_method(_eec.arrayUnsigned13_rend)
    front = _swig_new_instance_method(_eec.arrayUnsigned13_front)
    back = _swig_new_instance_method(_eec.arrayUnsigned13_back)
    fill = _swig_new_instance_method(_eec.arrayUnsigned13_fill)
    __swig_destroy__ = _eec.delete_arrayUnsigned13

# Register arrayUnsigned13 in _eec:
_eec.arrayUnsigned13_swigregister(arrayUnsigned13)

class reduce_command(object):
    r"""Proxy of C++ boost::histogram::algorithm::reduce_command class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(reduce_command self) -> reduce_command"""
        _eec.reduce_command_swiginit(self, _eec.new_reduce_command())
    __swig_destroy__ = _eec.delete_reduce_command

# Register reduce_command in _eec:
_eec.reduce_command_swigregister(reduce_command)

rebin = _eec.rebin
shrink = _eec.shrink
slice = _eec.slice
shrink_and_rebin = _eec.shrink_and_rebin
slice_and_rebin = _eec.slice_and_rebin
class vectorReduceCommand(object):
    r"""Proxy of C++ std::vector< boost::histogram::algorithm::reduce_command > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eec.vectorReduceCommand_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eec.vectorReduceCommand___nonzero__)
    __bool__ = _swig_new_instance_method(_eec.vectorReduceCommand___bool__)
    __len__ = _swig_new_instance_method(_eec.vectorReduceCommand___len__)
    __getslice__ = _swig_new_instance_method(_eec.vectorReduceCommand___getslice__)
    __setslice__ = _swig_new_instance_method(_eec.vectorReduceCommand___setslice__)
    __delslice__ = _swig_new_instance_method(_eec.vectorReduceCommand___delslice__)
    __delitem__ = _swig_new_instance_method(_eec.vectorReduceCommand___delitem__)
    __getitem__ = _swig_new_instance_method(_eec.vectorReduceCommand___getitem__)
    __setitem__ = _swig_new_instance_method(_eec.vectorReduceCommand___setitem__)
    pop = _swig_new_instance_method(_eec.vectorReduceCommand_pop)
    append = _swig_new_instance_method(_eec.vectorReduceCommand_append)
    empty = _swig_new_instance_method(_eec.vectorReduceCommand_empty)
    size = _swig_new_instance_method(_eec.vectorReduceCommand_size)
    swap = _swig_new_instance_method(_eec.vectorReduceCommand_swap)
    begin = _swig_new_instance_method(_eec.vectorReduceCommand_begin)
    end = _swig_new_instance_method(_eec.vectorReduceCommand_end)
    rbegin = _swig_new_instance_method(_eec.vectorReduceCommand_rbegin)
    rend = _swig_new_instance_method(_eec.vectorReduceCommand_rend)
    clear = _swig_new_instance_method(_eec.vectorReduceCommand_clear)
    get_allocator = _swig_new_instance_method(_eec.vectorReduceCommand_get_allocator)
    pop_back = _swig_new_instance_method(_eec.vectorReduceCommand_pop_back)
    erase = _swig_new_instance_method(_eec.vectorReduceCommand_erase)

    def __init__(self, *args):
        r"""
        __init__(vectorReduceCommand self) -> vectorReduceCommand
        __init__(vectorReduceCommand self, vectorReduceCommand other) -> vectorReduceCommand
        __init__(vectorReduceCommand self, std::vector< boost::histogram::algorithm::reduce_command >::size_type size) -> vectorReduceCommand
        __init__(vectorReduceCommand self, std::vector< boost::histogram::algorithm::reduce_command >::size_type size, reduce_command value) -> vectorReduceCommand
        """
        _eec.vectorReduceCommand_swiginit(self, _eec.new_vectorReduceCommand(*args))
    push_back = _swig_new_instance_method(_eec.vectorReduceCommand_push_back)
    front = _swig_new_instance_method(_eec.vectorReduceCommand_front)
    back = _swig_new_instance_method(_eec.vectorReduceCommand_back)
    assign = _swig_new_instance_method(_eec.vectorReduceCommand_assign)
    resize = _swig_new_instance_method(_eec.vectorReduceCommand_resize)
    insert = _swig_new_instance_method(_eec.vectorReduceCommand_insert)
    reserve = _swig_new_instance_method(_eec.vectorReduceCommand_reserve)
    capacity = _swig_new_instance_method(_eec.vectorReduceCommand_capacity)
    __swig_destroy__ = _eec.delete_vectorReduceCommand

# Register vectorReduceCommand in _eec:
_eec.vectorReduceCommand_swigregister(vectorReduceCommand)

ArchiveFormat_Text = _eec.ArchiveFormat_Text

ArchiveFormat_Binary = _eec.ArchiveFormat_Binary

CompressionMode_Auto = _eec.CompressionMode_Auto

CompressionMode_Plain = _eec.CompressionMode_Plain

CompressionMode_Zlib = _eec.CompressionMode_Zlib

get_archive_format = _eec.get_archive_format
get_compression_mode = _eec.get_compression_mode
set_archive_format = _eec.set_archive_format
set_compression_mode = _eec.set_compression_mode
determine_num_threads = _eec.determine_num_threads
get_coverage = _eec.get_coverage
class EECHistBase1DId(object):
    r"""Proxy of C++ eec::hist::EECHistBase< eec::hist::EECHist1D< eec::hist::axis::id > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num_threads, track_covariance, variance_bound, variance_bound_includes_overflows):
        r"""__init__(EECHistBase1DId self, int num_threads, bool track_covariance, bool variance_bound, bool variance_bound_includes_overflows) -> EECHistBase1DId"""
        _eec.EECHistBase1DId_swiginit(self, _eec.new_EECHistBase1DId(num_threads, track_covariance, variance_bound, variance_bound_includes_overflows))
    __swig_destroy__ = _eec.delete_EECHistBase1DId
    num_threads = _swig_new_instance_method(_eec.EECHistBase1DId_num_threads)
    track_covariance = _swig_new_instance_method(_eec.EECHistBase1DId_track_covariance)
    variance_bound = _swig_new_instance_method(_eec.EECHistBase1DId_variance_bound)
    variance_bound_includes_overflows = _swig_new_instance_method(_eec.EECHistBase1DId_variance_bound_includes_overflows)
    nhists = _swig_new_instance_method(_eec.EECHistBase1DId_nhists)
    nbins = _swig_new_instance_method(_eec.EECHistBase1DId_nbins)
    rank = _swig_new_static_method(_eec.EECHistBase1DId_rank)
    hist_size = _swig_new_instance_method(_eec.EECHistBase1DId_hist_size)
    covariance_size = _swig_new_instance_method(_eec.EECHistBase1DId_covariance_size)
    event_counter = _swig_new_instance_method(_eec.EECHistBase1DId_event_counter)
    reduce = _swig_new_instance_method(_eec.EECHistBase1DId_reduce)
    sum = _swig_new_instance_method(_eec.EECHistBase1DId_sum)
    bin_centers_vec = _swig_new_instance_method(_eec.EECHistBase1DId_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eec.EECHistBase1DId_bin_edges_vec)
    hists_as_text = _swig_new_instance_method(_eec.EECHistBase1DId_hists_as_text)
    bin_centers = _swig_new_instance_method(_eec.EECHistBase1DId_bin_centers)
    bin_edges = _swig_new_instance_method(_eec.EECHistBase1DId_bin_edges)

    def get_hist_errs(self, hist_i=0, overflows=True):
        hist, vars = self.get_hist_vars(hist_i, overflows)
        return hist, _np.sqrt(vars)

    def get_error_bound(self, hist_i=0, overflows=True):
        return _np.sqrt(self.get_variance_bound(hist_i, overflows))


# Register EECHistBase1DId in _eec:
_eec.EECHistBase1DId_swigregister(EECHistBase1DId)
cvar = _eec.cvar
REG = cvar.REG
PI = cvar.PI
TWOPI = cvar.TWOPI
HAS_PICKLE_SUPPORT = cvar.HAS_PICKLE_SUPPORT
EECHistBase1DId_rank = _eec.EECHistBase1DId_rank

class EECHistBase1DLog(object):
    r"""Proxy of C++ eec::hist::EECHistBase< eec::hist::EECHist1D< eec::hist::axis::log > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num_threads, track_covariance, variance_bound, variance_bound_includes_overflows):
        r"""__init__(EECHistBase1DLog self, int num_threads, bool track_covariance, bool variance_bound, bool variance_bound_includes_overflows) -> EECHistBase1DLog"""
        _eec.EECHistBase1DLog_swiginit(self, _eec.new_EECHistBase1DLog(num_threads, track_covariance, variance_bound, variance_bound_includes_overflows))
    __swig_destroy__ = _eec.delete_EECHistBase1DLog
    num_threads = _swig_new_instance_method(_eec.EECHistBase1DLog_num_threads)
    track_covariance = _swig_new_instance_method(_eec.EECHistBase1DLog_track_covariance)
    variance_bound = _swig_new_instance_method(_eec.EECHistBase1DLog_variance_bound)
    variance_bound_includes_overflows = _swig_new_instance_method(_eec.EECHistBase1DLog_variance_bound_includes_overflows)
    nhists = _swig_new_instance_method(_eec.EECHistBase1DLog_nhists)
    nbins = _swig_new_instance_method(_eec.EECHistBase1DLog_nbins)
    rank = _swig_new_static_method(_eec.EECHistBase1DLog_rank)
    hist_size = _swig_new_instance_method(_eec.EECHistBase1DLog_hist_size)
    covariance_size = _swig_new_instance_method(_eec.EECHistBase1DLog_covariance_size)
    event_counter = _swig_new_instance_method(_eec.EECHistBase1DLog_event_counter)
    reduce = _swig_new_instance_method(_eec.EECHistBase1DLog_reduce)
    sum = _swig_new_instance_method(_eec.EECHistBase1DLog_sum)
    bin_centers_vec = _swig_new_instance_method(_eec.EECHistBase1DLog_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eec.EECHistBase1DLog_bin_edges_vec)
    hists_as_text = _swig_new_instance_method(_eec.EECHistBase1DLog_hists_as_text)
    bin_centers = _swig_new_instance_method(_eec.EECHistBase1DLog_bin_centers)
    bin_edges = _swig_new_instance_method(_eec.EECHistBase1DLog_bin_edges)

    def get_hist_errs(self, hist_i=0, overflows=True):
        hist, vars = self.get_hist_vars(hist_i, overflows)
        return hist, _np.sqrt(vars)

    def get_error_bound(self, hist_i=0, overflows=True):
        return _np.sqrt(self.get_variance_bound(hist_i, overflows))


# Register EECHistBase1DLog in _eec:
_eec.EECHistBase1DLog_swigregister(EECHistBase1DLog)
EECHistBase1DLog_rank = _eec.EECHistBase1DLog_rank

class EECHistBaseIdIdId(object):
    r"""Proxy of C++ eec::hist::EECHistBase< eec::hist::EECHist3D< eec::hist::axis::id,eec::hist::axis::id,eec::hist::axis::id > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num_threads, track_covariance, variance_bound, variance_bound_includes_overflows):
        r"""__init__(EECHistBaseIdIdId self, int num_threads, bool track_covariance, bool variance_bound, bool variance_bound_includes_overflows) -> EECHistBaseIdIdId"""
        _eec.EECHistBaseIdIdId_swiginit(self, _eec.new_EECHistBaseIdIdId(num_threads, track_covariance, variance_bound, variance_bound_includes_overflows))
    __swig_destroy__ = _eec.delete_EECHistBaseIdIdId
    num_threads = _swig_new_instance_method(_eec.EECHistBaseIdIdId_num_threads)
    track_covariance = _swig_new_instance_method(_eec.EECHistBaseIdIdId_track_covariance)
    variance_bound = _swig_new_instance_method(_eec.EECHistBaseIdIdId_variance_bound)
    variance_bound_includes_overflows = _swig_new_instance_method(_eec.EECHistBaseIdIdId_variance_bound_includes_overflows)
    nhists = _swig_new_instance_method(_eec.EECHistBaseIdIdId_nhists)
    nbins = _swig_new_instance_method(_eec.EECHistBaseIdIdId_nbins)
    rank = _swig_new_static_method(_eec.EECHistBaseIdIdId_rank)
    hist_size = _swig_new_instance_method(_eec.EECHistBaseIdIdId_hist_size)
    covariance_size = _swig_new_instance_method(_eec.EECHistBaseIdIdId_covariance_size)
    event_counter = _swig_new_instance_method(_eec.EECHistBaseIdIdId_event_counter)
    reduce = _swig_new_instance_method(_eec.EECHistBaseIdIdId_reduce)
    sum = _swig_new_instance_method(_eec.EECHistBaseIdIdId_sum)
    bin_centers_vec = _swig_new_instance_method(_eec.EECHistBaseIdIdId_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eec.EECHistBaseIdIdId_bin_edges_vec)
    hists_as_text = _swig_new_instance_method(_eec.EECHistBaseIdIdId_hists_as_text)
    bin_centers = _swig_new_instance_method(_eec.EECHistBaseIdIdId_bin_centers)
    bin_edges = _swig_new_instance_method(_eec.EECHistBaseIdIdId_bin_edges)

    def get_hist_errs(self, hist_i=0, overflows=True):
        hist, vars = self.get_hist_vars(hist_i, overflows)
        return hist, _np.sqrt(vars)

    def get_error_bound(self, hist_i=0, overflows=True):
        return _np.sqrt(self.get_variance_bound(hist_i, overflows))


# Register EECHistBaseIdIdId in _eec:
_eec.EECHistBaseIdIdId_swigregister(EECHistBaseIdIdId)
EECHistBaseIdIdId_rank = _eec.EECHistBaseIdIdId_rank

class EECHistBaseLogIdId(object):
    r"""Proxy of C++ eec::hist::EECHistBase< eec::hist::EECHist3D< eec::hist::axis::log,eec::hist::axis::id,eec::hist::axis::id > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num_threads, track_covariance, variance_bound, variance_bound_includes_overflows):
        r"""__init__(EECHistBaseLogIdId self, int num_threads, bool track_covariance, bool variance_bound, bool variance_bound_includes_overflows) -> EECHistBaseLogIdId"""
        _eec.EECHistBaseLogIdId_swiginit(self, _eec.new_EECHistBaseLogIdId(num_threads, track_covariance, variance_bound, variance_bound_includes_overflows))
    __swig_destroy__ = _eec.delete_EECHistBaseLogIdId
    num_threads = _swig_new_instance_method(_eec.EECHistBaseLogIdId_num_threads)
    track_covariance = _swig_new_instance_method(_eec.EECHistBaseLogIdId_track_covariance)
    variance_bound = _swig_new_instance_method(_eec.EECHistBaseLogIdId_variance_bound)
    variance_bound_includes_overflows = _swig_new_instance_method(_eec.EECHistBaseLogIdId_variance_bound_includes_overflows)
    nhists = _swig_new_instance_method(_eec.EECHistBaseLogIdId_nhists)
    nbins = _swig_new_instance_method(_eec.EECHistBaseLogIdId_nbins)
    rank = _swig_new_static_method(_eec.EECHistBaseLogIdId_rank)
    hist_size = _swig_new_instance_method(_eec.EECHistBaseLogIdId_hist_size)
    covariance_size = _swig_new_instance_method(_eec.EECHistBaseLogIdId_covariance_size)
    event_counter = _swig_new_instance_method(_eec.EECHistBaseLogIdId_event_counter)
    reduce = _swig_new_instance_method(_eec.EECHistBaseLogIdId_reduce)
    sum = _swig_new_instance_method(_eec.EECHistBaseLogIdId_sum)
    bin_centers_vec = _swig_new_instance_method(_eec.EECHistBaseLogIdId_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eec.EECHistBaseLogIdId_bin_edges_vec)
    hists_as_text = _swig_new_instance_method(_eec.EECHistBaseLogIdId_hists_as_text)
    bin_centers = _swig_new_instance_method(_eec.EECHistBaseLogIdId_bin_centers)
    bin_edges = _swig_new_instance_method(_eec.EECHistBaseLogIdId_bin_edges)

    def get_hist_errs(self, hist_i=0, overflows=True):
        hist, vars = self.get_hist_vars(hist_i, overflows)
        return hist, _np.sqrt(vars)

    def get_error_bound(self, hist_i=0, overflows=True):
        return _np.sqrt(self.get_variance_bound(hist_i, overflows))


# Register EECHistBaseLogIdId in _eec:
_eec.EECHistBaseLogIdId_swigregister(EECHistBaseLogIdId)
EECHistBaseLogIdId_rank = _eec.EECHistBaseLogIdId_rank

class EECHistBaseIdLogId(object):
    r"""Proxy of C++ eec::hist::EECHistBase< eec::hist::EECHist3D< eec::hist::axis::id,eec::hist::axis::log,eec::hist::axis::id > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num_threads, track_covariance, variance_bound, variance_bound_includes_overflows):
        r"""__init__(EECHistBaseIdLogId self, int num_threads, bool track_covariance, bool variance_bound, bool variance_bound_includes_overflows) -> EECHistBaseIdLogId"""
        _eec.EECHistBaseIdLogId_swiginit(self, _eec.new_EECHistBaseIdLogId(num_threads, track_covariance, variance_bound, variance_bound_includes_overflows))
    __swig_destroy__ = _eec.delete_EECHistBaseIdLogId
    num_threads = _swig_new_instance_method(_eec.EECHistBaseIdLogId_num_threads)
    track_covariance = _swig_new_instance_method(_eec.EECHistBaseIdLogId_track_covariance)
    variance_bound = _swig_new_instance_method(_eec.EECHistBaseIdLogId_variance_bound)
    variance_bound_includes_overflows = _swig_new_instance_method(_eec.EECHistBaseIdLogId_variance_bound_includes_overflows)
    nhists = _swig_new_instance_method(_eec.EECHistBaseIdLogId_nhists)
    nbins = _swig_new_instance_method(_eec.EECHistBaseIdLogId_nbins)
    rank = _swig_new_static_method(_eec.EECHistBaseIdLogId_rank)
    hist_size = _swig_new_instance_method(_eec.EECHistBaseIdLogId_hist_size)
    covariance_size = _swig_new_instance_method(_eec.EECHistBaseIdLogId_covariance_size)
    event_counter = _swig_new_instance_method(_eec.EECHistBaseIdLogId_event_counter)
    reduce = _swig_new_instance_method(_eec.EECHistBaseIdLogId_reduce)
    sum = _swig_new_instance_method(_eec.EECHistBaseIdLogId_sum)
    bin_centers_vec = _swig_new_instance_method(_eec.EECHistBaseIdLogId_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eec.EECHistBaseIdLogId_bin_edges_vec)
    hists_as_text = _swig_new_instance_method(_eec.EECHistBaseIdLogId_hists_as_text)
    bin_centers = _swig_new_instance_method(_eec.EECHistBaseIdLogId_bin_centers)
    bin_edges = _swig_new_instance_method(_eec.EECHistBaseIdLogId_bin_edges)

    def get_hist_errs(self, hist_i=0, overflows=True):
        hist, vars = self.get_hist_vars(hist_i, overflows)
        return hist, _np.sqrt(vars)

    def get_error_bound(self, hist_i=0, overflows=True):
        return _np.sqrt(self.get_variance_bound(hist_i, overflows))


# Register EECHistBaseIdLogId in _eec:
_eec.EECHistBaseIdLogId_swigregister(EECHistBaseIdLogId)
EECHistBaseIdLogId_rank = _eec.EECHistBaseIdLogId_rank

class EECHistBaseLogLogId(object):
    r"""Proxy of C++ eec::hist::EECHistBase< eec::hist::EECHist3D< eec::hist::axis::log,eec::hist::axis::log,eec::hist::axis::id > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num_threads, track_covariance, variance_bound, variance_bound_includes_overflows):
        r"""__init__(EECHistBaseLogLogId self, int num_threads, bool track_covariance, bool variance_bound, bool variance_bound_includes_overflows) -> EECHistBaseLogLogId"""
        _eec.EECHistBaseLogLogId_swiginit(self, _eec.new_EECHistBaseLogLogId(num_threads, track_covariance, variance_bound, variance_bound_includes_overflows))
    __swig_destroy__ = _eec.delete_EECHistBaseLogLogId
    num_threads = _swig_new_instance_method(_eec.EECHistBaseLogLogId_num_threads)
    track_covariance = _swig_new_instance_method(_eec.EECHistBaseLogLogId_track_covariance)
    variance_bound = _swig_new_instance_method(_eec.EECHistBaseLogLogId_variance_bound)
    variance_bound_includes_overflows = _swig_new_instance_method(_eec.EECHistBaseLogLogId_variance_bound_includes_overflows)
    nhists = _swig_new_instance_method(_eec.EECHistBaseLogLogId_nhists)
    nbins = _swig_new_instance_method(_eec.EECHistBaseLogLogId_nbins)
    rank = _swig_new_static_method(_eec.EECHistBaseLogLogId_rank)
    hist_size = _swig_new_instance_method(_eec.EECHistBaseLogLogId_hist_size)
    covariance_size = _swig_new_instance_method(_eec.EECHistBaseLogLogId_covariance_size)
    event_counter = _swig_new_instance_method(_eec.EECHistBaseLogLogId_event_counter)
    reduce = _swig_new_instance_method(_eec.EECHistBaseLogLogId_reduce)
    sum = _swig_new_instance_method(_eec.EECHistBaseLogLogId_sum)
    bin_centers_vec = _swig_new_instance_method(_eec.EECHistBaseLogLogId_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eec.EECHistBaseLogLogId_bin_edges_vec)
    hists_as_text = _swig_new_instance_method(_eec.EECHistBaseLogLogId_hists_as_text)
    bin_centers = _swig_new_instance_method(_eec.EECHistBaseLogLogId_bin_centers)
    bin_edges = _swig_new_instance_method(_eec.EECHistBaseLogLogId_bin_edges)

    def get_hist_errs(self, hist_i=0, overflows=True):
        hist, vars = self.get_hist_vars(hist_i, overflows)
        return hist, _np.sqrt(vars)

    def get_error_bound(self, hist_i=0, overflows=True):
        return _np.sqrt(self.get_variance_bound(hist_i, overflows))


# Register EECHistBaseLogLogId in _eec:
_eec.EECHistBaseLogLogId_swigregister(EECHistBaseLogLogId)
EECHistBaseLogLogId_rank = _eec.EECHistBaseLogLogId_rank

class EECHist1DId(EECHistBase1DId):
    r"""Proxy of C++ eec::hist::EECHist1D< eec::hist::axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbins, axis_min, axis_max, num_threads=1, track_covariance=True, variance_bound=True, variance_bound_include_overflows=True):
        r"""__init__(EECHist1DId self, unsigned int nbins, double axis_min, double axis_max, int num_threads=1, bool track_covariance=True, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECHist1DId"""
        _eec.EECHist1DId_swiginit(self, _eec.new_EECHist1DId(nbins, axis_min, axis_max, num_threads, track_covariance, variance_bound, variance_bound_include_overflows))
    __swig_destroy__ = _eec.delete_EECHist1DId
    get_hist_vars = _swig_new_instance_method(_eec.EECHist1DId_get_hist_vars)
    get_covariance = _swig_new_instance_method(_eec.EECHist1DId_get_covariance)
    get_variance_bound = _swig_new_instance_method(_eec.EECHist1DId_get_variance_bound)

# Register EECHist1DId in _eec:
_eec.EECHist1DId_swigregister(EECHist1DId)

class EECHist1DLog(EECHistBase1DLog):
    r"""Proxy of C++ eec::hist::EECHist1D< eec::hist::axis::log > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbins, axis_min, axis_max, num_threads=1, track_covariance=True, variance_bound=True, variance_bound_include_overflows=True):
        r"""__init__(EECHist1DLog self, unsigned int nbins, double axis_min, double axis_max, int num_threads=1, bool track_covariance=True, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECHist1DLog"""
        _eec.EECHist1DLog_swiginit(self, _eec.new_EECHist1DLog(nbins, axis_min, axis_max, num_threads, track_covariance, variance_bound, variance_bound_include_overflows))
    __swig_destroy__ = _eec.delete_EECHist1DLog
    get_hist_vars = _swig_new_instance_method(_eec.EECHist1DLog_get_hist_vars)
    get_covariance = _swig_new_instance_method(_eec.EECHist1DLog_get_covariance)
    get_variance_bound = _swig_new_instance_method(_eec.EECHist1DLog_get_variance_bound)

# Register EECHist1DLog in _eec:
_eec.EECHist1DLog_swigregister(EECHist1DLog)

class EECHist3DIdIdId(EECHistBaseIdIdId):
    r"""Proxy of C++ eec::hist::EECHist3D< eec::hist::axis::id,eec::hist::axis::id,eec::hist::axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads=1, track_covariance=False, variance_bound=True, variance_bound_include_overflows=True):
        r"""__init__(EECHist3DIdIdId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, int num_threads=1, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECHist3DIdIdId"""
        _eec.EECHist3DIdIdId_swiginit(self, _eec.new_EECHist3DIdIdId(nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads, track_covariance, variance_bound, variance_bound_include_overflows))
    __swig_destroy__ = _eec.delete_EECHist3DIdIdId
    get_hist_vars = _swig_new_instance_method(_eec.EECHist3DIdIdId_get_hist_vars)
    get_covariance = _swig_new_instance_method(_eec.EECHist3DIdIdId_get_covariance)
    get_variance_bound = _swig_new_instance_method(_eec.EECHist3DIdIdId_get_variance_bound)

# Register EECHist3DIdIdId in _eec:
_eec.EECHist3DIdIdId_swigregister(EECHist3DIdIdId)

class EECHist3DLogIdId(EECHistBaseLogIdId):
    r"""Proxy of C++ eec::hist::EECHist3D< eec::hist::axis::log,eec::hist::axis::id,eec::hist::axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads=1, track_covariance=False, variance_bound=True, variance_bound_include_overflows=True):
        r"""__init__(EECHist3DLogIdId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, int num_threads=1, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECHist3DLogIdId"""
        _eec.EECHist3DLogIdId_swiginit(self, _eec.new_EECHist3DLogIdId(nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads, track_covariance, variance_bound, variance_bound_include_overflows))
    __swig_destroy__ = _eec.delete_EECHist3DLogIdId
    get_hist_vars = _swig_new_instance_method(_eec.EECHist3DLogIdId_get_hist_vars)
    get_covariance = _swig_new_instance_method(_eec.EECHist3DLogIdId_get_covariance)
    get_variance_bound = _swig_new_instance_method(_eec.EECHist3DLogIdId_get_variance_bound)

# Register EECHist3DLogIdId in _eec:
_eec.EECHist3DLogIdId_swigregister(EECHist3DLogIdId)

class EECHist3DIdLogId(EECHistBaseIdLogId):
    r"""Proxy of C++ eec::hist::EECHist3D< eec::hist::axis::id,eec::hist::axis::log,eec::hist::axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads=1, track_covariance=False, variance_bound=True, variance_bound_include_overflows=True):
        r"""__init__(EECHist3DIdLogId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, int num_threads=1, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECHist3DIdLogId"""
        _eec.EECHist3DIdLogId_swiginit(self, _eec.new_EECHist3DIdLogId(nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads, track_covariance, variance_bound, variance_bound_include_overflows))
    __swig_destroy__ = _eec.delete_EECHist3DIdLogId
    get_hist_vars = _swig_new_instance_method(_eec.EECHist3DIdLogId_get_hist_vars)
    get_covariance = _swig_new_instance_method(_eec.EECHist3DIdLogId_get_covariance)
    get_variance_bound = _swig_new_instance_method(_eec.EECHist3DIdLogId_get_variance_bound)

# Register EECHist3DIdLogId in _eec:
_eec.EECHist3DIdLogId_swigregister(EECHist3DIdLogId)

class EECHist3DLogLogId(EECHistBaseLogLogId):
    r"""Proxy of C++ eec::hist::EECHist3D< eec::hist::axis::log,eec::hist::axis::log,eec::hist::axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads=1, track_covariance=False, variance_bound=True, variance_bound_include_overflows=True):
        r"""__init__(EECHist3DLogLogId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, int num_threads=1, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECHist3DLogLogId"""
        _eec.EECHist3DLogLogId_swiginit(self, _eec.new_EECHist3DLogLogId(nbins0, axis0_min, axis0_max, nbins1, axis1_min, axis1_max, nbins2, axis2_min, axis2_max, num_threads, track_covariance, variance_bound, variance_bound_include_overflows))
    __swig_destroy__ = _eec.delete_EECHist3DLogLogId
    get_hist_vars = _swig_new_instance_method(_eec.EECHist3DLogLogId_get_hist_vars)
    get_covariance = _swig_new_instance_method(_eec.EECHist3DLogLogId_get_covariance)
    get_variance_bound = _swig_new_instance_method(_eec.EECHist3DLogLogId_get_variance_bound)

# Register EECHist3DLogLogId in _eec:
_eec.EECHist3DLogLogId_swigregister(EECHist3DLogLogId)

EEC_IGNORED_WEIGHT = _eec.EEC_IGNORED_WEIGHT

class EECEvents(object):
    r"""Proxy of C++ eec::EECEvents class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nev, nfeatures, pj_charge=None):
        r"""__init__(EECEvents self, std::size_t nev, unsigned int nfeatures, double (*)(eec::EECEvents::pj_charge_t const &) pj_charge=None) -> EECEvents"""
        _eec.EECEvents_swiginit(self, _eec.new_EECEvents(nev, nfeatures, pj_charge))
    events = _swig_new_instance_method(_eec.EECEvents_events)
    mults = _swig_new_instance_method(_eec.EECEvents_mults)
    weights = _swig_new_instance_method(_eec.EECEvents_weights)
    append = _swig_new_instance_method(_eec.EECEvents_append)
    __swig_destroy__ = _eec.delete_EECEvents

# Register EECEvents in _eec:
_eec.EECEvents_swigregister(EECEvents)

class EECBase(object):
    r"""Proxy of C++ eec::EECBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eec.delete_EECBase
    N = _swig_new_instance_method(_eec.EECBase_N)
    nsym = _swig_new_instance_method(_eec.EECBase_nsym)
    nfeatures = _swig_new_instance_method(_eec.EECBase_nfeatures)
    norm = _swig_new_instance_method(_eec.EECBase_norm)
    use_charges = _swig_new_instance_method(_eec.EECBase_use_charges)
    check_degen = _swig_new_instance_method(_eec.EECBase_check_degen)
    average_verts = _swig_new_instance_method(_eec.EECBase_average_verts)
    num_threads = _swig_new_instance_method(_eec.EECBase_num_threads)
    print_every = _swig_new_instance_method(_eec.EECBase_print_every)
    total_weight = _swig_new_instance_method(_eec.EECBase_total_weight)
    get_omp_chunksize = _swig_new_instance_method(_eec.EECBase_get_omp_chunksize)
    set_omp_chunksize = _swig_new_instance_method(_eec.EECBase_set_omp_chunksize)
    set_print_stream = _swig_new_instance_method(_eec.EECBase_set_print_stream)
    description = _swig_new_instance_method(_eec.EECBase_description)

    def __repr__(self):
        return self.description().decode('utf-8')


    def __getstate__(self):
        return (self.__getstate_internal__(),)

    def __setstate__(self, state):
        self.__init__(*self._default_args)
        try:
            self.__setstate_internal__(state[0])
        except Exception as e:
            raise RuntimeError('issue loading eec - check `eec.get_archive_format()`'
                               ' and `eec.get_compression_mode()`',
                               repr(e))

    compute = _swig_new_instance_method(_eec.EECBase_compute)
    _batch_compute = _swig_new_instance_method(_eec.EECBase__batch_compute)


    def __call__(self, events, weights=None):

        if weights is None:
            weights = _np.ones(len(events), order='C', dtype=_np.double)
        elif len(weights) != len(events):
            raise ValueError('events and weights have different length')

        ncol = 4 if self.use_charges() else 3
        eecevents = EECEvents(len(events), self.nfeatures())
        events_arr = []
        for event,weight in zip(events, weights):
            event = _np.asarray(_np.atleast_2d(event)[:,:ncol], dtype=_np.double, order='C')
            eecevents.append(event, weight)
            events_arr.append(event)

        self._batch_compute(eecevents)


# Register EECBase in _eec:
_eec.EECBase_swigregister(EECBase)

multinomial = _eec.multinomial
class DynamicMultinomial(object):
    r"""Proxy of C++ eec::DynamicMultinomial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, N):
        r"""__init__(DynamicMultinomial self, unsigned int N) -> DynamicMultinomial"""
        _eec.DynamicMultinomial_swiginit(self, _eec.new_DynamicMultinomial(N))
    set_index = _swig_new_instance_method(_eec.DynamicMultinomial_set_index)
    value = _swig_new_instance_method(_eec.DynamicMultinomial_value)
    __swig_destroy__ = _eec.delete_DynamicMultinomial

# Register DynamicMultinomial in _eec:
_eec.DynamicMultinomial_swigregister(DynamicMultinomial)
FACTORIALS = cvar.FACTORIALS

class Multinomial2(object):
    r"""Proxy of C++ eec::Multinomial< 2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Multinomial2 self) -> Multinomial2"""
        _eec.Multinomial2_swiginit(self, _eec.new_Multinomial2())
    N = _swig_new_instance_method(_eec.Multinomial2_N)
    set_index_0 = _swig_new_instance_method(_eec.Multinomial2_set_index_0)
    set_index_final = _swig_new_instance_method(_eec.Multinomial2_set_index_final)
    value = _swig_new_instance_method(_eec.Multinomial2_value)
    set_index_1 = _swig_new_instance_method(_eec.Multinomial2_set_index_1)
    set_index_2 = _swig_new_instance_method(_eec.Multinomial2_set_index_2)
    set_index_3 = _swig_new_instance_method(_eec.Multinomial2_set_index_3)
    set_index_4 = _swig_new_instance_method(_eec.Multinomial2_set_index_4)
    __swig_destroy__ = _eec.delete_Multinomial2

# Register Multinomial2 in _eec:
_eec.Multinomial2_swigregister(Multinomial2)

class Multinomial3(object):
    r"""Proxy of C++ eec::Multinomial< 3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Multinomial3 self) -> Multinomial3"""
        _eec.Multinomial3_swiginit(self, _eec.new_Multinomial3())
    N = _swig_new_instance_method(_eec.Multinomial3_N)
    set_index_0 = _swig_new_instance_method(_eec.Multinomial3_set_index_0)
    set_index_final = _swig_new_instance_method(_eec.Multinomial3_set_index_final)
    value = _swig_new_instance_method(_eec.Multinomial3_value)
    set_index_1 = _swig_new_instance_method(_eec.Multinomial3_set_index_1)
    set_index_2 = _swig_new_instance_method(_eec.Multinomial3_set_index_2)
    set_index_3 = _swig_new_instance_method(_eec.Multinomial3_set_index_3)
    set_index_4 = _swig_new_instance_method(_eec.Multinomial3_set_index_4)
    __swig_destroy__ = _eec.delete_Multinomial3

# Register Multinomial3 in _eec:
_eec.Multinomial3_swigregister(Multinomial3)

class Multinomial4(object):
    r"""Proxy of C++ eec::Multinomial< 4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Multinomial4 self) -> Multinomial4"""
        _eec.Multinomial4_swiginit(self, _eec.new_Multinomial4())
    N = _swig_new_instance_method(_eec.Multinomial4_N)
    set_index_0 = _swig_new_instance_method(_eec.Multinomial4_set_index_0)
    set_index_final = _swig_new_instance_method(_eec.Multinomial4_set_index_final)
    value = _swig_new_instance_method(_eec.Multinomial4_value)
    set_index_1 = _swig_new_instance_method(_eec.Multinomial4_set_index_1)
    set_index_2 = _swig_new_instance_method(_eec.Multinomial4_set_index_2)
    set_index_3 = _swig_new_instance_method(_eec.Multinomial4_set_index_3)
    set_index_4 = _swig_new_instance_method(_eec.Multinomial4_set_index_4)
    __swig_destroy__ = _eec.delete_Multinomial4

# Register Multinomial4 in _eec:
_eec.Multinomial4_swigregister(Multinomial4)

class Multinomial5(object):
    r"""Proxy of C++ eec::Multinomial< 5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Multinomial5 self) -> Multinomial5"""
        _eec.Multinomial5_swiginit(self, _eec.new_Multinomial5())
    N = _swig_new_instance_method(_eec.Multinomial5_N)
    set_index_0 = _swig_new_instance_method(_eec.Multinomial5_set_index_0)
    set_index_final = _swig_new_instance_method(_eec.Multinomial5_set_index_final)
    value = _swig_new_instance_method(_eec.Multinomial5_value)
    set_index_1 = _swig_new_instance_method(_eec.Multinomial5_set_index_1)
    set_index_2 = _swig_new_instance_method(_eec.Multinomial5_set_index_2)
    set_index_3 = _swig_new_instance_method(_eec.Multinomial5_set_index_3)
    set_index_4 = _swig_new_instance_method(_eec.Multinomial5_set_index_4)
    __swig_destroy__ = _eec.delete_Multinomial5

# Register Multinomial5 in _eec:
_eec.Multinomial5_swigregister(Multinomial5)

class Multinomial6(object):
    r"""Proxy of C++ eec::Multinomial< 6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Multinomial6 self) -> Multinomial6"""
        _eec.Multinomial6_swiginit(self, _eec.new_Multinomial6())
    N = _swig_new_instance_method(_eec.Multinomial6_N)
    set_index_0 = _swig_new_instance_method(_eec.Multinomial6_set_index_0)
    set_index_final = _swig_new_instance_method(_eec.Multinomial6_set_index_final)
    value = _swig_new_instance_method(_eec.Multinomial6_value)
    set_index_1 = _swig_new_instance_method(_eec.Multinomial6_set_index_1)
    set_index_2 = _swig_new_instance_method(_eec.Multinomial6_set_index_2)
    set_index_3 = _swig_new_instance_method(_eec.Multinomial6_set_index_3)
    set_index_4 = _swig_new_instance_method(_eec.Multinomial6_set_index_4)
    __swig_destroy__ = _eec.delete_Multinomial6

# Register Multinomial6 in _eec:
_eec.Multinomial6_swigregister(Multinomial6)

class EECLongestSideId(EECBase, EECHist1DId):
    r"""Proxy of C++ eec::EECLongestSide< axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(EECLongestSideId self, unsigned int N, unsigned int nbins, double axis_min, double axis_max, bool norm=True, vectorDouble pt_powers={1}, vectorUnsigned ch_powers={0}, int num_threads=-1, long print_every=-10, bool check_degen=False, bool average_verts=False, bool track_covariance=True, bool variance_bound=True, bool variance_bound_include_overflows=True, bool use_general_eNc=False) -> EECLongestSideId"""
        _eec.EECLongestSideId_swiginit(self, _eec.new_EECLongestSideId(*args, **kwargs))
    __swig_destroy__ = _eec.delete_EECLongestSideId
    description = _swig_new_instance_method(_eec.EECLongestSideId_description)
    load = _swig_new_instance_method(_eec.EECLongestSideId_load)
    save = _swig_new_instance_method(_eec.EECLongestSideId_save)
    __getstate_internal__ = _swig_new_instance_method(_eec.EECLongestSideId___getstate_internal__)
    __setstate_internal__ = _swig_new_instance_method(_eec.EECLongestSideId___setstate_internal__)

    def __repr__(self):
        return self.description().decode('utf-8')

    __imul__ = _swig_new_instance_method(_eec.EECLongestSideId___imul__)

    _default_args = (2, 1, 0.1, 1.0)


# Register EECLongestSideId in _eec:
_eec.EECLongestSideId_swigregister(EECLongestSideId)

class EECLongestSideLog(EECBase, EECHist1DLog):
    r"""Proxy of C++ eec::EECLongestSide< axis::log > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(EECLongestSideLog self, unsigned int N, unsigned int nbins, double axis_min, double axis_max, bool norm=True, vectorDouble pt_powers={1}, vectorUnsigned ch_powers={0}, int num_threads=-1, long print_every=-10, bool check_degen=False, bool average_verts=False, bool track_covariance=True, bool variance_bound=True, bool variance_bound_include_overflows=True, bool use_general_eNc=False) -> EECLongestSideLog"""
        _eec.EECLongestSideLog_swiginit(self, _eec.new_EECLongestSideLog(*args, **kwargs))
    __swig_destroy__ = _eec.delete_EECLongestSideLog
    description = _swig_new_instance_method(_eec.EECLongestSideLog_description)
    load = _swig_new_instance_method(_eec.EECLongestSideLog_load)
    save = _swig_new_instance_method(_eec.EECLongestSideLog_save)
    __getstate_internal__ = _swig_new_instance_method(_eec.EECLongestSideLog___getstate_internal__)
    __setstate_internal__ = _swig_new_instance_method(_eec.EECLongestSideLog___setstate_internal__)

    def __repr__(self):
        return self.description().decode('utf-8')

    __imul__ = _swig_new_instance_method(_eec.EECLongestSideLog___imul__)

    _default_args = (2, 1, 0.1, 1.0)


# Register EECLongestSideLog in _eec:
_eec.EECLongestSideLog_swigregister(EECLongestSideLog)

class EECTriangleOPEIdIdId(EECBase, EECHist3DIdIdId):
    r"""Proxy of C++ eec::EECTriangleOPE< axis::id,axis::id,axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(EECTriangleOPEIdIdId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, bool norm=True, vectorDouble pt_powers={1}, vectorUnsigned ch_powers={0}, int num_threads=-1, long print_every=-10, bool check_degen=False, bool average_verts=False, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECTriangleOPEIdIdId"""
        _eec.EECTriangleOPEIdIdId_swiginit(self, _eec.new_EECTriangleOPEIdIdId(*args, **kwargs))
    description = _swig_new_instance_method(_eec.EECTriangleOPEIdIdId_description)
    load = _swig_new_instance_method(_eec.EECTriangleOPEIdIdId_load)
    save = _swig_new_instance_method(_eec.EECTriangleOPEIdIdId_save)
    __getstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPEIdIdId___getstate_internal__)
    __setstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPEIdIdId___setstate_internal__)

    def __repr__(self):
        return self.description().decode('utf-8')

    __imul__ = _swig_new_instance_method(_eec.EECTriangleOPEIdIdId___imul__)

    _default_args = (1, 0.1, 1.0, 1, 0.1, 1.0, 1, 0., 1.5)

    __swig_destroy__ = _eec.delete_EECTriangleOPEIdIdId

# Register EECTriangleOPEIdIdId in _eec:
_eec.EECTriangleOPEIdIdId_swigregister(EECTriangleOPEIdIdId)

class EECTriangleOPELogIdId(EECBase, EECHist3DLogIdId):
    r"""Proxy of C++ eec::EECTriangleOPE< axis::log,axis::id,axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(EECTriangleOPELogIdId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, bool norm=True, vectorDouble pt_powers={1}, vectorUnsigned ch_powers={0}, int num_threads=-1, long print_every=-10, bool check_degen=False, bool average_verts=False, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECTriangleOPELogIdId"""
        _eec.EECTriangleOPELogIdId_swiginit(self, _eec.new_EECTriangleOPELogIdId(*args, **kwargs))
    description = _swig_new_instance_method(_eec.EECTriangleOPELogIdId_description)
    load = _swig_new_instance_method(_eec.EECTriangleOPELogIdId_load)
    save = _swig_new_instance_method(_eec.EECTriangleOPELogIdId_save)
    __getstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPELogIdId___getstate_internal__)
    __setstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPELogIdId___setstate_internal__)

    def __repr__(self):
        return self.description().decode('utf-8')

    __imul__ = _swig_new_instance_method(_eec.EECTriangleOPELogIdId___imul__)

    _default_args = (1, 0.1, 1.0, 1, 0.1, 1.0, 1, 0., 1.5)

    __swig_destroy__ = _eec.delete_EECTriangleOPELogIdId

# Register EECTriangleOPELogIdId in _eec:
_eec.EECTriangleOPELogIdId_swigregister(EECTriangleOPELogIdId)

class EECTriangleOPEIdLogId(EECBase, EECHist3DIdLogId):
    r"""Proxy of C++ eec::EECTriangleOPE< axis::id,axis::log,axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(EECTriangleOPEIdLogId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, bool norm=True, vectorDouble pt_powers={1}, vectorUnsigned ch_powers={0}, int num_threads=-1, long print_every=-10, bool check_degen=False, bool average_verts=False, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECTriangleOPEIdLogId"""
        _eec.EECTriangleOPEIdLogId_swiginit(self, _eec.new_EECTriangleOPEIdLogId(*args, **kwargs))
    description = _swig_new_instance_method(_eec.EECTriangleOPEIdLogId_description)
    load = _swig_new_instance_method(_eec.EECTriangleOPEIdLogId_load)
    save = _swig_new_instance_method(_eec.EECTriangleOPEIdLogId_save)
    __getstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPEIdLogId___getstate_internal__)
    __setstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPEIdLogId___setstate_internal__)

    def __repr__(self):
        return self.description().decode('utf-8')

    __imul__ = _swig_new_instance_method(_eec.EECTriangleOPEIdLogId___imul__)

    _default_args = (1, 0.1, 1.0, 1, 0.1, 1.0, 1, 0., 1.5)

    __swig_destroy__ = _eec.delete_EECTriangleOPEIdLogId

# Register EECTriangleOPEIdLogId in _eec:
_eec.EECTriangleOPEIdLogId_swigregister(EECTriangleOPEIdLogId)

class EECTriangleOPELogLogId(EECBase, EECHist3DLogLogId):
    r"""Proxy of C++ eec::EECTriangleOPE< axis::log,axis::log,axis::id > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(EECTriangleOPELogLogId self, unsigned int nbins0, double axis0_min, double axis0_max, unsigned int nbins1, double axis1_min, double axis1_max, unsigned int nbins2, double axis2_min, double axis2_max, bool norm=True, vectorDouble pt_powers={1}, vectorUnsigned ch_powers={0}, int num_threads=-1, long print_every=-10, bool check_degen=False, bool average_verts=False, bool track_covariance=False, bool variance_bound=True, bool variance_bound_include_overflows=True) -> EECTriangleOPELogLogId"""
        _eec.EECTriangleOPELogLogId_swiginit(self, _eec.new_EECTriangleOPELogLogId(*args, **kwargs))
    description = _swig_new_instance_method(_eec.EECTriangleOPELogLogId_description)
    load = _swig_new_instance_method(_eec.EECTriangleOPELogLogId_load)
    save = _swig_new_instance_method(_eec.EECTriangleOPELogLogId_save)
    __getstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPELogLogId___getstate_internal__)
    __setstate_internal__ = _swig_new_instance_method(_eec.EECTriangleOPELogLogId___setstate_internal__)

    def __repr__(self):
        return self.description().decode('utf-8')

    __imul__ = _swig_new_instance_method(_eec.EECTriangleOPELogLogId___imul__)

    _default_args = (1, 0.1, 1.0, 1, 0.1, 1.0, 1, 0., 1.5)

    __swig_destroy__ = _eec.delete_EECTriangleOPELogLogId

# Register EECTriangleOPELogLogId in _eec:
_eec.EECTriangleOPELogLogId_swigregister(EECTriangleOPELogLogId)



