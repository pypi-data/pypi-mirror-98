# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class WorkflowBlueprint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'goal': 'str',
        'trigger': 'WorkflowTrigger',
        'created_on': 'int',
        'updated_on': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'goal': 'goal',
        'trigger': 'trigger',
        'created_on': 'created_on',
        'updated_on': 'updated_on'
    }

    def __init__(self, id=None, name=None, description=None, goal=None, trigger=None, created_on=None, updated_on=None, local_vars_configuration=None):  # noqa: E501
        """WorkflowBlueprint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._goal = None
        self._trigger = None
        self._created_on = None
        self._updated_on = None
        self.discriminator = None

        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.goal = goal
        if trigger is not None:
            self.trigger = trigger
        if created_on is not None:
            self.created_on = created_on
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def id(self):
        """Gets the id of this WorkflowBlueprint.  # noqa: E501


        :return: The id of this WorkflowBlueprint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowBlueprint.


        :param id: The id of this WorkflowBlueprint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this WorkflowBlueprint.  # noqa: E501


        :return: The name of this WorkflowBlueprint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowBlueprint.


        :param name: The name of this WorkflowBlueprint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkflowBlueprint.  # noqa: E501


        :return: The description of this WorkflowBlueprint.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowBlueprint.


        :param description: The description of this WorkflowBlueprint.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def goal(self):
        """Gets the goal of this WorkflowBlueprint.  # noqa: E501


        :return: The goal of this WorkflowBlueprint.  # noqa: E501
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this WorkflowBlueprint.


        :param goal: The goal of this WorkflowBlueprint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and goal is None:  # noqa: E501
            raise ValueError("Invalid value for `goal`, must not be `None`")  # noqa: E501

        self._goal = goal

    @property
    def trigger(self):
        """Gets the trigger of this WorkflowBlueprint.  # noqa: E501


        :return: The trigger of this WorkflowBlueprint.  # noqa: E501
        :rtype: WorkflowTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this WorkflowBlueprint.


        :param trigger: The trigger of this WorkflowBlueprint.  # noqa: E501
        :type: WorkflowTrigger
        """

        self._trigger = trigger

    @property
    def created_on(self):
        """Gets the created_on of this WorkflowBlueprint.  # noqa: E501


        :return: The created_on of this WorkflowBlueprint.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this WorkflowBlueprint.


        :param created_on: The created_on of this WorkflowBlueprint.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """Gets the updated_on of this WorkflowBlueprint.  # noqa: E501


        :return: The updated_on of this WorkflowBlueprint.  # noqa: E501
        :rtype: int
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this WorkflowBlueprint.


        :param updated_on: The updated_on of this WorkflowBlueprint.  # noqa: E501
        :type: int
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowBlueprint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowBlueprint):
            return True

        return self.to_dict() != other.to_dict()
