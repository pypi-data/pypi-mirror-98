# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class EventTypeResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CLICKTHRU = "clickthru"
    OPEN = "open"
    BOUNCE = "bounce"
    BOUNCE_AC = "bounce_ac"
    BOUNCE_CR = "bounce_cr"
    BOUNCE_DF = "bounce_df"
    BOUNCE_FM = "bounce_fm"
    BOUNCE_HB = "bounce_hb"
    BOUNCE_MB = "bounce_mb"
    BOUNCE_SB = "bounce_sb"
    BOUNCE_TR = "bounce_tr"
    FORWARD = "forward"
    SKIPPED = "skipped"
    SPAM = "spam"
    SUBSCRIBE = "subscribe"
    UNSUBSCRIBE = "unsubscribe"
    VIEW = "view"
    SHARE = "share"
    IN_QUEUE = "in_queue"
    GENERATING = "generating"
    RECEIVED = "received"
    SENT = "sent"
    SCHEDULE = "schedule"
    UPDATE = "update"
    OTHER = "other"

    allowable_values = [CLICKTHRU, OPEN, BOUNCE, BOUNCE_AC, BOUNCE_CR, BOUNCE_DF, BOUNCE_FM, BOUNCE_HB, BOUNCE_MB, BOUNCE_SB, BOUNCE_TR, FORWARD, SKIPPED, SPAM, SUBSCRIBE, UNSUBSCRIBE, VIEW, SHARE, IN_QUEUE, GENERATING, RECEIVED, SENT, SCHEDULE, UPDATE, OTHER]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """EventTypeResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventTypeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventTypeResponse):
            return True

        return self.to_dict() != other.to_dict()
