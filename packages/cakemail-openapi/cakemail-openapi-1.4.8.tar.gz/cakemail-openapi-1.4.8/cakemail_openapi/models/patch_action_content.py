# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class PatchActionContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subject': 'str',
        'html': 'str',
        'text': 'str',
        'json': 'object',
        'type': 'ContentType',
        'encoding': 'Encoding'
    }

    attribute_map = {
        'subject': 'subject',
        'html': 'html',
        'text': 'text',
        'json': 'json',
        'type': 'type',
        'encoding': 'encoding'
    }

    def __init__(self, subject=None, html=None, text=None, json=None, type=None, encoding=None, local_vars_configuration=None):  # noqa: E501
        """PatchActionContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._subject = None
        self._html = None
        self._text = None
        self._json = None
        self._type = None
        self._encoding = None
        self.discriminator = None

        if subject is not None:
            self.subject = subject
        if html is not None:
            self.html = html
        if text is not None:
            self.text = text
        if json is not None:
            self.json = json
        if type is not None:
            self.type = type
        if encoding is not None:
            self.encoding = encoding

    @property
    def subject(self):
        """Gets the subject of this PatchActionContent.  # noqa: E501


        :return: The subject of this PatchActionContent.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PatchActionContent.


        :param subject: The subject of this PatchActionContent.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                subject is not None and len(subject) < 1):
            raise ValueError("Invalid value for `subject`, length must be greater than or equal to `1`")  # noqa: E501

        self._subject = subject

    @property
    def html(self):
        """Gets the html of this PatchActionContent.  # noqa: E501


        :return: The html of this PatchActionContent.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this PatchActionContent.


        :param html: The html of this PatchActionContent.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                html is not None and len(html) < 1):
            raise ValueError("Invalid value for `html`, length must be greater than or equal to `1`")  # noqa: E501

        self._html = html

    @property
    def text(self):
        """Gets the text of this PatchActionContent.  # noqa: E501


        :return: The text of this PatchActionContent.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PatchActionContent.


        :param text: The text of this PatchActionContent.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                text is not None and len(text) < 1):
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")  # noqa: E501

        self._text = text

    @property
    def json(self):
        """Gets the json of this PatchActionContent.  # noqa: E501


        :return: The json of this PatchActionContent.  # noqa: E501
        :rtype: object
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this PatchActionContent.


        :param json: The json of this PatchActionContent.  # noqa: E501
        :type: object
        """

        self._json = json

    @property
    def type(self):
        """Gets the type of this PatchActionContent.  # noqa: E501


        :return: The type of this PatchActionContent.  # noqa: E501
        :rtype: ContentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PatchActionContent.


        :param type: The type of this PatchActionContent.  # noqa: E501
        :type: ContentType
        """

        self._type = type

    @property
    def encoding(self):
        """Gets the encoding of this PatchActionContent.  # noqa: E501


        :return: The encoding of this PatchActionContent.  # noqa: E501
        :rtype: Encoding
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this PatchActionContent.


        :param encoding: The encoding of this PatchActionContent.  # noqa: E501
        :type: Encoding
        """

        self._encoding = encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchActionContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchActionContent):
            return True

        return self.to_dict() != other.to_dict()
