# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class ListPagesResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'opt_in': 'str',
        'opt_out': 'str',
        'subscribe': 'str',
        'unsubscribe': 'str'
    }

    attribute_map = {
        'opt_in': 'opt_in',
        'opt_out': 'opt_out',
        'subscribe': 'subscribe',
        'unsubscribe': 'unsubscribe'
    }

    def __init__(self, opt_in=None, opt_out=None, subscribe=None, unsubscribe=None, local_vars_configuration=None):  # noqa: E501
        """ListPagesResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._opt_in = None
        self._opt_out = None
        self._subscribe = None
        self._unsubscribe = None
        self.discriminator = None

        if opt_in is not None:
            self.opt_in = opt_in
        if opt_out is not None:
            self.opt_out = opt_out
        if subscribe is not None:
            self.subscribe = subscribe
        if unsubscribe is not None:
            self.unsubscribe = unsubscribe

    @property
    def opt_in(self):
        """Gets the opt_in of this ListPagesResponse.  # noqa: E501


        :return: The opt_in of this ListPagesResponse.  # noqa: E501
        :rtype: str
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this ListPagesResponse.


        :param opt_in: The opt_in of this ListPagesResponse.  # noqa: E501
        :type: str
        """

        self._opt_in = opt_in

    @property
    def opt_out(self):
        """Gets the opt_out of this ListPagesResponse.  # noqa: E501


        :return: The opt_out of this ListPagesResponse.  # noqa: E501
        :rtype: str
        """
        return self._opt_out

    @opt_out.setter
    def opt_out(self, opt_out):
        """Sets the opt_out of this ListPagesResponse.


        :param opt_out: The opt_out of this ListPagesResponse.  # noqa: E501
        :type: str
        """

        self._opt_out = opt_out

    @property
    def subscribe(self):
        """Gets the subscribe of this ListPagesResponse.  # noqa: E501


        :return: The subscribe of this ListPagesResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe):
        """Sets the subscribe of this ListPagesResponse.


        :param subscribe: The subscribe of this ListPagesResponse.  # noqa: E501
        :type: str
        """

        self._subscribe = subscribe

    @property
    def unsubscribe(self):
        """Gets the unsubscribe of this ListPagesResponse.  # noqa: E501


        :return: The unsubscribe of this ListPagesResponse.  # noqa: E501
        :rtype: str
        """
        return self._unsubscribe

    @unsubscribe.setter
    def unsubscribe(self, unsubscribe):
        """Sets the unsubscribe of this ListPagesResponse.


        :param unsubscribe: The unsubscribe of this ListPagesResponse.  # noqa: E501
        :type: str
        """

        self._unsubscribe = unsubscribe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListPagesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListPagesResponse):
            return True

        return self.to_dict() != other.to_dict()
