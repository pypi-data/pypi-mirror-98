{"version":3,"sources":["python/mcmc_monitor/extensions/chainstable/ChainsTable/ChainsTable.tsx","python/mcmc_monitor/extensions/chainstable/ChainsTable/ChainsTableView.tsx","python/mcmc_monitor/extensions/chainstable/chainstable.tsx","python/mcmc_monitor/extensions/common/NiceTable.tsx"],"names":["ParameterStats","_data","parameterName","value","this","count","sum","sumsqr","Object","keys","sort","a","NaN","ChainsTable","iterations","runSelection","runSelectionDispatch","useMemo","overallParameterStats","x","forEach","it","chainId","pname","iterationCount","parameterStats","parameters","addParameterValue","chains","map","k","Number","parameterStyle","useCallback","selectedParameterNames","includes","color","fontWeight","columns","style","key","label","element","parameterNames","rows","ch","ii","columnValues","val","getMean","toPrecision","text","handleSelectedRowsChanged","selectedRowIds","type","selectedChainIds","selectedRowKeys","NiceTable","selectionMode","onSelectedRowKeysChanged","ChainsTableView","run","activate","context","registerPlugin","name","component","DeleteRowButton","title","rowKey","onDeleteRow","handleClick","onClick","ConfirmDeleteRowButton","onConfirmDeleteRow","handleCancel","EditRowButton","onEditRow","makeCell","undefined","deleteRowLabel","editRowLabel","noConfirmDeleteRow","selectedRowKeysObj","useState","confirmDeleteRowKey","setConfirmDeleteRowKey","handleClickRow","filter","concat","toString","handleConfirmDeleteRow","confirmed","handleDeleteRow","handleEditRow","className","width","col","row","checked"],"mappings":"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","file":"static/js/11.11146ad0.chunk.js","sourcesContent":["import { FunctionComponent, useCallback, useMemo } from \"react\"\nimport NiceTable from \"../../common/NiceTable\"\nimport { Iteration } from \"../../pluginInterface\"\nimport { RunSelection, RunSelectionDispatch } from \"../../pluginInterface/RunSelection\"\n\nclass ParameterStats {\n    _data: {[key: string]: {count: number, sum: number, sumsqr: number}} = {}\n    addParameterValue(parameterName: string, value: number) {\n        if (!(parameterName in this._data)) {\n            this._data[parameterName] = {count: 0, sum: 0, sumsqr: 0}\n        }\n        this._data[parameterName].count ++\n        this._data[parameterName].sum += value\n        this._data[parameterName].sumsqr += value * value\n    }\n    parameterNames() {\n        return Object.keys(this._data).sort()\n    }\n    parameterStats(parameterName: string) {\n        return {...this._data[parameterName]}\n    }\n    getMean(parameterName: string) {\n        const a = this._data[parameterName]\n        if (!a) return NaN\n        if (!a.count) return NaN\n        return a.sum / a.count\n    }\n}\n\ntype Props = {\n    iterations: Iteration[]\n    runSelection: RunSelection\n    runSelectionDispatch: RunSelectionDispatch\n}\n\nconst ChainsTable: FunctionComponent<Props> = ({iterations, runSelection, runSelectionDispatch}) => {\n    const {chains, overallParameterStats} = useMemo(() => {\n        const overallParameterStats = new ParameterStats()\n        const x: {[key: string]: {iterationCount: number, parameterStats: ParameterStats}} = {}\n        iterations.forEach(it => {\n            const chainId = it.chainId\n            if (!((chainId + '') in x)) {\n                x[chainId + ''] = {iterationCount: 1, parameterStats: new ParameterStats()}\n            }\n            x[chainId + ''].iterationCount ++\n            for (let pname in it.parameters) {\n                x[chainId + ''].parameterStats.addParameterValue(pname, it.parameters[pname])\n            }\n            for (let pname in it.parameters) {\n                overallParameterStats.addParameterValue(pname, it.parameters[pname])\n            }\n        })\n        const chainIds = Object.keys(x).sort().map(k => Number(k))\n        return {\n            chains: chainIds.map(chainId => ({\n                chainId,\n                ...x[chainId + '']\n            })),\n            overallParameterStats\n        }\n    }, [iterations])\n    const parameterStyle = useCallback((pname: string): React.CSSProperties => {\n        if (runSelection.selectedParameterNames.includes(pname)) return {color: 'darkgreen', fontWeight: 'bold'}\n        else return {}\n    }, [runSelection.selectedParameterNames])\n    const columns = useMemo(() => {\n        const style: React.CSSProperties = {fontWeight: 'bold'}\n        return [\n            {\n                key: 'chainId',\n                label: 'Chain',\n                element: <span style={style}><br />Chain</span>\n            },\n            {\n                key: 'iterationCount',\n                label: 'Num. iterations',\n                element: <span style={style}><br />Num. iterations</span>\n            },\n            ...overallParameterStats.parameterNames().map(pname => ({\n                key: 'param__' + pname,\n                label: 'mean ' + pname,\n                element: <span style={{...style, ...parameterStyle(pname)}}>mean<br />{pname}</span>\n            }))\n        ]\n    }, [overallParameterStats, parameterStyle])\n    \n    const rows = useMemo(() => (\n        chains.map((ch, ii) => {\n            const columnValues: {[key: string]: any} = {\n                chainId: ch.chainId + '',\n                iterationCount: ch.iterationCount\n            }\n            ch.parameterStats.parameterNames().forEach(pname => {\n                const val = Number(ch.parameterStats.getMean(pname)).toPrecision(4)\n                columnValues['param__' + pname] = {\n                    text: val + '',\n                    element: <span style={{...parameterStyle(pname)}}>{val}</span>\n                }\n            })\n            return {\n                key: ch.chainId + '',\n                columnValues\n            }\n        })\n    ), [chains, parameterStyle])\n    const handleSelectedRowsChanged = useCallback((selectedRowIds: string[]) => {\n        runSelectionDispatch({\n            type: 'setSelectedChainIds',\n            selectedChainIds: selectedRowIds.map(x => Number(x))\n        })\n    }, [runSelectionDispatch])\n    const selectedRowKeys = useMemo(() => (runSelection.selectedChainIds.map(x => (x + ''))), [runSelection.selectedChainIds])\n    return (\n        <NiceTable\n            rows={rows}\n            columns={columns}\n            selectionMode=\"multiple\"\n            selectedRowKeys={selectedRowKeys}\n            onSelectedRowKeysChanged={handleSelectedRowsChanged}\n        />\n    )\n}\n\nexport default ChainsTable","import { FunctionComponent } from \"react\";\nimport { RunViewProps } from \"../../pluginInterface/RunViewPlugin\";\nimport ChainsTable from \"./ChainsTable\";\n\nconst ChainsTableView: FunctionComponent<RunViewProps> = ({ run, iterations, runSelection, runSelectionDispatch }) => {\n    return (\n        <ChainsTable\n            iterations={iterations || []}\n            runSelection={runSelection}\n            runSelectionDispatch={runSelectionDispatch}\n        />\n    )\n}\n\nexport default ChainsTableView","import { MMExtensionContext } from \"../pluginInterface\";\nimport ChainsTableView from \"./ChainsTable/ChainsTableView\";\n\nexport function activate(context: MMExtensionContext) {\n    context.registerPlugin({\n        type: 'RunView',\n        name: 'ChainsTable',\n        label: 'Chains Table',\n        component: ChainsTableView\n    })\n}","import { Checkbox, IconButton, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport { Delete, Edit } from \"@material-ui/icons\";\nimport React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport './NiceTable.css';\n\ninterface Row {\n    key: string\n    columnValues: {[key: string]: any}\n}\ninterface Col {\n    key: string\n    label: string\n    element?: any\n}\n\ninterface Props {\n    rows: Row[],\n    columns: Col[],\n    onDeleteRow?: (key: string) => void,\n    deleteRowLabel?: string,\n    onEditRow?: (key: string) => void,\n    editRowLabel?: string,\n    selectionMode?: 'none' | 'single' | 'multiple',\n    selectedRowKeys?: string[],\n    onSelectedRowKeysChanged?: ((keys: string[]) => void),\n    noConfirmDeleteRow?: boolean\n}\n\nconst NiceTable: FunctionComponent<Props> = ({\n    rows,\n    columns,\n    onDeleteRow=undefined,\n    deleteRowLabel=undefined,\n    onEditRow=undefined,\n    editRowLabel=undefined,\n    selectionMode='none', // none, single, multiple\n    selectedRowKeys=[],\n    onSelectedRowKeysChanged=undefined,\n    noConfirmDeleteRow\n}) => {\n    const selectedRowKeysObj = useMemo(() => {\n        const x: {[key: string]: boolean} = {};\n        selectedRowKeys.forEach((key) => {x[key] = true});\n        return x\n    }, [selectedRowKeys])\n    const [confirmDeleteRowKey, setConfirmDeleteRowKey] = useState<string | null>(null)\n    const handleClickRow = useCallback((key: string) => {\n        if (!onSelectedRowKeysChanged || false) return;\n        \n        if (selectionMode === 'single') {\n            if (!(key in selectedRowKeysObj) || !selectedRowKeysObj[key]) {\n                onSelectedRowKeysChanged([key + '']);\n            } else {\n                onSelectedRowKeysChanged([]);\n            }\n        }\n        else if (selectionMode === 'multiple') {\n            // todo: write this logic. Note, we'll need to also pass in the event to get the ctrl/shift modifiers\n            onSelectedRowKeysChanged(\n                Object.keys(selectedRowKeysObj)\n                    // eslint-disable-next-line eqeqeq\n                    .filter(k => k != key && selectedRowKeysObj[k])\n                    .concat(selectedRowKeysObj[key] ? [] : [key.toString()])\n            );\n        }\n    }, [onSelectedRowKeysChanged, selectionMode, selectedRowKeysObj])\n    const handleConfirmDeleteRow = useCallback((rowKey: string, confirmed: boolean) => {\n        if (confirmed) {\n            onDeleteRow && onDeleteRow(rowKey)\n        }\n        setConfirmDeleteRowKey(null)\n    }, [onDeleteRow])\n    const handleDeleteRow = useCallback((rowKey: string) => {\n        if (noConfirmDeleteRow) {\n            handleConfirmDeleteRow(rowKey, true)\n        }\n        else {\n            setConfirmDeleteRowKey(rowKey)\n        }\n    }, [noConfirmDeleteRow, handleConfirmDeleteRow])\n    const handleEditRow = useCallback((rowKey: string) => {\n        onEditRow && onEditRow(rowKey)\n    }, [onEditRow])\n    return (\n        <Table className=\"NiceTable\">\n            <TableHead>\n                <TableRow>\n                    <TableCell key=\"_first\" style={{ width: 0 }} />\n                    {\n                        columns.map(col => (\n                            <TableCell key={col.key}>\n                                {\n                                    col.element ? (col.element) : (<span>{col.label}</span>)\n                                }\n                            </TableCell>\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    rows.map(row => (\n                        <TableRow key={row.key}>\n                            <TableCell>\n                                {\n                                    onDeleteRow && ((confirmDeleteRowKey === row.key) ? (\n                                        <ConfirmDeleteRowButton\n                                            title={deleteRowLabel || ''}\n                                            onConfirmDeleteRow={handleConfirmDeleteRow}\n                                            rowKey={row.key}\n                                        />\n                                    ) : (\n                                        (\n                                            <DeleteRowButton\n                                                title={deleteRowLabel || ''}\n                                                onDeleteRow={handleDeleteRow}\n                                                rowKey={row.key}\n                                            />\n                                        )\n                                    ))\n                                }\n                                {\n                                    onEditRow && (\n                                        <EditRowButton\n                                            title={editRowLabel || ''}\n                                            onEditRow={handleEditRow}\n                                            rowKey={row.key}\n                                        />\n                                    )\n                                }\n                                {\n                                    selectionMode !== 'none' && (\n                                        <Checkbox\n                                            checked={selectedRowKeysObj[row.key] || false}\n                                            onClick={() => handleClickRow(row.key)}\n                                        />\n                                    )\n                                }\n                            </TableCell>\n                            {\n                                columns.map(col => (\n                                    <TableCell key={col.key}>\n                                        <span>{makeCell(row.columnValues[col.key])}</span>\n                                    </TableCell>\n                                ))\n                            }\n                        </TableRow>\n                    ))\n                }\n            </TableBody>\n        </Table>\n    );\n};\n\nconst DeleteRowButton: FunctionComponent<{title: string, rowKey: string, onDeleteRow?: (key: string) => void}> = ({ title, rowKey, onDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onDeleteRow && onDeleteRow(rowKey)\n    }, [onDeleteRow, rowKey])\n    return (\n        <IconButton\n            title={title}\n            onClick={handleClick}\n        ><Delete /></IconButton>\n    )\n}\n\nconst ConfirmDeleteRowButton: FunctionComponent<{title: string, rowKey: string, onConfirmDeleteRow?: (key: string, confirmed: boolean) => void}> = ({ title, rowKey, onConfirmDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, true)\n    }, [onConfirmDeleteRow, rowKey])\n    const handleCancel = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, false)\n    }, [onConfirmDeleteRow, rowKey])\n    return (\n        <span>\n            Confirm delete?\n            <IconButton\n                title={title}\n                onClick={handleClick}\n            ><Delete /></IconButton>\n            <IconButton\n                title={\"Cancel\"}\n                onClick={handleCancel}\n            >&#10006;</IconButton>\n        </span>\n    )\n}\n\nconst EditRowButton: FunctionComponent<{title: string, rowKey: string, onEditRow?: (key: string) => void}> = ({title, rowKey, onEditRow}) => {\n    return (\n        <IconButton\n            title={title}\n            onClick={() => onEditRow && onEditRow(rowKey)}\n        >\n            <Edit />\n        </IconButton>\n    )\n}\n\nconst makeCell = (x: any) => {\n    // eslint-disable-next-line eqeqeq\n    if (x == 0) return x;  // !'0' is true, but we shouldn't null out actual 0s\n    if (!x) return '';\n    if (typeof(x) == \"object\") {\n        if (x.element) return x.element;\n        else return x.text || '';\n    }\n    else {\n        return x;\n    }\n}\n\nexport default NiceTable;"],"sourceRoot":""}