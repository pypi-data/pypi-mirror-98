{"version":3,"sources":["python/mcmc_monitor/extensions/pluginInterface/WorkspaceRoute.ts","App.tsx","registerExtensions.ts","reportWebVitals.ts","index.tsx"],"names":["workspaceRouteReducer","s","a","type","page","App","version","mainWindowPlugin","usePlugins","filter","p","name","Error","serverInfo","useContext","LabboxProviderContext","location","useLocation","history","useHistory","workspaceUri","useMemo","workspace","QueryString","parse","search","slice","defaultFeedId","startsWith","undefined","workspaceRoute","pathname","runId","split","workspaceRouteDispatch","useCallback","newRoute","path","push","className","component","registerExtensions","context","activate_chainstable","activate","activate_iterationsplot","activate_iterationstable","activate_mainwindow","activate_workspaceview","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","apiConfig","webSocketUrl","window","hostname","config","webSocketPort","baseSha1Url","httpPort","baseFeedUrl","extensionContext","createExtensionContext","ReactDOM","render","document","getElementById"],"mappings":"oMAgBA,kCAAO,IAAMA,EAAwB,SAACC,EAAmBC,GACrD,MAAe,aAAXA,EAAEC,KACKD,EAAEE,KAEDH,I,oLC+CDI,MA3Df,YAA4C,IAA9BC,EAA6B,EAA7BA,QAENC,EADUC,cACiBC,QAAO,SAAAC,GAAC,MAAgB,eAAXA,EAAEC,QAAwB,GACxE,IAAKJ,EAAkB,MAAMK,MAAM,sCAHM,IAKjCC,EAAeC,qBAAWC,KAA1BF,WAEFG,EAAWC,cACXC,EAAUC,cACVC,EAAeC,mBAAQ,WAC3B,IACMC,EADQC,IAAYC,MAAMR,EAASS,OAAOC,MAAM,IAC7BJ,WAAwB,UAC3CK,EAAa,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAYc,cAElC,OADqBL,EAAUM,WAAW,gBAAkBN,EAAaK,EAAa,sBAAkBA,EAAlB,YAAmCL,QAAcO,IAEtI,CAACb,EAASS,OAAQZ,IAEfiB,EAAiCT,mBAAQ,WAC7C,OAAIL,EAASe,SAASH,WAAW,SACxB,CAACxB,KAAM,MAAO4B,MAAOhB,EAASe,SAASE,MAAM,KAAK,IAAM,IAGxD,CAAC7B,KAAM,UAEf,CAACY,EAASe,WAIPG,EAAyBC,uBAC7B,SAACjC,GACC,IAAMkC,EAA2BpC,YAAsB8B,EAAgB5B,GACnEmC,EAAO,IAETA,EADoB,SAAlBD,EAAShC,KACJ,IAEkB,QAAlBgC,EAAShC,KACZ,eAAWgC,EAASJ,OAGjB,IAELhB,EAASe,WAAaM,GACxBnB,EAAQoB,KAAR,2BAAiBtB,GAAjB,IAA2Be,SAAUM,OAGzC,CAACP,EAAgBZ,EAASF,IAG5B,OACE,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAChC,EAAiBiC,UAAlB,CACOpB,eAAcU,iBAAgBI,yBAAwB5B,iB,wCC3CtDmC,EAbS,uCAAG,WAAOC,GAAP,uBAAAxC,EAAA,sEACwB,4DADxB,wBACNyC,EADM,EAChBC,UACcF,GAFE,SAG2B,4DAH3B,wBAGNG,EAHM,EAGhBD,UACiBF,GAJD,UAK4B,0EAL5B,yBAKNI,EALM,EAKhBF,UACkBF,GANF,UAOuB,4DAPvB,yBAONK,EAPM,EAOhBH,UACaF,GARG,UAS0B,kEAT1B,kBASNM,EATM,EAShBJ,UACgBF,GAVA,4CAAH,sDCUTO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,EAAY,CAChBC,aAAa,QAAD,OAAUC,OAAO5C,SAAS6C,SAA1B,YAAsCC,EAAOC,eACzDC,YAAY,UAAD,OAAYJ,OAAO5C,SAAS6C,SAA5B,YAAwCC,EAAOG,SAA/C,SACXC,YAAY,UAAD,OAAYN,OAAO5C,SAAS6C,SAA5B,YAAwCC,EAAOG,SAA/C,UAGPE,EAAmBC,cACzB3B,EAAmB0B,GAAkBf,MAAK,WACxCiB,IAASC,OAEL,cAAC,IAAD,CACEH,iBAAkBA,EAClBT,UAAWA,EAFb,SAIE,cAAC,IAAD,UAAe,cAAC,EAAD,CAAKpD,QAAQ,eAGhCiE,SAASC,eAAe,YAO5BvB,M","file":"static/js/main.b9a2d8c4.chunk.js","sourcesContent":["export type WorkspaceMainPage = {\n    page: 'main'\n}\n\nexport type WorkspaceRunPage = {\n    page: 'run'\n    runId: string\n}\n\nexport type WorkspacePage = WorkspaceMainPage | WorkspaceRunPage\n\nexport type WorkspaceRoute = WorkspacePage\n\nexport type WorkspaceRouteAction = {type: 'gotoPage', page: WorkspacePage}\nexport type WorkspaceRouteDispatch = (a: WorkspaceRouteAction) => void\n\nexport const workspaceRouteReducer = (s: WorkspaceRoute, a: WorkspaceRouteAction): WorkspaceRoute => {\n    if (a.type === 'gotoPage') {\n        return a.page\n    }\n    else return s\n}","import { LabboxProviderContext, usePlugins } from 'labbox';\nimport QueryString from 'querystring';\nimport React, { useCallback, useContext, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport './App.css';\nimport { MainWindowPlugin, MMPlugin, WorkspaceRoute } from './python/mcmc_monitor/extensions/pluginInterface';\nimport { WorkspaceRouteAction, workspaceRouteReducer } from './python/mcmc_monitor/extensions/pluginInterface/WorkspaceRoute';\n\nfunction App({version}: {version: string}) {\n  const plugins = usePlugins<MMPlugin>()\n  const mainWindowPlugin = plugins.filter(p => (p.name === 'MainWindow'))[0] as any as MainWindowPlugin\n  if (!mainWindowPlugin) throw Error('Unable to find main window plugin.')\n\n  const { serverInfo } = useContext(LabboxProviderContext)\n\n  const location = useLocation()\n  const history = useHistory()\n  const workspaceUri = useMemo(() => {\n    const query = QueryString.parse(location.search.slice(1));\n    const workspace = (query.workspace as string) || 'default'\n    const defaultFeedId = serverInfo?.defaultFeedId\n    const workspaceUri = workspace.startsWith('workspace://') ? workspace : (defaultFeedId ? `workspace://${defaultFeedId}/${workspace}` : undefined)\n    return workspaceUri\n  }, [location.search, serverInfo])\n\n  const workspaceRoute: WorkspaceRoute = useMemo(() => {\n    if (location.pathname.startsWith('/run/')) {\n      return {page: 'run', runId: location.pathname.split('/')[2] || ''}\n    }\n    else {\n      return {page: 'main'}\n    }\n  }, [location.pathname])\n  \n  // const [workspaceRoute, workspaceRouteDispatch] = useReducer(workspaceRouteReducer, {page: 'main'})\n\n  const workspaceRouteDispatch = useCallback(\n    (a: WorkspaceRouteAction) => {\n      const newRoute: WorkspaceRoute = workspaceRouteReducer(workspaceRoute, a)\n      let path = '/'\n      if (newRoute.page === 'main') {\n        path = '/'\n      }\n      else if (newRoute.page === 'run') {\n        path = `/run/${newRoute.runId}`\n      }\n      else {\n        path = '/'\n      }\n      if (location.pathname !== path) {\n        history.push({...location, pathname: path})\n      }\n    },\n    [workspaceRoute, history, location]\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <mainWindowPlugin.component\n          {...{workspaceUri, workspaceRoute, workspaceRouteDispatch, version}}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This file was automatically generated by jinjaroot. Do not edit directly. See the .jinjaroot dir.\n\nimport { MMExtensionContext } from './python/mcmc_monitor/extensions/pluginInterface'\n\nconst registerExtensions = async (context: MMExtensionContext) => {\n    const {activate: activate_chainstable} = await import('./python/mcmc_monitor/extensions/chainstable/chainstable')\n    activate_chainstable(context)\n    const {activate: activate_iterationsplot} = await import('./python/mcmc_monitor/extensions/iterationsplot/iterationsplot')\n    activate_iterationsplot(context)\n    const {activate: activate_iterationstable} = await import('./python/mcmc_monitor/extensions/iterationstable/iterationstable')\n    activate_iterationstable(context)\n    const {activate: activate_mainwindow} = await import('./python/mcmc_monitor/extensions/mainwindow/mainwindow')\n    activate_mainwindow(context)\n    const {activate: activate_workspaceview} = await import('./python/mcmc_monitor/extensions/workspaceview/workspaceview')\n    activate_workspaceview(context)\n    }\n\nexport default registerExtensions","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This file was automatically generated by jinjaroot. Do not edit directly. See the .jinjaroot dir.\nimport { createExtensionContext, LabboxProvider } from 'labbox';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport config from './config.json';\nimport './index.css';\nimport { MMPlugin } from './python/mcmc_monitor/extensions/pluginInterface';\nimport registerExtensions from './registerExtensions';\nimport reportWebVitals from './reportWebVitals';\n\nconst apiConfig = {\n  webSocketUrl: `ws://${window.location.hostname}:${config.webSocketPort}`,\n  baseSha1Url: `http://${window.location.hostname}:${config.httpPort}/sha1`,\n  baseFeedUrl: `http://${window.location.hostname}:${config.httpPort}/feed`\n}\n\nconst extensionContext = createExtensionContext<MMPlugin>()\nregisterExtensions(extensionContext).then(() => {\n  ReactDOM.render(\n    // <React.StrictMode>\n      <LabboxProvider\n        extensionContext={extensionContext}\n        apiConfig={apiConfig}\n      >\n        <BrowserRouter><App version=\"0.1.10\" /></BrowserRouter>\n      </LabboxProvider>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n  );  \n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}