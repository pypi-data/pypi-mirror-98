{"version":3,"sources":["python/mcmc_monitor/extensions/iterationsplot/IterationsPlot/IterationsPlot.tsx","python/mcmc_monitor/extensions/iterationsplot/IterationsPlot/RadioChoices.tsx","python/mcmc_monitor/extensions/iterationsplot/IterationsPlot/RunParameterSelector.tsx","python/mcmc_monitor/extensions/iterationsplot/IterationsPlot/IterationsPlotView.tsx","python/mcmc_monitor/extensions/iterationsplot/iterationsplot.tsx"],"names":["onlineMean","x","y","i","length","onlineStdev","M","map","a","ii","onlineVariance","Math","sqrt","IterationsPlot","iterations","paramKey","markerColor","iteration0","parameterKeys","useMemo","Object","keys","parameters","includes","JSON","stringify","values","it","valuesMean","valuesStdev","data","v","dataMean","dataStdevPlus","dataStdevMinus","margin","height","width","stroke","strokeStyle","fill","strokeWidth","text","xPercent","yPercent","title","RadioChoices","label","value","onSetValue","options","FormControl","component","FormLabel","RadioGroup","row","onChange","evt","target","opt","FormControlLabel","control","Radio","disabled","RunParameterSelector","runSelection","runSelectionDispatch","parameterNames","pNames","forEach","k","push","sort","handleSetValue","useCallback","type","selectedParameterNames","pname","IterationsPlotView","run","chains","chainId","selectedChainIds","Number","chain","activate","context","registerPlugin","name"],"mappings":"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","file":"static/js/13.c734e6d1.chunk.js","sourcesContent":["import { FunctionComponent, useMemo } from \"react\";\nimport { ChartLabel, LineSeries, MarkSeries, XAxis, XYPlot, YAxis } from 'react-vis';\nimport 'react-vis/dist/style.css';\nimport { Iteration } from \"../../pluginInterface\";\n\ntype Props = {\n    iterations: Iteration[]\n    paramKey: string\n    markerColor: string\n}\n\nconst IterationsPlot: FunctionComponent<Props> = ({iterations, paramKey, markerColor}) => {\n    const iteration0 = iterations[0]\n    const parameterKeys = useMemo(() => {\n        if (!iteration0) return []\n        return Object.keys(iteration0.parameters || {})\n    }, [iteration0])\n    if (!parameterKeys.includes(paramKey)) return <div>Not found: {paramKey} <pre>{JSON.stringify(parameterKeys)}</pre></div>\n    const values = iterations.map(it => it.parameters[paramKey])\n    const valuesMean = onlineMean(values)\n    const valuesStdev = onlineStdev(values)\n    const data = values.map((v, ii) => ({\n        x: ii,\n        y: v\n    }))\n    const dataMean = valuesMean.map((v, ii) => ({\n        x: ii,\n        y: v\n    }))\n    const dataStdevPlus = valuesStdev.map((v, ii) => ({\n        x: ii,\n        y: valuesMean[ii] + v\n    }))\n    const dataStdevMinus = valuesStdev.map((v, ii) => ({\n        x: ii,\n        y: valuesMean[ii] - v\n    }))\n    return (\n        <XYPlot\n            margin={70}\n            height={400}\n            width={1000}\n        >\n            <LineSeries\n                data={dataMean}\n                stroke=\"blue\"\n            />\n            <LineSeries\n                data={dataStdevMinus}\n                stroke=\"pink\"\n                strokeStyle=\"dashed\"\n            />\n            <LineSeries\n                data={dataStdevPlus}\n                stroke=\"pink\"\n                strokeStyle=\"dashed\"\n            />\n            <MarkSeries\n                data={data}\n                fill=\"none\"\n                stroke={markerColor}\n                strokeWidth={1}\n            />\n            <ChartLabel\n                text={`${paramKey} vs iteration`}\n                xPercent={0.5}\n                yPercent={-0.05}\n            />\n            \n            <XAxis title=\"Iteration number\" />\n            <YAxis title={paramKey} />\n        </XYPlot>\n    )\n}\n\nconst onlineMean = (x: number[]) => {\n    const y = [...x]\n    for (let i = 1; i < x.length; i++) {\n        y[i] = y[i-1] + (x[i]- y[i-1]) / i\n    }\n    return y\n}\n\nconst onlineVariance = (x: number[]) => {\n    const y = onlineMean(x)\n    const M = [...x]\n    M[0] = 0\n    for (let i = 1; i < x.length; i++) {\n        M[i] = M[i-1] + (x[i] - y[i-1]) * (x[i] - y[i])\n    }\n    return M.map((a, ii) => (ii > 0) ? (a) / ii : 0)\n}\n\nconst onlineStdev = (x: number[]) => {\n    return onlineVariance(x).map(a => Math.sqrt(a))\n}\n\nexport default IterationsPlot","import { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\nimport React, { FunctionComponent } from 'react';\n\ninterface Props {\n    label: string\n    value: string\n    onSetValue: (v: string) => void\n    options: {\n        label: string\n        value: string\n        disabled?: boolean\n    }[]\n}\n\nconst RadioChoices: FunctionComponent<Props> = ({ label, value, onSetValue, options }) => {\n    return (\n        <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">{label}</FormLabel>\n            <RadioGroup row value={value} onChange={(evt) => onSetValue(evt.target.value)}>\n                {\n                    options.map(opt => (\n                        <FormControlLabel\n                            key={opt.label}\n                            value={opt.value}\n                            control={<Radio />}\n                            label={opt.label}\n                            disabled={opt.disabled ? true : false}\n                        />\n                    ))\n                }\n            </RadioGroup>\n        </FormControl>\n    );\n}\n\nexport default RadioChoices;","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { Iteration } from '../../pluginInterface';\nimport { RunSelection, RunSelectionDispatch } from '../../pluginInterface/RunSelection';\nimport RadioChoices from './RadioChoices';\n\ntype Props = {\n    runSelection: RunSelection\n    runSelectionDispatch: RunSelectionDispatch\n    iterations?: Iteration[]\n}\n\nconst RunParameterSelector: FunctionComponent<Props> = ({iterations, runSelection, runSelectionDispatch}) => {\n    const parameterNames = useMemo(() => {\n        const pNames: string[] = []\n        ;(iterations || []).forEach((it: Iteration) => {\n            for (let k in it.parameters) {\n                if (!pNames.includes(k)) pNames.push(k)\n            }\n        })\n        pNames.sort()\n        return pNames\n    }, [iterations])\n    const handleSetValue = useCallback((v: string) => {\n        runSelectionDispatch({type: 'setSelectedParameterNames', selectedParameterNames: [v]})\n    }, [runSelectionDispatch])\n    if (parameterNames.length === 0) return <div>No parameters</div>\n    return (\n        <RadioChoices\n            label=\"Select parameter to view\"\n            value={runSelection.selectedParameterNames[0] || ''}\n            onSetValue={handleSetValue}\n            options={parameterNames.map(pname => ({\n                label: pname,\n                value: pname\n            }))}\n        />\n    )\n}\n\nexport default RunParameterSelector","import { FunctionComponent, useMemo } from \"react\";\nimport { Iteration } from \"../../pluginInterface\";\nimport { RunViewProps } from \"../../pluginInterface/RunViewPlugin\";\nimport IterationsPlot from \"./IterationsPlot\";\nimport RunParameterSelector from \"./RunParameterSelector\";\n\nconst IterationsPlotView: FunctionComponent<RunViewProps> = ({ run, iterations, runSelection, runSelectionDispatch }) => {\n    const chains = useMemo((): {chainId: number, iterations: Iteration[]}[] => {\n        const x: {[key: string]: {iterations: Iteration[]}} = {}\n        ;(iterations || []).forEach((it: Iteration) => {\n            const chainId = it.chainId\n            if (runSelection.selectedChainIds.includes(chainId)) {\n                if (!((chainId + '') in x)) {\n                    x[chainId + ''] = {iterations: []}\n                }\n                x[chainId + ''].iterations.push(it)\n            }\n        })\n        const chainIds = Object.keys(x).sort().map(k => Number(k))\n        return chainIds.map(chainId => ({\n            chainId,\n            ...x[chainId + '']\n        }))\n    }, [iterations, runSelection.selectedChainIds])\n    return (\n        <div>\n            <RunParameterSelector {...{iterations, runSelection, runSelectionDispatch}}/>\n            {\n                (chains.length > 0) ? (\n                    chains.map(chain => (\n                        <div>\n                            <h3>Chain {chain.chainId}</h3>\n                            {\n                                runSelection.selectedParameterNames.map(pname => (\n                                    <IterationsPlot\n                                        iterations={chain.iterations}\n                                        paramKey={pname}\n                                        markerColor={'darkgreen'}\n                                    />\n                                ))\n                            }\n                        </div>\n                    ))\n                ) : (\n                    <div>Select one or more chains to view iteration plots</div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default IterationsPlotView","import { MMExtensionContext } from \"../pluginInterface\";\nimport IterationsPlotView from \"./IterationsPlot/IterationsPlotView\";\n\nexport function activate(context: MMExtensionContext) {\n    context.registerPlugin({\n        type: 'RunView',\n        name: 'IterationsPlot',\n        label: 'Iterations Plot',\n        component: IterationsPlotView\n    })\n}"],"sourceRoot":""}