{"version":3,"sources":["python/mcmc_monitor/extensions/common/misc.ts","python/mcmc_monitor/extensions/pluginInterface/index.ts","python/mcmc_monitor/extensions/common/Hyperlink.tsx","python/mcmc_monitor/extensions/workspaceview/WorkspaceView/MainPage.tsx","python/mcmc_monitor/extensions/pluginInterface/RunSelection.tsx","python/mcmc_monitor/extensions/workspaceview/WorkspaceView/RunPage.tsx","python/mcmc_monitor/extensions/workspaceview/WorkspaceView/WorkspaceView.tsx","python/mcmc_monitor/extensions/workspaceview/workspaceview.tsx","python/mcmc_monitor/extensions/common/NiceTable.tsx"],"names":["formatTimestamp","timestamp","opts","x","Date","elapsed","Number","useAgoForRecent","moment","fromNow","format","isIteration","type","chainId","err","useWorkspaceViewPlugins","plugins","usePlugins","useMemo","filter","p","map","useRunViewPlugins","Hyperlink","props","style","color","cursor","textDecoration","onClick","children","RunLink","run","label","handleClick","useCallback","MainPage","workspace","workspaceDispatch","workspaceRouteDispatch","handleRunClick","page","runId","columns","key","rows","runs","slice","reverse","r","columnValues","text","element","marginRight","whiteSpace","runLabel","handleDeleteRun","runIds","NiceTable","onDeleteRow","noConfirmDeleteRow","initialRunSelection","selectedChainIds","selectedParameterNames","runSelectionReducer","s","a","RunPage","uri","feedUri","undefined","subfeedName","list","split","join","parseSubfeedUri","runFeedUri","runSubfeedName","useSubfeed","messages","loadedInitialMessages","iterations","msg","handleBack","rvPlugins","useReducer","runSelection","runSelectionDispatch","paddingBottom","component","name","WorkspaceView","workspaceRoute","Error","activate","context","registerPlugin","DeleteRowButton","title","rowKey","ConfirmDeleteRowButton","onConfirmDeleteRow","handleCancel","EditRowButton","onEditRow","makeCell","deleteRowLabel","editRowLabel","selectionMode","selectedRowKeys","onSelectedRowKeysChanged","selectedRowKeysObj","forEach","useState","confirmDeleteRowKey","setConfirmDeleteRowKey","handleClickRow","Object","keys","k","concat","toString","handleConfirmDeleteRow","confirmed","handleDeleteRow","handleEditRow","className","width","col","row","checked"],"mappings":"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","file":"static/js/9.2b1e45b6.chunk.js","sourcesContent":["import moment from 'moment';\n\ntype Opts = {\n    useAgoForRecent?: boolean\n}\n\nexport const formatTimestamp = (timestamp: number, opts: Opts={}) => {\n    const x = new Date(timestamp * 1000);\n    const elapsed = Number(new Date()) - Number(x)\n    if ((opts.useAgoForRecent) && (elapsed < 1000 * 60 * 24)) {\n        return moment(x).fromNow()\n    }\n    return moment(x).format('MM/DD/YYYY HH:mm:ss')\n}","import { BasePlugin, ExtensionContext, usePlugins } from \"labbox\";\nimport { FunctionComponent, useMemo } from \"react\";\nimport { RunViewPlugin } from \"./RunViewPlugin\";\nimport { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute';\nimport { WorkspaceViewPlugin } from \"./WorkspaceViewPlugin\";\nexport { workspaceRouteReducer } from './WorkspaceRoute';\nexport type { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute';\nexport type { WorkspaceViewProps } from './WorkspaceViewPlugin';\n\nexport type MainWindowProps = {\n    workspaceUri: string | undefined\n    workspaceRoute: WorkspaceRoute\n    workspaceRouteDispatch: WorkspaceRouteDispatch\n    version: string\n}\nexport interface MainWindowPlugin extends BasePlugin {\n    type: 'MainWindow'\n    component: FunctionComponent<MainWindowProps>\n}\n\nexport type MMPlugin = MainWindowPlugin | WorkspaceViewPlugin | RunViewPlugin\n\nexport type MMExtensionContext = ExtensionContext<MMPlugin>\n\nexport type Iteration = {\n    type: 'iteration'\n    timestamp: number\n    chainId: number\n    parameters: {[key: string]: any}\n}\nexport const isIteration = (x: any): x is Iteration => {\n    try {\n        if ((x.type === 'iteration') && (x.timestamp) && (x.chainId)) return true\n        else return false\n    }\n    catch(err) {\n        return false\n    }\n}\n\nexport const useWorkspaceViewPlugins = (): WorkspaceViewPlugin[] => {\n    const plugins = usePlugins<MMPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'WorkspaceView')).map(p => (p as any as WorkspaceViewPlugin))\n    ), [plugins])\n}\nexport const useMainWindowPlugins = (): MainWindowPlugin[] => {\n    const plugins = usePlugins<MMPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'MainWindow')).map(p => (p as any as MainWindowPlugin))\n    ), [plugins])\n}\nexport const useRunViewPlugins = (): RunViewPlugin[] => {\n    const plugins = usePlugins<MMPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'RunView')).map(p => (p as any as RunViewPlugin))\n    ), [plugins])\n}","import React, { FunctionComponent } from 'react';\n\nconst Hyperlink: FunctionComponent<{onClick: () => void}> = (props) => {\n    let style0 = {\n        color: 'gray',\n        cursor: 'pointer',\n        textDecoration: 'underline'\n    };\n    return (\n        <span\n            style={style0}\n            onClick={props.onClick}\n        >\n            {props.children}\n        </span>\n    );\n}\n\nexport default Hyperlink","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport Hyperlink from '../../common/Hyperlink';\nimport { formatTimestamp } from '../../common/misc';\nimport NiceTable from '../../common/NiceTable';\nimport { WorkspaceRouteDispatch } from '../../pluginInterface';\nimport { WorkspaceDispatch, WorkspaceMCMCRun, WorkspaceState } from '../../pluginInterface/Workspace';\n\ntype Props = {\n    workspace: WorkspaceState\n    workspaceDispatch: WorkspaceDispatch\n    workspaceRouteDispatch: WorkspaceRouteDispatch\n}\n\nconst RunLink: FunctionComponent<{run: WorkspaceMCMCRun, onClick: (run: WorkspaceMCMCRun) => void, label: string}> = ({run, onClick, label}) => {\n    const handleClick = useCallback(() => {\n        onClick(run)\n    }, [onClick, run])\n    return <Hyperlink onClick={handleClick}>{label}</Hyperlink>\n}\n\nconst MainPage: FunctionComponent<Props> = ({workspace, workspaceDispatch, workspaceRouteDispatch}) => {\n    const handleRunClick = useCallback((run: WorkspaceMCMCRun) => {\n        workspaceRouteDispatch({type: 'gotoPage', page: {page: 'run', runId: run.runId}})\n    }, [workspaceRouteDispatch])\n    const columns = useMemo(() => ([\n        {\n            key: 'runId',\n            label: 'Run'\n        },\n        {\n            key: 'label',\n            label: 'Label'\n        },\n        {\n            key: 'timestamp',\n            label: 'Timestamp'\n        }\n    ]), [])\n    const rows = useMemo(() => (workspace.runs.slice().reverse().map(r => ({\n        key: r.runId,\n        columnValues: {\n            runId: {\n                text: r.runId,\n                element: <span style={{marginRight: 5, whiteSpace: 'nowrap'}}><RunLink run={r} label={r.runId} onClick={handleRunClick} /></span>\n            },\n            label: {\n                text: r.runLabel,\n                element: <span style={{marginRight: 5, whiteSpace: 'nowrap'}}><RunLink run={r} label={r.runLabel} onClick={handleRunClick} /></span>\n            },\n            timestamp: {\n                text: r.timestamp ? formatTimestamp(r.timestamp, {useAgoForRecent: true}) : ''\n            }\n        }\n    }))), [workspace.runs, handleRunClick])\n    const handleDeleteRun = useCallback((runId: string) => {\n        workspaceDispatch({type: 'DeleteRuns', runIds: [runId]})\n    }, [workspaceDispatch])\n    return (\n        <div>\n            <NiceTable\n                rows={rows}\n                columns={columns}\n                onDeleteRow={handleDeleteRun}\n                noConfirmDeleteRow={true}\n            />\n        </div>\n    )\n}\n\nexport default MainPage","export type RunSelection = {\n    selectedChainIds: number[]\n    selectedParameterNames: string[]\n}\n\nexport const initialRunSelection: RunSelection = {\n    selectedChainIds: [],\n    selectedParameterNames: []\n}\n\nexport type SetSelectedChainIdsAction = {\n    type: 'setSelectedChainIds'\n    selectedChainIds: number[]\n}\n\nexport type SetSelectedParameterNamesAction = {\n    type: 'setSelectedParameterNames'\n    selectedParameterNames: string[]\n}\n\nexport type RunSelectionAction = SetSelectedChainIdsAction | SetSelectedParameterNamesAction\n\nexport type RunSelectionDispatch = (a: RunSelectionAction) => void\n\nexport const runSelectionReducer = (s: RunSelection, a: RunSelectionAction) => {\n    switch (a.type) {\n        case 'setSelectedChainIds': return {\n            ...s,\n            selectedChainIds: a.selectedChainIds\n        }\n        case 'setSelectedParameterNames': return {\n            ...s,\n            selectedParameterNames: a.selectedParameterNames\n        }\n        default: return s\n    }\n}","import { useSubfeed } from 'labbox';\nimport React, { FunctionComponent, useCallback, useMemo, useReducer } from 'react';\nimport Hyperlink from '../../common/Hyperlink';\nimport { isIteration, Iteration, useRunViewPlugins, WorkspaceRouteDispatch } from '../../pluginInterface';\nimport { initialRunSelection, runSelectionReducer } from '../../pluginInterface/RunSelection';\nimport { WorkspaceState } from '../../pluginInterface/Workspace';\n\n\n\nconst parseSubfeedUri = (uri: string | undefined) => {\n    if (!uri) return {feedUri: undefined, subfeedName: undefined}\n    const list = uri.split('/')\n    return {feedUri: list.slice(0, 3).join('/'), subfeedName: list[3]}\n}\n\nconst RunPage:  FunctionComponent<{workspace: WorkspaceState, runId: string, workspaceRouteDispatch: WorkspaceRouteDispatch}> = ({workspace, runId, workspaceRouteDispatch}) => {\n    const run = useMemo(() => (workspace.runs.filter(r => (r.runId === runId))[0]), [runId, workspace.runs])\n    const {feedUri: runFeedUri, subfeedName: runSubfeedName} = parseSubfeedUri(run?.uri)\n    const {messages, loadedInitialMessages} = useSubfeed({feedUri: runFeedUri, subfeedName: runSubfeedName})\n    const iterations: Iteration[] | undefined = useMemo(() => (loadedInitialMessages ? messages.filter(msg => isIteration(msg)): undefined), [messages, loadedInitialMessages]) \n\n    const handleBack = useCallback(() => {\n        workspaceRouteDispatch({type: 'gotoPage', page: {page: 'main'}})\n    }, [workspaceRouteDispatch])\n\n    const rvPlugins = useRunViewPlugins()\n\n    const [runSelection, runSelectionDispatch] = useReducer(runSelectionReducer, initialRunSelection)\n\n    if (!run) return <div>Run not found: {runId}</div>\n\n    return (\n        <div>\n            <Hyperlink onClick={handleBack}>Back</Hyperlink>\n            {\n                loadedInitialMessages ? (\n                    <span>\n                        {\n                            rvPlugins.map(p => (\n                                <div style={{paddingBottom: 30}}>\n                                    <p.component\n                                        key={p.name}\n                                        run={run}\n                                        iterations={iterations}\n                                        runSelection={runSelection}\n                                        runSelectionDispatch={runSelectionDispatch}\n                                    />\n                                </div>\n                            ))\n                        }\n                    </span>\n                ) : (\n                    <div>Loading...</div>\n                )\n            }\n        </div>\n    )\n}\n\n// const IterationsTable: FunctionComponent<{iterations: Iteration[]}> = ({iterations}) => {\n//     const iteration0 = iterations[0]\n//     const parameterKeys = useMemo(() => {\n//         if (!iteration0) return []\n//         return Object.keys(iteration0.parameters || {})\n//     }, [iteration0])\n//     const rows = useMemo(() => (\n//         iterations.map((it, ii) => {\n//             const columnValues: {[key: string]: any} = {\n//                 timestamp: formatTimestamp(it.timestamp),\n//                 chainId: it.chainId + ''\n//             }\n//             for (let pk of parameterKeys) {\n//                 columnValues['param-' + pk] = it.parameters[pk]\n//             }\n//             return {\n//                 key: ii + '',\n//                 columnValues\n//             }\n//         })\n//     ), [iterations, parameterKeys])\n//     const columns = useMemo(() => (\n//         [{\n//             key: 'chainId',\n//             label: 'Chain'\n//         },\n//         {\n//             key: 'timestamp',\n//             label: 'Timestamp'\n//         }, ...parameterKeys.map(pk => ({\n//             key: 'param-' + pk,\n//             label: pk\n//         }))]\n//     ), [parameterKeys])\n//     return (\n//         <NiceTable\n//             rows={rows}\n//             columns={columns}\n//         />\n//     )\n// }\n\nexport default RunPage","import React, { FunctionComponent } from 'react';\nimport { WorkspaceViewProps } from '../../pluginInterface';\nimport MainPage from './MainPage';\nimport RunPage from './RunPage';\n\n\nconst WorkspaceView: FunctionComponent<WorkspaceViewProps> = ({ workspace, workspaceRoute, workspaceDispatch, workspaceRouteDispatch }) => {\n    if (workspaceRoute.page === 'main') {\n        return <MainPage workspace={workspace} workspaceDispatch={workspaceDispatch} workspaceRouteDispatch={workspaceRouteDispatch} />\n    }\n    else if (workspaceRoute.page === 'run') {\n        return <RunPage workspace={workspace} runId={workspaceRoute.runId} workspaceRouteDispatch={workspaceRouteDispatch} />\n    }\n    else {\n        throw Error(`Invalid page`)\n    }\n}\n\nexport default WorkspaceView","import { MMExtensionContext } from \"../pluginInterface\";\nimport WorkspaceView from \"./WorkspaceView/WorkspaceView\";\n\nexport function activate(context: MMExtensionContext) {\n    context.registerPlugin({\n        type: 'WorkspaceView',\n        name: 'WorkspaceView',\n        label: 'Workspace View',\n        component: WorkspaceView\n    })\n}","import { Checkbox, IconButton, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport { Delete, Edit } from \"@material-ui/icons\";\nimport React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport './NiceTable.css';\n\ninterface Row {\n    key: string\n    columnValues: {[key: string]: any}\n}\ninterface Col {\n    key: string\n    label: string\n    element?: any\n}\n\ninterface Props {\n    rows: Row[],\n    columns: Col[],\n    onDeleteRow?: (key: string) => void,\n    deleteRowLabel?: string,\n    onEditRow?: (key: string) => void,\n    editRowLabel?: string,\n    selectionMode?: 'none' | 'single' | 'multiple',\n    selectedRowKeys?: string[],\n    onSelectedRowKeysChanged?: ((keys: string[]) => void),\n    noConfirmDeleteRow?: boolean\n}\n\nconst NiceTable: FunctionComponent<Props> = ({\n    rows,\n    columns,\n    onDeleteRow=undefined,\n    deleteRowLabel=undefined,\n    onEditRow=undefined,\n    editRowLabel=undefined,\n    selectionMode='none', // none, single, multiple\n    selectedRowKeys=[],\n    onSelectedRowKeysChanged=undefined,\n    noConfirmDeleteRow\n}) => {\n    const selectedRowKeysObj = useMemo(() => {\n        const x: {[key: string]: boolean} = {};\n        selectedRowKeys.forEach((key) => {x[key] = true});\n        return x\n    }, [selectedRowKeys])\n    const [confirmDeleteRowKey, setConfirmDeleteRowKey] = useState<string | null>(null)\n    const handleClickRow = useCallback((key: string) => {\n        if (!onSelectedRowKeysChanged || false) return;\n        \n        if (selectionMode === 'single') {\n            if (!(key in selectedRowKeysObj) || !selectedRowKeysObj[key]) {\n                onSelectedRowKeysChanged([key + '']);\n            } else {\n                onSelectedRowKeysChanged([]);\n            }\n        }\n        else if (selectionMode === 'multiple') {\n            // todo: write this logic. Note, we'll need to also pass in the event to get the ctrl/shift modifiers\n            onSelectedRowKeysChanged(\n                Object.keys(selectedRowKeysObj)\n                    // eslint-disable-next-line eqeqeq\n                    .filter(k => k != key && selectedRowKeysObj[k])\n                    .concat(selectedRowKeysObj[key] ? [] : [key.toString()])\n            );\n        }\n    }, [onSelectedRowKeysChanged, selectionMode, selectedRowKeysObj])\n    const handleConfirmDeleteRow = useCallback((rowKey: string, confirmed: boolean) => {\n        if (confirmed) {\n            onDeleteRow && onDeleteRow(rowKey)\n        }\n        setConfirmDeleteRowKey(null)\n    }, [onDeleteRow])\n    const handleDeleteRow = useCallback((rowKey: string) => {\n        if (noConfirmDeleteRow) {\n            handleConfirmDeleteRow(rowKey, true)\n        }\n        else {\n            setConfirmDeleteRowKey(rowKey)\n        }\n    }, [noConfirmDeleteRow, handleConfirmDeleteRow])\n    const handleEditRow = useCallback((rowKey: string) => {\n        onEditRow && onEditRow(rowKey)\n    }, [onEditRow])\n    return (\n        <Table className=\"NiceTable\">\n            <TableHead>\n                <TableRow>\n                    <TableCell key=\"_first\" style={{ width: 0 }} />\n                    {\n                        columns.map(col => (\n                            <TableCell key={col.key}>\n                                {\n                                    col.element ? (col.element) : (<span>{col.label}</span>)\n                                }\n                            </TableCell>\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    rows.map(row => (\n                        <TableRow key={row.key}>\n                            <TableCell>\n                                {\n                                    onDeleteRow && ((confirmDeleteRowKey === row.key) ? (\n                                        <ConfirmDeleteRowButton\n                                            title={deleteRowLabel || ''}\n                                            onConfirmDeleteRow={handleConfirmDeleteRow}\n                                            rowKey={row.key}\n                                        />\n                                    ) : (\n                                        (\n                                            <DeleteRowButton\n                                                title={deleteRowLabel || ''}\n                                                onDeleteRow={handleDeleteRow}\n                                                rowKey={row.key}\n                                            />\n                                        )\n                                    ))\n                                }\n                                {\n                                    onEditRow && (\n                                        <EditRowButton\n                                            title={editRowLabel || ''}\n                                            onEditRow={handleEditRow}\n                                            rowKey={row.key}\n                                        />\n                                    )\n                                }\n                                {\n                                    selectionMode !== 'none' && (\n                                        <Checkbox\n                                            checked={selectedRowKeysObj[row.key] || false}\n                                            onClick={() => handleClickRow(row.key)}\n                                        />\n                                    )\n                                }\n                            </TableCell>\n                            {\n                                columns.map(col => (\n                                    <TableCell key={col.key}>\n                                        <span>{makeCell(row.columnValues[col.key])}</span>\n                                    </TableCell>\n                                ))\n                            }\n                        </TableRow>\n                    ))\n                }\n            </TableBody>\n        </Table>\n    );\n};\n\nconst DeleteRowButton: FunctionComponent<{title: string, rowKey: string, onDeleteRow?: (key: string) => void}> = ({ title, rowKey, onDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onDeleteRow && onDeleteRow(rowKey)\n    }, [onDeleteRow, rowKey])\n    return (\n        <IconButton\n            title={title}\n            onClick={handleClick}\n        ><Delete /></IconButton>\n    )\n}\n\nconst ConfirmDeleteRowButton: FunctionComponent<{title: string, rowKey: string, onConfirmDeleteRow?: (key: string, confirmed: boolean) => void}> = ({ title, rowKey, onConfirmDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, true)\n    }, [onConfirmDeleteRow, rowKey])\n    const handleCancel = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, false)\n    }, [onConfirmDeleteRow, rowKey])\n    return (\n        <span>\n            Confirm delete?\n            <IconButton\n                title={title}\n                onClick={handleClick}\n            ><Delete /></IconButton>\n            <IconButton\n                title={\"Cancel\"}\n                onClick={handleCancel}\n            >&#10006;</IconButton>\n        </span>\n    )\n}\n\nconst EditRowButton: FunctionComponent<{title: string, rowKey: string, onEditRow?: (key: string) => void}> = ({title, rowKey, onEditRow}) => {\n    return (\n        <IconButton\n            title={title}\n            onClick={() => onEditRow && onEditRow(rowKey)}\n        >\n            <Edit />\n        </IconButton>\n    )\n}\n\nconst makeCell = (x: any) => {\n    // eslint-disable-next-line eqeqeq\n    if (x == 0) return x;  // !'0' is true, but we shouldn't null out actual 0s\n    if (!x) return '';\n    if (typeof(x) == \"object\") {\n        if (x.element) return x.element;\n        else return x.text || '';\n    }\n    else {\n        return x;\n    }\n}\n\nexport default NiceTable;"],"sourceRoot":""}