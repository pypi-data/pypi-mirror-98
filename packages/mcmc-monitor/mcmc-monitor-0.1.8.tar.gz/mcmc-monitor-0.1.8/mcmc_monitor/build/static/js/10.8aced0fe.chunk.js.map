{"version":3,"sources":["python/mcmc_monitor/extensions/common/misc.ts","python/mcmc_monitor/extensions/common/Expandable.tsx","python/mcmc_monitor/extensions/iterationstable/IterationsTable/IterationsTable.tsx","python/mcmc_monitor/extensions/iterationstable/IterationsTable/IterationsTableView.tsx","python/mcmc_monitor/extensions/iterationstable/iterationstable.tsx","python/mcmc_monitor/extensions/common/NiceTable.tsx"],"names":["formatTimestamp","timestamp","opts","x","Date","elapsed","Number","useAgoForRecent","moment","fromNow","format","Expandable","props","Accordion","TransitionProps","unmountOnExit","undefined","defaultExpanded","AccordionSummary","icon","style","paddingRight","paddingTop","label","AccordionDetails","width","children","IterationsTable","iterations","iteration0","parameterKeys","useMemo","Object","keys","parameters","rows","map","it","ii","columnValues","chainId","pk","key","columns","NiceTable","IterationsTableView","run","chains","forEach","push","sort","k","chain","height","overflow","activate","context","registerPlugin","type","name","component","DeleteRowButton","title","rowKey","onDeleteRow","handleClick","useCallback","onClick","ConfirmDeleteRowButton","onConfirmDeleteRow","handleCancel","EditRowButton","onEditRow","makeCell","element","text","deleteRowLabel","editRowLabel","selectionMode","selectedRowKeys","onSelectedRowKeysChanged","noConfirmDeleteRow","selectedRowKeysObj","useState","confirmDeleteRowKey","setConfirmDeleteRowKey","handleClickRow","filter","concat","toString","handleConfirmDeleteRow","confirmed","handleDeleteRow","handleEditRow","className","col","row","checked"],"mappings":"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","file":"static/js/10.8aced0fe.chunk.js","sourcesContent":["import moment from 'moment';\n\ntype Opts = {\n    useAgoForRecent?: boolean\n}\n\nexport const formatTimestamp = (timestamp: number, opts: Opts={}) => {\n    const x = new Date(timestamp * 1000);\n    const elapsed = Number(new Date()) - Number(x)\n    if ((opts.useAgoForRecent) && (elapsed < 1000 * 60 * 24)) {\n        return moment(x).fromNow()\n    }\n    return moment(x).format('MM/DD/YYYY HH:mm:ss')\n}","import { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core'\nimport React, { FunctionComponent } from 'react'\n\ninterface Props {\n    label: string\n    defaultExpanded?: boolean\n    icon?: JSX.Element\n    unmountOnExit?: boolean // default is true\n}\n\nexport const Expandable: FunctionComponent<Props> = (props) => {\n    return (\n        <Accordion TransitionProps={{ unmountOnExit: props.unmountOnExit !== undefined ? props.unmountOnExit : true }} defaultExpanded={props.defaultExpanded}>\n            <AccordionSummary>\n                {props.icon && <span style={{ paddingRight: 10 }}>{props.icon}</span>}<span style={{ paddingTop: 3 }}>{props.label}</span>\n            </AccordionSummary>\n            <AccordionDetails>\n                <div style={{ width: \"100%\" }}>\n                    {props.children}\n                </div>\n            </AccordionDetails>\n        </Accordion>\n    )\n}\n\nexport default Expandable","import { FunctionComponent, useMemo } from \"react\"\nimport { formatTimestamp } from \"../../common/misc\"\nimport NiceTable from \"../../common/NiceTable\"\nimport { Iteration } from \"../../pluginInterface\"\n\nconst IterationsTable: FunctionComponent<{iterations: Iteration[]}> = ({iterations}) => {\n    const iteration0 = iterations[0]\n    const parameterKeys = useMemo(() => {\n        if (!iteration0) return []\n        return Object.keys(iteration0.parameters || {})\n    }, [iteration0])\n    const rows = useMemo(() => (\n        iterations.map((it, ii) => {\n            const columnValues: {[key: string]: any} = {\n                timestamp: formatTimestamp(it.timestamp),\n                chainId: it.chainId + ''\n            }\n            for (let pk of parameterKeys) {\n                columnValues['param-' + pk] = it.parameters[pk]\n            }\n            return {\n                key: ii + '',\n                columnValues\n            }\n        })\n    ), [iterations, parameterKeys])\n    const columns = useMemo(() => (\n        [{\n            key: 'chainId',\n            label: 'Chain'\n        },\n        {\n            key: 'timestamp',\n            label: 'Timestamp'\n        }, ...parameterKeys.map(pk => ({\n            key: 'param-' + pk,\n            label: pk\n        }))]\n    ), [parameterKeys])\n    return (\n        <NiceTable\n            rows={rows}\n            columns={columns}\n        />\n    )\n}\n\nexport default IterationsTable","import { FunctionComponent, useMemo } from \"react\";\nimport Expandable from \"../../common/Expandable\";\nimport { Iteration } from \"../../pluginInterface\";\nimport { RunViewProps } from \"../../pluginInterface/RunViewPlugin\";\nimport IterationsTable from \"./IterationsTable\";\n\nconst IterationsTableView: FunctionComponent<RunViewProps> = ({ run, iterations }) => {\n    const chains = useMemo((): {chainId: number, iterations: Iteration[]}[] => {\n        const x: {[key: string]: {iterations: Iteration[]}} = {}\n        ;(iterations || []).forEach((it: Iteration) => {\n            const chainId = it.chainId\n            if ((chainId + '') in x) {\n                x[chainId + ''].iterations.push(it)\n            }\n            else {\n                x[chainId + ''] = {iterations: []}\n            }\n        })\n        const chainIds = Object.keys(x).sort().map(k => Number(k))\n        return chainIds.map(chainId => ({\n            chainId,\n            ...x[chainId + '']\n        }))\n    }, [iterations])\n    return (\n        <div>\n            {\n                chains.map(chain => (\n                    <Expandable key={chain.chainId} label={`Iterations table for chain ${chain.chainId}`} unmountOnExit={true}>\n                        <div style={{height: 300, overflow: 'auto'}}>\n                            <IterationsTable\n                                iterations={chain.iterations}\n                            />\n                        </div>\n                    </Expandable>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default IterationsTableView","import { MMExtensionContext } from \"../pluginInterface\";\nimport IterationsTableView from \"./IterationsTable/IterationsTableView\";\n\nexport function activate(context: MMExtensionContext) {\n    context.registerPlugin({\n        type: 'RunView',\n        name: 'IterationsTable',\n        label: 'Iterations Table',\n        component: IterationsTableView\n    })\n}","import { Checkbox, IconButton, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport { Delete, Edit } from \"@material-ui/icons\";\nimport React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport './NiceTable.css';\n\ninterface Row {\n    key: string\n    columnValues: {[key: string]: any}\n}\ninterface Col {\n    key: string\n    label: string\n    element?: any\n}\n\ninterface Props {\n    rows: Row[],\n    columns: Col[],\n    onDeleteRow?: (key: string) => void,\n    deleteRowLabel?: string,\n    onEditRow?: (key: string) => void,\n    editRowLabel?: string,\n    selectionMode?: 'none' | 'single' | 'multiple',\n    selectedRowKeys?: string[],\n    onSelectedRowKeysChanged?: ((keys: string[]) => void),\n    noConfirmDeleteRow?: boolean\n}\n\nconst NiceTable: FunctionComponent<Props> = ({\n    rows,\n    columns,\n    onDeleteRow=undefined,\n    deleteRowLabel=undefined,\n    onEditRow=undefined,\n    editRowLabel=undefined,\n    selectionMode='none', // none, single, multiple\n    selectedRowKeys=[],\n    onSelectedRowKeysChanged=undefined,\n    noConfirmDeleteRow\n}) => {\n    const selectedRowKeysObj = useMemo(() => {\n        const x: {[key: string]: boolean} = {};\n        selectedRowKeys.forEach((key) => {x[key] = true});\n        return x\n    }, [selectedRowKeys])\n    const [confirmDeleteRowKey, setConfirmDeleteRowKey] = useState<string | null>(null)\n    const handleClickRow = useCallback((key: string) => {\n        if (!onSelectedRowKeysChanged || false) return;\n        \n        if (selectionMode === 'single') {\n            if (!(key in selectedRowKeysObj) || !selectedRowKeysObj[key]) {\n                onSelectedRowKeysChanged([key + '']);\n            } else {\n                onSelectedRowKeysChanged([]);\n            }\n        }\n        else if (selectionMode === 'multiple') {\n            // todo: write this logic. Note, we'll need to also pass in the event to get the ctrl/shift modifiers\n            onSelectedRowKeysChanged(\n                Object.keys(selectedRowKeysObj)\n                    // eslint-disable-next-line eqeqeq\n                    .filter(k => k != key && selectedRowKeysObj[k])\n                    .concat(selectedRowKeysObj[key] ? [] : [key.toString()])\n            );\n        }\n    }, [onSelectedRowKeysChanged, selectionMode, selectedRowKeysObj])\n    const handleConfirmDeleteRow = useCallback((rowKey: string, confirmed: boolean) => {\n        if (confirmed) {\n            onDeleteRow && onDeleteRow(rowKey)\n        }\n        setConfirmDeleteRowKey(null)\n    }, [onDeleteRow])\n    const handleDeleteRow = useCallback((rowKey: string) => {\n        if (noConfirmDeleteRow) {\n            handleConfirmDeleteRow(rowKey, true)\n        }\n        else {\n            setConfirmDeleteRowKey(rowKey)\n        }\n    }, [noConfirmDeleteRow, handleConfirmDeleteRow])\n    const handleEditRow = useCallback((rowKey: string) => {\n        onEditRow && onEditRow(rowKey)\n    }, [onEditRow])\n    return (\n        <Table className=\"NiceTable\">\n            <TableHead>\n                <TableRow>\n                    <TableCell key=\"_first\" style={{ width: 0 }} />\n                    {\n                        columns.map(col => (\n                            <TableCell key={col.key}>\n                                {\n                                    col.element ? (col.element) : (<span>{col.label}</span>)\n                                }\n                            </TableCell>\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    rows.map(row => (\n                        <TableRow key={row.key}>\n                            <TableCell>\n                                {\n                                    onDeleteRow && ((confirmDeleteRowKey === row.key) ? (\n                                        <ConfirmDeleteRowButton\n                                            title={deleteRowLabel || ''}\n                                            onConfirmDeleteRow={handleConfirmDeleteRow}\n                                            rowKey={row.key}\n                                        />\n                                    ) : (\n                                        (\n                                            <DeleteRowButton\n                                                title={deleteRowLabel || ''}\n                                                onDeleteRow={handleDeleteRow}\n                                                rowKey={row.key}\n                                            />\n                                        )\n                                    ))\n                                }\n                                {\n                                    onEditRow && (\n                                        <EditRowButton\n                                            title={editRowLabel || ''}\n                                            onEditRow={handleEditRow}\n                                            rowKey={row.key}\n                                        />\n                                    )\n                                }\n                                {\n                                    selectionMode !== 'none' && (\n                                        <Checkbox\n                                            checked={selectedRowKeysObj[row.key] || false}\n                                            onClick={() => handleClickRow(row.key)}\n                                        />\n                                    )\n                                }\n                            </TableCell>\n                            {\n                                columns.map(col => (\n                                    <TableCell key={col.key}>\n                                        <span>{makeCell(row.columnValues[col.key])}</span>\n                                    </TableCell>\n                                ))\n                            }\n                        </TableRow>\n                    ))\n                }\n            </TableBody>\n        </Table>\n    );\n};\n\nconst DeleteRowButton: FunctionComponent<{title: string, rowKey: string, onDeleteRow?: (key: string) => void}> = ({ title, rowKey, onDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onDeleteRow && onDeleteRow(rowKey)\n    }, [onDeleteRow, rowKey])\n    return (\n        <IconButton\n            title={title}\n            onClick={handleClick}\n        ><Delete /></IconButton>\n    )\n}\n\nconst ConfirmDeleteRowButton: FunctionComponent<{title: string, rowKey: string, onConfirmDeleteRow?: (key: string, confirmed: boolean) => void}> = ({ title, rowKey, onConfirmDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, true)\n    }, [onConfirmDeleteRow, rowKey])\n    const handleCancel = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, false)\n    }, [onConfirmDeleteRow, rowKey])\n    return (\n        <span>\n            Confirm delete?\n            <IconButton\n                title={title}\n                onClick={handleClick}\n            ><Delete /></IconButton>\n            <IconButton\n                title={\"Cancel\"}\n                onClick={handleCancel}\n            >&#10006;</IconButton>\n        </span>\n    )\n}\n\nconst EditRowButton: FunctionComponent<{title: string, rowKey: string, onEditRow?: (key: string) => void}> = ({title, rowKey, onEditRow}) => {\n    return (\n        <IconButton\n            title={title}\n            onClick={() => onEditRow && onEditRow(rowKey)}\n        >\n            <Edit />\n        </IconButton>\n    )\n}\n\nconst makeCell = (x: any) => {\n    // eslint-disable-next-line eqeqeq\n    if (x == 0) return x;  // !'0' is true, but we shouldn't null out actual 0s\n    if (!x) return '';\n    if (typeof(x) == \"object\") {\n        if (x.element) return x.element;\n        else return x.text || '';\n    }\n    else {\n        return x;\n    }\n}\n\nexport default NiceTable;"],"sourceRoot":""}