{"version":3,"sources":["python/mcmc_monitor/extensions/pluginInterface/index.ts","python/mcmc_monitor/extensions/pluginInterface/misc.ts","python/mcmc_monitor/extensions/pluginInterface/Workspace.ts","python/mcmc_monitor/extensions/mainwindow/MainWindow/HitherJobMonitorControl.tsx","python/mcmc_monitor/extensions/mainwindow/MainWindow/logo.svg","python/mcmc_monitor/extensions/mainwindow/MainWindow/ServerStatusControl.tsx","python/mcmc_monitor/extensions/mainwindow/MainWindow/SettingsControl.tsx","python/mcmc_monitor/extensions/mainwindow/MainWindow/ApplicationBar.tsx","python/mcmc_monitor/extensions/mainwindow/MainWindow/SettingsWindow.tsx","python/mcmc_monitor/extensions/mainwindow/MainWindow/MainWindow.tsx","python/mcmc_monitor/extensions/mainwindow/mainwindow.tsx"],"names":["isIteration","x","type","timestamp","chainId","err","useWorkspaceViewPlugins","plugins","usePlugins","useMemo","filter","p","map","useRunViewPlugins","parseWorkspaceUri","workspaceUri","feedUri","undefined","workspaceName","startsWith","a","split","feedId","workspaceReducer","s","runs","run","r","runIds","includes","runId","HitherJobMonitorControl","useState","hitherJobs","setHitherJobs","hither","useContext","HitherContext","useEffect","timer1","setInterval","hj","getHitherJobs","clearInterval","pendingJobs","j","status","runningJobs","finishedJobs","erroredJobs","numPending","length","numRunning","numFinished","numErrored","title","errored","style","color","fontFamily","ServerStatusControl","LabboxProviderContext","websocketStatus","onReconnectWebsocket","icon","Sync","CheckCircleOutline","SyncProblem","Error","handleClick","useCallback","IconButton","onClick","SettingsControl","onOpenSettings","Settings","ApplicationBar","AppBar","position","height","background","Toolbar","src","logo","className","alt","paddingBottom","fontWeight","marginLeft","useStyles","makeStyles","theme","paper","left","top","right","bottom","backgroundColor","palette","border","boxShadow","shadows","padding","spacing","overflow","SettingsWindow","version","classes","serverInfo","Table","TableRow","TableCell","nodeId","defaultFeedId","MainWindow","workspaceRoute","workspaceRouteDispatch","workspaceViewPlugin","name","settingsVisible","setSettingsVisible","useReducer","workspace","workspaceDispatch2","handleWorkspaceSubfeedMessages","messages","forEach","msg","subfeedName","appendWorkspaceMessages","useSubfeed","onMessages","appendMessages","workspaceDispatch","handleOpenSettings","handleCloseSettings","margin","component","Modal","open","onClose","activate","context","registerPlugin","label"],"mappings":"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","file":"static/js/12.72c6bc68.chunk.js","sourcesContent":["import { BasePlugin, ExtensionContext, usePlugins } from \"labbox\";\nimport { FunctionComponent, useMemo } from \"react\";\nimport { RunViewPlugin } from \"./RunViewPlugin\";\nimport { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute';\nimport { WorkspaceViewPlugin } from \"./WorkspaceViewPlugin\";\nexport { workspaceRouteReducer } from './WorkspaceRoute';\nexport type { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute';\nexport type { WorkspaceViewProps } from './WorkspaceViewPlugin';\n\nexport type MainWindowProps = {\n    workspaceUri: string | undefined\n    workspaceRoute: WorkspaceRoute\n    workspaceRouteDispatch: WorkspaceRouteDispatch\n    version: string\n}\nexport interface MainWindowPlugin extends BasePlugin {\n    type: 'MainWindow'\n    component: FunctionComponent<MainWindowProps>\n}\n\nexport type MMPlugin = MainWindowPlugin | WorkspaceViewPlugin | RunViewPlugin\n\nexport type MMExtensionContext = ExtensionContext<MMPlugin>\n\nexport type Iteration = {\n    type: 'iteration'\n    timestamp: number\n    chainId: number\n    parameters: {[key: string]: any}\n}\nexport const isIteration = (x: any): x is Iteration => {\n    try {\n        if ((x.type === 'iteration') && (x.timestamp) && (x.chainId)) return true\n        else return false\n    }\n    catch(err) {\n        return false\n    }\n}\n\nexport const useWorkspaceViewPlugins = (): WorkspaceViewPlugin[] => {\n    const plugins = usePlugins<MMPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'WorkspaceView')).map(p => (p as any as WorkspaceViewPlugin))\n    ), [plugins])\n}\nexport const useMainWindowPlugins = (): MainWindowPlugin[] => {\n    const plugins = usePlugins<MMPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'MainWindow')).map(p => (p as any as MainWindowPlugin))\n    ), [plugins])\n}\nexport const useRunViewPlugins = (): RunViewPlugin[] => {\n    const plugins = usePlugins<MMPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'RunView')).map(p => (p as any as RunViewPlugin))\n    ), [plugins])\n}","export const parseWorkspaceUri = (workspaceUri: string | undefined): {feedUri: string | undefined, workspaceName: string | undefined} => {\n    if (!workspaceUri) return {feedUri: undefined, workspaceName: undefined}\n    if (!workspaceUri.startsWith('workspace://')) {\n        return {feedUri: undefined, workspaceName: undefined}\n    }\n    const a = workspaceUri.split('/')\n    const feedId = a[2] || undefined\n    const workspaceName = a[3] || undefined\n    if ((!feedId) || (!workspaceName)) return {feedUri: undefined, workspaceName: undefined}\n    return {\n        feedUri: `feed://${feedId}`,\n        workspaceName\n    }\n}","export type WorkspaceMCMCRun = {\n    runId: string\n    runLabel: string\n    metaData: any\n    timestamp?: number\n    runtime?: {\n        nodeId?: string\n    }\n    uri: string\n}\n\nexport type WorkspaceState = {\n    runs: WorkspaceMCMCRun[]\n}\n\nexport type AddRunWorkspaceAction = {\n    type: 'AddRun'\n    run: WorkspaceMCMCRun\n}\n\nexport type DeleteRunsWorkspaceAction = {\n    type: 'DeleteRuns'\n    runIds: string[]\n}\n\nexport type WorkspaceAction = AddRunWorkspaceAction | DeleteRunsWorkspaceAction\nexport type WorkspaceDispatch = (a: WorkspaceAction) => void\n\nexport const workspaceReducer = (s: WorkspaceState, a: WorkspaceAction): WorkspaceState => {\n    if (a.type === 'AddRun') {\n        return {\n            ...s,\n            runs: [...s.runs, a.run]\n        }\n    }\n    else if (a.type === 'DeleteRuns') {\n        return {\n            ...s,\n            runs: s.runs.filter(r => (!a.runIds.includes(r.runId)))\n        }\n    }\n    else return s\n}","import { HitherContext, HitherJob } from 'labbox';\nimport React, { FunctionComponent, useContext, useEffect, useState } from 'react';\n\ntype Props = {\n}\n\nconst HitherJobMonitorControl: FunctionComponent<Props> = () => {\n    const [hitherJobs, setHitherJobs] = useState<HitherJob[]>([])\n    const hither = useContext(HitherContext)\n    useEffect(() => {\n        // this should only get called once\n        // (hither should not change, but if it does we might have a problem here)\n        const timer1 = setInterval(() => {\n            const hj = hither.getHitherJobs()\n            setHitherJobs(hj)\n        }, 1000)\n        return () => {\n            clearInterval(timer1)\n        }\n    }, [hither])\n\n    const { pendingJobs, runningJobs, finishedJobs, erroredJobs } = {\n        pendingJobs: hitherJobs.filter(j => (j.status === 'pending')),\n        runningJobs: hitherJobs.filter(j => (j.status === 'running')),\n        finishedJobs: hitherJobs.filter(j => (j.status === 'finished')),\n        erroredJobs: hitherJobs.filter(j => (j.status === 'error')),\n    }\n    const numPending = pendingJobs.length;\n    const numRunning = runningJobs.length;\n    const numFinished = finishedJobs.length;\n    const numErrored = erroredJobs.length;\n    const title = `Jobs: ${numPending} pending | ${numRunning} running | ${numFinished} finished | ${numErrored} errored`\n    const errored = numErrored > 0 ? (\n        <span>:<span style={{color: 'pink'}}>{numErrored}</span></span>\n    ) : <span></span>\n    return (\n        <span title={title} style={{ fontFamily: \"courier\" }}>{numPending}:{numRunning}:{numFinished}{errored}</span>\n    );\n}\n\nexport default HitherJobMonitorControl","export default __webpack_public_path__ + \"static/media/logo.e906eb4b.svg\";","import { IconButton } from '@material-ui/core';\nimport { CheckCircleOutline, Sync, SyncProblem } from '@material-ui/icons';\nimport { LabboxProviderContext } from 'labbox';\nimport React, { FunctionComponent, useCallback, useContext, useMemo } from 'react';\n\ntype Props = {}\n\nconst ServerStatusControl: FunctionComponent<Props> = () => {\n    const { websocketStatus, onReconnectWebsocket } = useContext(LabboxProviderContext)\n\n    const { icon, title } = useMemo(() => {\n        switch (websocketStatus) {\n            case 'waiting': {\n                return {icon: <Sync style={{color: 'blue'}} />, title: 'Loading...'}\n            }\n            case 'connected': {\n                return {icon: <CheckCircleOutline style={{color: ''}} />, title: 'Connected'}\n            }\n            case 'disconnected': {\n                return {icon: <SyncProblem style={{color: 'red'}} />, title: `Disconnected from server. Click to attempt reconnect.`}\n            }\n            default: {\n                throw Error('Unexpected.')\n            }\n        }\n    }, [websocketStatus])\n\n    const handleClick = useCallback(() => {\n        if (websocketStatus === 'disconnected') {\n            onReconnectWebsocket()\n        }\n    }, [websocketStatus, onReconnectWebsocket])\n\n    return (\n        <IconButton title={title} onClick={handleClick}>{icon}</IconButton>\n    );\n}\n\nexport default ServerStatusControl","import { IconButton } from '@material-ui/core';\nimport { Settings } from '@material-ui/icons';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\ntype Props = {\n    onOpenSettings: () => void\n}\n\nconst SettingsControl: FunctionComponent<Props> = ({ onOpenSettings }) => {\n    const { icon, title } = useMemo(() => {\n        return {icon: <Settings />, title: 'Open settings'}\n    }, [])\n\n    const handleClick = useCallback(() => {\n        onOpenSettings()\n    }, [onOpenSettings])\n\n    return (\n        <IconButton title={title} onClick={handleClick}>{icon}</IconButton>\n    );\n}\n\nexport default SettingsControl","import { AppBar, Toolbar } from '@material-ui/core';\nimport React, { FunctionComponent } from 'react';\nimport HitherJobMonitorControl from './HitherJobMonitorControl';\nimport logo from './logo.svg';\nimport ServerStatusControl from './ServerStatusControl';\nimport SettingsControl from './SettingsControl';\n\n\nconst appBarHeight = 50\n\ntype Props = {\n    onOpenSettings: () => void\n}\n\nconst ApplicationBar: FunctionComponent<Props> = ({ onOpenSettings }) => {\n    return (\n        <AppBar position=\"static\" style={{height: appBarHeight, background: '#d85636'}}>\n            <Toolbar>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" height={30} style={{paddingBottom: 15}} />\n            &nbsp;<span style={{paddingBottom: 10, color: '#312a00', fontFamily: 'sans-serif', fontWeight: 'bold'}}>MCMC Monitor</span>\n            <span style={{marginLeft: 'auto'}} />\n            <span style={{paddingBottom: 15, color: '#312a00'}}>\n                <SettingsControl onOpenSettings={onOpenSettings} />\n                <ServerStatusControl />\n                <HitherJobMonitorControl />\n            </span>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default ApplicationBar","import { Table, TableCell, TableRow } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LabboxProviderContext } from 'labbox';\nimport { FunctionComponent, useContext } from \"react\";\nimport { parseWorkspaceUri } from '../../pluginInterface/misc';\nimport { WorkspaceState } from '../../pluginInterface/Workspace';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        left: 100,\n        top: 100,\n        right: 100,\n        bottom: 100,\n        position: 'absolute',\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        overflow: 'auto'\n    },\n}));\n\ntype Props = {\n    workspace: WorkspaceState\n    workspaceUri: string | undefined\n    version: string\n}\n\nconst SettingsWindow: FunctionComponent<Props> = ({ workspaceUri, version }) => {\n    const classes = useStyles();\n    const { serverInfo } = useContext(LabboxProviderContext)\n    const { feedUri, workspaceName } = parseWorkspaceUri(workspaceUri)\n    return (\n        <div className={classes.paper}>\n            <h2>MCMC Monitor {version}</h2>\n            <Table>\n                <TableRow>\n                    <TableCell>Workspace URI</TableCell>\n                    <TableCell>{workspaceUri || ''}</TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell>Workspace name</TableCell>\n                    <TableCell>{workspaceName}</TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell>Kachery node ID</TableCell>\n                    <TableCell>{serverInfo ? serverInfo.nodeId : ''}</TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell>Default feed ID</TableCell>\n                    <TableCell>{serverInfo ? serverInfo.defaultFeedId : ''}</TableCell>\n                </TableRow>\n            </Table>\n        </div>\n    )\n}\n\nexport default SettingsWindow","import { Modal } from '@material-ui/core';\nimport { useSubfeed } from 'labbox';\nimport React, { FunctionComponent, useCallback, useMemo, useReducer, useState } from 'react';\nimport { MainWindowProps, useWorkspaceViewPlugins } from '../../pluginInterface';\nimport { parseWorkspaceUri } from '../../pluginInterface/misc';\nimport { WorkspaceAction, workspaceReducer } from '../../pluginInterface/Workspace';\nimport ApplicationBar from './ApplicationBar';\nimport SettingsWindow from './SettingsWindow';\n\nconst MainWindow: FunctionComponent<MainWindowProps> = ({ workspaceUri, workspaceRoute, workspaceRouteDispatch, version }) => {\n    const workspaceViewPlugin = useWorkspaceViewPlugins().filter(p => (p.name === 'WorkspaceView'))[0]\n    if (!workspaceViewPlugin) throw Error('Unable to find workspace view plugin')\n\n    const [settingsVisible, setSettingsVisible] = useState(false)\n\n    const [workspace, workspaceDispatch2] = useReducer(workspaceReducer, {runs: []})\n    const handleWorkspaceSubfeedMessages = useCallback((messages: any[]) => {\n        messages.forEach(msg => workspaceDispatch2(msg))\n    }, [])\n\n    const {feedUri, workspaceName} = parseWorkspaceUri(workspaceUri)\n\n    const subfeedName = useMemo(() => ({workspaceName}), [workspaceName])\n\n    const {appendMessages: appendWorkspaceMessages} = useSubfeed({feedUri, subfeedName, onMessages: handleWorkspaceSubfeedMessages })\n    const workspaceDispatch = useCallback((a: WorkspaceAction) => {\n        appendWorkspaceMessages([a])\n    }, [appendWorkspaceMessages])\n\n    const handleOpenSettings = useCallback(() => {\n        setSettingsVisible(true)\n    }, [])\n\n    const handleCloseSettings = useCallback(() => {\n        setSettingsVisible(false)\n    }, [])\n\n    return (\n        <div style={{margin: 0}}>\n            <ApplicationBar\n                onOpenSettings={handleOpenSettings}\n            />\n            <div style={{margin: 30}}>\n                <workspaceViewPlugin.component workspace={workspace} workspaceDispatch={workspaceDispatch} workspaceRoute={workspaceRoute} workspaceRouteDispatch={workspaceRouteDispatch} />\n            </div>\n            <Modal\n                open={settingsVisible}\n                onClose={handleCloseSettings}\n            >\n                <span>\n                    <SettingsWindow\n                        workspace={workspace}\n                        workspaceUri={workspaceUri}\n                        version={version}\n                    />\n                </span>\n            </Modal>\n        </div>\n    )\n}\n\nexport default MainWindow","import { MMExtensionContext } from \"../pluginInterface\";\nimport MainWindow from \"./MainWindow/MainWindow\";\n\nexport function activate(context: MMExtensionContext) {\n    context.registerPlugin({\n        type: 'MainWindow',\n        name: 'MainWindow',\n        label: 'Main Window',\n        component: MainWindow\n    })\n}"],"sourceRoot":""}