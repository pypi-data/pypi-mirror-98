# coding: utf-8

"""
    bit.io REST API

    bit.io API  # noqa: E501

    The version of the OpenAPI document: 1.0.0b
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bitdotio.configuration import Configuration


class Repo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'name': 'str',
        'creator': 'str',
        'owner': 'str',
        'description': 'str',
        'watchers': 'list[str]',
        'watcher_count': 'int',
        'stars': 'list[str]',
        'star_count': 'int',
        'tables': 'list[str]',
        'endpoints': 'list[str]',
        'documentation': 'str',
        'license': 'str',
        'bytes': 'str',
        'query_count': 'str',
        'collaborators': 'list[RepoCollaborators]',
        'is_private': 'bool'
    }

    attribute_map = {
        'url': 'url',
        'name': 'name',
        'creator': 'creator',
        'owner': 'owner',
        'description': 'description',
        'watchers': 'watchers',
        'watcher_count': 'watcher_count',
        'stars': 'stars',
        'star_count': 'star_count',
        'tables': 'tables',
        'endpoints': 'endpoints',
        'documentation': 'documentation',
        'license': 'license',
        'bytes': 'bytes',
        'query_count': 'query_count',
        'collaborators': 'collaborators',
        'is_private': 'is_private'
    }

    def __init__(self, url=None, name=None, creator=None, owner=None, description=None, watchers=None, watcher_count=None, stars=None, star_count=None, tables=None, endpoints=None, documentation=None, license=None, bytes=None, query_count=None, collaborators=None, is_private=None, local_vars_configuration=None):  # noqa: E501
        """Repo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._url = None
        self._name = None
        self._creator = None
        self._owner = None
        self._description = None
        self._watchers = None
        self._watcher_count = None
        self._stars = None
        self._star_count = None
        self._tables = None
        self._endpoints = None
        self._documentation = None
        self._license = None
        self._bytes = None
        self._query_count = None
        self._collaborators = None
        self._is_private = None
        self.discriminator = None

        if url is not None:
            self.url = url
        self.name = name
        if creator is not None:
            self.creator = creator
        if owner is not None:
            self.owner = owner
        if description is not None:
            self.description = description
        if watchers is not None:
            self.watchers = watchers
        if watcher_count is not None:
            self.watcher_count = watcher_count
        if stars is not None:
            self.stars = stars
        if star_count is not None:
            self.star_count = star_count
        if tables is not None:
            self.tables = tables
        if endpoints is not None:
            self.endpoints = endpoints
        if documentation is not None:
            self.documentation = documentation
        if license is not None:
            self.license = license
        if bytes is not None:
            self.bytes = bytes
        if query_count is not None:
            self.query_count = query_count
        if collaborators is not None:
            self.collaborators = collaborators
        if is_private is not None:
            self.is_private = is_private

    @property
    def url(self):
        """Gets the url of this Repo.  # noqa: E501


        :return: The url of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repo.


        :param url: The url of this Repo.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this Repo.  # noqa: E501


        :return: The name of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repo.


        :param name: The name of this Repo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501

        self._name = name

    @property
    def creator(self):
        """Gets the creator of this Repo.  # noqa: E501


        :return: The creator of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Repo.


        :param creator: The creator of this Repo.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def owner(self):
        """Gets the owner of this Repo.  # noqa: E501


        :return: The owner of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Repo.


        :param owner: The owner of this Repo.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def description(self):
        """Gets the description of this Repo.  # noqa: E501


        :return: The description of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repo.


        :param description: The description of this Repo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def watchers(self):
        """Gets the watchers of this Repo.  # noqa: E501


        :return: The watchers of this Repo.  # noqa: E501
        :rtype: list[str]
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers):
        """Sets the watchers of this Repo.


        :param watchers: The watchers of this Repo.  # noqa: E501
        :type: list[str]
        """

        self._watchers = watchers

    @property
    def watcher_count(self):
        """Gets the watcher_count of this Repo.  # noqa: E501


        :return: The watcher_count of this Repo.  # noqa: E501
        :rtype: int
        """
        return self._watcher_count

    @watcher_count.setter
    def watcher_count(self, watcher_count):
        """Sets the watcher_count of this Repo.


        :param watcher_count: The watcher_count of this Repo.  # noqa: E501
        :type: int
        """

        self._watcher_count = watcher_count

    @property
    def stars(self):
        """Gets the stars of this Repo.  # noqa: E501


        :return: The stars of this Repo.  # noqa: E501
        :rtype: list[str]
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this Repo.


        :param stars: The stars of this Repo.  # noqa: E501
        :type: list[str]
        """

        self._stars = stars

    @property
    def star_count(self):
        """Gets the star_count of this Repo.  # noqa: E501


        :return: The star_count of this Repo.  # noqa: E501
        :rtype: int
        """
        return self._star_count

    @star_count.setter
    def star_count(self, star_count):
        """Sets the star_count of this Repo.


        :param star_count: The star_count of this Repo.  # noqa: E501
        :type: int
        """

        self._star_count = star_count

    @property
    def tables(self):
        """Gets the tables of this Repo.  # noqa: E501


        :return: The tables of this Repo.  # noqa: E501
        :rtype: list[str]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this Repo.


        :param tables: The tables of this Repo.  # noqa: E501
        :type: list[str]
        """

        self._tables = tables

    @property
    def endpoints(self):
        """Gets the endpoints of this Repo.  # noqa: E501


        :return: The endpoints of this Repo.  # noqa: E501
        :rtype: list[str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this Repo.


        :param endpoints: The endpoints of this Repo.  # noqa: E501
        :type: list[str]
        """

        self._endpoints = endpoints

    @property
    def documentation(self):
        """Gets the documentation of this Repo.  # noqa: E501


        :return: The documentation of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Repo.


        :param documentation: The documentation of this Repo.  # noqa: E501
        :type: str
        """

        self._documentation = documentation

    @property
    def license(self):
        """Gets the license of this Repo.  # noqa: E501


        :return: The license of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Repo.


        :param license: The license of this Repo.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def bytes(self):
        """Gets the bytes of this Repo.  # noqa: E501


        :return: The bytes of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this Repo.


        :param bytes: The bytes of this Repo.  # noqa: E501
        :type: str
        """

        self._bytes = bytes

    @property
    def query_count(self):
        """Gets the query_count of this Repo.  # noqa: E501


        :return: The query_count of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._query_count

    @query_count.setter
    def query_count(self, query_count):
        """Sets the query_count of this Repo.


        :param query_count: The query_count of this Repo.  # noqa: E501
        :type: str
        """

        self._query_count = query_count

    @property
    def collaborators(self):
        """Gets the collaborators of this Repo.  # noqa: E501


        :return: The collaborators of this Repo.  # noqa: E501
        :rtype: list[RepoCollaborators]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this Repo.


        :param collaborators: The collaborators of this Repo.  # noqa: E501
        :type: list[RepoCollaborators]
        """

        self._collaborators = collaborators

    @property
    def is_private(self):
        """Gets the is_private of this Repo.  # noqa: E501


        :return: The is_private of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Repo.


        :param is_private: The is_private of this Repo.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Repo):
            return True

        return self.to_dict() != other.to_dict()
