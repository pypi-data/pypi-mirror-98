# coding: utf-8

"""
    bit.io REST API

    bit.io API  # noqa: E501

    The version of the OpenAPI document: 1.0.0b
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bitdotio.configuration import Configuration


class Column(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'current_name': 'str',
        'data_type': 'str',
        'description': 'str'
    }

    attribute_map = {
        'url': 'url',
        'current_name': 'current_name',
        'data_type': 'data_type',
        'description': 'description'
    }

    def __init__(self, url=None, current_name=None, data_type=None, description=None, local_vars_configuration=None):  # noqa: E501
        """Column - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._url = None
        self._current_name = None
        self._data_type = None
        self._description = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if current_name is not None:
            self.current_name = current_name
        if data_type is not None:
            self.data_type = data_type
        if description is not None:
            self.description = description

    @property
    def url(self):
        """Gets the url of this Column.  # noqa: E501


        :return: The url of this Column.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Column.


        :param url: The url of this Column.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def current_name(self):
        """Gets the current_name of this Column.  # noqa: E501


        :return: The current_name of this Column.  # noqa: E501
        :rtype: str
        """
        return self._current_name

    @current_name.setter
    def current_name(self, current_name):
        """Sets the current_name of this Column.


        :param current_name: The current_name of this Column.  # noqa: E501
        :type: str
        """

        self._current_name = current_name

    @property
    def data_type(self):
        """Gets the data_type of this Column.  # noqa: E501


        :return: The data_type of this Column.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Column.


        :param data_type: The data_type of this Column.  # noqa: E501
        :type: str
        """
        allowed_values = ["BIGINT", "INTEGER", "SMALLINT", "BOOLEAN", "TEXT", "VARCHAR", "CHAR", "DOUBLE PRECISION", "REAL", "TIMESTAMP WITH TIME ZONE", "TIMESTAMP WITHOUT TIME ZONE", "TIME WITH TIME ZONE", "TIME WITHOUT TIME ZONE", "DATE", "JSON", "JSONB", "BYTEA"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and data_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this Column.  # noqa: E501


        :return: The description of this Column.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Column.


        :param description: The description of this Column.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Column):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Column):
            return True

        return self.to_dict() != other.to_dict()
