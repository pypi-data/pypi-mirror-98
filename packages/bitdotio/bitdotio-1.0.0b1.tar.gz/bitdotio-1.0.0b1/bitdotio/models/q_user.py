# coding: utf-8

"""
    bit.io REST API

    bit.io API  # noqa: E501

    The version of the OpenAPI document: 1.0.0b
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bitdotio.configuration import Configuration


class QUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connections': 'list[str]',
        'date_joined': 'datetime',
        'first_name': 'str',
        'last_name': 'str',
        'profile': 'QUserProfile',
        'repos_owned': 'list[str]',
        'url': 'str',
        'username': 'str'
    }

    attribute_map = {
        'connections': 'connections',
        'date_joined': 'date_joined',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'profile': 'profile',
        'repos_owned': 'repos_owned',
        'url': 'url',
        'username': 'username'
    }

    def __init__(self, connections=None, date_joined=None, first_name=None, last_name=None, profile=None, repos_owned=None, url=None, username=None, local_vars_configuration=None):  # noqa: E501
        """QUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connections = None
        self._date_joined = None
        self._first_name = None
        self._last_name = None
        self._profile = None
        self._repos_owned = None
        self._url = None
        self._username = None
        self.discriminator = None

        if connections is not None:
            self.connections = connections
        if date_joined is not None:
            self.date_joined = date_joined
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.profile = profile
        if repos_owned is not None:
            self.repos_owned = repos_owned
        if url is not None:
            self.url = url
        if username is not None:
            self.username = username

    @property
    def connections(self):
        """Gets the connections of this QUser.  # noqa: E501


        :return: The connections of this QUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this QUser.


        :param connections: The connections of this QUser.  # noqa: E501
        :type: list[str]
        """

        self._connections = connections

    @property
    def date_joined(self):
        """Gets the date_joined of this QUser.  # noqa: E501


        :return: The date_joined of this QUser.  # noqa: E501
        :rtype: datetime
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this QUser.


        :param date_joined: The date_joined of this QUser.  # noqa: E501
        :type: datetime
        """

        self._date_joined = date_joined

    @property
    def first_name(self):
        """Gets the first_name of this QUser.  # noqa: E501


        :return: The first_name of this QUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this QUser.


        :param first_name: The first_name of this QUser.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 150):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `150`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this QUser.  # noqa: E501


        :return: The last_name of this QUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this QUser.


        :param last_name: The last_name of this QUser.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 150):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `150`")  # noqa: E501

        self._last_name = last_name

    @property
    def profile(self):
        """Gets the profile of this QUser.  # noqa: E501


        :return: The profile of this QUser.  # noqa: E501
        :rtype: QUserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this QUser.


        :param profile: The profile of this QUser.  # noqa: E501
        :type: QUserProfile
        """
        if self.local_vars_configuration.client_side_validation and profile is None:  # noqa: E501
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def repos_owned(self):
        """Gets the repos_owned of this QUser.  # noqa: E501


        :return: The repos_owned of this QUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._repos_owned

    @repos_owned.setter
    def repos_owned(self, repos_owned):
        """Sets the repos_owned of this QUser.


        :param repos_owned: The repos_owned of this QUser.  # noqa: E501
        :type: list[str]
        """

        self._repos_owned = repos_owned

    @property
    def url(self):
        """Gets the url of this QUser.  # noqa: E501


        :return: The url of this QUser.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this QUser.


        :param url: The url of this QUser.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this QUser.  # noqa: E501

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :return: The username of this QUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this QUser.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :param username: The username of this QUser.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QUser):
            return True

        return self.to_dict() != other.to_dict()
