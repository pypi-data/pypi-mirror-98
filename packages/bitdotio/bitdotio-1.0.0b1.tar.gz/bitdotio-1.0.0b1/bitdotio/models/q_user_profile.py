# coding: utf-8

"""
    bit.io REST API

    bit.io API  # noqa: E501

    The version of the OpenAPI document: 1.0.0b
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bitdotio.configuration import Configuration


class QUserProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bio': 'str',
        'website': 'str',
        'public_status': 'str',
        'picture_path': 'str',
        'freeform_location': 'str'
    }

    attribute_map = {
        'bio': 'bio',
        'website': 'website',
        'public_status': 'public_status',
        'picture_path': 'picture_path',
        'freeform_location': 'freeform_location'
    }

    def __init__(self, bio=None, website=None, public_status=None, picture_path=None, freeform_location=None, local_vars_configuration=None):  # noqa: E501
        """QUserProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bio = None
        self._website = None
        self._public_status = None
        self._picture_path = None
        self._freeform_location = None
        self.discriminator = None

        if bio is not None:
            self.bio = bio
        if website is not None:
            self.website = website
        if public_status is not None:
            self.public_status = public_status
        if picture_path is not None:
            self.picture_path = picture_path
        if freeform_location is not None:
            self.freeform_location = freeform_location

    @property
    def bio(self):
        """Gets the bio of this QUserProfile.  # noqa: E501


        :return: The bio of this QUserProfile.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this QUserProfile.


        :param bio: The bio of this QUserProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                bio is not None and len(bio) > 500):
            raise ValueError("Invalid value for `bio`, length must be less than or equal to `500`")  # noqa: E501

        self._bio = bio

    @property
    def website(self):
        """Gets the website of this QUserProfile.  # noqa: E501


        :return: The website of this QUserProfile.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this QUserProfile.


        :param website: The website of this QUserProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                website is not None and len(website) > 200):
            raise ValueError("Invalid value for `website`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                website is not None and not re.search(r'^(?:[a-z0-9.+-]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\z', website)):  # noqa: E501
            raise ValueError(r"Invalid value for `website`, must be a follow pattern or equal to `/^(?:[a-z0-9.+-]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\z/`")  # noqa: E501

        self._website = website

    @property
    def public_status(self):
        """Gets the public_status of this QUserProfile.  # noqa: E501


        :return: The public_status of this QUserProfile.  # noqa: E501
        :rtype: str
        """
        return self._public_status

    @public_status.setter
    def public_status(self, public_status):
        """Sets the public_status of this QUserProfile.


        :param public_status: The public_status of this QUserProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                public_status is not None and len(public_status) > 500):
            raise ValueError("Invalid value for `public_status`, length must be less than or equal to `500`")  # noqa: E501

        self._public_status = public_status

    @property
    def picture_path(self):
        """Gets the picture_path of this QUserProfile.  # noqa: E501


        :return: The picture_path of this QUserProfile.  # noqa: E501
        :rtype: str
        """
        return self._picture_path

    @picture_path.setter
    def picture_path(self, picture_path):
        """Sets the picture_path of this QUserProfile.


        :param picture_path: The picture_path of this QUserProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                picture_path is not None and len(picture_path) > 200):
            raise ValueError("Invalid value for `picture_path`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                picture_path is not None and not re.search(r'^(?:[a-z0-9.+-]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\z', picture_path)):  # noqa: E501
            raise ValueError(r"Invalid value for `picture_path`, must be a follow pattern or equal to `/^(?:[a-z0-9.+-]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\z/`")  # noqa: E501

        self._picture_path = picture_path

    @property
    def freeform_location(self):
        """Gets the freeform_location of this QUserProfile.  # noqa: E501


        :return: The freeform_location of this QUserProfile.  # noqa: E501
        :rtype: str
        """
        return self._freeform_location

    @freeform_location.setter
    def freeform_location(self, freeform_location):
        """Sets the freeform_location of this QUserProfile.


        :param freeform_location: The freeform_location of this QUserProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                freeform_location is not None and len(freeform_location) > 100):
            raise ValueError("Invalid value for `freeform_location`, length must be less than or equal to `100`")  # noqa: E501

        self._freeform_location = freeform_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QUserProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QUserProfile):
            return True

        return self.to_dict() != other.to_dict()
