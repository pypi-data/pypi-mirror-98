Metadata-Version: 2.1
Name: coralillo
Version: 2.0.3
Summary: An Object-Redis Mapping
Home-page: https://getfleety.github.io/coralillo/
Author: Abraham Toriz Cruz
Author-email: categulario@gmail.com
License: MIT
Keywords: redis database mapper
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: redis (>=3)
Requires-Dist: bcrypt
Provides-Extra: dev
Requires-Dist: check-manifest ; extra == 'dev'
Provides-Extra: test

Coralillo
=========


.. image:: https://travis-ci.org/getfleety/coralillo.svg?branch=master
   :target: https://travis-ci.org/getfleety/coralillo
   :alt: Build Status


A redis ORM.

Notes
-----

Version 1.0 depends on redis >= 3.0.

Installation
------------

.. code-block:: bash

   $ pip install coralillo

Usage
-----

.. code:: python

    from coralillo import Engine, Model, fields

    # Create the engine
    eng = Engine()

    # Declare your models
    class User(Model):
        name      = fields.Text()
        last_name = fields.Text()
        email     = fields.Text(
            index=True,
            regex='^[\w.%+-]+@[\w.-]+\.[a-zA-Z]{2,}$',
        )

        class Meta:
            engine = eng

    # Persist objects to database
    john = User(
        name='John',
        last_name='Doe',
        email='john@example.com',
    ).save()

    # Query by index
    mary = User.get_by('email', 'mary@example.com')

    # Retrieve all objects
    users = User.all()


