// qtorusgeometry.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DExtras
{
%TypeHeaderCode
#include <qtorusgeometry.h>
%End

    class QTorusGeometry : Qt3DCore::QGeometry
    {
%TypeHeaderCode
#include <qtorusgeometry.h>
%End

    public:
        explicit QTorusGeometry(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTorusGeometry();
        void updateVertices();
        void updateIndices();
        int rings() const;
        int slices() const;
        float radius() const;
        float minorRadius() const;
        Qt3DCore::QAttribute *positionAttribute() const;
        Qt3DCore::QAttribute *normalAttribute() const;
        Qt3DCore::QAttribute *texCoordAttribute() const;
        Qt3DCore::QAttribute *indexAttribute() const;

    public slots:
        void setRings(int rings);
        void setSlices(int slices);
        void setRadius(float radius);
        void setMinorRadius(float minorRadius);

    signals:
        void radiusChanged(float radius);
        void ringsChanged(int rings);
        void slicesChanged(int slices);
        void minorRadiusChanged(float minorRadius);
    };
};
