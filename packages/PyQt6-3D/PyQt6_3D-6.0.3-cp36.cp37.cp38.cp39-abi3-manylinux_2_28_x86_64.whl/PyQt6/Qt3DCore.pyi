# The PEP 484 type hints stub file for the Qt3DCore module.
#
# Generated by SIP 6.0.3
#
# Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
# 
# This file is part of PyQt6-3D.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


import enum
import typing

import PyQt6.sip

from PyQt6 import QtGui
from PyQt6 import QtCore

# Support for QDate, QDateTime and QTime.
import datetime

# Convenient type aliases.
PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], QtCore.pyqtBoundSignal]


class Qt3DCore(PyQt6.sip.simplewrapper):

    class QAbstractAspect(QtCore.QObject):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def unregisterBackendType(self, a0: QtCore.QMetaObject) -> None: ...
        def registerBackendType(self, a0: QtCore.QMetaObject, functor: 'QBackendNodeMapper') -> None: ...
        def rootEntityId(self) -> 'QNodeId': ...

    class QAbstractFunctor(PyQt6.sip.simplewrapper):

        def __init__(self) -> None: ...

        def id(self) -> PyQt6.sip.voidptr: ...

    class QNode(QtCore.QObject):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def nodeDestroyed(self) -> None: ...
        def enabledChanged(self, enabled: bool) -> None: ...
        def parentChanged(self, parent: QtCore.QObject) -> None: ...
        def setEnabled(self, isEnabled: bool) -> None: ...
        def setParent(self, parent: 'QNode') -> None: ...
        def isEnabled(self) -> bool: ...
        def childNodes(self) -> typing.List['QNode']: ...
        def blockNotifications(self, block: bool) -> bool: ...
        def notificationsBlocked(self) -> bool: ...
        def parentNode(self) -> 'QNode': ...
        def id(self) -> 'QNodeId': ...

    class QAbstractSkeleton('QNode'):

        def jointCountChanged(self, jointCount: int) -> None: ...
        def jointCount(self) -> int: ...

    class QComponent('QNode'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def removedFromEntity(self, entity: 'QEntity') -> None: ...
        def addedToEntity(self, entity: 'QEntity') -> None: ...
        def shareableChanged(self, isShareable: bool) -> None: ...
        def setShareable(self, isShareable: bool) -> None: ...
        def entities(self) -> typing.List['QEntity']: ...
        def isShareable(self) -> bool: ...

    class QArmature('QComponent'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def skeletonChanged(self, skeleton: 'QAbstractSkeleton') -> None: ...
        def setSkeleton(self, skeleton: 'QAbstractSkeleton') -> None: ...
        def skeleton(self) -> 'QAbstractSkeleton': ...

    class QAspectEngine(QtCore.QObject):

        class RunMode(enum.Enum):
            Manual = ... # type: QAspectEngine.RunMode
            Automatic = ... # type: QAspectEngine.RunMode

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def processFrame(self) -> None: ...
        def runMode(self) -> 'QAspectEngine.RunMode': ...
        def setRunMode(self, mode: 'QAspectEngine.RunMode') -> None: ...
        def executeCommand(self, command: str) -> typing.Any: ...
        def aspects(self) -> typing.List['QAbstractAspect']: ...
        def aspect(self, name: str) -> 'QAbstractAspect': ...
        @typing.overload
        def unregisterAspect(self, aspect: 'QAbstractAspect') -> None: ...
        @typing.overload
        def unregisterAspect(self, name: str) -> None: ...
        @typing.overload
        def registerAspect(self, aspect: 'QAbstractAspect') -> None: ...
        @typing.overload
        def registerAspect(self, name: str) -> None: ...
        def rootEntity(self) -> 'QEntity': ...
        def setRootEntity(self, root: 'QEntity') -> None: ...

    class QAttribute('QNode'):

        class VertexBaseType(enum.Enum):
            Byte = ... # type: QAttribute.VertexBaseType
            UnsignedByte = ... # type: QAttribute.VertexBaseType
            Short = ... # type: QAttribute.VertexBaseType
            UnsignedShort = ... # type: QAttribute.VertexBaseType
            Int = ... # type: QAttribute.VertexBaseType
            UnsignedInt = ... # type: QAttribute.VertexBaseType
            HalfFloat = ... # type: QAttribute.VertexBaseType
            Float = ... # type: QAttribute.VertexBaseType
            Double = ... # type: QAttribute.VertexBaseType

        class AttributeType(enum.Enum):
            VertexAttribute = ... # type: QAttribute.AttributeType
            IndexAttribute = ... # type: QAttribute.AttributeType
            DrawIndirectAttribute = ... # type: QAttribute.AttributeType

        @typing.overload
        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...
        @typing.overload
        def __init__(self, buf: 'QBuffer', vertexBaseType: 'QAttribute.VertexBaseType', vertexSize: int, count: int, offset: int = ..., stride: int = ..., parent: typing.Optional['QNode'] = ...) -> None: ...
        @typing.overload
        def __init__(self, buf: 'QBuffer', name: str, vertexBaseType: 'QAttribute.VertexBaseType', vertexSize: int, count: int, offset: int = ..., stride: int = ..., parent: typing.Optional['QNode'] = ...) -> None: ...

        def attributeTypeChanged(self, attributeType: 'QAttribute.AttributeType') -> None: ...
        def divisorChanged(self, divisor: int) -> None: ...
        def byteOffsetChanged(self, byteOffset: int) -> None: ...
        def byteStrideChanged(self, byteStride: int) -> None: ...
        def countChanged(self, count: int) -> None: ...
        def dataSizeChanged(self, vertexSize: int) -> None: ...
        def dataTypeChanged(self, vertexBaseType: 'QAttribute.VertexBaseType') -> None: ...
        def vertexSizeChanged(self, vertexSize: int) -> None: ...
        def vertexBaseTypeChanged(self, vertexBaseType: 'QAttribute.VertexBaseType') -> None: ...
        def nameChanged(self, name: str) -> None: ...
        def bufferChanged(self, buffer: 'QBuffer') -> None: ...
        def setAttributeType(self, attributeType: 'QAttribute.AttributeType') -> None: ...
        def setDivisor(self, divisor: int) -> None: ...
        def setByteOffset(self, byteOffset: int) -> None: ...
        def setByteStride(self, byteStride: int) -> None: ...
        def setCount(self, count: int) -> None: ...
        def setVertexSize(self, size: int) -> None: ...
        def setVertexBaseType(self, type: 'QAttribute.VertexBaseType') -> None: ...
        def setName(self, name: str) -> None: ...
        def setBuffer(self, buffer: 'QBuffer') -> None: ...
        @staticmethod
        def defaultTextureCoordinate2AttributeName() -> str: ...
        @staticmethod
        def defaultTextureCoordinate1AttributeName() -> str: ...
        @staticmethod
        def defaultJointWeightsAttributeName() -> str: ...
        @staticmethod
        def defaultJointIndicesAttributeName() -> str: ...
        @staticmethod
        def defaultTangentAttributeName() -> str: ...
        @staticmethod
        def defaultTextureCoordinateAttributeName() -> str: ...
        @staticmethod
        def defaultColorAttributeName() -> str: ...
        @staticmethod
        def defaultNormalAttributeName() -> str: ...
        @staticmethod
        def defaultPositionAttributeName() -> str: ...
        def attributeType(self) -> 'QAttribute.AttributeType': ...
        def divisor(self) -> int: ...
        def byteOffset(self) -> int: ...
        def byteStride(self) -> int: ...
        def count(self) -> int: ...
        def vertexSize(self) -> int: ...
        def vertexBaseType(self) -> 'QAttribute.VertexBaseType': ...
        def name(self) -> str: ...
        def buffer(self) -> 'QBuffer': ...

    class QBackendNodeMapper(PyQt6.sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QBackendNodeMapper') -> None: ...

        def destroy(self, id: 'QNodeId') -> None: ...
        def get(self, id: 'QNodeId') -> 'QBackendNode': ...
        def create(self, id: 'QNodeId') -> 'QBackendNode': ...

    class QBackendNode(PyQt6.sip.simplewrapper):

        class Mode(enum.Enum):
            ReadOnly = ... # type: QBackendNode.Mode
            ReadWrite = ... # type: QBackendNode.Mode

        def __init__(self, mode: 'QBackendNode.Mode' = ...) -> None: ...

        def syncFromFrontEnd(self, frontEnd: 'QNode', firstTime: bool) -> None: ...
        def mode(self) -> 'QBackendNode.Mode': ...
        def isEnabled(self) -> bool: ...
        def setEnabled(self, enabled: bool) -> None: ...
        def peerId(self) -> 'QNodeId': ...

    class QBoundingVolume('QComponent'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def maxPointChanged(self, maxPoint: QtGui.QVector3D) -> None: ...
        def minPointChanged(self, minPoint: QtGui.QVector3D) -> None: ...
        def implicitPointsValidChanged(self, implicitPointsValid: bool) -> None: ...
        def implicitMaxPointChanged(self, implicitMaxPoint: QtGui.QVector3D) -> None: ...
        def implicitMinPointChanged(self, implicitMinPoint: QtGui.QVector3D) -> None: ...
        def viewChanged(self, view: 'QGeometryView') -> None: ...
        def updateImplicitBounds(self) -> bool: ...
        def setMaxPoint(self, maxPoint: QtGui.QVector3D) -> None: ...
        def setMinPoint(self, minPoint: QtGui.QVector3D) -> None: ...
        def setView(self, view: 'QGeometryView') -> None: ...
        def maxPoint(self) -> QtGui.QVector3D: ...
        def minPoint(self) -> QtGui.QVector3D: ...
        def areImplicitPointsValid(self) -> bool: ...
        def implicitMaxPoint(self) -> QtGui.QVector3D: ...
        def implicitMinPoint(self) -> QtGui.QVector3D: ...
        def view(self) -> 'QGeometryView': ...

    class QBuffer('QNode'):

        class AccessType(enum.Enum):
            Write = ... # type: QBuffer.AccessType
            Read = ... # type: QBuffer.AccessType
            ReadWrite = ... # type: QBuffer.AccessType

        class UsageType(enum.Enum):
            StreamDraw = ... # type: QBuffer.UsageType
            StreamRead = ... # type: QBuffer.UsageType
            StreamCopy = ... # type: QBuffer.UsageType
            StaticDraw = ... # type: QBuffer.UsageType
            StaticRead = ... # type: QBuffer.UsageType
            StaticCopy = ... # type: QBuffer.UsageType
            DynamicDraw = ... # type: QBuffer.UsageType
            DynamicRead = ... # type: QBuffer.UsageType
            DynamicCopy = ... # type: QBuffer.UsageType

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def dataAvailable(self) -> None: ...
        def accessTypeChanged(self, access: 'QBuffer.AccessType') -> None: ...
        def usageChanged(self, usage: 'QBuffer.UsageType') -> None: ...
        def dataChanged(self, bytes: QtCore.QByteArray) -> None: ...
        def setAccessType(self, access: 'QBuffer.AccessType') -> None: ...
        def setUsage(self, usage: 'QBuffer.UsageType') -> None: ...
        def updateData(self, offset: int, bytes: QtCore.QByteArray) -> None: ...
        def data(self) -> QtCore.QByteArray: ...
        def setData(self, bytes: QtCore.QByteArray) -> None: ...
        def accessType(self) -> 'QBuffer.AccessType': ...
        def usage(self) -> 'QBuffer.UsageType': ...

    class QCoreSettings('QComponent'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def boundingVolumesEnabledChanged(self, boundingVolumesEnabled: bool) -> None: ...
        def setBoundingVolumesEnabled(self, boundingVolumesEnabled: bool) -> None: ...
        def boundingVolumesEnabled(self) -> bool: ...

    class QEntity('QNode'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def parentEntity(self) -> 'QEntity': ...
        def removeComponent(self, comp: 'QComponent') -> None: ...
        def addComponent(self, comp: 'QComponent') -> None: ...
        def components(self) -> typing.List['QComponent']: ...

    class QGeometry('QNode'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def maxExtentChanged(self, maxExtent: QtGui.QVector3D) -> None: ...
        def minExtentChanged(self, minExtent: QtGui.QVector3D) -> None: ...
        def boundingVolumePositionAttributeChanged(self, boundingVolumePositionAttribute: 'QAttribute') -> None: ...
        def setBoundingVolumePositionAttribute(self, boundingVolumePositionAttribute: 'QAttribute') -> None: ...
        def maxExtent(self) -> QtGui.QVector3D: ...
        def minExtent(self) -> QtGui.QVector3D: ...
        def boundingVolumePositionAttribute(self) -> 'QAttribute': ...
        def removeAttribute(self, attribute: 'QAttribute') -> None: ...
        def addAttribute(self, attribute: 'QAttribute') -> None: ...
        def attributes(self) -> typing.List['QAttribute']: ...

    class QGeometryView('QNode'):

        class PrimitiveType(enum.Enum):
            Points = ... # type: QGeometryView.PrimitiveType
            Lines = ... # type: QGeometryView.PrimitiveType
            LineLoop = ... # type: QGeometryView.PrimitiveType
            LineStrip = ... # type: QGeometryView.PrimitiveType
            Triangles = ... # type: QGeometryView.PrimitiveType
            TriangleStrip = ... # type: QGeometryView.PrimitiveType
            TriangleFan = ... # type: QGeometryView.PrimitiveType
            LinesAdjacency = ... # type: QGeometryView.PrimitiveType
            TrianglesAdjacency = ... # type: QGeometryView.PrimitiveType
            LineStripAdjacency = ... # type: QGeometryView.PrimitiveType
            TriangleStripAdjacency = ... # type: QGeometryView.PrimitiveType
            Patches = ... # type: QGeometryView.PrimitiveType

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def primitiveTypeChanged(self, primitiveType: 'QGeometryView.PrimitiveType') -> None: ...
        def geometryChanged(self, geometry: 'QGeometry') -> None: ...
        def primitiveRestartEnabledChanged(self, primitiveRestartEnabled: bool) -> None: ...
        def verticesPerPatchChanged(self, verticesPerPatch: int) -> None: ...
        def restartIndexValueChanged(self, restartIndexValue: int) -> None: ...
        def indexBufferByteOffsetChanged(self, offset: int) -> None: ...
        def firstVertexChanged(self, firstVertex: int) -> None: ...
        def firstInstanceChanged(self, firstInstance: int) -> None: ...
        def indexOffsetChanged(self, indexOffset: int) -> None: ...
        def vertexCountChanged(self, vertexCount: int) -> None: ...
        def instanceCountChanged(self, instanceCount: int) -> None: ...
        def setPrimitiveType(self, primitiveType: 'QGeometryView.PrimitiveType') -> None: ...
        def setGeometry(self, geometry: 'QGeometry') -> None: ...
        def setPrimitiveRestartEnabled(self, enabled: bool) -> None: ...
        def setVerticesPerPatch(self, verticesPerPatch: int) -> None: ...
        def setRestartIndexValue(self, index: int) -> None: ...
        def setIndexBufferByteOffset(self, offset: int) -> None: ...
        def setFirstVertex(self, firstVertex: int) -> None: ...
        def setFirstInstance(self, firstInstance: int) -> None: ...
        def setIndexOffset(self, indexOffset: int) -> None: ...
        def setVertexCount(self, vertexCount: int) -> None: ...
        def setInstanceCount(self, instanceCount: int) -> None: ...
        def primitiveType(self) -> 'QGeometryView.PrimitiveType': ...
        def geometry(self) -> 'QGeometry': ...
        def primitiveRestartEnabled(self) -> bool: ...
        def verticesPerPatch(self) -> int: ...
        def restartIndexValue(self) -> int: ...
        def indexBufferByteOffset(self) -> int: ...
        def firstVertex(self) -> int: ...
        def firstInstance(self) -> int: ...
        def indexOffset(self) -> int: ...
        def vertexCount(self) -> int: ...
        def instanceCount(self) -> int: ...

    class QJoint('QNode'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def nameChanged(self, name: str) -> None: ...
        def rotationZChanged(self, rotationZ: float) -> None: ...
        def rotationYChanged(self, rotationY: float) -> None: ...
        def rotationXChanged(self, rotationX: float) -> None: ...
        def inverseBindMatrixChanged(self, inverseBindMatrix: QtGui.QMatrix4x4) -> None: ...
        def translationChanged(self, translation: QtGui.QVector3D) -> None: ...
        def rotationChanged(self, rotation: QtGui.QQuaternion) -> None: ...
        def scaleChanged(self, scale: QtGui.QVector3D) -> None: ...
        def setToIdentity(self) -> None: ...
        def setName(self, name: str) -> None: ...
        def setRotationZ(self, rotationZ: float) -> None: ...
        def setRotationY(self, rotationY: float) -> None: ...
        def setRotationX(self, rotationX: float) -> None: ...
        def setInverseBindMatrix(self, inverseBindMatrix: QtGui.QMatrix4x4) -> None: ...
        def setTranslation(self, translation: QtGui.QVector3D) -> None: ...
        def setRotation(self, rotation: QtGui.QQuaternion) -> None: ...
        def setScale(self, scale: QtGui.QVector3D) -> None: ...
        def childJoints(self) -> typing.List['QJoint']: ...
        def removeChildJoint(self, joint: 'QJoint') -> None: ...
        def addChildJoint(self, joint: 'QJoint') -> None: ...
        def name(self) -> str: ...
        def rotationZ(self) -> float: ...
        def rotationY(self) -> float: ...
        def rotationX(self) -> float: ...
        def inverseBindMatrix(self) -> QtGui.QMatrix4x4: ...
        def translation(self) -> QtGui.QVector3D: ...
        def rotation(self) -> QtGui.QQuaternion: ...
        def scale(self) -> QtGui.QVector3D: ...

    class QNodeIdTypePair(PyQt6.sip.simplewrapper):

        id = ... # type: 'QNodeId'
        type = ... # type: QtCore.QMetaObject

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, _id: 'QNodeId', _type: QtCore.QMetaObject) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QNodeIdTypePair') -> None: ...

    class QNodeId(PyQt6.sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QNodeId') -> None: ...

        def __hash__(self) -> int: ...
        def __int__(self) -> bool: ...
        def id(self) -> int: ...
        def isNull(self) -> bool: ...
        @staticmethod
        def createId() -> 'QNodeId': ...

    class QSkeleton('QAbstractSkeleton'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def rootJointChanged(self, rootJoint: 'QJoint') -> None: ...
        def setRootJoint(self, rootJoint: 'QJoint') -> None: ...
        def rootJoint(self) -> 'QJoint': ...

    class QSkeletonLoader('QAbstractSkeleton'):

        class Status(enum.Enum):
            NotReady = ... # type: QSkeletonLoader.Status
            Ready = ... # type: QSkeletonLoader.Status
            Error = ... # type: QSkeletonLoader.Status

        @typing.overload
        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...
        @typing.overload
        def __init__(self, source: QtCore.QUrl, parent: typing.Optional['QNode'] = ...) -> None: ...

        def rootJointChanged(self, rootJoint: 'QJoint') -> None: ...
        def createJointsEnabledChanged(self, createJointsEnabled: bool) -> None: ...
        def statusChanged(self, status: 'QSkeletonLoader.Status') -> None: ...
        def sourceChanged(self, source: QtCore.QUrl) -> None: ...
        def setCreateJointsEnabled(self, enabled: bool) -> None: ...
        def setSource(self, source: QtCore.QUrl) -> None: ...
        def rootJoint(self) -> 'QJoint': ...
        def isCreateJointsEnabled(self) -> bool: ...
        def status(self) -> 'QSkeletonLoader.Status': ...
        def source(self) -> QtCore.QUrl: ...

    class QTransform('QComponent'):

        def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

        def worldMatrixChanged(self, worldMatrix: QtGui.QMatrix4x4) -> None: ...
        def rotationZChanged(self, rotationZ: float) -> None: ...
        def rotationYChanged(self, rotationY: float) -> None: ...
        def rotationXChanged(self, rotationX: float) -> None: ...
        def matrixChanged(self) -> None: ...
        def translationChanged(self, translation: QtGui.QVector3D) -> None: ...
        def rotationChanged(self, rotation: QtGui.QQuaternion) -> None: ...
        def scale3DChanged(self, scale: QtGui.QVector3D) -> None: ...
        def scaleChanged(self, scale: float) -> None: ...
        def setRotationZ(self, rotationZ: float) -> None: ...
        def setRotationY(self, rotationY: float) -> None: ...
        def setRotationX(self, rotationX: float) -> None: ...
        def setMatrix(self, matrix: QtGui.QMatrix4x4) -> None: ...
        def setTranslation(self, translation: QtGui.QVector3D) -> None: ...
        def setRotation(self, rotation: QtGui.QQuaternion) -> None: ...
        def setScale3D(self, scale: QtGui.QVector3D) -> None: ...
        def setScale(self, scale: float) -> None: ...
        def rotationZ(self) -> float: ...
        def rotationY(self) -> float: ...
        def rotationX(self) -> float: ...
        def worldMatrix(self) -> QtGui.QMatrix4x4: ...
        def matrix(self) -> QtGui.QMatrix4x4: ...
        @staticmethod
        def rotateFromAxes(xAxis: QtGui.QVector3D, yAxis: QtGui.QVector3D, zAxis: QtGui.QVector3D) -> QtGui.QMatrix4x4: ...
        @staticmethod
        def rotateAround(point: QtGui.QVector3D, angle: float, axis: QtGui.QVector3D) -> QtGui.QMatrix4x4: ...
        @typing.overload
        @staticmethod
        def fromEulerAngles(eulerAngles: QtGui.QVector3D) -> QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def fromEulerAngles(pitch: float, yaw: float, roll: float) -> QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def fromAxesAndAngles(axis1: QtGui.QVector3D, angle1: float, axis2: QtGui.QVector3D, angle2: float) -> QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def fromAxesAndAngles(axis1: QtGui.QVector3D, angle1: float, axis2: QtGui.QVector3D, angle2: float, axis3: QtGui.QVector3D, angle3: float) -> QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def fromAxisAndAngle(axis: QtGui.QVector3D, angle: float) -> QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def fromAxisAndAngle(x: float, y: float, z: float, angle: float) -> QtGui.QQuaternion: ...
        @staticmethod
        def fromAxes(xAxis: QtGui.QVector3D, yAxis: QtGui.QVector3D, zAxis: QtGui.QVector3D) -> QtGui.QQuaternion: ...
        def translation(self) -> QtGui.QVector3D: ...
        def rotation(self) -> QtGui.QQuaternion: ...
        def scale3D(self) -> QtGui.QVector3D: ...
        def scale(self) -> float: ...

    def qIdForNode(self, node: 'QNode') -> 'QNodeId': ...


PYQT_3D_VERSION = ... # type: int
PYQT_3D_VERSION_STR = ... # type: str
