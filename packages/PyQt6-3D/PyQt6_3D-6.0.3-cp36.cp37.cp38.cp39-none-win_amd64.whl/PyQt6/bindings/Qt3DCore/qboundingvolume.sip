// qboundingvolume.sip generated by MetaSIP
//
// This file is part of the Qt3DCore Python extension module.
//
// Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DCore
{
%TypeHeaderCode
#include <qboundingvolume.h>
%End

    class QBoundingVolume : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qboundingvolume.h>
%End

    public:
        explicit QBoundingVolume(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QBoundingVolume();
        Qt3DCore::QGeometryView *view() const;
        QVector3D implicitMinPoint() const;
        QVector3D implicitMaxPoint() const;
        bool areImplicitPointsValid() const;
        QVector3D minPoint() const;
        QVector3D maxPoint() const;

    public slots:
        void setView(Qt3DCore::QGeometryView *view);
        void setMinPoint(const QVector3D &minPoint);
        void setMaxPoint(const QVector3D &maxPoint);
        bool updateImplicitBounds();

    signals:
        void viewChanged(Qt3DCore::QGeometryView *view);
        void implicitMinPointChanged(const QVector3D &implicitMinPoint);
        void implicitMaxPointChanged(const QVector3D &implicitMaxPoint);
        void implicitPointsValidChanged(bool implicitPointsValid);
        void minPointChanged(QVector3D minPoint);
        void maxPointChanged(QVector3D maxPoint);
    };
};
