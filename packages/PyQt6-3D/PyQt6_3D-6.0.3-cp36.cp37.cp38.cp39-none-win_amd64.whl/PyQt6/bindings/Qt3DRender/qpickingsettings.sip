// qpickingsettings.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qpickingsettings.h>
%End

    class QPickingSettings : Qt3DCore::QNode
    {
%TypeHeaderCode
#include <qpickingsettings.h>
%End

    public:
        explicit QPickingSettings(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QPickingSettings();

        enum PickMethod
        {
            BoundingVolumePicking,
            TrianglePicking,
            LinePicking,
            PointPicking,
            PrimitivePicking,
        };

        enum PickResultMode
        {
            NearestPick,
            AllPicks,
            NearestPriorityPick,
        };

        Qt3DRender::QPickingSettings::PickMethod pickMethod() const;
        Qt3DRender::QPickingSettings::PickResultMode pickResultMode() const;

    public slots:
        void setPickMethod(Qt3DRender::QPickingSettings::PickMethod pickMethod);
        void setPickResultMode(Qt3DRender::QPickingSettings::PickResultMode pickResultMode);

    signals:
        void pickMethodChanged(Qt3DRender::QPickingSettings::PickMethod pickMethod /ScopesStripped=1/);
        void pickResultModeChanged(Qt3DRender::QPickingSettings::PickResultMode pickResult /ScopesStripped=1/);

    public:
        enum FaceOrientationPickingMode
        {
            FrontFace,
            BackFace,
            FrontAndBackFace,
        };

        Qt3DRender::QPickingSettings::FaceOrientationPickingMode faceOrientationPickingMode() const;

    public slots:
        void setFaceOrientationPickingMode(Qt3DRender::QPickingSettings::FaceOrientationPickingMode faceOrientationPickingMode);

    signals:
        void faceOrientationPickingModeChanged(Qt3DRender::QPickingSettings::FaceOrientationPickingMode faceOrientationPickingMode /ScopesStripped=1/);

    public:
        float worldSpaceTolerance() const;

    public slots:
        void setWorldSpaceTolerance(float worldSpaceTolerance);

    signals:
        void worldSpaceToleranceChanged(float worldSpaceTolerance);
    };
};
