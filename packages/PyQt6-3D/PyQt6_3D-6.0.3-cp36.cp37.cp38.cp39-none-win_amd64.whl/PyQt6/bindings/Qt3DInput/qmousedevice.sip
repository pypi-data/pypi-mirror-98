// qmousedevice.sip generated by MetaSIP
//
// This file is part of the Qt3DInput Python extension module.
//
// Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DInput
{
%TypeHeaderCode
#include <qmousedevice.h>
%End

    class QMouseDevice : Qt3DInput::QAbstractPhysicalDevice
    {
%TypeHeaderCode
#include <qmousedevice.h>
%End

    public:
        explicit QMouseDevice(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QMouseDevice();

        enum Axis
        {
            X,
            Y,
            WheelX,
            WheelY,
        };

        virtual int axisCount() const final;
        virtual int buttonCount() const final;
        virtual QStringList axisNames() const final;
        virtual QStringList buttonNames() const final;
        virtual int axisIdentifier(const QString &name) const final;
        virtual int buttonIdentifier(const QString &name) const final;
        bool updateAxesContinuously() const;
        float sensitivity() const;

    public slots:
        void setSensitivity(float value);
        void setUpdateAxesContinuously(bool updateAxesContinuously);

    signals:
        void sensitivityChanged(float value);
        void updateAxesContinuouslyChanged(bool updateAxesContinuously);
    };
};
