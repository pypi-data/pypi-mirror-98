// qt3dwindow.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DExtras
{
%TypeHeaderCode
#include <qt3dwindow.h>
%End

    class Qt3DWindow : QWindow
    {
%TypeHeaderCode
#include <qt3dwindow.h>
%End

%ConvertToSubClassCode
        static struct class_graph {
            const char *name;
            sipTypeDef **type;
            int yes, no;
        } graph[] = {
            {sipName_Qt3DExtras__QAbstractCameraController, &sipType_Qt3DExtras_QAbstractCameraController, 39, 1},
            {sipName_Qt3DExtras__QAbstractSpriteSheet, &sipType_Qt3DExtras_QAbstractSpriteSheet, 41, 2},
            {sipName_Qt3DExtras__QConeGeometry, &sipType_Qt3DExtras_QConeGeometry, -1, 3},
            {sipName_Qt3DExtras__QConeGeometryView, &sipType_Qt3DExtras_QConeGeometryView, -1, 4},
            {sipName_Qt3DExtras__QConeMesh, &sipType_Qt3DExtras_QConeMesh, -1, 5},
            {sipName_Qt3DExtras__QCuboidGeometry, &sipType_Qt3DExtras_QCuboidGeometry, -1, 6},
            {sipName_Qt3DExtras__QCuboidGeometryView, &sipType_Qt3DExtras_QCuboidGeometryView, -1, 7},
            {sipName_Qt3DExtras__QCuboidMesh, &sipType_Qt3DExtras_QCuboidMesh, -1, 8},
            {sipName_Qt3DExtras__QCylinderGeometry, &sipType_Qt3DExtras_QCylinderGeometry, -1, 9},
            {sipName_Qt3DExtras__QCylinderGeometryView, &sipType_Qt3DExtras_QCylinderGeometryView, -1, 10},
            {sipName_Qt3DExtras__QCylinderMesh, &sipType_Qt3DExtras_QCylinderMesh, -1, 11},
            {sipName_Qt3DExtras__QDiffuseMapMaterial, &sipType_Qt3DExtras_QDiffuseMapMaterial, -1, 12},
            {sipName_Qt3DExtras__QDiffuseSpecularMapMaterial, &sipType_Qt3DExtras_QDiffuseSpecularMapMaterial, -1, 13},
            {sipName_Qt3DExtras__QDiffuseSpecularMaterial, &sipType_Qt3DExtras_QDiffuseSpecularMaterial, -1, 14},
            {sipName_Qt3DExtras__QExtrudedTextGeometry, &sipType_Qt3DExtras_QExtrudedTextGeometry, -1, 15},
            {sipName_Qt3DExtras__QExtrudedTextMesh, &sipType_Qt3DExtras_QExtrudedTextMesh, -1, 16},
            {sipName_Qt3DExtras__QForwardRenderer, &sipType_Qt3DExtras_QForwardRenderer, -1, 17},
            {sipName_Qt3DExtras__QGoochMaterial, &sipType_Qt3DExtras_QGoochMaterial, -1, 18},
            {sipName_Qt3DExtras__QMetalRoughMaterial, &sipType_Qt3DExtras_QMetalRoughMaterial, -1, 19},
            {sipName_Qt3DExtras__QMorphPhongMaterial, &sipType_Qt3DExtras_QMorphPhongMaterial, -1, 20},
            {sipName_Qt3DExtras__QNormalDiffuseMapMaterial, &sipType_Qt3DExtras_QNormalDiffuseMapMaterial, 43, 21},
            {sipName_Qt3DExtras__QNormalDiffuseSpecularMapMaterial, &sipType_Qt3DExtras_QNormalDiffuseSpecularMapMaterial, -1, 22},
            {sipName_Qt3DExtras__QPerVertexColorMaterial, &sipType_Qt3DExtras_QPerVertexColorMaterial, -1, 23},
            {sipName_Qt3DExtras__QPhongAlphaMaterial, &sipType_Qt3DExtras_QPhongAlphaMaterial, -1, 24},
            {sipName_Qt3DExtras__QPhongMaterial, &sipType_Qt3DExtras_QPhongMaterial, -1, 25},
            {sipName_Qt3DExtras__QPlaneGeometry, &sipType_Qt3DExtras_QPlaneGeometry, -1, 26},
            {sipName_Qt3DExtras__QPlaneGeometryView, &sipType_Qt3DExtras_QPlaneGeometryView, -1, 27},
            {sipName_Qt3DExtras__QPlaneMesh, &sipType_Qt3DExtras_QPlaneMesh, -1, 28},
            {sipName_Qt3DExtras__QSkyboxEntity, &sipType_Qt3DExtras_QSkyboxEntity, -1, 29},
            {sipName_Qt3DExtras__QSphereGeometry, &sipType_Qt3DExtras_QSphereGeometry, -1, 30},
            {sipName_Qt3DExtras__QSphereGeometryView, &sipType_Qt3DExtras_QSphereGeometryView, -1, 31},
            {sipName_Qt3DExtras__QSphereMesh, &sipType_Qt3DExtras_QSphereMesh, -1, 32},
            {sipName_Qt3DExtras__QSpriteSheetItem, &sipType_Qt3DExtras_QSpriteSheetItem, -1, 33},
            {sipName_Qt3DExtras__QText2DEntity, &sipType_Qt3DExtras_QText2DEntity, -1, 34},
            {sipName_Qt3DExtras__QTextureMaterial, &sipType_Qt3DExtras_QTextureMaterial, -1, 35},
            {sipName_Qt3DExtras__QTorusGeometry, &sipType_Qt3DExtras_QTorusGeometry, -1, 36},
            {sipName_Qt3DExtras__QTorusGeometryView, &sipType_Qt3DExtras_QTorusGeometryView, -1, 37},
            {sipName_Qt3DExtras__QTorusMesh, &sipType_Qt3DExtras_QTorusMesh, -1, 38},
            {sipName_Qt3DExtras__Qt3DWindow, &sipType_Qt3DExtras_Qt3DWindow, -1, -1},
            {sipName_Qt3DExtras__QFirstPersonCameraController, &sipType_Qt3DExtras_QFirstPersonCameraController, -1, 40},
            {sipName_Qt3DExtras__QOrbitCameraController, &sipType_Qt3DExtras_QOrbitCameraController, -1, -1},
            {sipName_Qt3DExtras__QSpriteGrid, &sipType_Qt3DExtras_QSpriteGrid, -1, 42},
            {sipName_Qt3DExtras__QSpriteSheet, &sipType_Qt3DExtras_QSpriteSheet, -1, -1},
            {sipName_Qt3DExtras__QNormalDiffuseMapAlphaMaterial, &sipType_Qt3DExtras_QNormalDiffuseMapAlphaMaterial, -1, -1},
        };
        
        int i = 0;
        
        sipType = NULL;
        
        do
        {
            struct class_graph *cg = &graph[i];
        
            if (cg->name != NULL && sipCpp->inherits(cg->name))
            {
                sipType = *cg->type;
                i = cg->yes;
            }
            else
                i = cg->no;
        }
        while (i >= 0);
%End

    public:
        Qt3DWindow(QScreen *screen = 0);
        virtual ~Qt3DWindow();
        void registerAspect(Qt3DCore::QAbstractAspect *aspect /Transfer/);
        void registerAspect(const QString &name);
        void setRootEntity(Qt3DCore::QEntity *root);
        void setActiveFrameGraph(Qt3DRender::QFrameGraphNode *activeFrameGraph);
        Qt3DRender::QFrameGraphNode *activeFrameGraph() const;
        Qt3DExtras::QForwardRenderer *defaultFrameGraph() const;
        Qt3DRender::QCamera *camera() const;
        Qt3DRender::QRenderSettings *renderSettings() const;

    protected:
        virtual void showEvent(QShowEvent *e);
        virtual void resizeEvent(QResizeEvent *);
        virtual bool event(QEvent *e);
    };
};
