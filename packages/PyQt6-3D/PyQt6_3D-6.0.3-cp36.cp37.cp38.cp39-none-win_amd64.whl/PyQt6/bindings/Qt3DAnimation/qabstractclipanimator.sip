// qabstractclipanimator.sip generated by MetaSIP
//
// This file is part of the Qt3DAnimation Python extension module.
//
// Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DAnimation
{
%TypeHeaderCode
#include <qabstractclipanimator.h>
%End

    class QAbstractClipAnimator : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qabstractclipanimator.h>
%End

    public:
        enum Loops
        {
            Infinite,
        };

        virtual ~QAbstractClipAnimator();
        bool isRunning() const;
        Qt3DAnimation::QChannelMapper *channelMapper() const;
        int loopCount() const;
        Qt3DAnimation::QClock *clock() const;
        float normalizedTime() const;

    public slots:
        void setRunning(bool running);
        void setChannelMapper(Qt3DAnimation::QChannelMapper *channelMapper);
        void setLoopCount(int loops);
        void setClock(Qt3DAnimation::QClock *clock);
        void setNormalizedTime(float timeFraction);
        void start();
        void stop();

    signals:
        void runningChanged(bool running);
        void channelMapperChanged(Qt3DAnimation::QChannelMapper *channelMapper);
        void loopCountChanged(int loops);
        void clockChanged(Qt3DAnimation::QClock *clock);
        void normalizedTimeChanged(float index);

    protected:
        explicit QAbstractClipAnimator(Qt3DCore::QNode *parent /TransferThis/ = 0);
    };
};
