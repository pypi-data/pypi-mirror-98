{"version":3,"sources":["webpack://@jupyterlab/geojson-extension/./style/index.css","webpack://@jupyterlab/geojson-extension/./style/index.css?90c3","webpack://@jupyterlab/geojson-extension/./style/geojson.svg","webpack://@jupyterlab/geojson-extension/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAC4H;AAC7B;AACO;AAC5C;AAC1D,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F,yCAAyC,sFAA+B,CAAC,qDAA6B;AACtG;AACA,qMAAqM,uEAAuE,GAAG,8DAA8D,gBAAgB,iBAAiB,eAAe,qBAAqB,GAAG,iEAAiE,GAAG,+DAA+D,kBAAkB,GAAG,0CAA0C,6CAA6C,GAAG,SAAS,oFAAoF,MAAM,YAAY,MAAM,YAAY,OAAO,YAAY,MAAM,UAAU,UAAU,UAAU,YAAY,OAAO,YAAY,MAAM,MAAM,YAAY,MAAM,UAAU,MAAM,YAAY,MAAM,YAAY,qLAAqL,4CAA4C,GAAG,8DAA8D,gBAAgB,iBAAiB,eAAe,qBAAqB,GAAG,iEAAiE,GAAG,+DAA+D,kBAAkB,GAAG,0CAA0C,6CAA6C,GAAG,qBAAqB;AAC3hD;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACVwD;AAC/F,YAA6F;;AAE7F;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,mFAAO;;;;AAIxB,iEAAe,0FAAc,MAAM,E;;;;;;;;;;ACZnC,2hC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACyC;AACe;AAC1B;AACI;AACN;AACuC;AACT;AACI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,mFAA6C;AACpD,wEAAiC;AACjC,mBAAmB,2EAAa;AAChC,aAAa,wEAAO;AACpB,eAAe,0EAAS;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA,+BAA+B,EAAE,yBAAyB,EAAE,EAAE,EAAE,EAAE,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,mDAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kDAAW;AAC/B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDACc;AAC1B;AACA;AACA,iCAAiC,sDAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2EAAyB;AACjE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC","file":"lib_index_js.3c3d4e4fb9a0886faa67.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/getUrl.js\";\nimport ___CSS_LOADER_URL_IMPORT_0___ from \"./geojson.svg\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/**\\n  Copyright (c) Jupyter Development Team.\\n  Distributed under the terms of the Modified BSD License.\\n*/\\n\\n/* Add CSS variables to :root */\\n:root {\\n  --jp-icon-geojson: url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");\\n}\\n\\n/* Base styles */\\n.jp-RenderedGeoJSON.leaflet-container {\\n  width: 100%;\\n  height: 100%;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n\\n/* Document styles */\\n.jp-MimeDocument .jp-RenderedGeoJSON {\\n}\\n\\n/* Document styles */\\n.jp-OutputArea .jp-RenderedGeoJSON {\\n  height: 360px;\\n}\\n\\n/* Document icon */\\n.jp-GeoJSONIcon {\\n  background-image: var(--jp-icon-geojson);\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/index.css\"],\"names\":[],\"mappings\":\"AAAA;;;CAGC;;AAED,+BAA+B;AAC/B;EACE,0DAAuC;AACzC;;AAEA,gBAAgB;AAChB;EACE,WAAW;EACX,YAAY;EACZ,UAAU;EACV,gBAAgB;AAClB;;AAEA,oBAAoB;AACpB;AACA;;AAEA,oBAAoB;AACpB;EACE,aAAa;AACf;;AAEA,kBAAkB;AAClB;EACE,wCAAwC;AAC1C\",\"sourcesContent\":[\"/**\\n  Copyright (c) Jupyter Development Team.\\n  Distributed under the terms of the Modified BSD License.\\n*/\\n\\n/* Add CSS variables to :root */\\n:root {\\n  --jp-icon-geojson: url('./geojson.svg');\\n}\\n\\n/* Base styles */\\n.jp-RenderedGeoJSON.leaflet-container {\\n  width: 100%;\\n  height: 100%;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n\\n/* Document styles */\\n.jp-MimeDocument .jp-RenderedGeoJSON {\\n}\\n\\n/* Document styles */\\n.jp-OutputArea .jp-RenderedGeoJSON {\\n  height: 360px;\\n}\\n\\n/* Document icon */\\n.jp-GeoJSONIcon {\\n  background-image: var(--jp-icon-geojson);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","module.exports = \"data:image/svg+xml,%3Csvg width='12px' height='12px' viewBox='0 0 12 12' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E %3C!-- Generator: Sketch 42 (36781) - http://www.bohemiancoding.com/sketch --%3E %3Ctitle%3Egeojson%3C/title%3E %3Cdesc%3ECreated with Sketch.%3C/desc%3E %3Cdefs%3E%3C/defs%3E %3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E %3Cg id='geojson' transform='translate(-6.000000, -6.000000)'%3E %3Cpath d='M17.6666667,6 L17.56,6.02 L14,7.4 L10,6 L6.24,7.26666667 C6.1,7.31333333 6,7.43333333 6,7.58666667 L6,17.6666667 C6,17.8533333 6.14666667,18 6.33333333,18 L6.44,17.98 L10,16.6 L14,18 L17.76,16.7333333 C17.9,16.6866667 18,16.5666667 18,16.4133333 L18,6.33333333 C18,6.14666667 17.8533333,6 17.6666667,6 Z M14,16.6666667 L10,15.26 L10,7.33333333 L14,8.74 L14,16.6666667 Z' id='Shape' fill='%231BB233' fill-rule='nonzero'%3E%3C/path%3E %3Cpolygon id='Shape' points='0 0 24 0 24 24 0 24'%3E%3C/polygon%3E %3C/g%3E %3C/g%3E %3C/svg%3E\"","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\nimport { defaultSanitizer } from '@jupyterlab/apputils';\nimport leaflet from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '../style/index.css';\nimport iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconUrl from 'leaflet/dist/images/marker-icon.png';\nimport shadowUrl from 'leaflet/dist/images/marker-shadow.png';\n/**\n * The CSS class to add to the GeoJSON Widget.\n */\nconst CSS_CLASS = 'jp-RenderedGeoJSON';\n/**\n * The CSS class for a GeoJSON icon.\n */\nconst CSS_ICON_CLASS = 'jp-MaterialIcon jp-GeoJSONIcon';\n/**\n * The MIME type for GeoJSON.\n */\nexport const MIME_TYPE = 'application/geo+json';\n/**\n * Set base path for leaflet images.\n */\n// https://github.com/Leaflet/Leaflet/issues/4968\n// Marker file names are hard-coded in the leaflet source causing\n// issues with webpack.\n// This workaround allows webpack to inline all marker URLs.\ndelete leaflet.Icon.Default.prototype['_getIconUrl'];\nleaflet.Icon.Default.mergeOptions({\n    iconRetinaUrl: iconRetinaUrl,\n    iconUrl: iconUrl,\n    shadowUrl: shadowUrl\n});\n/**\n * The url template that leaflet tile layers.\n * See http://leafletjs.com/reference-1.0.3.html#tilelayer\n */\nconst URL_TEMPLATE = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n/**\n * The options for leaflet tile layers.\n * See http://leafletjs.com/reference-1.0.3.html#tilelayer\n */\nconst LAYER_OPTIONS = {\n    attribution: 'Map data (c) <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors',\n    minZoom: 0,\n    maxZoom: 18\n};\nexport class RenderedGeoJSON extends Widget {\n    /**\n     * Create a new widget for rendering GeoJSON.\n     */\n    constructor(options) {\n        super();\n        this.addClass(CSS_CLASS);\n        this._mimeType = options.mimeType;\n        // Create leaflet map object\n        // trackResize option set to false as it is not needed to track\n        // window.resize events since we have individual phosphor resize\n        // events.\n        this._map = leaflet.map(this.node, {\n            trackResize: false\n        });\n    }\n    /**\n     * Dispose of the widget.\n     */\n    dispose() {\n        // Dispose of leaflet map\n        this._map.remove();\n        this._map = null;\n        super.dispose();\n    }\n    /**\n     * Render GeoJSON into this widget's node.\n     */\n    renderModel(model) {\n        const data = model.data[this._mimeType];\n        const metadata = model.metadata[this._mimeType] || {};\n        return new Promise((resolve, reject) => {\n            // Add leaflet tile layer to map\n            leaflet\n                .tileLayer(metadata.url_template || URL_TEMPLATE, metadata.layer_options || LAYER_OPTIONS)\n                .addTo(this._map);\n            // Create GeoJSON layer from data and add to map\n            this._geoJSONLayer = leaflet.geoJSON(data, {\n                onEachFeature: function (feature, layer) {\n                    if (feature.properties) {\n                        var popupContent = '<table>';\n                        for (var p in feature.properties) {\n                            popupContent += '<tr><td>' + p + ':</td><td><b>' + feature.properties[p] + '</b></td></tr>';\n                        }\n                        popupContent += '</table>';\n                        layer.bindPopup(defaultSanitizer.sanitize(popupContent));\n                    }\n                }\n            }).addTo(this._map);\n            this.update();\n            resolve();\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.parent.hasClass('jp-OutputArea-child')) {\n            // Disable scroll zoom by default to avoid conflicts with notebook scroll\n            this._map.scrollWheelZoom.disable();\n            // Enable scroll zoom on map focus\n            this._map.on('blur', event => {\n                this._map.scrollWheelZoom.disable();\n            });\n            // Disable scroll zoom on blur\n            this._map.on('focus', event => {\n                this._map.scrollWheelZoom.enable();\n            });\n        }\n        this.update();\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        this.update();\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        // Update map size after update\n        if (this.isVisible) {\n            this._map.invalidateSize();\n        }\n        // Update map size after panel/window is resized\n        this._map.fitBounds(this._geoJSONLayer.getBounds());\n    }\n}\n/**\n * A mime renderer factory for GeoJSON data.\n */\nexport const rendererFactory = {\n    safe: true,\n    mimeTypes: [MIME_TYPE],\n    createRenderer: options => new RenderedGeoJSON(options)\n};\nconst extensions = [\n    {\n        id: '@jupyterlab/geojson-extension:factory',\n        rendererFactory,\n        rank: 0,\n        dataType: 'json',\n        fileTypes: [\n            {\n                name: 'geojson',\n                mimeTypes: [MIME_TYPE],\n                extensions: ['.geojson', '.geo.json'],\n                iconClass: CSS_ICON_CLASS\n            }\n        ],\n        documentWidgetFactoryOptions: {\n            name: 'GeoJSON',\n            primaryFileType: 'geojson',\n            fileTypes: ['geojson', 'json'],\n            defaultFor: ['geojson']\n        }\n    }\n];\nexport default extensions;\n"],"sourceRoot":""}