<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <Version>0.3.7</Version>
    <!--
      The following properties were determined by following the solution outlined here:
      https://github.com/Microsoft/msbuild/issues/539#issuecomment-289930591
    -->
    <IsWindows Condition="'$(OS)' == 'Windows_NT'">true</IsWindows>
    <IsOSX Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsOSX>
    <IsLinux Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinux>
    <Platforms>AnyCPU;x86</Platforms>
    <ApplicationManifest>app.manifest</ApplicationManifest>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="../../glean-core/csharp/Glean/Glean.csproj" />

    <!--
      Unfortunately, the sample won't be able to find the native dlls, even though they
      live within the runtimes/<rid>/native directory. To make it possible to run
      the sample, manually copy the Glean FFI dll to $(OutDir).
    -->
    <Content Condition="$(IsWindows) == true" Include="../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" CopyToOutputDirectory="Always" />
    <Content Condition="$(IsLinux) == true" Include="../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" CopyToOutputDirectory="Always" />
    <Content Condition="$(IsOSX) == true" Include="../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.dylib" CopyToOutputDirectory="Always" />

  </ItemGroup>

  <!--
    Define the code generating task. We can't load it directly from the AssemblyFile, otherwise
    msbuild will lock the file and fail next builds. To work around this, we generate a task
    definition ourselves and load the real task code inside it.
    External consumers will not need to do that, they will simply reference the AssemblyName or
    AssemblyFile in the UsingTask directive.
    
    Note that we are using the `RoslynCodeTaskFactory` for compiling inline code fragments instead
    of `CodeTaskFactory`. That's because the former is deprecated and not available outside of the
    Windows .NET framework. See https://github.com/dotnet/msbuild/issues/2890 .
  -->
  <UsingTask TaskName="GleanParser" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <RegistryFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputPath ParameterType="System.String" Required="true" />
      <Namespace ParameterType="System.String" Required="true" />
      <AllowReserved ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Code Type="Class" Source="../../glean-core/csharp/Glean/GleanParser.cs" Language="cs" />
    </Task>
  </UsingTask>

  <Target Name="GleanIntegration" BeforeTargets="CoreCompile">
    <ItemGroup>
      <GleanRegistryFiles Include="metrics.yaml" />
      <GleanRegistryFiles Include="pings.yaml" />
    </ItemGroup>
    <!-- This is what actually runs the parser. -->
    <GleanParser RegistryFiles="@(GleanRegistryFiles)" OutputPath="$(IntermediateOutputPath)Glean" Namespace="csharp.GleanMetrics" />

    <!--
      And this adds the generated files to the project, so that they can be found by
      the compiler and Intellisense.
    -->
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)Glean/**/*.cs" />
    </ItemGroup>
  </Target>
</Project>
