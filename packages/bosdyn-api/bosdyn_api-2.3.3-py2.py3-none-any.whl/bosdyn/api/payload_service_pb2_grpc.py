# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bosdyn.api import payload_pb2 as bosdyn_dot_api_dot_payload__pb2


class PayloadServiceStub(object):
  """This service provides a way to query for the currently-registered payloads.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListPayloads = channel.unary_unary(
        '/bosdyn.api.PayloadService/ListPayloads',
        request_serializer=bosdyn_dot_api_dot_payload__pb2.ListPayloadsRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_payload__pb2.ListPayloadsResponse.FromString,
        )


class PayloadServiceServicer(object):
  """This service provides a way to query for the currently-registered payloads.
  """

  def ListPayloads(self, request, context):
    """List all payloads the robot knows about.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PayloadServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListPayloads': grpc.unary_unary_rpc_method_handler(
          servicer.ListPayloads,
          request_deserializer=bosdyn_dot_api_dot_payload__pb2.ListPayloadsRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_payload__pb2.ListPayloadsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.PayloadService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
