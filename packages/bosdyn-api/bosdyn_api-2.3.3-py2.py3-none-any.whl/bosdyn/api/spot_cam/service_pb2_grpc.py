# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bosdyn.api.spot_cam import LED_pb2 as bosdyn_dot_api_dot_spot__cam_dot_LED__pb2
from bosdyn.api.spot_cam import audio_pb2 as bosdyn_dot_api_dot_spot__cam_dot_audio__pb2
from bosdyn.api.spot_cam import compositor_pb2 as bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2
from bosdyn.api.spot_cam import health_pb2 as bosdyn_dot_api_dot_spot__cam_dot_health__pb2
from bosdyn.api.spot_cam import logging_pb2 as bosdyn_dot_api_dot_spot__cam_dot_logging__pb2
from bosdyn.api.spot_cam import network_pb2 as bosdyn_dot_api_dot_spot__cam_dot_network__pb2
from bosdyn.api.spot_cam import power_pb2 as bosdyn_dot_api_dot_spot__cam_dot_power__pb2
from bosdyn.api.spot_cam import ptz_pb2 as bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2
from bosdyn.api.spot_cam import streamquality_pb2 as bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2
from bosdyn.api.spot_cam import version_pb2 as bosdyn_dot_api_dot_spot__cam_dot_version__pb2


class CompositorServiceStub(object):
  """Change the layout of of the video stream between available presets.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetScreen = channel.unary_unary(
        '/bosdyn.api.spot_cam.CompositorService/SetScreen',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenResponse.FromString,
        )
    self.GetScreen = channel.unary_unary(
        '/bosdyn.api.spot_cam.CompositorService/GetScreen',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenResponse.FromString,
        )
    self.ListScreens = channel.unary_unary(
        '/bosdyn.api.spot_cam.CompositorService/ListScreens',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensResponse.FromString,
        )
    self.GetVisibleCameras = channel.unary_unary(
        '/bosdyn.api.spot_cam.CompositorService/GetVisibleCameras',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasResponse.FromString,
        )
    self.SetIrColormap = channel.unary_unary(
        '/bosdyn.api.spot_cam.CompositorService/SetIrColormap',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapResponse.FromString,
        )
    self.GetIrColormap = channel.unary_unary(
        '/bosdyn.api.spot_cam.CompositorService/GetIrColormap',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapResponse.FromString,
        )
    self.SetIrMeterOverlay = channel.unary_unary(
        '/bosdyn.api.spot_cam.CompositorService/SetIrMeterOverlay',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayResponse.FromString,
        )


class CompositorServiceServicer(object):
  """Change the layout of of the video stream between available presets.
  """

  def SetScreen(self, request, context):
    """SetScreen changes the current view that is streamed over the network
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetScreen(self, request, context):
    """GetScreen returns the currently-selected screen
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListScreens(self, request, context):
    """ListScreens returns a list of available screens
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVisibleCameras(self, request, context):
    """GetVisibleCameras returns a list of currently visible windows, with any available metadata
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetIrColormap(self, request, context):
    """set the mapping between radiometric IR samples to color, for video
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetIrColormap(self, request, context):
    """get the mapping between radiometric IR samples to color, for video
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetIrMeterOverlay(self, request, context):
    """apply settings for the 'ir meter overlay'
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CompositorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetScreen': grpc.unary_unary_rpc_method_handler(
          servicer.SetScreen,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenResponse.SerializeToString,
      ),
      'GetScreen': grpc.unary_unary_rpc_method_handler(
          servicer.GetScreen,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenResponse.SerializeToString,
      ),
      'ListScreens': grpc.unary_unary_rpc_method_handler(
          servicer.ListScreens,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensResponse.SerializeToString,
      ),
      'GetVisibleCameras': grpc.unary_unary_rpc_method_handler(
          servicer.GetVisibleCameras,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasResponse.SerializeToString,
      ),
      'SetIrColormap': grpc.unary_unary_rpc_method_handler(
          servicer.SetIrColormap,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapResponse.SerializeToString,
      ),
      'GetIrColormap': grpc.unary_unary_rpc_method_handler(
          servicer.GetIrColormap,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapResponse.SerializeToString,
      ),
      'SetIrMeterOverlay': grpc.unary_unary_rpc_method_handler(
          servicer.SetIrMeterOverlay,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.CompositorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StreamQualityServiceStub(object):
  """Set quality parameters for the stream, such as compression and image postprocessing settings.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetStreamParams = channel.unary_unary(
        '/bosdyn.api.spot_cam.StreamQualityService/SetStreamParams',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsResponse.FromString,
        )
    self.GetStreamParams = channel.unary_unary(
        '/bosdyn.api.spot_cam.StreamQualityService/GetStreamParams',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsResponse.FromString,
        )
    self.EnableCongestionControl = channel.unary_unary(
        '/bosdyn.api.spot_cam.StreamQualityService/EnableCongestionControl',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlResponse.FromString,
        )


class StreamQualityServiceServicer(object):
  """Set quality parameters for the stream, such as compression and image postprocessing settings.
  """

  def SetStreamParams(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetStreamParams(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EnableCongestionControl(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StreamQualityServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetStreamParams': grpc.unary_unary_rpc_method_handler(
          servicer.SetStreamParams,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsResponse.SerializeToString,
      ),
      'GetStreamParams': grpc.unary_unary_rpc_method_handler(
          servicer.GetStreamParams,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsResponse.SerializeToString,
      ),
      'EnableCongestionControl': grpc.unary_unary_rpc_method_handler(
          servicer.EnableCongestionControl,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.StreamQualityService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PowerServiceStub(object):
  """Turn hardware components' power on or off.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetPowerStatus = channel.unary_unary(
        '/bosdyn.api.spot_cam.PowerService/SetPowerStatus',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusResponse.FromString,
        )
    self.GetPowerStatus = channel.unary_unary(
        '/bosdyn.api.spot_cam.PowerService/GetPowerStatus',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusResponse.FromString,
        )
    self.CyclePower = channel.unary_unary(
        '/bosdyn.api.spot_cam.PowerService/CyclePower',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerResponse.FromString,
        )


class PowerServiceServicer(object):
  """Turn hardware components' power on or off.
  """

  def SetPowerStatus(self, request, context):
    """Turn components' power on or off. This should not be used to power cycle a component
    Turning PTZ power off for too long will cause the video stream to fail
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPowerStatus(self, request, context):
    """Get current status of a component
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CyclePower(self, request, context):
    """Cycle power for a component
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PowerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetPowerStatus': grpc.unary_unary_rpc_method_handler(
          servicer.SetPowerStatus,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusResponse.SerializeToString,
      ),
      'GetPowerStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetPowerStatus,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusResponse.SerializeToString,
      ),
      'CyclePower': grpc.unary_unary_rpc_method_handler(
          servicer.CyclePower,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.PowerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class LightingServiceStub(object):
  """Change the brightness level of individual LEDs.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetLEDBrightness = channel.unary_unary(
        '/bosdyn.api.spot_cam.LightingService/SetLEDBrightness',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessResponse.FromString,
        )
    self.GetLEDBrightness = channel.unary_unary(
        '/bosdyn.api.spot_cam.LightingService/GetLEDBrightness',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessResponse.FromString,
        )


class LightingServiceServicer(object):
  """Change the brightness level of individual LEDs.
  """

  def SetLEDBrightness(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLEDBrightness(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LightingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetLEDBrightness': grpc.unary_unary_rpc_method_handler(
          servicer.SetLEDBrightness,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessResponse.SerializeToString,
      ),
      'GetLEDBrightness': grpc.unary_unary_rpc_method_handler(
          servicer.GetLEDBrightness,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.LightingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MediaLogServiceStub(object):
  """Trigger data acquisitions, and retrieve resulting data.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Store = channel.unary_unary(
        '/bosdyn.api.spot_cam.MediaLogService/Store',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreResponse.FromString,
        )
    self.GetStatus = channel.unary_unary(
        '/bosdyn.api.spot_cam.MediaLogService/GetStatus',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusResponse.FromString,
        )
    self.Tag = channel.unary_unary(
        '/bosdyn.api.spot_cam.MediaLogService/Tag',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagResponse.FromString,
        )
    self.EnableDebug = channel.unary_unary(
        '/bosdyn.api.spot_cam.MediaLogService/EnableDebug',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugResponse.FromString,
        )
    self.ListCameras = channel.unary_unary(
        '/bosdyn.api.spot_cam.MediaLogService/ListCameras',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasResponse.FromString,
        )
    self.RetrieveRawData = channel.unary_stream(
        '/bosdyn.api.spot_cam.MediaLogService/RetrieveRawData',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataResponse.FromString,
        )
    self.Retrieve = channel.unary_stream(
        '/bosdyn.api.spot_cam.MediaLogService/Retrieve',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/bosdyn.api.spot_cam.MediaLogService/Delete',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteResponse.FromString,
        )
    self.ListLogpoints = channel.unary_stream(
        '/bosdyn.api.spot_cam.MediaLogService/ListLogpoints',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsResponse.FromString,
        )
    self.SetPassphrase = channel.unary_unary(
        '/bosdyn.api.spot_cam.MediaLogService/SetPassphrase',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseResponse.FromString,
        )


class MediaLogServiceServicer(object):
  """Trigger data acquisitions, and retrieve resulting data.
  """

  def Store(self, request, context):
    """Store queues up a Logpoint, which is a bit of media that the user wishes to store to disk
    (still images are supported for now, more media types will be supported in the future)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetStatus(self, request, context):
    """GetStatus reads the 'name' field of the Logpoint contained in GetStatusRequest, and fills in
    the rest of the fields. Mainly useful for getting the 'state' of the logpoint.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Tag(self, request, context):
    """Tag updates the 'tag' field of the Logpoint that's passed, which must exist.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EnableDebug(self, request, context):
    """EnableDebug starts the periodic logging of health data to the database; this increases disk utilization, but will record data that is useful post-mortum
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListCameras(self, request, context):
    """ListCameras returns a list of strings that identify valid cameras for logging
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RetrieveRawData(self, request, context):
    """Retrieve returns all raw data associated with a given logpoint
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Retrieve(self, request, context):
    """Retrieve returns all data associated with a given logpoint
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete removes a Logpoint from the system
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListLogpoints(self, request, context):
    """ListLogpoints returns a list of all logpoints in the database.
    Warning: this may be a lot of data.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetPassphrase(self, request, context):
    """SetPassphrase sets the eCryptFS passphrase used by the filesystem.
    there is no symmetry here, because key material is write-only
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MediaLogServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Store': grpc.unary_unary_rpc_method_handler(
          servicer.Store,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreResponse.SerializeToString,
      ),
      'GetStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetStatus,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusResponse.SerializeToString,
      ),
      'Tag': grpc.unary_unary_rpc_method_handler(
          servicer.Tag,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagResponse.SerializeToString,
      ),
      'EnableDebug': grpc.unary_unary_rpc_method_handler(
          servicer.EnableDebug,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugResponse.SerializeToString,
      ),
      'ListCameras': grpc.unary_unary_rpc_method_handler(
          servicer.ListCameras,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasResponse.SerializeToString,
      ),
      'RetrieveRawData': grpc.unary_stream_rpc_method_handler(
          servicer.RetrieveRawData,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataResponse.SerializeToString,
      ),
      'Retrieve': grpc.unary_stream_rpc_method_handler(
          servicer.Retrieve,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteResponse.SerializeToString,
      ),
      'ListLogpoints': grpc.unary_stream_rpc_method_handler(
          servicer.ListLogpoints,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsResponse.SerializeToString,
      ),
      'SetPassphrase': grpc.unary_unary_rpc_method_handler(
          servicer.SetPassphrase,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.MediaLogService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PtzServiceStub(object):
  """Control real and virtual ptz mechanisms.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetPtzPosition = channel.unary_unary(
        '/bosdyn.api.spot_cam.PtzService/SetPtzPosition',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionResponse.FromString,
        )
    self.GetPtzPosition = channel.unary_unary(
        '/bosdyn.api.spot_cam.PtzService/GetPtzPosition',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionResponse.FromString,
        )
    self.SetPtzVelocity = channel.unary_unary(
        '/bosdyn.api.spot_cam.PtzService/SetPtzVelocity',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityResponse.FromString,
        )
    self.GetPtzVelocity = channel.unary_unary(
        '/bosdyn.api.spot_cam.PtzService/GetPtzVelocity',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityResponse.FromString,
        )
    self.ListPtz = channel.unary_unary(
        '/bosdyn.api.spot_cam.PtzService/ListPtz',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzResponse.FromString,
        )


class PtzServiceServicer(object):
  """Control real and virtual ptz mechanisms.
  """

  def SetPtzPosition(self, request, context):
    """SetPosition points the referenced camera to a given vector (in PTZ-space)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPtzPosition(self, request, context):
    """GetPosition returns the current settings of the referenced camera
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetPtzVelocity(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPtzVelocity(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListPtz(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PtzServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetPtzPosition': grpc.unary_unary_rpc_method_handler(
          servicer.SetPtzPosition,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionResponse.SerializeToString,
      ),
      'GetPtzPosition': grpc.unary_unary_rpc_method_handler(
          servicer.GetPtzPosition,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionResponse.SerializeToString,
      ),
      'SetPtzVelocity': grpc.unary_unary_rpc_method_handler(
          servicer.SetPtzVelocity,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityResponse.SerializeToString,
      ),
      'GetPtzVelocity': grpc.unary_unary_rpc_method_handler(
          servicer.GetPtzVelocity,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityResponse.SerializeToString,
      ),
      'ListPtz': grpc.unary_unary_rpc_method_handler(
          servicer.ListPtz,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.PtzService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class AudioServiceStub(object):
  """Upload and play sounds over the SpotCam's speakers.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PlaySound = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/PlaySound',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundResponse.FromString,
        )
    self.LoadSound = channel.stream_unary(
        '/bosdyn.api.spot_cam.AudioService/LoadSound',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundResponse.FromString,
        )
    self.DeleteSound = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/DeleteSound',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundResponse.FromString,
        )
    self.ListSounds = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/ListSounds',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsResponse.FromString,
        )
    self.SetVolume = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/SetVolume',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeResponse.FromString,
        )
    self.GetVolume = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/GetVolume',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeResponse.FromString,
        )
    self.SetAudioCaptureChannel = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/SetAudioCaptureChannel',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelResponse.FromString,
        )
    self.GetAudioCaptureChannel = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/GetAudioCaptureChannel',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelResponse.FromString,
        )
    self.SetAudioCaptureGain = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/SetAudioCaptureGain',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainResponse.FromString,
        )
    self.GetAudioCaptureGain = channel.unary_unary(
        '/bosdyn.api.spot_cam.AudioService/GetAudioCaptureGain',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainResponse.FromString,
        )


class AudioServiceServicer(object):
  """Upload and play sounds over the SpotCam's speakers.
  """

  def PlaySound(self, request, context):
    """Given a soundRequest that identifies a single sound present in the system's sound effects table, PlaySound executes the sound effect.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def LoadSound(self, request_iterator, context):
    """LoadSound loads a sound effect into the system's sound table. The stream must contain a wav file, with a RIFF header describing it.
    The arguement is a stream, to allow for sounds that are bigger then the MTU of the network; in this case, the complete stream must
    contain the entire sound. If the stream ends early, an error will be returned. The header and sound fields of the entire stream must
    be the same.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteSound(self, request, context):
    """Delete the sound identified in the argument from the system's sound table.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListSounds(self, request, context):
    """ListSounds returns a list of all of the sound effects that the system knows about.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetVolume(self, request, context):
    """Set the overall volume level for playing sounds.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVolume(self, request, context):
    """Set the overall volume level for playing sounds.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetAudioCaptureChannel(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAudioCaptureChannel(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetAudioCaptureGain(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAudioCaptureGain(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AudioServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PlaySound': grpc.unary_unary_rpc_method_handler(
          servicer.PlaySound,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundResponse.SerializeToString,
      ),
      'LoadSound': grpc.stream_unary_rpc_method_handler(
          servicer.LoadSound,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundResponse.SerializeToString,
      ),
      'DeleteSound': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteSound,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundResponse.SerializeToString,
      ),
      'ListSounds': grpc.unary_unary_rpc_method_handler(
          servicer.ListSounds,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsResponse.SerializeToString,
      ),
      'SetVolume': grpc.unary_unary_rpc_method_handler(
          servicer.SetVolume,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeResponse.SerializeToString,
      ),
      'GetVolume': grpc.unary_unary_rpc_method_handler(
          servicer.GetVolume,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeResponse.SerializeToString,
      ),
      'SetAudioCaptureChannel': grpc.unary_unary_rpc_method_handler(
          servicer.SetAudioCaptureChannel,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelResponse.SerializeToString,
      ),
      'GetAudioCaptureChannel': grpc.unary_unary_rpc_method_handler(
          servicer.GetAudioCaptureChannel,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelResponse.SerializeToString,
      ),
      'SetAudioCaptureGain': grpc.unary_unary_rpc_method_handler(
          servicer.SetAudioCaptureGain,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainResponse.SerializeToString,
      ),
      'GetAudioCaptureGain': grpc.unary_unary_rpc_method_handler(
          servicer.GetAudioCaptureGain,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.AudioService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class HealthServiceStub(object):
  """Query temperature and built-in test results.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetTemperature = channel.unary_unary(
        '/bosdyn.api.spot_cam.HealthService/GetTemperature',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureResponse.FromString,
        )
    self.GetBITStatus = channel.unary_unary(
        '/bosdyn.api.spot_cam.HealthService/GetBITStatus',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusResponse.FromString,
        )
    self.ClearBITEvents = channel.unary_unary(
        '/bosdyn.api.spot_cam.HealthService/ClearBITEvents',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsResponse.FromString,
        )


class HealthServiceServicer(object):
  """Query temperature and built-in test results.
  """

  def GetTemperature(self, request, context):
    """GetTemperature returns a list of thermometers in the system, and the temperature that they measure.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBITStatus(self, request, context):
    """GetBitStatus returns two lists; a list of system events, and a list of ways that the system is degraded;
    for instance, a degredation may include a missing PTZ unit, or a missing USB storage device.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClearBITEvents(self, request, context):
    """ClearBitEvents clears out the events list of the BITStatus structure.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HealthServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetTemperature,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureResponse.SerializeToString,
      ),
      'GetBITStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetBITStatus,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusResponse.SerializeToString,
      ),
      'ClearBITEvents': grpc.unary_unary_rpc_method_handler(
          servicer.ClearBITEvents,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.HealthService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class NetworkServiceStub(object):
  """Modify or query network settings of the SpotCam and ICE resolution servers.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetICEConfiguration = channel.unary_unary(
        '/bosdyn.api.spot_cam.NetworkService/SetICEConfiguration',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationResponse.FromString,
        )
    self.GetICEConfiguration = channel.unary_unary(
        '/bosdyn.api.spot_cam.NetworkService/GetICEConfiguration',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationResponse.FromString,
        )


class NetworkServiceServicer(object):
  """Modify or query network settings of the SpotCam and ICE resolution servers.
  """

  def SetICEConfiguration(self, request, context):
    """SetICEConfiguration sets up parameters for ICE, including addresses for STUN and TURN services
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetICEConfiguration(self, request, context):
    """GetICEConfiguration retrieves currently set parameters for ICE, including addresses for STUN and TURN services
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NetworkServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetICEConfiguration': grpc.unary_unary_rpc_method_handler(
          servicer.SetICEConfiguration,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationResponse.SerializeToString,
      ),
      'GetICEConfiguration': grpc.unary_unary_rpc_method_handler(
          servicer.GetICEConfiguration,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.NetworkService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class VersionServiceStub(object):
  """Query the version of the software release running on the SpotCam.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetSoftwareVersion = channel.unary_unary(
        '/bosdyn.api.spot_cam.VersionService/GetSoftwareVersion',
        request_serializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionResponse.FromString,
        )


class VersionServiceServicer(object):
  """Query the version of the software release running on the SpotCam.
  """

  def GetSoftwareVersion(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VersionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetSoftwareVersion': grpc.unary_unary_rpc_method_handler(
          servicer.GetSoftwareVersion,
          request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.spot_cam.VersionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
