# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bosdyn.api.mission import mission_pb2 as bosdyn_dot_api_dot_mission_dot_mission__pb2


class MissionServiceStub(object):
  """The MissionService can be used to specify high level autonomous behaviors for Spot using behavior trees.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.LoadMission = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/LoadMission',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.LoadMissionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.LoadMissionResponse.FromString,
        )
    self.PlayMission = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/PlayMission',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PlayMissionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PlayMissionResponse.FromString,
        )
    self.PauseMission = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/PauseMission',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PauseMissionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PauseMissionResponse.FromString,
        )
    self.RestartMission = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/RestartMission',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.RestartMissionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.RestartMissionResponse.FromString,
        )
    self.GetState = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/GetState',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetStateRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetStateResponse.FromString,
        )
    self.GetInfo = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/GetInfo',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetInfoRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetInfoResponse.FromString,
        )
    self.GetMission = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/GetMission',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetMissionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetMissionResponse.FromString,
        )
    self.AnswerQuestion = channel.unary_unary(
        '/bosdyn.api.mission.MissionService/AnswerQuestion',
        request_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.AnswerQuestionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.AnswerQuestionResponse.FromString,
        )


class MissionServiceServicer(object):
  """The MissionService can be used to specify high level autonomous behaviors for Spot using behavior trees.
  """

  def LoadMission(self, request, context):
    """Load a mission to run later.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PlayMission(self, request, context):
    """Start executing a loaded mission.
    Will not restart a mission that has run to completion. Use RestartMission to do that.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PauseMission(self, request, context):
    """Pause mission execution.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RestartMission(self, request, context):
    """Start executing a loaded mission from the beginning.
    Does not need to be called after LoadMission.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetState(self, request, context):
    """Get the state of the mission.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInfo(self, request, context):
    """Get static information regarding the mission. Used to interpret mission state.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetMission(self, request, context):
    """Download the mission as it was uploaded to the service.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AnswerQuestion(self, request, context):
    """Specify an answer to the question asked by the mission.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MissionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'LoadMission': grpc.unary_unary_rpc_method_handler(
          servicer.LoadMission,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.LoadMissionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.LoadMissionResponse.SerializeToString,
      ),
      'PlayMission': grpc.unary_unary_rpc_method_handler(
          servicer.PlayMission,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PlayMissionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PlayMissionResponse.SerializeToString,
      ),
      'PauseMission': grpc.unary_unary_rpc_method_handler(
          servicer.PauseMission,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PauseMissionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.PauseMissionResponse.SerializeToString,
      ),
      'RestartMission': grpc.unary_unary_rpc_method_handler(
          servicer.RestartMission,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.RestartMissionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.RestartMissionResponse.SerializeToString,
      ),
      'GetState': grpc.unary_unary_rpc_method_handler(
          servicer.GetState,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetStateRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetStateResponse.SerializeToString,
      ),
      'GetInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetInfo,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetInfoRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetInfoResponse.SerializeToString,
      ),
      'GetMission': grpc.unary_unary_rpc_method_handler(
          servicer.GetMission,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetMissionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.GetMissionResponse.SerializeToString,
      ),
      'AnswerQuestion': grpc.unary_unary_rpc_method_handler(
          servicer.AnswerQuestion,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.AnswerQuestionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_mission__pb2.AnswerQuestionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.mission.MissionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
