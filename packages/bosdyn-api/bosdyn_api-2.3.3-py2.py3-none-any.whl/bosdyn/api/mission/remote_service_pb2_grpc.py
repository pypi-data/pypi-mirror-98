# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bosdyn.api.mission import remote_pb2 as bosdyn_dot_api_dot_mission_dot_remote__pb2


class RemoteMissionServiceStub(object):
  """Interface for mission callbacks.  Mission RemoteGrpc nodes will act as clients
  to this service type, calling out to this service when loaded, ticked, or unloaded.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.EstablishSession = channel.unary_unary(
        '/bosdyn.api.mission.RemoteMissionService/EstablishSession',
        request_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.EstablishSessionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.EstablishSessionResponse.FromString,
        )
    self.Tick = channel.unary_unary(
        '/bosdyn.api.mission.RemoteMissionService/Tick',
        request_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TickRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TickResponse.FromString,
        )
    self.Stop = channel.unary_unary(
        '/bosdyn.api.mission.RemoteMissionService/Stop',
        request_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.StopRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.StopResponse.FromString,
        )
    self.TeardownSession = channel.unary_unary(
        '/bosdyn.api.mission.RemoteMissionService/TeardownSession',
        request_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TeardownSessionRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TeardownSessionResponse.FromString,
        )


class RemoteMissionServiceServicer(object):
  """Interface for mission callbacks.  Mission RemoteGrpc nodes will act as clients
  to this service type, calling out to this service when loaded, ticked, or unloaded.
  """

  def EstablishSession(self, request, context):
    """Call this once at mission load time, once for each node that references this remote service.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Tick(self, request, context):
    """Call this every time the RemoteGrpc node is ticked.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Stop(self, request, context):
    """Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
    in this cycle. Signals that the next tick will be a restart, rather than a continuation.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TeardownSession(self, request, context):
    """Tells the service it can forget any data associated with the given session ID.
    Should be called once for every EstablishSession call.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RemoteMissionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'EstablishSession': grpc.unary_unary_rpc_method_handler(
          servicer.EstablishSession,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.EstablishSessionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.EstablishSessionResponse.SerializeToString,
      ),
      'Tick': grpc.unary_unary_rpc_method_handler(
          servicer.Tick,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TickRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TickResponse.SerializeToString,
      ),
      'Stop': grpc.unary_unary_rpc_method_handler(
          servicer.Stop,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.StopRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.StopResponse.SerializeToString,
      ),
      'TeardownSession': grpc.unary_unary_rpc_method_handler(
          servicer.TeardownSession,
          request_deserializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TeardownSessionRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_mission_dot_remote__pb2.TeardownSessionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.mission.RemoteMissionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
