# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bosdyn.api import robot_command_pb2 as bosdyn_dot_api_dot_robot__command__pb2


class RobotCommandServiceStub(object):
  """The robot command service allows a client application to control and move the robot.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RobotCommand = channel.unary_unary(
        '/bosdyn.api.RobotCommandService/RobotCommand',
        request_serializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandResponse.FromString,
        )
    self.RobotCommandFeedback = channel.unary_unary(
        '/bosdyn.api.RobotCommandService/RobotCommandFeedback',
        request_serializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandFeedbackRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandFeedbackResponse.FromString,
        )
    self.ClearBehaviorFault = channel.unary_unary(
        '/bosdyn.api.RobotCommandService/ClearBehaviorFault',
        request_serializer=bosdyn_dot_api_dot_robot__command__pb2.ClearBehaviorFaultRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_robot__command__pb2.ClearBehaviorFaultResponse.FromString,
        )


class RobotCommandServiceServicer(object):
  """The robot command service allows a client application to control and move the robot.
  """

  def RobotCommand(self, request, context):
    """Starts a behavior command on the robot. Issuing a new command overrides the active command.
    Each command is issued a UID for feedback retrieval.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RobotCommandFeedback(self, request, context):
    """A client queries this RPC to determine a robot's progress towards completion of a command.
    This updates the client with metrics like "distance to goal."
    The client should use this feedback to determine whether the current command has
    succeeeded or failed, and thus send the next command.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClearBehaviorFault(self, request, context):
    """Clear robot behavior fault.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RobotCommandServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RobotCommand': grpc.unary_unary_rpc_method_handler(
          servicer.RobotCommand,
          request_deserializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandResponse.SerializeToString,
      ),
      'RobotCommandFeedback': grpc.unary_unary_rpc_method_handler(
          servicer.RobotCommandFeedback,
          request_deserializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandFeedbackRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_robot__command__pb2.RobotCommandFeedbackResponse.SerializeToString,
      ),
      'ClearBehaviorFault': grpc.unary_unary_rpc_method_handler(
          servicer.ClearBehaviorFault,
          request_deserializer=bosdyn_dot_api_dot_robot__command__pb2.ClearBehaviorFaultRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_robot__command__pb2.ClearBehaviorFaultResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.RobotCommandService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
