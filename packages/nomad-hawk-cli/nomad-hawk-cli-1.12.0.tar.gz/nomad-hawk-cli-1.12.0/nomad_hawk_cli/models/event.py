# coding: utf-8

"""
    Nomad Hawk

    This is the API descriptor for the Nomad Hawk API, responsible for tracking and analytics.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nomad_hawk_cli.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'category': 'str',
        'label': 'str',
        'message': 'str',
        'location_city': 'str',
        'location_country': 'str',
        'company': 'str',
        'value': 'str',
        'value_type': 'str',
        'source': 'str',
        'sales_channel': 'str',
        'user': 'str',
        'user_age': 'int',
        'user_gender': 'str',
        'id': 'str',
        'items': 'list[EventItem]',
        'tax': 'float',
        'shipping': 'float',
        'tags': 'list[str]',
        'brand': 'str',
        'item_sku': 'str',
        'campaign_name': 'str',
        'campaign_source': 'str',
        'campaign_medium': 'str',
        'ip': 'str',
        'customs_filing_id': 'str',
        'user_agent': 'str',
        'referrer': 'str'
    }

    attribute_map = {
        'type': 'type',
        'category': 'category',
        'label': 'label',
        'message': 'message',
        'location_city': 'location_city',
        'location_country': 'location_country',
        'company': 'company',
        'value': 'value',
        'value_type': 'value_type',
        'source': 'source',
        'sales_channel': 'sales_channel',
        'user': 'user',
        'user_age': 'user_age',
        'user_gender': 'user_gender',
        'id': 'id',
        'items': 'items',
        'tax': 'tax',
        'shipping': 'shipping',
        'tags': 'tags',
        'brand': 'brand',
        'item_sku': 'item_sku',
        'campaign_name': 'campaign_name',
        'campaign_source': 'campaign_source',
        'campaign_medium': 'campaign_medium',
        'ip': 'ip',
        'customs_filing_id': 'customs_filing_id',
        'user_agent': 'user_agent',
        'referrer': 'referrer'
    }

    def __init__(self, type=None, category=None, label=None, message=None, location_city=None, location_country=None, company=None, value=None, value_type=None, source=None, sales_channel=None, user=None, user_age=None, user_gender=None, id=None, items=None, tax=None, shipping=None, tags=None, brand=None, item_sku=None, campaign_name=None, campaign_source=None, campaign_medium=None, ip=None, customs_filing_id=None, user_agent=None, referrer=None, local_vars_configuration=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._category = None
        self._label = None
        self._message = None
        self._location_city = None
        self._location_country = None
        self._company = None
        self._value = None
        self._value_type = None
        self._source = None
        self._sales_channel = None
        self._user = None
        self._user_age = None
        self._user_gender = None
        self._id = None
        self._items = None
        self._tax = None
        self._shipping = None
        self._tags = None
        self._brand = None
        self._item_sku = None
        self._campaign_name = None
        self._campaign_source = None
        self._campaign_medium = None
        self._ip = None
        self._customs_filing_id = None
        self._user_agent = None
        self._referrer = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if label is not None:
            self.label = label
        if message is not None:
            self.message = message
        if location_city is not None:
            self.location_city = location_city
        if location_country is not None:
            self.location_country = location_country
        if company is not None:
            self.company = company
        if value is not None:
            self.value = value
        if value_type is not None:
            self.value_type = value_type
        if source is not None:
            self.source = source
        if sales_channel is not None:
            self.sales_channel = sales_channel
        if user is not None:
            self.user = user
        if user_age is not None:
            self.user_age = user_age
        if user_gender is not None:
            self.user_gender = user_gender
        if id is not None:
            self.id = id
        if items is not None:
            self.items = items
        if tax is not None:
            self.tax = tax
        if shipping is not None:
            self.shipping = shipping
        if tags is not None:
            self.tags = tags
        if brand is not None:
            self.brand = brand
        if item_sku is not None:
            self.item_sku = item_sku
        if campaign_name is not None:
            self.campaign_name = campaign_name
        if campaign_source is not None:
            self.campaign_source = campaign_source
        if campaign_medium is not None:
            self.campaign_medium = campaign_medium
        if ip is not None:
            self.ip = ip
        if customs_filing_id is not None:
            self.customs_filing_id = customs_filing_id
        if user_agent is not None:
            self.user_agent = user_agent
        if referrer is not None:
            self.referrer = referrer

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this Event.  # noqa: E501


        :return: The category of this Event.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Event.


        :param category: The category of this Event.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def label(self):
        """Gets the label of this Event.  # noqa: E501


        :return: The label of this Event.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Event.


        :param label: The label of this Event.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def message(self):
        """Gets the message of this Event.  # noqa: E501


        :return: The message of this Event.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Event.


        :param message: The message of this Event.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def location_city(self):
        """Gets the location_city of this Event.  # noqa: E501


        :return: The location_city of this Event.  # noqa: E501
        :rtype: str
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this Event.


        :param location_city: The location_city of this Event.  # noqa: E501
        :type: str
        """

        self._location_city = location_city

    @property
    def location_country(self):
        """Gets the location_country of this Event.  # noqa: E501


        :return: The location_country of this Event.  # noqa: E501
        :rtype: str
        """
        return self._location_country

    @location_country.setter
    def location_country(self, location_country):
        """Sets the location_country of this Event.


        :param location_country: The location_country of this Event.  # noqa: E501
        :type: str
        """

        self._location_country = location_country

    @property
    def company(self):
        """Gets the company of this Event.  # noqa: E501


        :return: The company of this Event.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Event.


        :param company: The company of this Event.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def value(self):
        """Gets the value of this Event.  # noqa: E501


        :return: The value of this Event.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Event.


        :param value: The value of this Event.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_type(self):
        """Gets the value_type of this Event.  # noqa: E501


        :return: The value_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this Event.


        :param value_type: The value_type of this Event.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    @property
    def source(self):
        """Gets the source of this Event.  # noqa: E501


        :return: The source of this Event.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Event.


        :param source: The source of this Event.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def sales_channel(self):
        """Gets the sales_channel of this Event.  # noqa: E501


        :return: The sales_channel of this Event.  # noqa: E501
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this Event.


        :param sales_channel: The sales_channel of this Event.  # noqa: E501
        :type: str
        """

        self._sales_channel = sales_channel

    @property
    def user(self):
        """Gets the user of this Event.  # noqa: E501


        :return: The user of this Event.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Event.


        :param user: The user of this Event.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def user_age(self):
        """Gets the user_age of this Event.  # noqa: E501


        :return: The user_age of this Event.  # noqa: E501
        :rtype: int
        """
        return self._user_age

    @user_age.setter
    def user_age(self, user_age):
        """Sets the user_age of this Event.


        :param user_age: The user_age of this Event.  # noqa: E501
        :type: int
        """

        self._user_age = user_age

    @property
    def user_gender(self):
        """Gets the user_gender of this Event.  # noqa: E501


        :return: The user_gender of this Event.  # noqa: E501
        :rtype: str
        """
        return self._user_gender

    @user_gender.setter
    def user_gender(self, user_gender):
        """Sets the user_gender of this Event.


        :param user_gender: The user_gender of this Event.  # noqa: E501
        :type: str
        """

        self._user_gender = user_gender

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this Event.  # noqa: E501


        :return: The items of this Event.  # noqa: E501
        :rtype: list[EventItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Event.


        :param items: The items of this Event.  # noqa: E501
        :type: list[EventItem]
        """

        self._items = items

    @property
    def tax(self):
        """Gets the tax of this Event.  # noqa: E501


        :return: The tax of this Event.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Event.


        :param tax: The tax of this Event.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def shipping(self):
        """Gets the shipping of this Event.  # noqa: E501


        :return: The shipping of this Event.  # noqa: E501
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Event.


        :param shipping: The shipping of this Event.  # noqa: E501
        :type: float
        """

        self._shipping = shipping

    @property
    def tags(self):
        """Gets the tags of this Event.  # noqa: E501


        :return: The tags of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Event.


        :param tags: The tags of this Event.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def brand(self):
        """Gets the brand of this Event.  # noqa: E501


        :return: The brand of this Event.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Event.


        :param brand: The brand of this Event.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def item_sku(self):
        """Gets the item_sku of this Event.  # noqa: E501


        :return: The item_sku of this Event.  # noqa: E501
        :rtype: str
        """
        return self._item_sku

    @item_sku.setter
    def item_sku(self, item_sku):
        """Sets the item_sku of this Event.


        :param item_sku: The item_sku of this Event.  # noqa: E501
        :type: str
        """

        self._item_sku = item_sku

    @property
    def campaign_name(self):
        """Gets the campaign_name of this Event.  # noqa: E501


        :return: The campaign_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this Event.


        :param campaign_name: The campaign_name of this Event.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def campaign_source(self):
        """Gets the campaign_source of this Event.  # noqa: E501


        :return: The campaign_source of this Event.  # noqa: E501
        :rtype: str
        """
        return self._campaign_source

    @campaign_source.setter
    def campaign_source(self, campaign_source):
        """Sets the campaign_source of this Event.


        :param campaign_source: The campaign_source of this Event.  # noqa: E501
        :type: str
        """

        self._campaign_source = campaign_source

    @property
    def campaign_medium(self):
        """Gets the campaign_medium of this Event.  # noqa: E501


        :return: The campaign_medium of this Event.  # noqa: E501
        :rtype: str
        """
        return self._campaign_medium

    @campaign_medium.setter
    def campaign_medium(self, campaign_medium):
        """Sets the campaign_medium of this Event.


        :param campaign_medium: The campaign_medium of this Event.  # noqa: E501
        :type: str
        """

        self._campaign_medium = campaign_medium

    @property
    def ip(self):
        """Gets the ip of this Event.  # noqa: E501


        :return: The ip of this Event.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Event.


        :param ip: The ip of this Event.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def customs_filing_id(self):
        """Gets the customs_filing_id of this Event.  # noqa: E501


        :return: The customs_filing_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._customs_filing_id

    @customs_filing_id.setter
    def customs_filing_id(self, customs_filing_id):
        """Sets the customs_filing_id of this Event.


        :param customs_filing_id: The customs_filing_id of this Event.  # noqa: E501
        :type: str
        """

        self._customs_filing_id = customs_filing_id

    @property
    def user_agent(self):
        """Gets the user_agent of this Event.  # noqa: E501


        :return: The user_agent of this Event.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Event.


        :param user_agent: The user_agent of this Event.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def referrer(self):
        """Gets the referrer of this Event.  # noqa: E501


        :return: The referrer of this Event.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this Event.


        :param referrer: The referrer of this Event.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
