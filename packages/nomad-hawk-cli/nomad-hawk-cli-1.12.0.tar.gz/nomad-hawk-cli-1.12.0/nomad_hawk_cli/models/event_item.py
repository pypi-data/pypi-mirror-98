# coding: utf-8

"""
    Nomad Hawk

    This is the API descriptor for the Nomad Hawk API, responsible for tracking and analytics.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nomad_hawk_cli.configuration import Configuration


class EventItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_name': 'str',
        'item_price': 'float',
        'item_quantity': 'int',
        'item_category': 'str',
        'item_barcode': 'str',
        'item_currency': 'str',
        'item_brand': 'str',
        'item_brand_type': 'str',
        'item_sku': 'str',
        'item_variant': 'object',
        'item_cost': 'float',
        'item_discount': 'float'
    }

    attribute_map = {
        'item_name': 'item_name',
        'item_price': 'item_price',
        'item_quantity': 'item_quantity',
        'item_category': 'item_category',
        'item_barcode': 'item_barcode',
        'item_currency': 'item_currency',
        'item_brand': 'item_brand',
        'item_brand_type': 'item_brand_type',
        'item_sku': 'item_sku',
        'item_variant': 'item_variant',
        'item_cost': 'item_cost',
        'item_discount': 'item_discount'
    }

    def __init__(self, item_name=None, item_price=None, item_quantity=None, item_category=None, item_barcode=None, item_currency=None, item_brand=None, item_brand_type=None, item_sku=None, item_variant=None, item_cost=None, item_discount=None, local_vars_configuration=None):  # noqa: E501
        """EventItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_name = None
        self._item_price = None
        self._item_quantity = None
        self._item_category = None
        self._item_barcode = None
        self._item_currency = None
        self._item_brand = None
        self._item_brand_type = None
        self._item_sku = None
        self._item_variant = None
        self._item_cost = None
        self._item_discount = None
        self.discriminator = None

        if item_name is not None:
            self.item_name = item_name
        if item_price is not None:
            self.item_price = item_price
        if item_quantity is not None:
            self.item_quantity = item_quantity
        if item_category is not None:
            self.item_category = item_category
        if item_barcode is not None:
            self.item_barcode = item_barcode
        if item_currency is not None:
            self.item_currency = item_currency
        if item_brand is not None:
            self.item_brand = item_brand
        if item_brand_type is not None:
            self.item_brand_type = item_brand_type
        if item_sku is not None:
            self.item_sku = item_sku
        if item_variant is not None:
            self.item_variant = item_variant
        if item_cost is not None:
            self.item_cost = item_cost
        if item_discount is not None:
            self.item_discount = item_discount

    @property
    def item_name(self):
        """Gets the item_name of this EventItem.  # noqa: E501


        :return: The item_name of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this EventItem.


        :param item_name: The item_name of this EventItem.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def item_price(self):
        """Gets the item_price of this EventItem.  # noqa: E501


        :return: The item_price of this EventItem.  # noqa: E501
        :rtype: float
        """
        return self._item_price

    @item_price.setter
    def item_price(self, item_price):
        """Sets the item_price of this EventItem.


        :param item_price: The item_price of this EventItem.  # noqa: E501
        :type: float
        """

        self._item_price = item_price

    @property
    def item_quantity(self):
        """Gets the item_quantity of this EventItem.  # noqa: E501


        :return: The item_quantity of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._item_quantity

    @item_quantity.setter
    def item_quantity(self, item_quantity):
        """Sets the item_quantity of this EventItem.


        :param item_quantity: The item_quantity of this EventItem.  # noqa: E501
        :type: int
        """

        self._item_quantity = item_quantity

    @property
    def item_category(self):
        """Gets the item_category of this EventItem.  # noqa: E501


        :return: The item_category of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._item_category

    @item_category.setter
    def item_category(self, item_category):
        """Sets the item_category of this EventItem.


        :param item_category: The item_category of this EventItem.  # noqa: E501
        :type: str
        """

        self._item_category = item_category

    @property
    def item_barcode(self):
        """Gets the item_barcode of this EventItem.  # noqa: E501


        :return: The item_barcode of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._item_barcode

    @item_barcode.setter
    def item_barcode(self, item_barcode):
        """Sets the item_barcode of this EventItem.


        :param item_barcode: The item_barcode of this EventItem.  # noqa: E501
        :type: str
        """

        self._item_barcode = item_barcode

    @property
    def item_currency(self):
        """Gets the item_currency of this EventItem.  # noqa: E501


        :return: The item_currency of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._item_currency

    @item_currency.setter
    def item_currency(self, item_currency):
        """Sets the item_currency of this EventItem.


        :param item_currency: The item_currency of this EventItem.  # noqa: E501
        :type: str
        """

        self._item_currency = item_currency

    @property
    def item_brand(self):
        """Gets the item_brand of this EventItem.  # noqa: E501


        :return: The item_brand of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._item_brand

    @item_brand.setter
    def item_brand(self, item_brand):
        """Sets the item_brand of this EventItem.


        :param item_brand: The item_brand of this EventItem.  # noqa: E501
        :type: str
        """

        self._item_brand = item_brand

    @property
    def item_brand_type(self):
        """Gets the item_brand_type of this EventItem.  # noqa: E501


        :return: The item_brand_type of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._item_brand_type

    @item_brand_type.setter
    def item_brand_type(self, item_brand_type):
        """Sets the item_brand_type of this EventItem.


        :param item_brand_type: The item_brand_type of this EventItem.  # noqa: E501
        :type: str
        """

        self._item_brand_type = item_brand_type

    @property
    def item_sku(self):
        """Gets the item_sku of this EventItem.  # noqa: E501


        :return: The item_sku of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._item_sku

    @item_sku.setter
    def item_sku(self, item_sku):
        """Sets the item_sku of this EventItem.


        :param item_sku: The item_sku of this EventItem.  # noqa: E501
        :type: str
        """

        self._item_sku = item_sku

    @property
    def item_variant(self):
        """Gets the item_variant of this EventItem.  # noqa: E501


        :return: The item_variant of this EventItem.  # noqa: E501
        :rtype: object
        """
        return self._item_variant

    @item_variant.setter
    def item_variant(self, item_variant):
        """Sets the item_variant of this EventItem.


        :param item_variant: The item_variant of this EventItem.  # noqa: E501
        :type: object
        """

        self._item_variant = item_variant

    @property
    def item_cost(self):
        """Gets the item_cost of this EventItem.  # noqa: E501


        :return: The item_cost of this EventItem.  # noqa: E501
        :rtype: float
        """
        return self._item_cost

    @item_cost.setter
    def item_cost(self, item_cost):
        """Sets the item_cost of this EventItem.


        :param item_cost: The item_cost of this EventItem.  # noqa: E501
        :type: float
        """

        self._item_cost = item_cost

    @property
    def item_discount(self):
        """Gets the item_discount of this EventItem.  # noqa: E501


        :return: The item_discount of this EventItem.  # noqa: E501
        :rtype: float
        """
        return self._item_discount

    @item_discount.setter
    def item_discount(self, item_discount):
        """Sets the item_discount of this EventItem.


        :param item_discount: The item_discount of this EventItem.  # noqa: E501
        :type: float
        """

        self._item_discount = item_discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventItem):
            return True

        return self.to_dict() != other.to_dict()
