ARG BASE
FROM ${BASE}

ENV DEBIAN_FRONTEND=noninteractive

ARG PACKAGES
# arch for which we are building for (i.e. the cross arch)
ARG HOSTARCH

# Skip package installation if arch to build for is the same as the native. For
# multi-arch images, only the foreign one will need a cross toolchain.
RUN if [ "$(uname -m)" != "${HOSTARCH}" ]; then apt-get update \
    && apt-get install \
        --assume-yes \
        --no-install-recommends \
        --option=debug::pkgProblemResolver=yes \
        $PACKAGES; \
    fi

# Install development libraries for kselftest
# Only official Debian architectures are supported, as those are the only ones
# where we can ensure that the foreign userspace libraries needed to cross
# compile are available and in good shape enough to be installable and usable.
RUN arch=$(dpkg-architecture --host-type=${HOSTARCH}-linux-gnu --query=DEB_HOST_ARCH); \
    if [ "${arch}" = "arm" ]; then arch=armhf; fi; \
    case "${arch}" in \
        amd64|arm64|armel|armhf|i386|mips64el|mipsel|ppc64el|s390x) \
            ;; \
        *) \
            exit; \
            ;; \
    esac; \
    if [ "$(uname -m)" != "${HOSTARCH}" -a -n "${HOSTARCH}" ]; then \
        dpkg --add-architecture ${arch}; \
    fi && \
    apt-get update && \
    apt-get install \
        --assume-yes \
        --no-install-recommends \
        --option=debug::pkgProblemResolver=yes \
        libbinutils:${arch} \
        libbabeltrace-dev:${arch} \
        libssl-dev:${arch} \
        libelf-dev:${arch} \
        libc6-dev:${arch} \
        libcap-dev:${arch} \
        libcap-ng-dev:${arch} \
        libdrm-dev:${arch} \
        libdw-dev:${arch} \
        libelf-dev:${arch} \
        libfuse-dev:${arch} \
        libhugetlbfs-dev:${arch} \
        libkeyutils-dev:${arch} \
        libiberty-dev:${arch} \
        libmnl-dev:${arch} \
        libmount-dev:${arch} \
        libnuma-dev:${arch} \
        libpci-dev:${arch} \
        libpopt-dev:${arch} \
        libreadline-dev:${arch} \
        libslang2-dev:${arch} \
        libssl-dev:${arch} \
        $(test "${arch}" != "s390x" && echo libunwind-dev:${arch}) \
        libzstd-dev:${arch} \
        systemtap-sdt-dev:${arch} \
        libc-dev-bin \
        && \
    # This is a horrible hack, but a foreign binutils-dev is not installable \
    # See https://bugs.debian.org/983540 \
    apt-get download binutils-dev:${arch} && \
    dpkg -x binutils-dev*.deb /tmp/binutils-dev && \
    rsync -avp /tmp/binutils-dev/ / && \
    rm -rf binutils-dev*.deb /tmp/binutils-dev

# For gcc images, symlink all binaries with unversioned names into $PATH
RUN for bin in $(ls -1 /usr/bin/*-[0-9]* | xargs -n 1 basename); do \
    unver=${bin%-[0-9]*}; \
    if [ ! -x /usr/bin/${unver} ]; then \
        ln -sfv /usr/bin/$bin /usr/local/bin/${unver}; \
        fi; \
    done

# For clang images, symlink all the binaries in $PATH
RUN if [ -d /usr/lib/llvm-*/bin ]; then ln -sfv /usr/lib/llvm-*/bin/* /usr/local/bin/; fi

# The GCC plugins have no default package name, so we must discover the installed
# GCC version in order to install them. :(
RUN apt-get install \
        --assume-yes \
        --no-install-recommends \
        --option=debug::pkgProblemResolver=yes \
        $(dpkg -l 'gcc-*' | grep ^.i | awk '{print $2}' | \
          grep -E '^gcc-[0-9]*-(.*)-base(:.*)*$' | grep -v -- -cross-base | \
          sed -e 's/^gcc-\([0-9]*\)-/gcc-\1-plugin-dev-/; s/-base//;')

# vim: ft=dockerfile
