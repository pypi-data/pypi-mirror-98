# ==================
# Import Expressions
# ==================
---

- slug: upload-expression
  name: Expression data
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
    resources:
      cores: 1
      memory: 1024
      network: true
  data_name: '{{ exp_name }}'
  version: 2.4.1
  type: data:expression
  flow_collection: sample
  category: Import
  persistence: RAW
  description: |
      Upload expression data by providing raw expression data (read counts)
      and/or normalized expression data together with the associated data
      normalization type.
  input:
    - name: rc
      label: Read counts (raw expression)
      type: basic:file
      description: |
        Reads mapped to genomic features (raw count data). Supported extensions: .txt.gz (preferred), .tab.* or .txt.*
      required: false
      validate_regex: '\.(txt|tab|gz)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
    - name: exp
      label: Normalized expression
      type: basic:file
      description: |
        Normalized expression data. Supported extensions: .tab.gz (preferred) or .tab.*
      required: false
      validate_regex: '\.(tab|gz)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
    - name: exp_name
      label: Expression name
      type: basic:string
    - name: exp_type
      label: Normalization type
      type: basic:string
      description: |
        Normalization type
      required: false
    - name: source
      label: Gene ID source
      type: basic:string
      allow_custom_choice: true
      choices:
        - label: AFFY
          value: AFFY
        - label: DICTYBASE
          value: DICTYBASE
        - label: ENSEMBL
          value: ENSEMBL
        - label: NCBI
          value: NCBI
        - label: UCSC
          value: UCSC
    - name: species
      label: Species
      type: basic:string
      description: |
        Species latin name.
      allow_custom_choice: true
      choices:
        - label: Homo sapiens
          value: Homo sapiens
        - label: Mus musculus
          value: Mus musculus
        - label: Rattus norvegicus
          value: Rattus norvegicus
        - label: Dictyostelium discoideum
          value: Dictyostelium discoideum
        - label: Odocoileus virginianus texanus
          value: Odocoileus virginianus texanus
        - label: Solanum tuberosum
          value: Solanum tuberosum
    - name: build
      label: Build
      type: basic:string
      description: |
        Genome build or annotation version.
    - name: feature_type
      label: Feature type
      type: basic:string
      allow_custom_choice: true
      default: gene
      choices:
        - label: gene
          value: gene
        - label: transcript
          value: transcript
        - label: exon
          value: exon
  output:
    - name: exp
      label: Normalized expression
      type: basic:file
      description: Normalized expression
    - name: rc
      label: Read counts
      type: basic:file
      required: false
      description: Reads mapped to genomic features.
    - name: exp_json
      label: Expression (json)
      type: basic:json
    - name: exp_type
      label: Expression type
      type: basic:string
    - name: exp_set
      label: Expressions
      type: basic:file
    - name: exp_set_json
      label: Expressions (json)
      type: basic:json
    - name: source
      label: Gene ID source
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      {% if not exp and not rc %}
        re-error "Please provide raw or/and normalized expression files."

      {% elif exp and not exp_type %}
        re-error "Please provide normalization type together with normalized expressions."

      {% elif not exp and exp_type and rc %}
        re-error "Please provide raw or/and normalized expression files."

      {% elif rc and not exp and not exp_type %}
        re-import {{ rc.file_temp|default(rc.file) }} {{ rc.file }} "txt|tab|gz" "tab" 0.1 compress
        EXP_NAME="${NAME}"
        re-save exp_type RC
        re-save-file exp "${EXP_NAME}.tab.gz"
        re-save-file rc "${EXP_NAME}.tab.gz"

        expression2storage.py --output json.txt "${NAME}.tab.gz"
        re-checkrc
        re-save exp_json json.txt
        re-save source {{ source }}
        re-save species {{ species }}
        re-save build {{ build }}
        re-save feature_type {{ feature_type }}

      {% elif exp and exp_type and not rc %}
        re-import {{ exp.file_temp|default(exp.file) }} {{ exp.file }} "tab|gz" "tab" 0.1 compress
        EXP_NAME="${NAME}"
        re-save exp_type {{ exp_type }}
        re-save-file exp "${EXP_NAME}.tab.gz"
        re-save feature_type {{ feature_type }}

        expression2storage.py --output json.txt "${NAME}.tab.gz"
        re-checkrc
        re-save exp_json json.txt
        re-save source {{ source }}
        re-save species {{ species }}
        re-save build {{ build }}
        re-save feature_type {{ feature_type }}

      {% else %}
        re-import {{ rc.file_temp|default(rc.file) }} {{ rc.file }} "txt|tab|gz" "tab" 0.5 compress
        EXP_NAME=${NAME}
        re-import {{ exp.file_temp|default(exp.file) }} {{ exp.file }} "tab|gz" "tab" 0.9 compress
        NORM_EXP_NAME=${NAME}
        re-save exp_type {{ exp_type }}
        re-save-file exp "${NORM_EXP_NAME}.tab.gz"
        re-save-file rc "${EXP_NAME}.tab.gz"

        expression2storage.py --output json.txt "${NORM_EXP_NAME}.tab.gz"
        re-checkrc
        re-save exp_json json.txt
        re-save source {{ source }}
        re-save species {{ species }}
        re-save build {{ build }}
        re-save feature_type {{ feature_type }}
      {% endif %}

      create_expression_set.py \
        {% if exp and exp_type and not rc %}--expressions_type {{ exp_type }}{% endif %} \
        {% if exp and exp_type and rc %}--norm_expressions_type {{ exp_type }} --norm_expressions "${NORM_EXP_NAME}.tab.gz"{% endif %} \
        --expressions "${EXP_NAME}.tab.gz" \
        --source_db {{ source }} \
        --species {{ species }} \
        --output_name "${EXP_NAME}_expressions"
      re-checkrc

      re-save-file exp_set "${EXP_NAME}_expressions.txt.gz"
      re-save exp_set_json "${EXP_NAME}_expressions.json"



- slug: upload-expression-cuffnorm
  name: Expression data (Cuffnorm)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
    resources:
      cores: 1
      memory: 1024
      network: true
  data_name: '{{ exp.file|default("?") }}'
  version: 1.6.1
  type: data:expression
  category: Import
  persistence: RAW
  flow_collection: sample
  description: |
      Upload expression data by providing Cuffnorm results.
  input:
    - name: exp
      label: Normalized expression
      type: basic:file
    - name: cxb
      label: Cuffquant analysis
      type: data:cufflinks:cuffquant
      description: |
        Cuffquant analysis.
    - name: exp_type
      label: Normalization type
      type: basic:string
      default: 'Cuffnorm'
  output:
    - name: exp
      label: Normalized expression
      type: basic:file
      description: Normalized expression
    - name: rc
      label: Read counts
      type: basic:file
      description: Reads mapped to genomic features.
      required: false
    - name: exp_json
      label: Expression (json)
      type: basic:json
    - name: exp_type
      label: Expression type
      type: basic:string
    - name: exp_set
      label: Expressions
      type: basic:file
    - name: exp_set_json
      label: Expressions (json)
      type: basic:json
    - name: source
      label: Gene ID source
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      {% if exp and not exp_type %}
        re-error "Please provide normalization type together with normalized expressions."
      {% elif exp and exp_type and cxb %}
        re-import {{ exp.file_temp|default(exp.file) }} {{ exp.file }} "tab|gz" "tab" 0.1 compress
        re-save exp_type {{ exp_type }}
        re-save-file exp "${NAME}.tab.gz"
        re-save source {{ cxb.source }}
        re-save species {{ cxb.species }}
        re-save build {{ cxb.build }}
        # Cuffnorm process spawns an upload of gene-level expression files
        re-save feature_type gene
        expression2storage.py --output json.txt "${NAME}.tab.gz"
        re-checkrc
        re-save exp_json json.txt

        create_expression_set.py \
          --expressions "${NAME}.tab.gz" \
          --source_db {{ cxb.source }} \
          --species {{ cxb.species }} \
          --output_name "${NAME}_expressions" \
          --expressions_type {{ exp_type }}
        re-checkrc

        re-save-file exp_set "${NAME}_expressions.txt.gz"
        re-save exp_set_json "${NAME}_expressions.json"
      {% endif %}


- slug: upload-expression-star
  name: Expression data (STAR)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
    resources:
      cores: 1
      memory: 1024
      network: true
  data_name: STAR expression '({{ rc.file|default("?") }})'
  version: 1.5.1
  type: data:expression:star
  category: Import
  persistence: RAW
  flow_collection: sample
  description: |
        Upload expression data by providing STAR aligner results.
  input:
    - name: rc
      label: Read counts (raw expression)
      type: basic:file
      description: |
        Reads mapped to genomic features (raw count data). Supported extensions: .txt.gz (preferred), .tab.* or .txt.*
      validate_regex: '\.(txt|tab|gz)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
    - name: stranded
      label: Is data from a strand specific assay?
      type: basic:string
      description: |
        For stranded=no, a read is considered overlapping with a feature
        regardless of whether it is mapped to the same or the opposite
        strand as the feature. For stranded=yes and single-end reads,
        the read has to be mapped to the same strand as the feature.
        For paired-end reads, the first read has to be on the same
        strand and the second read on the opposite strand. For
        stranded=reverse, these rules are reversed.
      default: "yes"
      choices:
        - label: "yes"
          value: "yes"
        - label: "no"
          value: "no"
        - label: reverse
          value: reverse
    - name: source
      label: Gene ID source
      type: basic:string
      allow_custom_choice: true
      choices:
        - label: AFFY
          value: AFFY
        - label: DICTYBASE
          value: DICTYBASE
        - label: ENSEMBL
          value: ENSEMBL
        - label: NCBI
          value: NCBI
        - label: UCSC
          value: UCSC
    - name: species
      label: Species
      type: basic:string
      description: |
        Species latin name.
      allow_custom_choice: true
      choices:
        - label: Homo sapiens
          value: Homo sapiens
        - label: Mus musculus
          value: Mus musculus
        - label: Rattus norvegicus
          value: Rattus norvegicus
        - label: Dictyostelium discoideum
          value: Dictyostelium discoideum
        - label: Odocoileus virginianus texanus
          value: Odocoileus virginianus texanus
        - label: Solanum tuberosum
          value: Solanum tuberosum
    - name: build
      label: Build
      type: basic:string
      description: |
        Genome build or annotation version.
    - name: feature_type
      label: Feature type
      type: basic:string
      allow_custom_choice: true
      default: gene
      choices:
        - label: gene
          value: gene
        - label: transcript
          value: transcript
        - label: exon
          value: exon
  output:
    - name: rc
      label: Read counts (raw data)
      type: basic:file
      description: Reads mapped to genomic features.
    - name: exp
      label: Expression data
      type: basic:file
    - name: exp_json
      label: Expression (json)
      type: basic:json
    - name: exp_type
      label: Expression type
      type: basic:string
    - name: exp_set
      label: Expressions
      type: basic:file
    - name: exp_set_json
      label: Expressions (json)
      type: basic:json
    - name: source
      label: Gene ID source
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      re-import {{ rc.file_temp|default(rc.file) }} {{ rc.file }} "txt|tab|gz" "tab" 0.1

      tail -n+5 "${NAME}.tab" > raw_rc.tab
      parse_star_expressions.py raw_rc.tab "${NAME}"

      re-save exp_type "RC"
      re-save source {{ source }}
      re-save species {{ species }}
      re-save build {{ build }}
      re-save feature_type {{ feature_type }}

      if [ {{stranded}} = "no" ]; then
        gzip "${NAME}_rc_unstranded.tab"
        expression2storage.py "${NAME}_rc_unstranded.tab.gz"
        re-save-file rc "${NAME}_rc_unstranded.tab.gz"
        re-save-file exp "${NAME}_rc_unstranded.tab.gz"
      fi

      if [ {{stranded}} = "yes" ]; then
        gzip "${NAME}_rc_stranded.tab"
        expression2storage.py "${NAME}_rc_stranded.tab.gz"
        re-save-file rc "${NAME}_rc_stranded.tab.gz"
        re-save-file exp "${NAME}_rc_stranded.tab.gz"
      fi

      if [ {{stranded}} = "reverse" ]; then
        gzip "${NAME}_rc_stranded_reverse.tab"
        expression2storage.py "${NAME}_rc_stranded_reverse.tab.gz"
        re-save-file rc "${NAME}_rc_stranded_reverse.tab.gz"
        re-save-file exp "${NAME}_rc_stranded_reverse.tab.gz"
      fi

      create_expression_set.py \
        --expressions "${NAME}"_rc_*.tab.gz \
        --source_db {{ source }} \
        --species {{ species }} \
        --output_name "${NAME}_expressions"
      re-checkrc

      re-save-file exp_set "${NAME}_expressions.txt.gz"
      re-save exp_set_json "${NAME}_expressions.json"
