# ===================
# ChIP-Seq - MACS 2.0
# ===================
---

- slug: macs2-callpeak
  name: MACS 2.0
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/chipseq:5.0.0
    resources:
      memory: 16384
      cores: 10
  data_name: "{{ case|sample_name|default('?') }}"
  version: 4.3.1
  type: data:chipseq:callpeak:macs2
  entity:
    type: sample
    input: case
  category: ChIP-Seq:Call Peaks
  persistence: CACHED
  description: |
    Model-based Analysis of ChIP-Seq (MACS 2.0), is used to identify transcript
    factor binding sites. MACS 2.0 captures the influence of genome complexity
    to evaluate the significance of enriched ChIP regions, and MACS improves
    the spatial resolution of binding sites through combining the information
    of both sequencing tag position and orientation. It has also an option to
    link nearby peaks together in order to call broad peaks. See
    [here](https://github.com/taoliu/MACS/) for more information.

    In addition to peak-calling, this process computes ChIP-Seq and
    ATAC-Seq QC metrics. Process returns a QC metrics report, fragment
    length estimation, and a deduplicated tagAlign file. QC report
    contains ENCODE 3 proposed QC metrics --
    [NRF](https://www.encodeproject.org/data-standards/terms/),
    [PBC bottlenecking coefficients, NSC, and RSC](https://genome.ucsc.edu/ENCODE/qualityMetrics.html#chipSeq).
  input:
    - name: case
      label: Case (treatment)
      type: data:alignment:bam
    - name: control
      label: Control (background)
      type: data:alignment:bam
      required: false
    - name: promoter
      label: Promoter regions BED file
      type: data:bed
      required: false
      description: |
        BED file containing promoter regions (TSS+-1000bp for example). Needed to get the number
        of peaks and reads mapped to promoter regions.
    - name: tagalign
      label: Use tagAlign files
      type: basic:boolean
      default: false
      description: |
         Use filtered tagAlign files as case (treatment) and control
         (background) samples. If extsize parameter is not set, run MACS
         using input's estimated fragment length.
    - name: prepeakqc_settings
      label: Pre-peak QC settings
      group:
        - name: q_threshold
          label: Quality filtering threshold
          type: basic:integer
          default: 30
        - name: n_sub
          label: Number of reads to subsample
          type: basic:integer
          default: 15000000
        - name: tn5
          label: Tn5 shifting
          type: basic:boolean
          default: false
          description: |
            Tn5 transposon shifting. Shift reads on "+" strand by 4bp and reads on "-" strand by 5bp.
        - name: shift
          label: User-defined cross-correlation peak strandshift
          type: basic:integer
          required: false
          description: |
            If defined, SPP tool will not try to estimate fragment length but will use the given value
            as fragment length.
    - name: settings
      label: MACS2 settings
      group:
        - name: format
          label: Format of tag file
          type: basic:string
          hidden: "tagalign"
          choices:
            - label: "BAM"
              value: "BAM"
            - label: "BAMPE"
              value: "BAMPE"
          default: "BAM"
          description: |
            This specifies the format of input files. For paired-end
            data the format dicates how MACS2 will treat mates. If the
            selected format is BAM, MACS2 will only keep the left mate
            (5' end) tag. However, when format BAMPE is selected, MACS2
            will use actual insert sizes of pairs of reads to build
            fragment pileup, instead of building bimodal distribution
            plus and minus strand reads to predict fragment size.
        - name: duplicates
          label: Number of duplicates
          type: basic:string
          required: false
          hidden: "tagalign"
          choices:
            - label: "1"
              value: "1"
            - label: "auto"
              value: "auto"
            - label: "all"
              value: "all"
          description: |
            It controls the MACS behavior towards duplicate tags at the exact same location -- the
            same coordination and the same strand. The 'auto' option makes MACS calculate the
            maximum tags at the exact same location based on binomal distribution using 1e-5 as
            pvalue cutoff and the 'all' option keeps all the tags. If an integer is given, at most
            this number of tags will be kept at the same location. The default is to keep one tag
            at the same location.
        - name: duplicates_prepeak
          label: Number of duplicates
          type: basic:string
          hidden: "!tagalign"
          required: false
          default: all
          choices:
            - label: "1"
              value: "1"
            - label: "auto"
              value: "auto"
            - label: "all"
              value: "all"
          description: |
            It controls the MACS behavior towards duplicate tags at the exact same location -- the
            same coordination and the same strand. The 'auto' option makes MACS calculate the
            maximum tags at the exact same location based on binomal distribution using 1e-5 as
            pvalue cutoff and the 'all' option keeps all the tags. If an integer is given, at most
            this number of tags will be kept at the same location. The default is to keep one tag
            at the same location.
        - name: qvalue
          label: Q-value cutoff
          type: basic:decimal
          required: false
          disabled: "settings.pvalue && settings.pvalue_prepeak"
          description: |
            The q-value (minimum FDR) cutoff to call significant regions. Q-values
            are calculated from p-values using Benjamini-Hochberg procedure.
        - name: pvalue
          label: P-value cutoff
          type: basic:decimal
          required: false
          disabled: "settings.qvalue"
          hidden: "tagalign"
          description: |
            The p-value cutoff. If specified, MACS2 will use p-value instead of q-value cutoff.
        - name: pvalue_prepeak
          label: P-value cutoff
          type: basic:decimal
          disabled: "settings.qvalue"
          hidden: "!tagalign || settings.qvalue"
          default: 0.00001
          description: |
            The p-value cutoff. If specified, MACS2 will use p-value instead of q-value cutoff.
        - name: cap_num
          label: Cap number of peaks by taking top N peaks
          type: basic:integer
          default: 500000
          disabled: "settings.broad"
          description: |
            To keep all peaks set value to 0.
        - name: mfold_lower
          label: MFOLD range (lower limit)
          type: basic:integer
          required: false
          description: |
            This parameter is used to select the regions within MFOLD range of high-confidence
            enrichment ratio against background to build model. The regions must be lower than
            upper limit, and higher than the lower limit of fold enrichment. DEFAULT:10,30 means
            using all regions not too low (>10) and not too high (<30) to build paired-peaks
            model. If MACS can not find more than 100 regions to build model, it will use the
            --extsize parameter to continue the peak detection ONLY if --fix-bimodal is set.
        - name: mfold_upper
          label: MFOLD range (upper limit)
          type: basic:integer
          required: false
          description: |
            This parameter is used to select the regions within MFOLD range of high-confidence
            enrichment ratio against background to build model. The regions must be lower than
            upper limit, and higher than the lower limit of fold enrichment. DEFAULT:10,30 means
            using all regions not too low (>10) and not too high (<30) to build paired-peaks
            model. If MACS can not find more than 100 regions to build model, it will use the
            --extsize parameter to continue the peak detection ONLY if --fix-bimodal is set.
        - name: slocal
          label: Small local region
          type: basic:integer
          required: false
          description: |
            Slocal and llocal parameters control which two levels of regions will be checked
            around the peak regions to calculate the maximum lambda as local lambda. By default,
            MACS considers 1000bp for small local region (--slocal), and 10000bps for large local
            region (--llocal) which captures the bias from a long range effect like an open
            chromatin domain. You can tweak these according to your project. Remember that if the
            region is set too small, a sharp spike in the input data may kill the significant
            peak.
        - name: llocal
          label: Large local region
          type: basic:integer
          required: false
          description: |
            Slocal and llocal parameters control which two levels of regions will be checked
            around the peak regions to calculate the maximum lambda as local lambda. By default,
            MACS considers 1000bp for small local region (--slocal), and 10000bps for large local
            region (--llocal) which captures the bias from a long range effect like an open
            chromatin domain. You can tweak these according to your project. Remember that if the
            region is set too small, a sharp spike in the input data may kill the significant
            peak.
        - name: extsize
          label: extsize
          type: basic:integer
          required: false
          description: |
            While '--nomodel' is set, MACS uses this parameter to extend reads in 5'->3' direction
            to fix-sized fragments. For example, if the size of binding region for your
            transcription factor is 200 bp, and you want to bypass the model building by MACS,
            this parameter can be set as 200. This option is only valid when --nomodel is set or
            when MACS fails to build model and --fix-bimodal is on.
        - name: shift
          label: Shift
          type: basic:integer
          required: false
          hidden: "settings.format == 'BAMPE'"
          description: |
            Note, this is NOT the legacy --shiftsize option which is replaced by --extsize! You
            can set an arbitrary shift in bp here. Please Use discretion while setting it other
            than default value (0). When --nomodel is set, MACS will use this value to move
            cutting ends (5') then apply --extsize from 5' to 3' direction to extend them to
            fragments. When this value is negative, ends will be moved toward 3'->5' direction,
            otherwise 5'->3' direction. Recommended to keep it as default 0 for ChIP-Seq datasets,
            or -1 * half of EXTSIZE together with --extsize option for detecting enriched cutting
            loci such as certain DNAseI-Seq datasets. Note, you can't set values other than 0 if
            format is BAMPE for paired-end data. Default is 0.
        - name: band_width
          label: Band width
          type: basic:integer
          required: false
          description: |
            The band width which is used to scan the genome ONLY for model building. You can set
            this parameter as the sonication fragment size expected from wet experiment. The
            previous side effect on the peak detection process has been removed. So this parameter
            only affects the model building.
        - name: nolambda
          label: Use backgroud lambda as local lambda
          type: basic:boolean
          default: false
          description: |
            With this flag on, MACS will use the background lambda as local lambda. This means
            MACS will not consider the local bias at peak candidate regions.
        - name: fix_bimodal
          label: Turn on the auto paired-peak model process
          type: basic:boolean
          default: false
          description: |
            Turn on the auto paired-peak model process. If it's set, when MACS failed
            to build paired model, it will use the nomodel settings, the '--extsize' parameter
            to extend each tag. If set, MACS will be terminated if paired-peak model has failed.
        - name: nomodel
          label: Bypass building the shifting model
          type: basic:boolean
          hidden: "tagalign"
          default: false
          description: |
            While on, MACS will bypass building the shifting model.
        - name: nomodel_prepeak
          label: Bypass building the shifting model
          type: basic:boolean
          default: true
          hidden: "!tagalign"
          description: |
            While on, MACS will bypass building the shifting model.
        - name: down_sample
          label: Down-sample
          type: basic:boolean
          default: false
          description: |
            When set to true, random sampling method will scale down the bigger sample. By default, MACS
            uses linear scaling. This option will make the results unstable and irreproducible
            since each time, random reads would be selected, especially the numbers (pileup,
            pvalue, qvalue) would change.
        - name: bedgraph
          label: Save fragment pileup and control lambda
          type: basic:boolean
          default: true
          description: |
            If this flag is on, MACS will store the fragment pileup, control lambda, -log10pvalue
            and -log10qvalue scores in bedGraph files. The bedGraph files will be stored in
            current directory named NAME+'_treat_pileup.bdg' for treatment data,
            NAME+'_control_lambda.bdg' for local lambda values from control,
            NAME+'_treat_pvalue.bdg' for Poisson pvalue scores (in -log10(pvalue) form), and
            NAME+'_treat_qvalue.bdg' for q-value scores from Benjamini-Hochberg-Yekutieli
            procedure.
        - name: spmr
          label: Save signal per million reads for fragment pileup profiles
          type: basic:boolean
          default: true
          disabled: "settings.bedgraph === false"
        - name: call_summits
          label: Call summits
          type: basic:boolean
          default: false
          description: |
            MACS will now reanalyze the shape of signal profile (p or q-score depending on cutoff
            setting) to deconvolve subpeaks within each peak called from general procedure. It's
            highly recommended to detect adjacent binding events. While used, the output subpeaks
            of a big peak region will have the same peak boundaries, and different scores and peak
            summit positions.
        - name: broad
          label: Composite broad regions
          type: basic:boolean
          default: false
          disabled: "settings.call_summits === true"
          description: |
            When this flag is on, MACS will try to composite broad regions in BED12 (a
            gene-model-like format) by putting nearby highly enriched regions into a broad region
            with loose cutoff. The broad region is controlled by another cutoff through
            --broad-cutoff. The maximum length of broad region length is 4 times of d from MACS.
        - name: broad_cutoff
          label: Broad cutoff
          type: basic:decimal
          required: false
          disabled: "settings.call_summits === true || settings.broad !== true"
          description: |
            Cutoff for broad region. This option is not available unless --broad is set. If -p is
            set, this is a p-value cutoff, otherwise, it's a q-value cutoff. DEFAULT = 0.1
  output:
    - name: called_peaks
      label: Called peaks
      type: basic:file
    - name: narrow_peaks
      label: Narrow peaks
      type: basic:file
      required: false
    - name: chip_qc
      label: QC report
      type: basic:file
      required: false
    - name: case_prepeak_qc
      label: Pre-peak QC report (case)
      type: basic:file
    - name: case_tagalign
      label: Filtered tagAlign (case)
      type: basic:file
    - name: case_bam
      label: Filtered BAM (case)
      type: basic:file
    - name: case_bai
      label: Filtered BAM index (case)
      type: basic:file
    - name: control_prepeak_qc
      label: Pre-peak QC report (control)
      type: basic:file
      required: false
    - name: control_tagalign
      label: Filtered tagAlign (control)
      type: basic:file
      required: false
    - name: control_bam
      label: Filtered BAM (control)
      type: basic:file
      required: false
    - name: control_bai
      label: Filtered BAM index (control)
      type: basic:file
      required: false
    - name: narrow_peaks_bigbed_igv_ucsc
      label: Narrow peaks (BigBed)
      type: basic:file
      required: false
    - name: summits
      label: Peak summits
      type: basic:file
      required: false
    - name: summits_tbi_jbrowse
      label: Peak summits tbi index for JBrowse
      type: basic:file
      required: false
    - name: summits_bigbed_igv_ucsc
      label: Summits (bigBed)
      type: basic:file
      required: false
    - name: broad_peaks
      label: Broad peaks
      type: basic:file
      required: false
    - name: gappedPeak
      label: Broad peaks (bed12/gappedPeak)
      type: basic:file
      required: false
    - name: treat_pileup
      label: Treatment pileup (bedGraph)
      type: basic:file
      required: false
    - name: treat_pileup_bigwig
      label: Treatment pileup (bigWig)
      type: basic:file
      required: false
    - name: control_lambda
      label: Control lambda (bedGraph)
      type: basic:file
      required: false
    - name: control_lambda_bigwig
      label: Control lambda (bigwig)
      type: basic:file
      required: false
    - name: model
      label: Model
      type: basic:file
      required: false
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      # Set JVM memory requirements
      export _JAVA_OPTIONS='-Xms256M -Xmx{{ requirements.resources.memory // 1024 }}g'

      CASE_NAME=`basename {{ case.bam.file }} .bam`

      {% if settings.broad and settings.call_summits %}
        re-error "--broad can't be combined with --call-summits!"
      {% endif %}

      {% if settings.shift and settings.format == "BAMPE" %}
        re-error "Shift values other than 0 are not supported when the format is BAMPE."
      {% endif %}

      {% if control and case.build != control.build %}
        re-error \
          {{ ('All BAM files must share the same genome build information. ' ~
             'BAM %s has %s while %s has %s build information.')
             |format(case|name, case.build, control|name, control.build) }}
      {% elif control and case.species != control.species %}
        re-error \
          {{ ('All BAM files must share the same species information. ' ~
             'BAM %s has %s while %s has %s species information.')
             |format(case|name, case.species, control|name, control.species) }}
      {% elif promoter and promoter.species != case.species %}
        re-error \
          {{ ('All input files must share the same species information. ' ~
             'Case BAM %s has %s while promoter BED %s has %s species information.')
             |format(case|name, case.species, promoter|name, promoter.species) }}
      {% elif promoter and promoter.build != case.build %}
        re-error \
          {{ ('All input files must share the same genome build information. ' ~
             'Case BAM %s has %s while promoter BED %s has %s build information.')
             |format(case|name, case.build, promoter|name, promoter.build) }}
      {% endif %}

      {% set qc_header = [
        "FRiP",
        "NUMBER_OF_PEAKS",
        "NUMBER_OF_READS_IN_PROMOTERS",
        "FRACTION_OF_READS_IN_PROMOTERS",
        "NUMBER_OF_PEAKS_IN_PROMOTERS",
        "FRACTION_OF_PEAKS_IN_PROMOTERS",
        ] | join('\t')
      %}

      {% set pbc_header = [
        'Total Reads',
        'Distinct Reads',
        'One Read',
        'Two Reads',
        'NRF',
        'PBC1',
        'PBC2',
        ] | join('\t')
      %}

      {% set spp_header = [
        '',
        'Reads',
        'Est. Fragment Len.',
        'Corr. Est. Fragment Len.',
        'Phantom Peak',
        'Corr. Phantom Peak',
        'Argmin. Corr.',
        'Min. Corr.',
        'NSC',
        'RSC',
        'Quality Tag',
        ] | join('\t')
      %}

      {% set species_to_gsize = {
        'Homo sapiens': '2.7e9',
        'Mus musculus': '1.87e9',
        'Dictyostelium discoideum': '3.4e7',
        'Drosophila melanogaster': '1.2e8',
        'Caenorhabditis elegans': '9e7',
        'Saccharomyces cerevisiae': '12.1e6',
        'Rattus norvegicus': '2e9',
        }
      %}

      {% set gsize = species_to_gsize[case.species] %}
      {% if not gsize %}
        re-error "Species {{ case.species }} is not supported by the MACS 2.0 process. Supported species are: {{ species_to_gsize.keys() | join(', ') }}"
      {% endif %}

      re-progress 0.1

      {% if control %}
        {% set samples = [ case ] + [ control ] %}
      {% else %}
        {% set samples = [ case ] %}
      {% endif %}

      {% for alignment in samples %}
        {% if alignment == control %}
          # Ensure that the background sample has a unique name
          NAME=`basename {{ control.bam.file }} .bam`_background
        {% else %}
          NAME=`basename {{ case.bam.file }} .bam`
        {% endif %}

        # Get alignment metrics
        echo -e "TOTAL_READS\tMAPPED_READS\tMAPPED_PERCENTAGE" > "${NAME}_align_metrics.txt"
        {% if alignment|type|subtype('data:alignment:bam:bwaaln') %}
          sed -n '1p;5p' {{ alignment.stats.file }} | \
          paste -s | \
          tr -d '(' | \
          tr ' ' '\t' | \
          cut -f 1,11,15 >> "${NAME}_align_metrics.txt"
        {% elif alignment|type|subtype('data:alignment:bam:bowtie2') %}
          TOTAL_READS=$(head -n 1 {{ alignment.stats.file }} | tr ' ' '\t' | cut -f 1)
          TOTAL_READS=$((TOTAL_READS * 2))
          MAPPED_READS=$(samtools view -c {{ alignment.bam.file }})
          MAPPED_PRCT=$(tail -n 1 {{ alignment.stats.file }} | tr ' ' '\t' | cut -f 1)
          echo -e "${TOTAL_READS}\t${MAPPED_READS}\t${MAPPED_PRCT}" >> "${NAME}_align_metrics.txt"
        {% else %}
          samtools flagstat {{ alignment.bam.file }} | \
          sed -n '1p;5p' | \
          paste -s | \
          tr -d '(' | \
          tr ':' ' ' | \
          tr ' ' '\t' | \
          cut -f 1,11,15 >> "${NAME}_align_metrics.txt"
        {% endif %}

        # Single-end reads
        if [ $(samtools view -c -f 1 {{ alignment.bam.file }}) -eq 0 ]; then
          {% if settings.format == "BAMPE" %}
            re-error "No paired-end reads were detected but BAMPE format was selected."
          {% endif %}

          # Remove unmapped reads, not primary alignments, and reads below minimum mapping quality
          samtools view -F 1804 -q {{ prepeakqc_settings.q_threshold }} -b {{ alignment.bam.file }} > "${NAME}_filtered.bam"
          re-checkrc "Samtools filtering failed"

          # Mark duplicate reads
          picard-tools MarkDuplicates \
            INPUT="${NAME}_filtered.bam" \
            OUTPUT="${NAME}_filtered_tmp.bam" \
            METRICS_FILE="${NAME}_duplicates_metrics.txt" \
            VALIDATION_STRINGENCY=LENIENT \
            ASSUME_SORTED=true \
            REMOVE_DUPLICATES=false
          re-checkrc "picard-tools MarkDuplicates processing failed"

          # Get PBC bottlenecking metrics
          # m0: number of all genomic locations where reads mapped
          # m1: number of genomic locations where only one read maps uniquely
          # m2: number of genomic locations where 2 reads map uniquely
          # mt: number of reads
          # NRF = m0/mt, PBC1 = m1/m0, PBC2 = m2/m0
          bedtools bamtobed -i "${NAME}_filtered_tmp.bam" | \
          awk 'BEGIN{OFS="\t"}{print $1,$2,$3,$6}' | \
          grep -v 'chrM' | \
          sort | \
          uniq -c | \
          awk '
            BEGIN{mt=0;m0=0;m1=0;m2=0} ($1==1){m1=m1+1} ($1==2){m2=m2+1} {m0=m0+1} {mt=mt+$1}
            END{
              # If there are no duplicates, PBC2 is not defined
              if (m2 == 0)
                printf "%d\t%d\t%d\t%d\t%f\t%f\tN/A\n",mt,m0,m1,m2,m0/mt,m1/m0
              else
                printf "%d\t%d\t%d\t%d\t%f\t%f\t%f\n",mt,m0,m1,m2,m0/mt,m1/m0,m1/m2
            }
          ' | \
          cat <(echo -e {{ pbc_header }}) - > "${NAME}_pbc_qc.txt"
          re-checkrc "PBC QC failed"

          # Remove unmapped reads, not primary alignments, and duplicate reads
          samtools view -F 1804 -b "${NAME}_filtered_tmp.bam" > "${NAME}_filtered.bam"
          re-checkrc "Samtools filtering failed"

          # Transform deduplicated bam to tagAlign
          bedtools bamtobed -i "${NAME}_filtered.bam" | \
          awk 'BEGIN{OFS="\t"}{$4="N";$5="1000";print $0}' > "${NAME}_tmp.tagAlign"
          re-checkrc "Conversion to tagAlign failed"

          # Tn5 transposon shifting
          {% if prepeakqc_settings.tn5 %}
            awk -F $'\t' 'BEGIN {OFS = FS}{
              if ($6 == "+") {$2 = $2 + 4}
              else if ($6 == "-") {$3 = $3 - 5} print $0
            }' "${NAME}_tmp.tagAlign" > "${NAME}.tagAlign"
          {% else %}
            mv "${NAME}_tmp.tagAlign" "${NAME}.tagAlign"
          {% endif %}

          # Subsample tagAlign
          grep -v "chrM" "${NAME}.tagAlign" | \
          shuf -n {{ prepeakqc_settings.n_sub }} --random-source="${NAME}.tagAlign" | \
          gzip -nc > "${NAME}_subsampled.tagAlign.gz"
          re-checkrc "Subsampling failed"

        # Paired-end reads
        else

          # Remove unmapped reads, unmaped mates, not primary alignments, reads below minimum
          # mapping quality, and reads not mapped in proper pair
          # Sort by name for fixmate
          samtools view -F 1804 -f 2 -q {{ prepeakqc_settings.q_threshold }} -u {{ alignment.bam.file }} | \
          samtools sort -n - -o "${NAME}_filtered.bam"
          re-checkrc "Samtools filtering and sorting failed"

          # Fill in mate coordinates, ISIZE and mate related flags from a name-sorted alignment
          samtools fixmate -r "${NAME}_filtered.bam" "${NAME}_filtered_tmp.bam"
          re-checkrc "Samtools fixmate failed"

          # Remove unmapped reads, unmaped mates, not primary alignments, and reads not mapped in
          # proper pair
          # Sort by position
          samtools view -F 1804 -f 2 -b "${NAME}_filtered_tmp.bam" | \
          samtools sort - -o "${NAME}_filtered.bam"
          re-checkrc "Samtools filtering and sorting failed"

          # Mark duplicate reads
          picard-tools MarkDuplicates \
            INPUT="${NAME}_filtered.bam" \
            OUTPUT="${NAME}_filtered_tmp.bam" \
            METRICS_FILE="${NAME}_duplicates_metrics.txt" \
            VALIDATION_STRINGENCY=LENIENT \
            ASSUME_SORTED=true \
            REMOVE_DUPLICATES=false
          re-checkrc "picard-tools MarkDuplicates processing failed"

          # Name sort for PBC bottlenecking calculation
          samtools sort -n "${NAME}_filtered_tmp.bam" -o "${NAME}_filtered.bam"
          re-checkrc "Samtools sorting failed"

          # Get PBC bottlenecking metrics
          # m0: number of all genomic locations where reads mapped
          # m1: number of genomic locations where only one read maps uniquely
          # m2: number of genomic locations where 2 reads map uniquely
          # mt: number of reads
          # NRF = m0/mt, PBC1 = m1/m0, PBC2 = m2/m0
          bedtools bamtobed -bedpe -i "${NAME}_filtered.bam" | \
          awk 'BEGIN{OFS="\t"}{print $1,$2,$4,$6,$9,$10}' | \
          grep -v 'chrM' | \
          sort | \
          uniq -c | \
          awk '
            BEGIN{mt=0;m0=0;m1=0;m2=0} ($1==1){m1=m1+1} ($1==2){m2=m2+1} {m0=m0+1} {mt=mt+$1}
            END{
              # If there are no duplicates, PBC2 is not defined
              if (m2 == 0)
                printf "%d\t%d\t%d\t%d\t%f\t%f\tN/A\n",mt,m0,m1,m2,m0/mt,m1/m0
              else
                printf "%d\t%d\t%d\t%d\t%f\t%f\t%f\n",mt,m0,m1,m2,m0/mt,m1/m0,m1/m2
            }
          ' | \
          cat <(echo -e {{ pbc_header }}) - > "${NAME}_pbc_qc.txt"
          re-checkrc "PBC QC failed"

          # Remove unmapped reads, unmaped mates, not primary alignments, reads not mapped in proper
          # pair, and duplicate reads
          samtools view -F 1804 -f 2 -u "${NAME}_filtered.bam" | \
          samtools sort -n - -o "${NAME}_filtered_tmp.bam"
          re-checkrc "Samtools filtering and sorting failed"

          # Transform deduplicated bam to tagAlign
          bedtools bamtobed -bedpe -mate1 -i "${NAME}_filtered_tmp.bam" | \
          awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' > "${NAME}_tmp.tagAlign"
          re-checkrc "Conversion to tagAlign failed"

          # Tn5 transposon shifting
          {% if prepeakqc_settings.tn5 %}
            awk -F $'\t' 'BEGIN {OFS = FS}{
              if ($6 == "+") {$2 = $2 + 4}
              else if ($6 == "-") {$3 = $3 - 5} print $0
            }' "${NAME}_tmp.tagAlign" > "${NAME}.tagAlign"
          {% else %}
            mv "${NAME}_tmp.tagAlign" "${NAME}.tagAlign"
          {% endif %}

          # Subsample tagAlign
          grep -v "chrM" "${NAME}.tagAlign" | \
          sed 'N;s/\n/\t/' | \
          shuf -n {{ prepeakqc_settings.n_sub }} --random-source="${NAME}.tagAlign" | \
          awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6}' | \
          gzip -nc > "${NAME}_subsampled.tagAlign.gz"
          re-checkrc "Subsampling failed"

          # Sort BAM file
          samtools sort "${NAME}_filtered_tmp.bam" -o "${NAME}_filtered.bam"

        fi

        # Get cross-corelation metrics (NSC, RSC, fragment length...)
        spp \
          -c="${NAME}_subsampled.tagAlign.gz" \
          -p={{requirements.resources.cores}} \
          -filtchr=chrM \
          {% if prepeakqc_settings.shift or prepeakqc_settings.shift == 0 %}-speak={{ prepeakqc_settings.shift }}{% endif %} \
          -out="${NAME}_cc_score.txt"
        re-checkrc "SPP processing failed"

        # Collect metrics from all the reports and put them in one report
        sed -r 's/,[^\t]+//g' "${NAME}_cc_score.txt" > "${NAME}_cc_score_tmp.txt"

        # Use case's estimated fragment length only
        {% if alignment != control %}
          FRAGLEN=$(cut "${NAME}_cc_score_tmp.txt" -f 3)
        {% endif %}

        echo -e {{ spp_header }} | cat - "${NAME}_cc_score_tmp.txt" > "${NAME}_cc_score.txt"

        grep -e UNPAIRED_READS_EXAMINED -A 1 "${NAME}_duplicates_metrics.txt" > "${NAME}_duplicates_metrics_tmp.txt"

        paste "${NAME}_align_metrics.txt" "${NAME}_duplicates_metrics_tmp.txt" "${NAME}_pbc_qc.txt" "${NAME}_cc_score.txt" | \
        cut -f 1,2,3,5,6,9,12,18,19,20,29,30 > "${NAME}_prepeak_qc_report.txt"

        gzip "${NAME}.tagAlign"

        samtools index "${NAME}_filtered.bam" "${NAME}_filtered.bam.bai"
        re-checkrc "Samtools index command failed."

        {% if alignment == control %}
            re-save-file control_prepeak_qc "${NAME}_prepeak_qc_report.txt"
            re-save-file control_bam "${NAME}_filtered.bam"
            re-save-file control_bai "${NAME}_filtered.bam.bai"
            TAGALIGN_OUT_FIELD="control_tagalign"
            {% if prepeakqc_settings.tn5 %}
              mv "${NAME}.tagAlign.gz" "${NAME}_tn5.tagAlign.gz"
              re-save-file ${TAGALIGN_OUT_FIELD} "${NAME}_tn5.tagAlign.gz"
              CONTROL_TAGALIGN="${NAME}_tn5.tagAlign.gz"
            {% else %}
              re-save-file ${TAGALIGN_OUT_FIELD} "${NAME}.tagAlign.gz"
              CONTROL_TAGALIGN="${NAME}.tagAlign.gz"
            {% endif %}
        {% else %}
            re-save-file case_prepeak_qc "${NAME}_prepeak_qc_report.txt"
            re-save-file case_bam "${NAME}_filtered.bam"
            re-save-file case_bai "${NAME}_filtered.bam.bai"
            TAGALIGN_OUT_FIELD="case_tagalign"
            {% if prepeakqc_settings.tn5 %}
              mv "${NAME}.tagAlign.gz" "${NAME}_tn5.tagAlign.gz"
              re-save-file ${TAGALIGN_OUT_FIELD} "${NAME}_tn5.tagAlign.gz"
              CASE_TAGALIGN="${NAME}_tn5.tagAlign.gz"
            {% else %}
              re-save-file ${TAGALIGN_OUT_FIELD} "${NAME}.tagAlign.gz"
              CASE_TAGALIGN="${NAME}.tagAlign.gz"
            {% endif %}
        {% endif %}

      {% endfor %}

      BROAD_CUTOFF='{% if settings.broad_cutoff or settings.broad_cutoff == 0 %}--broad-cutoff {{settings.broad_cutoff}}{% endif %}'

      macs2 callpeak \
        -t {% if tagalign %} "${CASE_TAGALIGN}" {% else %} {{ case.bam.file }} {% endif %} \
        {% if control %}-c {% if tagalign %} "${CONTROL_TAGALIGN}" {% else %} {{ control.bam.file }} {% endif %}{% endif %} \
        -f {{ "BED" if tagalign else settings.format }} \
        -n "${CASE_NAME}" \
        --gsize {{ gsize }} \
        {% if settings.duplicates or tagalign %}--keep-dup {{ settings.duplicates or settings.duplicates_prepeak }}{% endif %} \
        {% if (settings.qvalue or settings.qvalue == 0) and not (setting.pvalue or setting.pvalue == 0) %}-q {{ settings.qvalue }}{% endif %} \
        {% if (settings.pvalue or settings.pvalue == 0) and not (setting.qvalue or setting.qvalue == 0) %}-p {{ settings.pvalue }} \
          {% elif tagalign and not (settings.qvalue or settings.qvalue == 0) %} -p {{settings.pvalue_prepeak}} {% endif %} \
        {% if settings.mfold_lower or settings.mfold_lower == 0 %}-m {{ settings.mfold_lower }} {{ settings.mfold_upper }}{% endif %} \
        {% if settings.nolambda %}--nolambda{% endif %} \
        {% if settings.slocal or settings.slocal == 0 %}--slocal {{ settings.slocal }}{% endif %} \
        {% if settings.llocal or settings.llocal == 0 %}--llocal {{ settings.llocal }}{% endif %} \
        {% if settings.fix_bimodal %}--fix-bimodal{% endif %} \
        {% if settings.nomodel or (settings.nomodel_prepeak and tagalign) %}--nomodel{% endif %} \
        {% if (settings.extsize or settings.extsize == 0) or tagalign %}--extsize \
          {% if settings.extsize or settings.extsize == 0 %} {{ settings.extsize }} {% else %} ${FRAGLEN} {% endif %}{% endif %} \
        {% if settings.shift or settings.shift == 0 %}--shift {{ settings.shift }}{% endif %} \
        {% if settings.band_width or settings.band_width == 0 %}--bw {{ settings.band_width }}{% endif %} \
        {% if settings.broad %}--broad ${BROAD_CUTOFF}{% endif %} \
        {% if settings.down_sample %}--down-sample{% endif %} \
        {% if settings.bedgraph %}-B{% endif %} \
        {% if settings.call_summits %}--call-summits{% endif %} \
        {% if settings.spmr and settings.bedgraph %}--SPMR{% endif %} \
        --verbose 3 \
        --outdir . 2>err.txt

      re-checkrc "MACS2 processing failed"
      re-progress 0.7

      cat err.txt
      WARNING=$(grep "WARNING" err.txt | sed -e :a -e '$!N; s/\n/ /; ta')
      if [ $(echo -n "${WARNING}" | wc -c) -ne 0 ]; then
        re-warning "`grep "WARNING" err.txt | sed -e :a -e '$!N; s/\n/ /; ta'`"
      fi

      if [ -f "${CASE_NAME}_model.r" ]
      then
        Rscript "${CASE_NAME}_model.r"
        re-checkrc
        re-save-file model "${CASE_NAME}_model.pdf"
      fi
      re-progress 0.8

      re-save-file called_peaks "${CASE_NAME}_peaks.xls"

      # Get chormosome sizes file for bed to BigBed transformation
      samtools idxstats {{ case.bam.file }} | cut -f -2 | head -n -1 > chrom.sizes

      {% if settings.broad and not settings.call_summits %}
        re-save-file broad_peaks "${CASE_NAME}_peaks.broadPeak"
        re-save-file gappedPeak "${CASE_NAME}_peaks.gappedPeak"
      {% else %}
        # Maximize 5th column of narrowPeak and summits files to 1000.
        bed_file_corrections_genome_browsers.py -f "${CASE_NAME}_peaks.narrowPeak"
        re-checkrc "Peaks Bed file corrections for Genome Browsers failed."
        bed_file_corrections_genome_browsers.py -f "${CASE_NAME}_summits.bed"
        re-checkrc "Summits Bed file corrections for Genome Browsers failed."

        # Create BigBed for IGV and UCSC genome browsers from narrowPeak file
        bedtools slop -i "corrected_${CASE_NAME}_peaks.narrowPeak" -g chrom.sizes -b 0 | bedClip stdin chrom.sizes "corrected_${CASE_NAME}_peaks_clip.narrowPeak"
        re-checkrc "Preventing the extension of intervals beyond chromosome boundaries for *.narrowPeak file failed."
        bedToBigBed as=/opt/kent/bedToBigBed/narrowPeak.as \
          -type=bed6+4 \
          "corrected_${CASE_NAME}_peaks_clip.narrowPeak" \
          chrom.sizes \
          "${CASE_NAME}_peaks_narrowPeak.bb"
        re-checkrc "Creating BigBed from narrowPeak file failed."

        # Create BigBed for IGV and UCSC genome browsers from summits file
        bedtools slop -i "corrected_${CASE_NAME}_summits.bed" -g chrom.sizes -b 0 | bedClip stdin chrom.sizes "corrected_${CASE_NAME}_summits_clip.bed"
        re-checkrc "Preventing the extension of intervals beyond chromosome boundaries for *_summits.bed file failed."
        bedToBigBed "corrected_${CASE_NAME}_summits_clip.bed" chrom.sizes "${CASE_NAME}_summits.bb"
        re-checkrc "Creating bigBed from summits.bed file failed."

        # Create tabix index for summits.bed file for JBrowse
        bgzip -c "${CASE_NAME}_summits.bed" > "${CASE_NAME}_summits.bed.gz"
        tabix -p bed "${CASE_NAME}_summits.bed.gz"
        re-checkrc "Summits.bed tabix processing for JBrowse failed."

        re-save-file narrow_peaks_bigbed_igv_ucsc "${CASE_NAME}_peaks_narrowPeak.bb"
        re-save-file summits "${CASE_NAME}_summits.bed.gz"
        re-save-file summits_tbi_jbrowse "${CASE_NAME}_summits.bed.gz.tbi"
        re-save-file summits_bigbed_igv_ucsc "${CASE_NAME}_summits.bb"
      {% endif %}

      {% if settings.bedgraph %}
        re-save-file treat_pileup "${CASE_NAME}_treat_pileup.bdg"
        bedtools slop -i "${CASE_NAME}_treat_pileup.bdg" -g chrom.sizes -b 0 | bedClip stdin chrom.sizes "${CASE_NAME}_treat_pileup_clip.bdg"
        re-checkrc "Preventing the extension of intervals beyond chromosome boundaries for treat_pileup.bgd bedGraph failed."
        # case sensitive sorting
        LC_COLLATE=C sort -k 1,1 -k 2,2n "${CASE_NAME}_treat_pileup_clip.bdg" > "${CASE_NAME}_treat_pileup_sorted.bdg"
        # Merge possible overlapping regions
        bedtools merge -d -1 -c 4 -o mean -i "${CASE_NAME}_treat_pileup_sorted.bdg" > "${CASE_NAME}_treat_pileup_sorted_merged.bdg"
        # Create BigWig file for IGV and UCSC genome browsers
        bedGraphToBigWig "${CASE_NAME}_treat_pileup_sorted_merged.bdg" chrom.sizes "${CASE_NAME}_treat_pileup.bw"
        re-checkrc "Creating bigWig from treat_pileup.bgd bedGraph failed."
        re-save-file treat_pileup_bigwig "${CASE_NAME}_treat_pileup.bw"

        re-save-file control_lambda "${CASE_NAME}_control_lambda.bdg"
        bedtools slop -i "${CASE_NAME}_control_lambda.bdg" -g chrom.sizes -b 0 | bedClip stdin chrom.sizes "${CASE_NAME}_control_lambda_clip.bdg"
        re-checkrc "Preventing the extension of intervals beyond chromosome boundaries for control_lambda.bgd bedGraph failed."
        # case sensitive sorting
        LC_COLLATE=C sort -k 1,1 -k 2,2n "${CASE_NAME}_control_lambda_clip.bdg" > "${CASE_NAME}_control_lambda_sorted.bdg"
        # Merge possible overlapping regions
        bedtools merge -d -1 -c 4 -o mean -i "${CASE_NAME}_control_lambda_sorted.bdg" > "${CASE_NAME}_control_lambda_sorted_merged.bdg"
        # Create BigWig file for IGV and UCSC genome browsers
        bedGraphToBigWig "${CASE_NAME}_control_lambda_sorted_merged.bdg" chrom.sizes "${CASE_NAME}_control_lambda.bw"
        re-checkrc "Creating bigWig from control_lambda.bgd bedGraph failed."
        re-save-file control_lambda_bigwig "${CASE_NAME}_control_lambda.bw"
      {% endif %}

      # Get post-peakcall QC metrics
      {% if not settings.broad %}
        # Sort narrowPeak by p values
        LC_COLLATE=C sort -k 8gr,8gr "${CASE_NAME}_peaks.narrowPeak" | \
        awk 'BEGIN{OFS="\t"}{$4="Peak_"NR; if ($2<0) $2=0; if ($3<0) $3=0; print $0}' > "${CASE_NAME}_peaks_tmp.narrowPeak"

        # Cap number of peaks
        head -n {{ settings.cap_num or "-0" }} "${CASE_NAME}_peaks_tmp.narrowPeak" > "${CASE_NAME}_peaks.narrowPeak"

        # Use either filtered tagAlign file or compute regular tagAlign file for the case sample
        {% if tagalign %}
          TAGALIGN="${CASE_TAGALIGN}"
        {% else %}
          TAGALIGN="${CASE_NAME}_nonfiltered.tagAlign"
          # Transform case bam file to tagAlign for either single-end or paired-end reads
          if [ $(samtools view -c -f 1 {{ case.bam.file }}) -eq 0 ]; then
            bedtools bamtobed -i {{ case.bam.file }} | \
            awk 'BEGIN{OFS="\t"}{$4="N";$5="1000";print $0}' > "${TAGALIGN}"
            re-checkrc "Conversion to tagAlign failed"
          else
            samtools sort -n {{ case.bam.file }} -o "${CASE_NAME}_sorted.bam"
            samtools fixmate -r "${CASE_NAME}_sorted.bam" "${CASE_NAME}.bam"
            samtools view -b -f 2 "${CASE_NAME}.bam" | \
            bedtools bamtobed -bedpe -mate1 -i - | \
            awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' > "${TAGALIGN}"
            re-checkrc "Conversion to tagAlign failed"
          fi
        {% endif %}

        # Use user-defined fragment length if extsize parameter is set
        {% if settings.extsize %}
          FRAGLEN={{ settings.extsize }}
        {% endif %}

        # Shift reads on both strands for half of the fragment length in opposite directions
        bedtools slop -i "${TAGALIGN}" -g chrom.sizes -s -l $((-${FRAGLEN} / 2)) -r $((${FRAGLEN} / 2)) | \
        awk '{if ($2>=0 && $3>=0 && $2<=$3) print $0}' > "${CASE_NAME}_shifted.tagAlign"

        echo -e {{ qc_header }} > "${CASE_NAME}_postpeak_qc_report.txt"

        # Calculate post-peakcall QC metrics
        N_READS_PEAKS=$(bedtools intersect -a "${CASE_NAME}_shifted.tagAlign" -b "${CASE_NAME}_peaks.narrowPeak" -wa -u | wc -l)
        N_READS=$(cat "${CASE_NAME}_shifted.tagAlign" | wc -l)
        N_PEAKS=$(cat "${CASE_NAME}_peaks.narrowPeak" | wc -l)
        FRIP=$(awk 'BEGIN{printf "%.3f\n", ('${N_READS_PEAKS}' / '${N_READS}')}')
        {% if promoter %}
          N_READS_PROM=$(bedtools intersect -a "${CASE_NAME}_shifted.tagAlign" -b {{ promoter.bed.file }} -wa -u | wc -l)
          N_PEAKS_PROM=$(bedtools intersect -a "${CASE_NAME}_peaks.narrowPeak" -b {{ promoter.bed.file }} -wa -u | wc -l)
          FRAC_READS=$(awk 'BEGIN{printf "%.3f\n", ('${N_READS_PROM}' / '${N_READS}')}')
          FRAC_PEAKS=$(awk 'BEGIN{printf "%.3f\n", ('${N_PEAKS_PROM}' / '${N_PEAKS}')}')
          echo -e "${FRIP}\t${N_PEAKS}\t${N_READS_PROM}\t${FRAC_READS}\t${N_PEAKS_PROM}\t${FRAC_PEAKS}" >> "${CASE_NAME}_postpeak_qc_report.txt"
        {% else %}
          echo -e "${FRIP}\t${N_PEAKS}\tN/A\tN/A\tN/A\tN/A" >> "${CASE_NAME}_postpeak_qc_report.txt"
        {% endif %}

        gzip "${CASE_NAME}_peaks.narrowPeak"

        re-save-file narrow_peaks "${CASE_NAME}_peaks.narrowPeak.gz"
        re-save-file chip_qc "${CASE_NAME}_postpeak_qc_report.txt"

      {% endif %}

      re-save build {{ case.build }}
      re-save species {{ case.species }}
