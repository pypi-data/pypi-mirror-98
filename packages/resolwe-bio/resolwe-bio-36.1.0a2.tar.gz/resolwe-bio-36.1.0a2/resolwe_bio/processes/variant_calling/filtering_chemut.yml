# ==================================================
# Variant calling - Filtering - Chemical Mutagenesis
# ==================================================
---

- slug: filtering-chemut
  name: Variant filtering (CheMut)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/dnaseq:5.2.0
  data_name: "Filtered variants ({{ analysis_type }})"
  version: 1.5.1
  type: data:variants:vcf:filtering
  category: Other
  persistence: CACHED
  description: |
    Filtering and annotation of Variant Calling data - Chemical
    mutagenesis in _Dictyostelium discoideum_.
  input:
    - name: variants
      label: Variants file (VCF)
      type: data:variants:vcf
    - name: analysis_type
      label: Analysis type
      type: basic:string
      description: |
        Choice of the analysis type. Use "SNV" or "INDEL" options for
        the analysis of haploid VCF files prepared by using
        GATK UnifiedGenotyper -glm option "SNP" or "INDEL", respectively.
        Choose options SNV_CHR2 or INDEL_CHR2 to run the GATK analysis
        only on the diploid portion of CHR2 (-ploidy 2 -L chr2:2263132-3015703).
      choices:
        - label: SNV
          value: snv
        - label: INDEL
          value: indel
        - label: SNV_CHR2
          value: snv_chr2
        - label: INDEL_CHR2
          value: indel_chr2
      default: snv
    - name: parental_strain
      label: Parental Strain Prefix
      type: basic:string
      default: 'parental'
    - name: mutant_strain
      label: Mutant Strain Prefix
      type: basic:string
      default: 'mut'
    - name: read_depth
      label: Read Depth Cutoff
      type: basic:integer
      default: 5
  output:
    - name: summary
      label: Summary
      type: basic:file
      description: |
        Summarize the input parameters and results.
    - name: vcf
      label: Variants
      type: basic:file
      description: |
        A genome VCF file of variants that passed the filters.
    - name: tbi
      label: Tabix index
      type: basic:file
    - name: variants_filtered
      label: Variants filtered
      type: basic:file
      required: false
      description: |
        A data frame of variants that passed the filters.
    - name: variants_filtered_alt
      label: Variants filtered (multiple alt. alleles)
      type: basic:file
      required: false
      description: |
        A data frame of variants that contain more than two alternative
        alleles. These variants are likely to be false positives.
    - name: gene_list_all
      label: Gene list (all)
      type: basic:file
      required: false
      description: |
        Genes that are mutated at least once.
    - name: gene_list_top
      label: Gene list (top)
      type: basic:file
      required: false
      description: |
        Genes that are mutated at least twice.
    - name: mut_chr
      label: Mutations (by chr)
      type: basic:file
      required: false
      description: |
        List mutations in individual chromosomes.
    - name: mut_strain
      label: Mutations (by strain)
      type: basic:file
      required: false
      description: |
        List mutations in individual strains.
    - name: strain_by_gene
      label: Strain (by gene)
      type: basic:file
      required: false
      description: |
        List mutants that carry mutations in individual genes.
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME=`basename {{ variants.vcf.file }} .vcf.gz`
      re-progress 0.05

      gzip -cd {{variants.vcf.file}} > "${NAME}.vcf"

      Rscript \
        -e 'library(chemut)' \
        -e '{{analysis_type}}(input_file = "'${NAME}.vcf'", parental_strain = "'{{parental_strain}}'", mutant_strain = "'{{mutant_strain}}'", read_depth = "'{{read_depth}}'")'
      re-checkrc "VCF file filtering failed"
      re-progress 0.9

      append_sample_info.py "${NAME}.vcf" "${NAME}.vcf_"{{read_depth}}"/summary.txt"

      re-save-file summary "${NAME}.vcf_"{{read_depth}}"/summary.txt"

      re-save species {{ variants.species }}
      re-save build {{ variants.build }}

      if [ -f "${NAME}.vcf_"{{read_depth}}"/variants.vcf" ];
      then
        bgzip -c "${NAME}.vcf_"{{read_depth}}"/variants.vcf" > "${NAME}.vcf_"{{read_depth}}"/variants.vcf.gz"
        tabix -p vcf "${NAME}.vcf_"{{read_depth}}"/variants.vcf.gz"
        re-save-file vcf "${NAME}.vcf_"{{read_depth}}"/variants.vcf.gz"
        re-save-file tbi "${NAME}.vcf_"{{read_depth}}"/variants.vcf.gz.tbi"
      else
        re-error "No variants have passed the filters. VCF file was not created."
      fi

      if [ -f "${NAME}.vcf_"{{read_depth}}"/variant_filtered.txt" ];
      then
        re-save-file variants_filtered "${NAME}.vcf_"{{read_depth}}"/variant_filtered.txt"
      fi

      if [ -f "${NAME}.vcf_"{{read_depth}}"/variant_mult_alt.txt" ];
      then
        re-save-file variants_filtered_alt "${NAME}.vcf_"{{read_depth}}"/variant_mult_alt.txt"
      fi

      if [ -f "${NAME}.vcf_"{{read_depth}}"/gene_list_all.txt" ];
      then
        re-save-file gene_list_all "${NAME}.vcf_"{{read_depth}}"/gene_list_all.txt"
      fi

      if [ -f "${NAME}.vcf_"{{read_depth}}"/gene_list_top.txt" ];
      then
        re-save-file gene_list_top "${NAME}.vcf_"{{read_depth}}"/gene_list_top.txt"
      fi

      if [ -f "${NAME}.vcf_"{{read_depth}}"/mutations_by_chr.txt" ];
      then
        re-save-file mut_chr "${NAME}.vcf_"{{read_depth}}"/mutations_by_chr.txt"
      fi

      if [ -f "${NAME}.vcf_"{{read_depth}}"/mutations_by_strain.txt" ];
      then
        re-save-file mut_strain "${NAME}.vcf_"{{read_depth}}"/mutations_by_strain.txt"
      fi

      if [ -f "${NAME}.vcf_"{{read_depth}}"/strain_by_gene.txt" ];
      then
        re-save-file strain_by_gene "${NAME}.vcf_"{{read_depth}}"/strain_by_gene.txt"
      fi
