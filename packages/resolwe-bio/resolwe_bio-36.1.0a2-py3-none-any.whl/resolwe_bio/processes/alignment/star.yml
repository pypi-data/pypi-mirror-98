# ==============
# Aligner - STAR
# ==============
---

- slug: alignment-star
  name: STAR
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.11.0
    resources:
      memory: 36864
      cores: 10
  data_name: "{{ reads|sample_name|default('?') }}"
  version: 2.4.1
  type: data:alignment:bam:star
  category: Align
  flow_collection: sample
  persistence: CACHED
  description: |
    Spliced Transcripts Alignment to a Reference (STAR) software is based on
    an alignment algorithm that uses sequential maximum mappable seed search
    in uncompressed suffix arrays followed by seed clustering and stitching
    procedure. In addition to unbiased de novo detection of canonical
    junctions, STAR can discover non-canonical splices and chimeric (fusion)
    transcripts, and is also capable of mapping full-length RNA sequences.
    More information can be found in the
    [STAR manual](http://labshare.cshl.edu/shares/gingeraslab/www-data/dobin/STAR/STAR.posix/doc/STARmanual.pdf)
    and in the [original paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3530905/).
  input:
    - name: reads
      label: Reads
      type: data:reads:fastq
    - name: genome
      label: Indexed reference genome
      type: data:index:star
      description: |
        Genome index prepared by STAR aligner indexing tool.
    - name: annotation
      label: Annotation file (GTF/GFF3)
      type: data:annotation
      required: false
      description: |
        Insert known annotations into genome indices at the mapping stage.
    - name: annotation_options
      label: Annotation file options
      hidden: "!annotation"
      group:
        - name: exon_name
          label: --sjdbGTFfeatureExon
          type: basic:string
          default: exon
          description: |
            Feature type in GTF file to be used as exons for building transcripts
        - name: sjdbOverhang
          label: Junction length (sjdbOverhang)
          type: basic:integer
          default: 100
          description: |
            This parameter specifies the length of the genomic sequence around the annotated junction
            to be used in constructing the splice junction database.
            Ideally, this length should be equal to the ReadLength-1, where ReadLength is the
            length of the reads. For instance, for Illumina 2x100b paired-end reads,
            the ideal value is 100-1=99. In case of reads of varying length, the ideal value is
            max(ReadLength)-1. In most cases, the default value of 100 will work as well as the ideal value.
    - name: unstranded
      label: The data is unstranded
      type: basic:boolean
      default: false
      description: |
        For unstranded RNA-seq data, Cufflinks/Cuffdiff require spliced alignments with XS strand attribute,
        which STAR will generate with --outSAMstrandField intronMotif option.
        As required, the XS strand attribute will be generated for all alignments that contain splice junctions.
        The spliced alignments that have undefined strand (i.e. containing only non-canonical unannotated junctions)
        will be suppressed. If you have stranded RNA-seq data, you do not need to use any specific STAR options.
        Instead, you need to run Cufflinks with the library option --library-type options.
        For example, cufflinks --library-type fr-firststrand should be used for the standard dUTP protocol,
        including Illumina's stranded Tru-Seq. This option has to be used only for Cufflinks runs and not for STAR runs.
    - name: noncannonical
      label: Remove non-cannonical junctions (Cufflinks compatibility)
      type: basic:boolean
      default: false
      description: |
        It is recommended to remove the non-canonical junctions for Cufflinks runs using --outFilterIntronMotifs RemoveNoncanonical.
    - name: detect_chimeric
      label: Detect chimeric and circular alignments
      group:
        - name: chimeric
          label: Detect chimeric and circular alignments
          type: basic:boolean
          default: false
          description: |
            To switch on detection of chimeric (fusion) alignments (in addition to normal mapping),
            --chimSegmentMin should be set to a positive value. Each chimeric alignment consists of two "segments".
            Each segment is non-chimeric on its own, but the segments are chimeric to each other
            (i.e. the segments belong to different chromosomes, or different strands, or are far from each other).
            Both segments may contain splice junctions, and one of the segments may contain portions of both mates.
            --chimSegmentMin parameter controls the minimum mapped length of the two segments that is allowed.
            For example, if you have 2x75 reads and used --chimSegmentMin 20, a chimeric alignment
            with 130b on one chromosome and 20b on the other will be output, while 135 + 15 won't be.
        - name: chimSegmentMin
          label: --chimSegmentMin
          type: basic:integer
          default: 20
          disabled: "detect_chimeric.chimeric != true"
    - name: t_coordinates
      label: Output in transcript coordinates
      group:
        - name: quantmode
          label: Output in transcript coordinates
          type: basic:boolean
          default: false
          description: |
            With --quantMode TranscriptomeSAM option STAR will output alignments translated into transcript
            coordinates in the Aligned.toTranscriptome.out.bam file (in addition to alignments in genomic
            coordinates in Aligned.*.sam/bam files). These transcriptomic alignments can be used with various
            transcript quantification software that require reads to be mapped to transcriptome, such as RSEM or eXpress.
        - name: singleend
          label: Allow soft-clipping and indels
          type: basic:boolean
          default: false
          disabled: "t_coordinates.quantmode != true"
          description: |
            By default, the output satisfies RSEM requirements: soft-clipping or indels are not allowed.
            Use --quantTranscriptomeBan Singleend to allow insertions, deletions ans soft-clips in the
            transcriptomic alignments, which can be used by some expression quantification software (e.g. eXpress).
        - name: gene_counts
          label: Count reads
          type: basic:boolean
          default: false
          disabled: "t_coordinates.quantmode != true"
          description: |
            With --quantMode GeneCounts option STAR will count number reads per gene while mapping.
            A read is counted if it overlaps (1nt or more) one and only one gene. Both ends of the paired-end read
            are checked for overlaps. The counts coincide with those produced by htseq-count with default parameters.
            ReadsPerGene.out.tab file with 4 columns which correspond to different strandedness
            options: column 1: gene ID; column 2: counts for unstranded RNA-seq; column 3: counts for the 1st read
            strand aligned with RNA (htseq-count option -s yes); column 4: counts for the 2nd read strand aligned
            with RNA (htseq-count option -s reverse).
    - name: filtering
      label: Output Filtering
      group:
        - name: outFilterType
          label: Type of filtering
          type: basic:string
          default: Normal
          description: |
            Normal: standard filtering using only current alignment; BySJout: keep only those reads that contain
            junctions that passed filtering into SJ.out.tab
          choices:
            - label: Normal
              value: Normal
            - label: BySJout
              value: BySJout
        - name: outFilterMultimapNmax
          label: --outFilterMultimapNmax
          type: basic:integer
          required: false
          description: |
            Read alignments will be output only if the read maps fewer than this value,
            otherwise no alignments will be output (default: 10).
        - name: outFilterMismatchNmax
          label: --outFilterMismatchNmax
          type: basic:integer
          required: false
          description: |
            Alignment will be output only if it has fewer mismatches than this value (default: 10).
        - name: outFilterMismatchNoverLmax
          label: --outFilterMismatchNoverLmax
          type: basic:decimal
          required: false
          description: |
            Max number of mismatches per pair relative to read length: for 2x100b, max number of
            mismatches is 0.06*200=8 for the paired read.
        - name: outFilterScoreMin
          label: --outFilterScoreMin
          type: basic:integer
          required: false
          description: |
            Alignment will be output only if its score is higher than or equal to this value (default: 0).
        - name: outFilterMismatchNoverReadLmax
          label: --outFilterMismatchNoverReadLmax
          type: basic:decimal
          range: [0, 1.0]
          required: false
          description: |
            Alignment will be output only if its ratio of mismatches to *read* length is less than
            or equal to this value (default: 1.0).
    - name: alignment
      label: Alignment and Seeding
      group:
        - name: alignSJoverhangMin
          label: --alignSJoverhangMin
          type: basic:integer
          required: false
          description: |
            Minimum overhang (i.e. block size) for spliced alignments (default: 5).
        - name: alignSJDBoverhangMin
          label: --alignSJDBoverhangMin
          type: basic:integer
          required: false
          description: |
            Minimum overhang (i.e. block size) for annotated (sjdb) spliced alignments (default: 3).
        - name: alignIntronMin
          label: --alignIntronMin
          type: basic:integer
          required: false
          description: |
            Minimum intron size: genomic gap is considered intron if its length >= alignIntronMin,
            otherwise it is considered Deletion (default: 21).
        - name: alignIntronMax
          label: --alignIntronMax
          type: basic:integer
          required: false
          description: |
            Maximum intron size, if 0, max intron size will be determined by (2pow(winBinNbits)*winAnchorDistNbins)
            (default: 0).
        - name: alignMatesGapMax
          label: --alignMatesGapMax
          type: basic:integer
          required: false
          description: |
            Maximum gap between two mates, if 0, max intron gap will be determined by
            (2pow(winBinNbits)*winAnchorDistNbins) (default: 0).
        - name: alignEndsType
          label: --alignEndsType
          type: basic:string
          required: false
          description: |
            Type of read ends alignment (default: Local).
          default: Local
          choices:
            - label: Local
              value: Local
            - label: EndToEnd
              value: EndToEnd
            - label: Extend5pOfRead1
              value: Extend5pOfRead1
            - label: Extend5pOfReads12
              value: Extend5pOfReads12
    - name: two_pass_mapping
      label: Two-pass mapping
      group:
        - name: two_pass_mode
          label: --twopassMode
          type: basic:boolean
          default: false
          description: |
             Perform first-pass mapping, extract junctions, insert them into genome index, and
             re-map all reads in the second mapping pass.
    - name: output_sam_bam
      label: Output SAM, BAM and BigWig
      group:
        - name: outSAMunmapped
          label: --outSAMunmapped
          type: basic:string
          description: |
            Output of unmapped reads in the SAM format.
          required: false
          default: None
          choices:
            - label: None
              value: None
            - label: Within
              value: Within
        - name: outSAMattributes
          label: --outSAMattributes
          type: basic:string
          description: |
             a string of desired SAM attributes, in the order desired for the output SAM.
          required: false
          default: Standard
          choices:
            - label: Standard
              value: Standard
            - label: All
              value: All
            - label: NH HI NM MD
              value: NH HI NM MD
            - label: None
              value: None
        - name: outSAMattrRGline
          label: --outSAMattrRGline
          type: basic:string
          description: |
            SAM/BAM read group line. The first word contains the read group identifier and must start with "ID:",
            e.g. --outSAMattrRGline ID:xxx CN:yy "DS:z z z"
          required: false
        - name: tool_bigwig
          label: Tool to calculate BigWig
          type: basic:string
          default: deeptools
          choices:
            - label: deepTools
              value: deeptools
            - label: UCSC BedGraphToBigWig
              value: bedgraphtobigwig
          description: Tool to calculate BigWig.
        - name: bin_size_bigwig
          label: Bin Size for the output of BigWig
          type: basic:integer
          default: 50
          description: |
            Size of the bins, in bases, for the output of the bigwig. Only possible if 'Tool to calculate BigWig'
            is deepTools. If BigWig is calculated by UCSC BedGraphToBigWig then bin size is 1.
    - name: limits
      label: Limits
      group:
        - name: limitIObufferSize
          label: --limitIObufferSize
          type: basic:integer
          description: |
            Maximum available buffers size (bytes) for input/output, per thread.
          default: 150000000
        - name: limitOutSAMoneReadBytes
          label: --limitOutSAMoneReadBytes
          type: basic:integer
          description: |
            Maximum size of the SAM record (bytes) for one read. Recommended value:
            >(2*(LengthMate1+LengthMate2+100)*outFilterMultimapNmax
          default: 100000
        - name: limitOutSJoneRead
          label: --limitOutSJoneRead
          type: basic:integer
          description: |
            Maximum number of junctions for one read (including all multi-mappers).
          default: 1000
        - name: limitOutSJcollapsed
          label: --limitOutSJcollapsed
          type: basic:integer
          description: |
            Maximum number of collapsed junctions.
          default: 1000000
        - name: limitSjdbInsertNsj
          label: --limitSjdbInsertNsj
          type: basic:integer
          description: |
            Maximum number of junction to be inserted to the genome on the fly at the mapping
            stage, including those from annotations and those detected in the 1st step of the
            2-pass run.
          default: 1000000
    - name: star_sort
      label: Sorting with STAR
      type: basic:boolean
      default: false
      description: |
        Set to false for sorting with samtools or to true for sorting with STAR which may be time and memory intensive.
  output:
    - name: bam
      label: Alignment file
      type: basic:file
      description: Position sorted alignment
    - name: bai
      label: Index BAI
      type: basic:file
    - name: unmapped_f
      label: Unmapped reads (mate 1)
      type: basic:file
      required: false
    - name: unmapped_r
      label: Unmapped reads (mate 2)
      type: basic:file
      required: false
    - name: sj
      label: Splice junctions
      type: basic:file
    - name: chimeric
      label: Chimeric alignments
      type: basic:file
      required: false
    - name: alignment_transcriptome
      label: Alignment (trancriptome coordinates)
      type: basic:file
      required: false
    - name: gene_counts
      label: Gene counts
      type: basic:file
      required: false
    - name: stats
      label: Statistics
      type: basic:file
    - name: bigwig
      label: BigWig file
      type: basic:file
      required: false
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      MATE1_NAME=`basename {{ reads.fastq.0.file }} .fastq.gz`
      INDEX={{genome.index.dir}}

      {% set species = ["Caenorhabditis elegans", "Cricetulus griseus", "Dictyostelium discoideum",
                        "Dictyostelium purpureum", "Drosophila melanogaster", "Homo sapiens", "Macaca mulatta",
                        "Mus musculus", "Odocoileus virginianus texanus", "Rattus norvegicus", "Solanum tuberosum"] %}

      {% if reads|sample|descriptor("general.species") %}
        {% if reads|sample|descriptor("general.species") != genome.species %}
          re-warning \
            {{ ('Species of reads (%s) and genome (%s) do not match.')
            | format(reads|sample|descriptor("general.species"), genome.species) }}
        {% endif %}
      {% elif genome.species in species %}
        re-annotate-entity "general.species" {{ genome.species }}
        re-info "Sample species was automatically annotated to match the genome."
      {% endif %}

      MATE1=()
      MATE2=()

      {% for r in reads.fastq %}
        MATE1+=({{ r.file }})
      {% endfor %}

      zcat "${MATE1[@]}" > mate1.fastq

      {% if reads|type|subtype('data:reads:fastq:paired:') %}
        {% for r in reads.fastq2 %}
          MATE2_NAME=`basename {{ r.file }} .fastq.gz`
          MATE2+=({{ r.file }})
        {% endfor %}
        zcat "${MATE2[@]}" > mate2.fastq
      {% endif %}

      re-progress 0.05

      {% if reads|type|subtype('data:reads:fastq:single:') %}
        STAR \
          --runThreadN {{requirements.resources.cores}} \
          --genomeDir "${INDEX}" \
          --readFilesIn mate1.fastq \
          --outReadsUnmapped Fastx \
          --limitIObufferSize {{ limits.limitIObufferSize }} \
          --limitOutSAMoneReadBytes {{ limits.limitOutSAMoneReadBytes }} \
          --limitOutSJoneRead {{ limits.limitOutSJoneRead }} \
          --limitOutSJcollapsed {{ limits.limitOutSJcollapsed }} \
          --limitSjdbInsertNsj {{ limits.limitSjdbInsertNsj }} \
          {% if star_sort %}--outSAMtype BAM SortedByCoordinate {% else %} --outSAMtype BAM Unsorted {% endif %} \
          {% if star_sort %}--limitBAMsortRAM {{(requirements.resources.memory * 1024 * 1024 * 0.9)|int}} {% endif %} \
          {% if annotation %}--sjdbGTFfile {{ annotation.annot.file }} {% endif %} \
          {% if annotation|type|subtype('data:annotation:gff3') %}--sjdbGTFtagExonParentTranscript Parent{% endif %} \
          {% if annotation %}--sjdbOverhang {{ annotation_options.sjdbOverhang }} {% endif %} \
          {% if annotation %}--sjdbGTFfeatureExon {{ annotation_options.exon_name }} {% endif %} \
          {% if unstranded %}--outSAMstrandField intronMotif{% endif %} \
          {% if noncannonical %}--outFilterIntronMotifs RemoveNoncanonical{% endif %} \
          {% if detect_chimeric.chimeric %}--chimOutType SeparateSAMold {% endif %} \
          {% if detect_chimeric.chimeric %}--chimSegmentMin {{detect_chimeric.chimSegmentMin}}{% endif %} \
          {% if t_coordinates.quantmode %}--quantMode TranscriptomeSAM {% if t_coordinates.gene_counts %} GeneCounts {% endif %} {% if t_coordinates.singleend %} --quantTranscriptomeBan Singleend {% endif %} {% endif %} \
          --outFilterType {{ filtering.outFilterType }} \
          {% if filtering.outFilterMultimapNmax %}--outFilterMultimapNmax {{filtering.outFilterMultimapNmax}}{% endif %} \
          {% if filtering.outFilterMismatchNmax %}--outFilterMismatchNmax {{filtering.outFilterMismatchNmax}}{% endif %} \
          {% if filtering.outFilterMismatchNoverLmax %}--outFilterMismatchNoverLmax {{filtering.outFilterMismatchNoverLmax}}{% endif %} \
          {% if filtering.outFilterScoreMin %}--outFilterScoreMin {{filtering.outFilterScoreMin}}{% endif %} \
          {% if filtering.outFilterMismatchNoverReadLmax %}--outFilterMismatchNoverReadLmax {{filtering.outFilterMismatchNoverReadLmax}}{% endif %} \
          {% if alignment.alignSJoverhangMin %}--alignSJoverhangMin {{alignment.alignSJoverhangMin}}{% endif %} \
          {% if alignment.alignSJDBoverhangMin %}--alignSJDBoverhangMin {{alignment.alignSJDBoverhangMin}}{% endif %} \
          {% if alignment.alignIntronMin %}--alignIntronMin {{alignment.alignIntronMin}}{% endif %} \
          {% if alignment.alignIntronMax %}--alignIntronMax {{alignment.alignIntronMax}}{% endif %} \
          {% if alignment.alignMatesGapMax %}--alignMatesGapMax {{alignment.alignMatesGapMax}}{% endif %} \
          {% if alignment.alignEndsType %}--alignEndsType {{alignment.alignEndsType}}{% endif %} \
          {% if two_pass_mapping.two_pass_mode %} --twopassMode Basic {% endif %} \
          {% if output_sam_bam.outSAMunmapped %}--outSAMunmapped {{output_sam_bam.outSAMunmapped}}{% endif %} \
          {% if output_sam_bam.outSAMattributes %}--outSAMattributes {{output_sam_bam.outSAMattributes|safe}}{% endif %} \
          {% if output_sam_bam.outSAMattrRGline %}--outSAMattrRGline {{output_sam_bam.outSAMattrRGline}}{% endif %}
        re-checkrc "Reads alignment failed!"

        if [ -f Unmapped.out.mate1 ]
        then
          mv Unmapped.out.mate1 "${MATE1_NAME}_unmapped.out.mate1.fastq"
          pigz "${MATE1_NAME}_unmapped.out.mate1.fastq"
          re-save-file unmapped_f "${MATE1_NAME}_unmapped.out.mate1.fastq.gz"
        fi

      {% else %}
        STAR \
          --runThreadN {{requirements.resources.cores}} \
          --genomeDir "${INDEX}" \
          --readFilesIn mate1.fastq mate2.fastq \
          --outReadsUnmapped Fastx \
          --limitIObufferSize {{ limits.limitIObufferSize }} \
          --limitOutSAMoneReadBytes {{ limits.limitOutSAMoneReadBytes }} \
          --limitOutSJoneRead {{ limits.limitOutSJoneRead }} \
          --limitOutSJcollapsed {{ limits.limitOutSJcollapsed }} \
          --limitSjdbInsertNsj {{ limits.limitSjdbInsertNsj }} \
          {% if star_sort %}--outSAMtype BAM SortedByCoordinate {% else %} --outSAMtype BAM Unsorted {% endif %} \
          {% if star_sort %}--limitBAMsortRAM {{(requirements.resources.memory * 1024 * 1024 * 0.9)|int}} {% endif %} \
          {% if annotation %}--sjdbGTFfile {{ annotation.annot.file }} {% endif %} \
          {% if annotation|type|subtype('data:annotation:gff3') %}--sjdbGTFtagExonParentTranscript Parent{% endif %} \
          {% if annotation %}--sjdbOverhang {{ annotation_options.sjdbOverhang }} {% endif %} \
          {% if annotation %}--sjdbGTFfeatureExon {{ annotation_options.exon_name }} {% endif %} \
          {% if unstranded %}--outSAMstrandField intronMotif{% endif %} \
          {% if noncannonical %}--outFilterIntronMotifs RemoveNoncanonical{% endif %} \
          {% if detect_chimeric.chimeric %}--chimOutType SeparateSAMold {% endif %} \
          {% if detect_chimeric.chimeric %}--chimSegmentMin {{detect_chimeric.chimSegmentMin}}{% endif %} \
          {% if t_coordinates.quantmode %}--quantMode TranscriptomeSAM {% if t_coordinates.gene_counts %} GeneCounts {% endif %} {% if t_coordinates.singleend %} --quantTranscriptomeBan Singleend {% endif %} {% endif %} \
          --outFilterType {{filtering.outFilterType}} \
          {% if filtering.outFilterMultimapNmax %}--outFilterMultimapNmax {{filtering.outFilterMultimapNmax}}{% endif %} \
          {% if filtering.outFilterMismatchNmax %}--outFilterMismatchNmax {{filtering.outFilterMismatchNmax}}{% endif %} \
          {% if filtering.outFilterMismatchNoverLmax %}--outFilterMismatchNoverLmax {{filtering.outFilterMismatchNoverLmax}}{% endif %} \
          {% if filtering.outFilterScoreMin %}--outFilterScoreMin {{filtering.outFilterScoreMin}}{% endif %} \
          {% if filtering.outFilterMismatchNoverReadLmax %}--outFilterMismatchNoverReadLmax {{filtering.outFilterMismatchNoverReadLmax}}{% endif %} \
          {% if alignment.alignSJoverhangMin %}--alignSJoverhangMin {{alignment.alignSJoverhangMin}}{% endif %} \
          {% if alignment.alignSJDBoverhangMin %}--alignSJDBoverhangMin {{alignment.alignSJDBoverhangMin}}{% endif %} \
          {% if alignment.alignIntronMin %}--alignIntronMin {{alignment.alignIntronMin}}{% endif %} \
          {% if alignment.alignIntronMax %}--alignIntronMax {{alignment.alignIntronMax}}{% endif %} \
          {% if alignment.alignMatesGapMax %}--alignMatesGapMax {{alignment.alignMatesGapMax}}{% endif %} \
          {% if alignment.alignEndsType %}--alignEndsType {{alignment.alignEndsType}}{% endif %} \
          {% if two_pass_mapping.two_pass_mode %} --twopassMode Basic {% endif %} \
          {% if output_sam_bam.outSAMunmapped %}--outSAMunmapped {{output_sam_bam.outSAMunmapped}}{% endif %} \
          {% if output_sam_bam.outSAMattributes %}--outSAMattributes {{output_sam_bam.outSAMattributes|safe}}{% endif %} \
          {% if output_sam_bam.outSAMattrRGline %}--outSAMattrRGline {{output_sam_bam.outSAMattrRGline}}{% endif %}
        re-checkrc "Reads alignment failed!"

        if [ -f Unmapped.out.mate1 ]
        then
          mv "Unmapped.out.mate1" "${MATE1_NAME}_unmapped.out.mate1.fastq"
          pigz "${MATE1_NAME}_unmapped.out.mate1.fastq"
          re-save-file unmapped_f "${MATE1_NAME}_unmapped.out.mate1.fastq.gz"
        fi

        if [ -f Unmapped.out.mate2 ]
        then
          mv "Unmapped.out.mate2" "${MATE2_NAME}_unmapped.out.mate2.fastq"
          pigz "${MATE2_NAME}_unmapped.out.mate2.fastq"
          re-save-file unmapped_r "${MATE2_NAME}_unmapped.out.mate2.fastq.gz"
        fi

      {% endif %}
      re-progress 0.8

      OUT_NAME="${MATE1_NAME}.bam"
      OUT_NAME_BAI="${OUT_NAME}.bai"
      OUT_NAME_TEMP="${OUT_NAME}_temp"

      {% if star_sort %}
          IN_NAME="Aligned.sortedByCoord.out.bam"
      {% else %}
          IN_NAME="Aligned.out.bam"
      {% endif %}

      samtools sort "${IN_NAME}" -o "${OUT_NAME_TEMP}" -@ {{requirements.resources.cores}}
      re-checkrc "Samtools sort command failed."
      samtools index "${OUT_NAME_TEMP}" "${OUT_NAME_BAI}"
      re-checkrc "Samtools index command failed."
      mv "${OUT_NAME_TEMP}" "${OUT_NAME}"
      re-progress 0.9

      {% if detect_chimeric.chimeric %}
        mv Chimeric.out.sam "${MATE1_NAME}_chimeric.out.sam"
        re-save-file chimeric "${MATE1_NAME}_chimeric.out.sam"
      {% endif %}

      {% if t_coordinates.quantmode %}
        mv Aligned.toTranscriptome.out.bam "${MATE1_NAME}_aligned.toTranscriptome.out.bam"
        re-save-file alignment_transcriptome "${MATE1_NAME}_aligned.toTranscriptome.out.bam"
      {% endif %}

      {% if t_coordinates.gene_counts %}
        mv ReadsPerGene.out.tab "${MATE1_NAME}.tab"
        pigz "${MATE1_NAME}.tab"
        re-save-file gene_counts "${MATE1_NAME}.tab.gz"
        cp "${MATE1_NAME}.tab.gz" "${MATE1_NAME}_1.tab.gz"
        cp "${MATE1_NAME}.tab.gz" "${MATE1_NAME}_2.tab.gz"
        cp "${MATE1_NAME}.tab.gz" "${MATE1_NAME}_3.tab.gz"
        re-export "${MATE1_NAME}_1.tab.gz"
        re-export "${MATE1_NAME}_2.tab.gz"
        re-export "${MATE1_NAME}_3.tab.gz"

        re-run "upload-expression-star" \
        '{
          "rc": "'"${MATE1_NAME}_1.tab.gz"'",
          "stranded": "no",
          "source": '\"{{ genome.source }}\"',
          "species": '\"{{ genome.species }}\"',
          "build": '\"{{ genome.build }}\"'
        }'
        re-run "upload-expression-star" \
        '{
          "rc": "'"${MATE1_NAME}_2.tab.gz"'",
          "stranded": "yes",
          "source": '\"{{ genome.source }}\"',
          "species": '\"{{ genome.species }}\"',
          "build": '\"{{ genome.build }}\"'
        }'
        re-run "upload-expression-star" \
        '{
          "rc": "'"${MATE1_NAME}_3.tab.gz"'",
          "stranded": "reverse",
          "source": '\"{{ genome.source }}\"',
          "species": '\"{{ genome.species }}\"',
          "build": '\"{{ genome.build }}\"'
        }'
      {% endif %}

      mv Log.final.out "${MATE1_NAME}_stats.txt"
      mv SJ.out.tab "${MATE1_NAME}_SJ.out.tab"

      re-save-file bam "${OUT_NAME}"
      re-save-file bai "${OUT_NAME_BAI}"
      re-save-file sj "${MATE1_NAME}_SJ.out.tab"
      re-save-file stats "${MATE1_NAME}_stats.txt"
      re-save species {{genome.species}}
      re-save build {{genome.build}}

      #computation time limit for bamCoverage is 480s per GB
      bamtobigwig.sh "${MATE1_NAME}.bam" {{ genome.species }} {{ requirements.resources.cores }} {{ output_sam_bam.tool_bigwig }} {{ output_sam_bam.bin_size_bigwig }}


- slug: alignment-star-index
  name: STAR genome index
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
    resources:
      memory: 32768
      cores: 1
  data_name: "{{ ref_seq.fasta.file|basename|default('?') }}"
  version: 2.1.1
  type: data:index:star
  category: Genome index
  persistence: CACHED
  description: |
    Generate genome indices files from the supplied reference genome sequence
    and GTF files.
  input:
    - name: ref_seq
      label: Reference sequence (nucleotide FASTA)
      type: data:seq:nucleotide
    - name: annotation
      label: Annotation file (GTF/GFF3)
      type: data:annotation
      required: false
    - name: source
      label: Gene ID Database Source
      type: basic:string
      disabled: "annotation"
      required: false
      allow_custom_choice: true
      choices:
        - label: ENSEMBL
          value: ENSEMBL
        - label: NCBI
          value: NCBI
        - label: UCSC
          value: UCSC
    - name: annotation_options
      label: Annotation file options
      hidden: "!annotation"
      group:
        - name: exon_name
          label: --sjdbGTFfeatureExon
          type: basic:string
          default: exon
          description: |
            Feature type in GTF file to be used as exons for building transcripts.
        - name: sjdbOverhang
          label: Junction length (sjdbOverhang)
          type: basic:integer
          default: 100
          description: |
            This parameter specifies the length of the genomic sequence around the annotated junction
            to be used in constructing the splice junction database.
            Ideally, this length should be equal to the ReadLength-1, where ReadLength is the
            length of the reads. For instance, for Illumina 2x100b paired-end reads,
            the ideal value is 100-1=99. In case of reads of varying length, the ideal value is
            max(ReadLength)-1. In most cases, the default value of 100 will work as well as the ideal value.
    - name: advanced
      label: Advanced options
      group:
        - name: genomeSAindexNbases
          label: Small genome adjustment
          type: basic:integer
          required: false
          description: |
            For small genomes, the parameter --genomeSAindexNbases needs to be scaled down,
            with a typical value of min(14, log2(GenomeLength)/2 - 1).
            For example, for 1 megaBase genome, this is equal to 9, for 100 kiloBase genome, this is equal to 7.
        - name: genomeChrBinNbits
          label: Large number of references adjustment
          type: basic:integer
          required: false
          description: |
            If you are using a genome with a large (>5,000) number of references (chrosomes/scaffolds),
            you may need to reduce the --genomeChrBinNbits to reduce RAM consumption.
            The following scaling is recommended: --genomeChrBinNbits = min(18, log2(GenomeLength / NumberOfReferences)).
            For example, for 3 gigaBase genome with 100,000 chromosomes/scaffolds, this is equal to 15.
        - name: genomeSAsparseD
          label: Sufflux array sparsity
          type: basic:integer
          required: false
          description: |
            Suffux array sparsity, i.e. distance between indices: use bigger numbers to decrease
            needed RAM at the cost of mapping speed reduction (integer > 0, default = 1).
  output:
    - name: index
      label: Indexed genome
      type: basic:dir
    - name: fastagz
      label: FASTA file (compressed)
      type: basic:file
    - name: fasta
      label: FASTA file
      type: basic:file
    - name: fai
      label: FASTA file index
      type: basic:file
    - name: source
      label: Gene ID source
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      {% if not source and not annotation %}
        re-error "Gene ID database Source information must be provided when annotation GTF is not selected."
      {% endif %}

      NAME=`basename {{ ref_seq.fasta.file }} .fasta`
      cp {{ ref_seq.fasta.file }} "${NAME}.fasta"
      re-save-file fasta "${NAME}.fasta"
      cp {{ ref_seq.fastagz.file }} "${NAME}.fasta.gz"
      re-save-file fastagz "${NAME}.fasta.gz"
      cp {{ ref_seq.fai.file }} "${NAME}.fasta.fai"
      re-save-file fai "${NAME}.fasta.fai"
      re-progress 0.1

      mkdir star_index
      STAR \
        --runThreadN {{requirements.resources.cores}} \
        --runMode genomeGenerate \
        {% if advanced.genomeSAindexNbases %}--genomeSAindexNbases {{ advanced.genomeSAindexNbases }}{% endif %} \
        {% if advanced.genomeChrBinNbits %}--genomeChrBinNbits  {{ advanced.genomeChrBinNbits }}{% endif %} \
        {% if advanced.genomeSAsparseD %}--genomeSAsparseD {{ advanced.genomeSAsparseD }}{% endif %} \
        --genomeDir ./star_index/ \
        --genomeFastaFiles "${NAME}.fasta" \
        {% if annotation %}--sjdbGTFfile {{ annotation.annot.file }} {% endif %} \
        {% if annotation|type|subtype('data:annotation:gff3') %}--sjdbGTFtagExonParentTranscript Parent{% endif %} \
        {% if annotation %}--sjdbOverhang {{ annotation_options.sjdbOverhang }} {% endif %} \
        {% if annotation %}--sjdbGTFfeatureExon {{ annotation_options.exon_name }} {% endif %}

      re-checkrc "Genome index build failed."
      re-progress 0.8
      re-save-dir index star_index

      {% if annotation %}
        re-save source {{ annotation.source }}
        re-save species {{ annotation.species }}
        re-save build {{ annotation.build }}
      {% else %}
        re-save source {{ source }}
        re-save species {{ ref_seq.species }}
        re-save build {{ ref_seq.build }}
      {% endif %}
