# =================================
# Import - Sequencing Reads (FASTQ)
# =================================
---

- slug: upload-fastq-single
  name: FASTQ file (single-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
    resources:
      cores: 1
      network: true
  data_name: '{{ src.0.file|default("?") }}'
  version: 2.4.1
  type: data:reads:fastq:single
  flow_collection: sample
  category: Import
  persistence: RAW
  description: |
    Import single-end reads in FASTQ format, which is a text-based format for
    storing both a biological sequence (usually nucleotide sequence) and its
    corresponding quality scores.
  input:
    - name: src
      label: Reads
      type: list:basic:file
      description: |
        Sequencing reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
    - name: merge_lanes
      label: Merge lanes
      type: basic:boolean
      default: false
      description: |
        Merge sample data split into multiple sequencing lanes into a
        single FASTQ file.
  output:
    - name: fastq
      label: Reads file
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      {% for reads in src %}
        re-import {{ reads.file_temp|default(reads.file) }} {{ reads.file }} "fastq|fq|bz2" "fastq" 0.5 compress
      {% endfor %}

      FASTQGZ=(*.fastq.gz)
      {% if merge_lanes %}
        # Use the first lane's name for the name of the merged output
        FIRST_LANE=`basename "${FASTQGZ[0]}" .fastq.gz`
        cat "${FASTQGZ[@]}" > "${FIRST_LANE}_merged.fastq.gz"
        FASTQGZ=("${FIRST_LANE}_merged.fastq.gz")
      {% endif %}

      re-save-file-list fastq "${FASTQGZ[@]}"

      echo "Validating FASTQ file(s)..."
      validate_fastq.py -fq "${FASTQGZ[@]}"
      re-checkrc "Validation of FASTQ file(s) failed."

      echo "Postprocessing FastQC..."
      mkdir "fastqc" && fastqc "${FASTQGZ[@]}" --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for report_dir in ./fastqc/*/
      do
        READS_NAME=`basename "${report_dir}" _fastqc`
        ENCODING=`parse_encoding_type.py "${report_dir}fastqc_data.txt"`

        if [ "${ENCODING}" == "Illumina 1.5" ] ||  [ "${ENCODING}" == "Illumina 1.3" ]; then

          echo "Recoding input reads from Phred64 encoding to Phred33 encoding."
          mv "${READS_NAME}.fastq.gz" input_reads.fastq.gz
          TrimmomaticSE -phred64 input_reads.fastq.gz reformated.fastq.gz TOPHRED33
          mv reformated.fastq.gz "${READS_NAME}.fastq.gz"

        elif [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 / llumina 1.5 / Illumina 1.3 encoding is supported."
        fi
      done

      FASTQC=(*_fastqc.zip)
      FASTQC_URL=()

      for fqc in "${FASTQC[@]}"
      do
        NAME=`basename "$fqc" _fastqc.zip`
        FASTQC_URL+=("{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}")
      done

      re-save-file-list fastq "${FASTQGZ[@]}"
      re-save-file-list fastqc_archive "${FASTQC[@]}"
      re-save-list fastqc_url "${FASTQC_URL[@]}"

- slug: upload-fastq-paired
  name: FASTQ file (paired-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
    resources:
      cores: 1
      network: true
  data_name: '{{ src1.0.file|default("?") }}'
  version: 2.4.1
  type: data:reads:fastq:paired
  category: Import
  flow_collection: sample
  persistence: RAW
  description: |
    Import paired-end reads in FASTQ format, which is a text-based format for
    storing both a biological sequence (usually nucleotide sequence) and its
    corresponding quality scores.
  input:
    - name: src1
      label: Mate1
      type: list:basic:file
      description: |
        Sequencing reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
    - name: src2
      label: Mate2
      type: list:basic:file
      description: |
        Sequencing reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
    - name: merge_lanes
      label: Merge lanes
      type: basic:boolean
      default: false
      description: |
        Merge paired-end sample data split into multiple sequencing
        lanes into a single pair of FASTQ files.
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |

      MATE1_FASTQGZ=()
      MATE1_FASTQC=()
      MATE1_FASTQC_URL=()

      MATE2_FASTQGZ=()
      MATE2_FASTQC=()
      MATE2_FASTQC_URL=()

      {% for reads in src1 %}
        re-import {{ reads.file_temp|default(reads.file) }} {{ reads.file }} "fastq|fq|bz2" "fastq" 0.5 compress
        MATE1_FASTQGZ+=("${NAME}.fastq.gz")
        MATE1_FASTQC+=("${NAME}_fastqc.zip")
        MATE1_FASTQC_URL+=("{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}")
      {% endfor %}

      {% for reads in src2 %}
        re-import {{ reads.file_temp|default(reads.file) }} {{ reads.file }} "fastq|fq|bz2" "fastq" 0.5 compress
        MATE2_FASTQGZ+=("${NAME}.fastq.gz")
        MATE2_FASTQC+=("${NAME}_fastqc.zip")
        MATE2_FASTQC_URL+=("{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}")
      {% endfor %}

      {% if merge_lanes %}
        # Use the first lane of the mate1 for the name of the merged output
        MATE1_FIRST_LANE=`basename "${MATE1_FASTQGZ[0]}" .fastq.gz`
        cat "${MATE1_FASTQGZ[@]}" > "${MATE1_FIRST_LANE}_merged.fastq.gz"
        MATE1_FASTQGZ=("${MATE1_FIRST_LANE}_merged.fastq.gz")
        MATE1_FASTQC=("${MATE1_FIRST_LANE}_merged_fastqc.zip")
        MATE1_FASTQC_URL=("{\"file\":\"fastqc/${MATE1_FIRST_LANE}_merged_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${MATE1_FIRST_LANE}_merged_fastqc\"]}")
        # Use the first lane of the mate2 for the name of the merged output
        MATE2_FIRST_LANE=`basename "${MATE2_FASTQGZ[0]}" .fastq.gz`
        cat "${MATE2_FASTQGZ[@]}" > "${MATE2_FIRST_LANE}_merged.fastq.gz"
        MATE2_FASTQGZ=("${MATE2_FIRST_LANE}_merged.fastq.gz")
        MATE2_FASTQC=("${MATE2_FIRST_LANE}_merged_fastqc.zip")
        MATE2_FASTQC_URL=("{\"file\":\"fastqc/${MATE2_FIRST_LANE}_merged_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${MATE2_FIRST_LANE}_merged_fastqc\"]}")
      {% endif %}

      re-save-file-list fastq "${MATE1_FASTQGZ[@]}"
      re-save-file-list fastq2 "${MATE2_FASTQGZ[@]}"

      echo "Validating FASTQ file(s)..."
      validate_fastq.py -fq "${MATE1_FASTQGZ[@]}" -fq2 "${MATE2_FASTQGZ[@]}"
      re-checkrc "Validation of FASTQ file(s) failed."

      echo "Postprocessing FastQC..."
      FASTQ_MATES=( "${MATE1_FASTQGZ[@]}" "${MATE2_FASTQGZ[@]}" )
      mkdir "fastqc" && fastqc "${FASTQ_MATES[@]}" --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for name in "${FASTQ_MATES[@]}"; do
        READS_NAME=`basename "$name" .fastq.gz`
        ENCODING=`parse_encoding_type.py "./fastqc/${READS_NAME}_fastqc/fastqc_data.txt"`

        if [ "${ENCODING}" == "Illumina 1.5" ] ||  [ "${ENCODING}" == "Illumina 1.3" ]; then

          echo "Recoding input reads from Phred64 encoding to Phred33 encoding."
          mv "${READS_NAME}.fastq.gz" input_reads.fastq.gz
          TrimmomaticSE -phred64 input_reads.fastq.gz reformated.fastq.gz TOPHRED33
          mv reformated.fastq.gz "${READS_NAME}.fastq.gz"

        elif [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 / llumina 1.5 / Illumina 1.3 encoding is supported."
        fi
      done

      re-save-file-list fastq "${MATE1_FASTQGZ[@]}"
      re-save-file-list fastq2 "${MATE2_FASTQGZ[@]}"
      re-save-file-list fastqc_archive "${MATE1_FASTQC[@]}"
      re-save-file-list fastqc_archive2 "${MATE2_FASTQC[@]}"
      re-save-list fastqc_url "${MATE1_FASTQC_URL[@]}"
      re-save-list fastqc_url2 "${MATE2_FASTQC_URL[@]}"

- slug: files-to-fastq-single
  name: Convert files to reads (single-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
  data_name: 'Files to FASTQ single-end ({{ (src|first).file.file }})'
  version: 1.4.1
  type: data:reads:fastq:single
  flow_collection: sample
  category: Import
  persistence: RAW
  description: |
    Convert FASTQ files to single-end reads.
  input:
    - name: src
      label: Reads
      type: list:data:file
      description: |
        Sequencing reads in FASTQ format
    - name: merge_lanes
      label: Merge lanes
      type: basic:boolean
      default: false
      description: |
        Merge sample data split into multiple sequencing lanes into a
        single FASTQ file.
  output:
    - name: fastq
      label: Reads file
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      {% for read in src %}
        cp {{ read.file.file }} .
      {% endfor %}

      FASTQGZ=(*.fastq.gz)
      {% if merge_lanes %}
        # Use the first lane's name for the name of the merged output
        FIRST_LANE=`basename "${FASTQGZ[0]}" .fastq.gz`
        cat "${FASTQGZ[@]}" > "${FIRST_LANE}_merged.fastq.gz"
        FASTQGZ=("${FIRST_LANE}_merged.fastq.gz")
      {% endif %}

      echo "Validating FASTQ file(s)..."
      validate_fastq.py -fq "${FASTQGZ[@]}"
      re-checkrc "Validation of FASTQ file(s) failed."

      echo "Postprocessing FastQC..."
      mkdir "fastqc" && fastqc "${FASTQGZ[@]}" --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for report_dir in ./fastqc/*/
      do
        READS_NAME=`basename "${report_dir}" _fastqc`
        ENCODING=`parse_encoding_type.py "${report_dir}fastqc_data.txt"`

        if [ "${ENCODING}" == "Illumina 1.5" ] ||  [ "${ENCODING}" == "Illumina 1.3" ]; then

          echo "Recoding input reads from Phred64 encoding to Phred33 encoding."
          mv "${READS_NAME}.fastq.gz" input_reads.fastq.gz
          TrimmomaticSE -phred64 input_reads.fastq.gz reformated.fastq.gz TOPHRED33
          mv reformated.fastq.gz "${READS_NAME}.fastq.gz"

        elif [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 / llumina 1.5 / Illumina 1.3 encoding is supported."
        fi
      done

      re-save-file-list fastq "${FASTQGZ[@]}"

      FASTQC=(*_fastqc.zip)
      FASTQC_URL=()

      for fqc in "${FASTQC[@]}"
      do
        NAME=`basename "$fqc" _fastqc.zip`
        FASTQC_URL+=("{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}")
      done

      re-save-file-list fastqc_archive "${FASTQC[@]}"
      re-save-list fastqc_url "${FASTQC_URL[@]}"

- slug: files-to-fastq-paired
  name: Convert files to reads (paired-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
  data_name: 'Files to FASTQ paired-end ({{ (src1|first).file.file }}, {{(src2|first).file.file}})'
  version: 1.4.1
  type: data:reads:fastq:paired
  category: Import
  flow_collection: sample
  persistence: RAW
  description: |
    Convert FASTQ files to paired-end reads.
  input:
    - name: src1
      label: Mate1
      type: list:data:file
    - name: src2
      label: Mate2
      type: list:data:file
    - name: merge_lanes
      label: Merge lanes
      type: basic:boolean
      default: false
      description: |
        Merge paired-end sample data split into multiple sequencing
        lanes into a single pair of FASTQ files.
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      MATE1_FASTQGZ=()
      MATE1_FASTQC=()
      MATE1_FASTQC_URL=()

      MATE2_FASTQGZ=()
      MATE2_FASTQC=()
      MATE2_FASTQC_URL=()

      {% for read in src1 %}
        GZ_FILE_PATH={{ read.file.file }}
        cp ${GZ_FILE_PATH} .

        GZ_FILE={{ read.file.file|basename }}

        NAME="${GZ_FILE%\.fastq\.gz}"
        MATE1_FASTQGZ+=("${NAME}.fastq.gz")
        MATE1_FASTQC+=("${NAME}_fastqc.zip")
        MATE1_FASTQC_URL+=("{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}")
      {% endfor %}

      {% for read in src2 %}
        GZ_FILE_PATH={{ read.file.file }}
        cp ${GZ_FILE_PATH} .

        GZ_FILE={{ read.file.file|basename }}

        NAME="${GZ_FILE%\.fastq\.gz}"
        MATE2_FASTQGZ+=("${NAME}.fastq.gz")
        MATE2_FASTQC+=("${NAME}_fastqc.zip")
        MATE2_FASTQC_URL+=("{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}")
      {% endfor %}

      {% if merge_lanes %}
        # Use the first lane of the mate1 for the name of the merged output
        MATE1_FIRST_LANE=`basename "${MATE1_FASTQGZ[0]}" .fastq.gz`
        cat "${MATE1_FASTQGZ[@]}" > "${MATE1_FIRST_LANE}_merged.fastq.gz"
        MATE1_FASTQGZ=("${MATE1_FIRST_LANE}_merged.fastq.gz")
        MATE1_FASTQC=("${MATE1_FIRST_LANE}_merged_fastqc.zip")
        MATE1_FASTQC_URL=("{\"file\":\"fastqc/${MATE1_FIRST_LANE}_merged_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${MATE1_FIRST_LANE}_merged_fastqc\"]}")
        # Use the first lane of the mate2 for the name of the merged output
        MATE2_FIRST_LANE=`basename "${MATE2_FASTQGZ[0]}" .fastq.gz`
        cat "${MATE2_FASTQGZ[@]}" > "${MATE2_FIRST_LANE}_merged.fastq.gz"
        MATE2_FASTQGZ=("${MATE2_FIRST_LANE}_merged.fastq.gz")
        MATE2_FASTQC=("${MATE2_FIRST_LANE}_merged_fastqc.zip")
        MATE2_FASTQC_URL=("{\"file\":\"fastqc/${MATE2_FIRST_LANE}_merged_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${MATE2_FIRST_LANE}_merged_fastqc\"]}")
      {% endif %}

      echo "Validating FASTQ file(s)..."
      validate_fastq.py -fq "${MATE1_FASTQGZ[@]}" -fq2 "${MATE2_FASTQGZ[@]}"
      re-checkrc "Validation of FASTQ file(s) failed."

      echo "Postprocessing FastQC..."
      FASTQ_MATES=( "${MATE1_FASTQGZ[@]}" "${MATE2_FASTQGZ[@]}" )
      mkdir "fastqc" && fastqc "${FASTQ_MATES[@]}" --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for name in "${FASTQ_MATES[@]}"; do
        READS_NAME=`basename "$name" .fastq.gz`
        ENCODING=`parse_encoding_type.py "./fastqc/${READS_NAME}_fastqc/fastqc_data.txt"`

        if [ "${ENCODING}" == "Illumina 1.5" ] ||  [ "${ENCODING}" == "Illumina 1.3" ]; then

          echo "Recoding input reads from Phred64 encoding to Phred33 encoding."
          mv "${READS_NAME}.fastq.gz" input_reads.fastq.gz
          TrimmomaticSE -phred64 input_reads.fastq.gz reformated.fastq.gz TOPHRED33
          mv reformated.fastq.gz "${READS_NAME}.fastq.gz"

        elif [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 / llumina 1.5 / Illumina 1.3 encoding is supported."
        fi
      done

      re-save-file-list fastq "${MATE1_FASTQGZ[@]}"
      re-save-file-list fastq2 "${MATE2_FASTQGZ[@]}"
      re-save-file-list fastqc_archive "${MATE1_FASTQC[@]}"
      re-save-file-list fastqc_archive2 "${MATE2_FASTQC[@]}"
      re-save-list fastqc_url "${MATE1_FASTQC_URL[@]}"
      re-save-list fastqc_url2 "${MATE2_FASTQC_URL[@]}"
