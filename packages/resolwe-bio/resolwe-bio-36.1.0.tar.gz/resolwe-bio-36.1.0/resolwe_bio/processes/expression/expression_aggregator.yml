- slug: expression-aggregator
  name: Expression aggregator
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.9.0
  data_name: "Expression aggregator"
  version: 0.4.1
  type: data:aggregator:expression
  category: Other
  persistence: CACHED
  description: |
    Collect expression data from samples grouped by sample descriptor field.
    The Expression aggregator process should not be run in Batch Mode, as this will create
    redundant outputs. Rather, select multiple samples below for which you wish to aggregate the
    expression matrix.
  input:
    - name: exps
      label: Expressions
      type: list:data:expression
    - name: group_by
      label: Sample descriptor field
      type: basic:string
    - name: expr_aggregator
      label: Expression aggregator
      type: data:aggregator:expression
      required: false
  output:
    - name: exp_matrix
      label: Expression matrix
      type: basic:file
    - name: box_plot
      label: Box plot
      type: basic:json
    - name: log_box_plot
      label: Log box plot
      type: basic:json
    - name: source
      label: Gene ID database
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: exp_type
      label: Expression type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      {% for e in exps %}
        {% if e.source != (exps|first).source %}
          re-warning "Genes in all expression data must be annotated by the same genome database."
          re-error "Expression {{ exps|first|name }} has {{ (exps|first).source }} gene IDs, while expression {{ e|name }} has {{ e.source }} gene IDs."
        {% endif %}
        {% if e.species != (exps|first).species %}
          re-warning "All samples must be derived from the same species."
          re-error "Sample {{ e|sample_name }} is {{ e.species }}, while {{ (exps|first)|name }} is a(n) {{ (exps|first).species }}."
        {% endif %}
        {% if e.exp_type != (exps|first).exp_type %}
          re-warning "All expressions must be of the same type (TPM, FPKM,...)."
          re-error "Sample {{ e|sample_name }} is of {{ e.exp_type }} expresssion type, while {{ (exps|first)|name }} is {{ (exps|first).exp_type }}."
        {% endif %}
      {% endfor %}

      {% if expr_aggregator %}
        {% if expr_aggregator.species != (exps|first).species %}
          re-warning "Cannot append expression data to the existing Expression Aggregator object that is of different species."
          re-error "{{ expr_aggregator|name }} is {{ expr_aggregator.species }}, while {{ (exps|first)|name }} is a(n) {{ (exps|first).species }}."
        {% endif %}
      {% endif %}

      expression_aggregator.py \
        --expressions {% for e in exps %} {{e.exp.file}} {% endfor %} \
        --descriptors {% for e in exps %} {{e | sample | descriptor(group_by)}} {% endfor %} \
        --source {{(exps|first).source}} \
        --expression-type {{exps.0.exp_type}} \
        --group-by {{group_by}} \
        {% if expr_aggregator %} --aggregator {{expr_aggregator.exp_matrix.file}} {% endif %} \
        --box-plot-output box_plot.json \
        --log-box-plot-output log_box_plot.json \
        --expressions-output exp_matrix.json.gz
      re-checkrc "Expression aggregator failed."
      re-save-file exp_matrix exp_matrix.json.gz
      re-save box_plot box_plot.json
      re-save log_box_plot log_box_plot.json
      re-save source {{(exps|first).source}}
      re-save exp_type {{(exps|first).exp_type}}
      re-save species {{(exps|first).species}}
