# ===============================
# Bedtools coverage (coveragebed)
# ===============================
---

- slug: coveragebed
  name: coverageBed
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/dnaseq:5.1.0
    resources:
      memory: 32768
  data_name: "Coverage ({{ alignment|sample_name|default('?') }})"
  version: 4.2.1
  type: data:coverage
  category: Other
  flow_collection: sample
  persistence: CACHED
  description: |
    Bedtools coverage (coveragebed)
  input:
    - name: alignment
      label: Alignment (BAM)
      type: data:alignment:bam
    - name: master_file
      label: Master file
      type: data:masterfile:amplicon
  output:
    - name: cov_metrics
      label: Coverage metrics
      type: basic:file
    - name: mean_cov
      label: Mean amplicon coverage
      type: basic:file
    - name: amplicon_cov
      label: Amplicon coverage file (nomergebed)
      type: basic:file
    - name: covplot_html
      label: HTML coverage plot
      type: basic:file:html
  run:
    runtime: polyglot
    language: bash
    program: |
      SAMPLE_SLUG={{ alignment|sample_slug }}

      # Calculate coverage metrics.
      echo "Calculating coverage metrics."
      coverageBed \
        -a {{master_file.bedfile.file}} \
        -b {{ alignment.bam.file }} \
        -d > "${SAMPLE_SLUG}.covd"
      re-checkrc
      re-progress 0.5

      awk '
        { sum += $7 }
        END { m = (sum / NR); b = m * 0.2; print m, b}
      ' \
        "${SAMPLE_SLUG}.covd" \
        > "${SAMPLE_SLUG}.tmp"

      # Make an amplicon-specific coverage metrics report.
      # NOTE: Coverage is not uniquely assigned to individual amplicons for overlapping regions!
      coverageBed \
        -a {{master_file.nomergebed.file}} \
        -b {{ alignment.bam.file }} > "${SAMPLE_SLUG}_amplicon_coverage.cov"

      # Make an amplicon-specific coverage metrics report with olaps omitted
      # and report mean amplicon coverage using bedtool option.
      coverageBed \
        -a {{master_file.olapfreebed.file}} \
        -b {{ alignment.bam.file }} \
        -d > "${SAMPLE_SLUG}_olapfree.covd"

      awk '
        BEGIN { n = 0 }
        NR == FNR { m = $1; b = $2; next}
        { if ($7 >= b) n++ }
        END { print m, b, (n / FNR * 100.0) }
      ' OFS="\t" \
        "${SAMPLE_SLUG}.tmp" \
        "${SAMPLE_SLUG}.covd" \
        > "${SAMPLE_SLUG}_covMetrics.txt"

      echo "Calculating mean amplicon coverage."
      # find mean amplicon coverage using coverage metrics for non-overlapping regions of each amplicon
      awk '
        { a[$5] += $7; b[$5] = $6 }
        END { for(i in a) { print i, (a[i] / b[i]) } }
      ' OFS="\t" \
        <(sort -k6,6n "${SAMPLE_SLUG}_olapfree.covd") | \
        sort -k2,2g > "${SAMPLE_SLUG}_ampmeancov.covd"

      # Create coverage uniformity plot input file.
      sort -k1,1 < "${SAMPLE_SLUG}_ampmeancov.covd" | \
        awk '{ print $1, $2, $1 }' OFS="\t" | \
        awk '{ sub(/_.*$/, "", $3); print $0 }' OFS="\t" \
        > "${SAMPLE_SLUG}_ampmeancov.tmp"

      mkdir htmlplot
      cp -p "/opt/bokeh/assets/bokeh-0.12.13.min.css" htmlplot/
      re-checkrc
      cp -p "/opt/bokeh/assets/bokeh-0.12.13.min.js" htmlplot/
      re-checkrc

      plotcoverage_html.py \
        --infile "${SAMPLE_SLUG}_ampmeancov.tmp" \
        --template "/opt/resolwebio/assets/amplicon_html_template.html" \
        --outfile "htmlplot/${SAMPLE_SLUG}_coverageplot.html"
      re-checkrc
      mv "htmlplot/${SAMPLE_SLUG}_coverageplot.html" "${SAMPLE_SLUG}_coverageplot.html"

      re-save-file cov_metrics "${SAMPLE_SLUG}_covMetrics.txt"
      re-save-file mean_cov "${SAMPLE_SLUG}_ampmeancov.covd"
      re-save-file amplicon_cov "${SAMPLE_SLUG}_amplicon_coverage.cov"
      re-save-file covplot_html "${SAMPLE_SLUG}_coverageplot.html" htmlplot
