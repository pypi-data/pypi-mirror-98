[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pywemo"
version = "0.6.4"
description = "Lightweight Python module to discover and control WeMo devices"
authors = ["Eric Severance <pywemo@esev.com>"]
license = "MIT"

readme = 'README.rst'

repository = "https://github.com/pywemo/pywemo"
homepage = "https://github.com/pywemo/pywemo"

keywords = ['wemo', 'api']

[tool.poetry.dependencies]
python = "^3.7"
ifaddr = ">=0.1.0"
requests = ">=2.0"
urllib3 = ">=1.25,<2.0"
lxml = "^4.6"

[tool.poetry.dev-dependencies]
# toml is used by multiple tools to read this pyproject.toml file
toml = "^0.10"
# formatters
black = "20.8b1"
isort = "^5.6.4"
# linters/code analysis
flake8 = ">=3.6.0"
flake8-docstrings = ">=1.3.0"
flake8-bugbear = "^20.11.1"
pylint = "2.6.0"
rstcheck = "^3.3.1"
mypy = ">=0.800"
# testing and code coverage
pytest = "6.2.2"
pytest-vcr = "1.0.2"
coverage = "^5.4"
coveralls = "^3.0.0"
# version of generateDS used to create device.py and service.py in .../api/xsd
generateDS = "2.37.11"
# other
pre-commit = "^2.10"

[tool.coverage]
  [tool.coverage.run]
  branch = true
  data_file = ".cache/coverage"
  omit = [
    ".venv/*",
    "*/tests/*",
    "*/xsd/device.py",
    "*/xsd/service.py",
  ]

[tool.pytest]
  [tool.pytest.ini_options]
  minversion = "6.2"
  cache_dir = ".cache/pytest"

[tool.black]
line-length = 79
skip-string-normalization = true
target-version = ['py37', 'py38']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | \venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | pywemo/ouimeaux_device/api/xsd
)
'''

[tool.isort]
profile = "black"
line_length = 79
src_paths = ["pywemo", "tests"]
skip_glob = "*/xsd/*"

[tool.pylint]
  [tool.pylint.master]
  jobs = 0
  max-line-length = 79
  ignore = "xsd"
  extension-pkg-whitelist = "lxml"

  [tool.pylint.message_control]
  disable = [
    "abstract-class-little-used",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "global-statement",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-an-iterable",
    "not-context-manager",
    "redefined-variable-type",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "unnecessary-pass",
    "unused-argument",
  ]

  [tool.pylint.typecheck]
  generated-members = [
    # can switch to qualified names instead when this is merged:
    # https://github.com/PyCQA/pylint/pull/3634
    "self.deviceevent",
    "self.basicevent",
    "self.bridge",
    "self.insight",
  ]
  ignored-classes = [
    # these have dynamically assigned attributes, so ignore their attributes
    "DatabaseRow",
    "RulesRow",
    "RuleDevicesRow",
    "DeviceCombinationRow",
    "GroupDevicesRow",
    "LocationInfoRow",
    "BlockedRulesRow",
    "RulesNotifyMessageRow",
    "SensorNotificationRow",
    "TargetDevicesRow",
  ]

  [tool.pylint.reports]
  reports = "no"

  [tool.pylint.format]
  expected-line-ending-format = "LF"
  good-names = [
    "i",
    "j",
    "k",
    "s",
    "st",
    "db",
    "eventSubURL",
    "uniqueID",
    "on",
    "controlURL",
    "serviceType",
  ]
