# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pywemo',
 'pywemo.ouimeaux_device',
 'pywemo.ouimeaux_device.api',
 'pywemo.ouimeaux_device.api.xsd']

package_data = \
{'': ['*']}

install_requires = \
['ifaddr>=0.1.0', 'lxml>=4.6,<5.0', 'requests>=2.0', 'urllib3>=1.25,<2.0']

setup_kwargs = {
    'name': 'pywemo',
    'version': '0.6.4',
    'description': 'Lightweight Python module to discover and control WeMo devices',
    'long_description': 'pyWeMo |Build Badge| |PyPI Version Badge| |Coverage| |PyPI Downloads Badge|\n===========================================================================\nPython 3 module to setup, discover and control WeMo devices.\n\nDependencies\n------------\npyWeMo depends on Python packages: requests, ifaddr, lxml, urllib3\n\nHow to use\n----------\n\n.. code-block:: python\n\n    >>> import pywemo\n    >>> devices = pywemo.discover_devices()\n    >>> print(devices)\n    [<WeMo Insight "AC Insight">]\n\n    >>> devices[0].toggle()\n\nFor advanced usage, the ``device.explain()`` method will print all known actions that the device reports to PyWeMo.\n\nIf discovery doesn\'t work on your network\n-----------------------------------------\nAutomatic discovery may not work reliably on some networks.\nIn that case, you can use the device with an IP or hostname:\n\n.. code-block:: python\n\n    >>> import pywemo\n    >>> url = pywemo.setup_url_for_address("192.168.1.192", None)\n    >>> print(url)\n    http://192.168.1.192:49153/setup.xml\n    >>> device = pywemo.discovery.device_from_description(url)\n    >>> print(device)\n    <WeMo Maker "Hi Fi Systemline Sensor">\n\nPlease note that ``discovery.device_from_description`` requires a ``url`` with an IP address, rather than a hostname.\nThis is needed for the subscription update logic to work properly.\nIn addition, recent versions of the WeMo firmware may not accept connections from hostnames and will return a 500 error.\n\nThe ``setup_url_for_address`` function will lookup a hostname and provide a suitable ``url`` with an IP address.\n\nTesting new products\n--------------------\nIf both methods above are not successful, then ``pywemo`` may not support your WeMo product yet.\nThis may be particularly true if it is a new WeMo product.\nTo test this, you can use a debug flag, ``pywemo.discover_devices(debug=True)`` or ``pywemo.discovery.device_from_description(url, debug=True)``.\nIf an ``UnsupportedDevice`` is found, then it is highly likely that the product can be added to ``pywemo``.\nThis ``UnsupportedDevice`` will allow manual interaction, but please open an issue to get first class support for the device.\n\nDevice Reset and Setup\n----------------------\nPyWeMo includes the ability to reset and setup devices, without using the Belkin app or needing to create a Belkin account.\nThis can be particularly useful if the intended use is fully local control, such as using Home Assistant.\n\nReset\n~~~~~\nReset can be performed with the ``reset`` method, which has 2 boolean input arguments, ``data`` and ``wifi``.\nWeMo devices contain a hardware reset procedure as well, so use of ``pywemo`` is for convenience or if physical access is not available.\nThis ``reset`` method may not work on all devices.\n\n=======================================  =================  =======================\nMethod in ``pywemo``                     Clears             Name in WeMo App\n=======================================  =================  =======================\n``device.reset(data=True, wifi=False)``  name, icon, rules  Clear Personalized Info\n``device.reset(data=False, wifi=True)``  wifi information   Change Wi-Fi\n``device.reset(data=True, wifi=True)``   everything         Factory Restore\n=======================================  =================  =======================\n\nSetup\n~~~~~\n\nDevice setup is through the ``setup`` method, which has two required arguments: ``ssid`` and ``password``.\nThe user must first connect to the devices locally broadcast access point, which typically starts with "WeMo.", and then discover the device there.\nOnce done, pass the desired SSID and password (WPA2/AES encryption only) to the ``setup`` method to connect it to your wifi network.\n\n``device.setup(ssid=\'wifi_name\', password=\'special_secret\')``\n\nA few important notes:\n\n- Not all devices are currently supported for setup.\n- For a WeMo without internet access, see `this guide <https://github.com/pywemo/pywemo/wiki/WeMo-Cloud#disconnecting-from-the-cloud>`_ to stop any blinking lights.\n- If connecting to an open network, the password argument is ignored and you can provide anything, e.g. ``password=None``.\n- If connecting to a WPA2/AES-encrypted network, OpenSSL is used to encrypt the password by the ``pywemo`` library.\n  It must be installed and available on your ``PATH`` via calling ``openssl`` from a terminal or command prompt.\n\nFirmware Warning\n----------------\nStarting in May of 2020, Belkin started requiring users to create an account and login to the app (Android app version 1.25).\nIn addition to the account, most of the app functionality now requires a connection to the cloud (internet access), even for simple actions such as toggling a switch.\nAll of the commands that go through the cloud are encrypted and cannot be easily inspected.\nThis raises the possibility that Belkin could, in the future, update WeMo device firmware and make breaking API changes that can no longer be deciphered.\nIf this happens, ``pywemo`` may no longer function on that device.\nThus it would be prudent to upgrade firmware cautiously and preferably only after confirming that breaking API changes have not been introduced.\n\nDeveloping\n----------\nSetup and builds are fully automated.\nYou can run the build pipeline locally via:\n\n.. code-block::\n\n    # setup, install, format, lint, test and build:\n    ./scripts/build.sh\n\nNote that this will install a git ``pre-commit`` hook.\nFor this hook to work correctly, ``poetry`` needs to be globally accessible on your ``PATH`` or the local virtual environment must be activated.\nThis virtual environment can be activated with:\n\n.. code-block::\n\n    . .venv/bin/activate\n\nHistory\n-------\nThis started as a stripped down version of `ouimeaux <https://github.com/iancmcc/ouimeaux>`_, copyright Ian McCracken, but has since taken its own path.\n\nLicense\n-------\nAll contents of the pywemo/ouimeaux_device directory are licensed under a BSD 3-Clause license. The full text of that license is maintained within the pywemo/ouimeaux_device/LICENSE file.\nThe rest of pyWeMo is released under the MIT license. See the top-level LICENSE file for more details.\n\n\n.. |Build Badge| image:: https://github.com/pywemo/pywemo/workflows/Build/badge.svg\n    :target: https://github.com/pywemo/pywemo/actions?query=workflow%3ABuild\n    :alt: GitHub build status\n.. |PyPI Version Badge| image:: https://img.shields.io/pypi/v/pywemo\n    :target: https://pypi.org/project/pywemo/\n    :alt: Latest PyPI version\n.. |Coverage| image:: https://coveralls.io/repos/github/pywemo/pywemo/badge.svg?branch=master\n    :target: https://coveralls.io/github/pywemo/pywemo?branch=master\n    :alt: Coveralls coverage\n.. |PyPI Downloads Badge| image:: https://img.shields.io/pypi/dm/pywemo\n    :target: https://pypi.org/project/pywemo/\n    :alt: Number of PyPI downloads\n',
    'author': 'Eric Severance',
    'author_email': 'pywemo@esev.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/pywemo/pywemo',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
