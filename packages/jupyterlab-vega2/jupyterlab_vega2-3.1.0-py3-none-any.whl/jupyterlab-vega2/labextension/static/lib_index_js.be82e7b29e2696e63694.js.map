{"version":3,"sources":["webpack://@jupyterlab/vega2-extension/./style/index.css","webpack://@jupyterlab/vega2-extension/./style/index.css?90c3","webpack://@jupyterlab/vega2-extension/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAC4H;AAC7B;AAC/F,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,6VAA6V,sBAAsB,uCAAuC,oCAAoC,GAAG,+CAA+C,qBAAqB,oBAAoB,GAAG,yDAAyD,kBAAkB,GAAG,kBAAkB,0CAA0C,GAAG,SAAS,oFAAoF,QAAQ,MAAM,YAAY,aAAa,aAAa,OAAO,KAAK,YAAY,WAAW,OAAO,KAAK,UAAU,MAAM,KAAK,YAAY,6UAA6U,sBAAsB,uCAAuC,oCAAoC,GAAG,+CAA+C,qBAAqB,oBAAoB,GAAG,yDAAyD,kBAAkB,GAAG,kBAAkB,0CAA0C,GAAG,qBAAqB;AACxjD;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACPwD;AAC/F,YAA6F;;AAE7F;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,mFAAO;;;;AAIxB,iEAAe,0FAAc,MAAM,E;;;;;;;;;;;;;;;;;;;;;;ACZnC;AACA;AACA;AACA;AACyC;AACb;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gBAAgB,yBAAyB;AAC7G,uCAAuC,gBAAgB;AACvD;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAkC;AAC9C,sBAAsB,mBAAO,CAAC,kFAAe;AAC7C;AACA,aAAa,yCAAE;AACf;AACA,aAAa,CAAU;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,0BAA0B,EAAE;AACxE;AACA;AACA;AACA,iDAAiD,iBAAiB,wBAAwB,qCAAqC,6BAA6B,GAAG;AAC/J;AACA;AACA,iDAAiD,iBAAiB,wBAAwB,uBAAuB,sBAAsB,GAAG;AAC1I;AACA;AACA;AACA,CAAC,0BAA0B","file":"lib_index_js.be82e7b29e2696e63694.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\\n.jp-RenderedVegaCommon .vega-actions a {\\n  margin-right: 8px;\\n  font-size: var(--jp-ui-font-size1);\\n  color: var(--jp-ui-font-color2);\\n}\\n\\n.jp-BaseVegaWidget .jp-RenderedVegaCommon {\\n  margin-left: 8px;\\n  margin-top: 8px;\\n}\\n\\n.jp-MimeDocument.jp-Document .jp-RenderedVegaCommon {\\n  padding: 16px;\\n}\\n\\n.vega canvas {\\n  background: var(--jp-vega-background);\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/index.css\"],\"names\":[],\"mappings\":\"AAAA;;;8EAG8E;;AAE9E;EACE,iBAAiB;EACjB,kCAAkC;EAClC,+BAA+B;AACjC;;AAEA;EACE,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qCAAqC;AACvC\",\"sourcesContent\":[\"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\\n.jp-RenderedVegaCommon .vega-actions a {\\n  margin-right: 8px;\\n  font-size: var(--jp-ui-font-size1);\\n  color: var(--jp-ui-font-color2);\\n}\\n\\n.jp-BaseVegaWidget .jp-RenderedVegaCommon {\\n  margin-left: 8px;\\n  margin-top: 8px;\\n}\\n\\n.jp-MimeDocument.jp-Document .jp-RenderedVegaCommon {\\n  padding: 16px;\\n}\\n\\n.vega canvas {\\n  background: var(--jp-vega-background);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\nimport '../style/index.css';\n/**\n * The CSS class to add to the Vega and Vega-Lite widget.\n */\nconst VEGA_COMMON_CLASS = 'jp-RenderedVegaCommon';\n/**\n * The CSS class to add to the Vega.\n */\nconst VEGA_CLASS = 'jp-RenderedVega';\n/**\n * The CSS class to add to the Vega-Lite.\n */\nconst VEGALITE_CLASS = 'jp-RenderedVegaLite';\n/**\n * The MIME type for Vega.\n *\n * #### Notes\n * The version of this follows the major version of Vega.\n */\nexport const VEGA_MIME_TYPE = 'application/vnd.vega.v2+json';\n/**\n * The MIME type for Vega-Lite.\n *\n * #### Notes\n * The version of this follows the major version of Vega-Lite.\n */\nexport const VEGALITE_MIME_TYPE = 'application/vnd.vegalite.v1+json';\n/**\n * A widget for rendering Vega or Vega-Lite data, for usage with rendermime.\n */\nexport class RenderedVega extends Widget {\n    /**\n     * Create a new widget for rendering Vega/Vega-Lite.\n     */\n    constructor(options) {\n        super();\n        this.addClass(VEGA_COMMON_CLASS);\n        // Handle things related to the MIME type.\n        let mimeType = (this._mimeType = options.mimeType);\n        if (mimeType === VEGA_MIME_TYPE) {\n            this.addClass(VEGA_CLASS);\n            this._mode = 'vega';\n        }\n        else {\n            this.addClass(VEGALITE_CLASS);\n            this._mode = 'vega-lite';\n        }\n    }\n    /**\n     * Render Vega/Vega-Lite into this widget's node.\n     */\n    renderModel(model) {\n        let data = model.data[this._mimeType];\n        let updatedData;\n        if (this._mode === 'vega-lite') {\n            updatedData = Private.updateVegaLiteDefaults(data);\n        }\n        else {\n            updatedData = data;\n        }\n        let embedSpec = {\n            mode: this._mode,\n            spec: updatedData\n        };\n        return Private.ensureMod().then(embedFunc => {\n            return new Promise((resolve, reject) => {\n                embedFunc(this.node, embedSpec, (error, result) => {\n                    if (error) {\n                        return reject(error);\n                    }\n                    // Save png data in MIME bundle along with original MIME data.\n                    if (!model.data['image/png']) {\n                        let imageData = result.view.toImageURL().split(',')[1];\n                        let newData = Object.assign(Object.assign({}, model.data), { 'image/png': imageData });\n                        model.setData({ data: newData });\n                    }\n                    resolve(undefined);\n                });\n            });\n        });\n    }\n}\n/**\n * A mime renderer factory for vega data.\n */\nexport const rendererFactory = {\n    safe: true,\n    mimeTypes: [VEGA_MIME_TYPE, VEGALITE_MIME_TYPE],\n    createRenderer: options => new RenderedVega(options)\n};\nconst extension = {\n    id: '@jupyterlab/vega2-extension:factory',\n    rendererFactory,\n    rank: 60,\n    dataType: 'json',\n    documentWidgetFactoryOptions: [\n        {\n            name: 'Vega 2',\n            primaryFileType: 'vega2',\n            fileTypes: ['vega2', 'json'],\n            defaultFor: ['vega2']\n        },\n        {\n            name: 'Vega-Lite 1',\n            primaryFileType: 'vega-lite1',\n            fileTypes: ['vega-lite1', 'json'],\n            defaultFor: ['vega-lite1']\n        }\n    ],\n    fileTypes: [\n        {\n            mimeTypes: [VEGA_MIME_TYPE],\n            name: 'vega2',\n            extensions: ['.vg', '.vg.json', '.vega'],\n            iconClass: 'jp-MaterialIcon jp-VegaIcon'\n        },\n        {\n            mimeTypes: [VEGALITE_MIME_TYPE],\n            name: 'vega-lite1',\n            extensions: ['.vl', '.vl.json', '.vegalite'],\n            iconClass: 'jp-MaterialIcon jp-VegaIcon'\n        }\n    ]\n};\nexport default extension;\n/**\n * Namespace for module privates.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Default cell config for Vega-Lite.\n     */\n    const defaultCellConfig = {\n        width: 400,\n        height: 400 / 1.5\n    };\n    /**\n     * The embed module import.\n     */\n    let mod;\n    /**\n     * Initialize the vega-embed module.\n     */\n    function ensureMod() {\n        return new Promise((resolve, reject) => {\n            if (mod !== undefined) {\n                resolve(mod);\n                return;\n            }\n            require.ensure(['vega-embed-v2'], (require) => {\n                mod = require('vega-embed-v2');\n                resolve(mod);\n            }, (err) => {\n                reject(err);\n            }, 'vega2');\n        });\n    }\n    Private.ensureMod = ensureMod;\n    /**\n     * Apply the default cell config to the spec in place.\n     *\n     * #### Notes\n     * This carefully does a shallow copy to avoid copying the potentially\n     * large data.\n     */\n    function updateVegaLiteDefaults(spec) {\n        let config = spec.config;\n        if (!config) {\n            return Object.assign({ config: { cell: defaultCellConfig } }, spec);\n        }\n        let cell = config.cell;\n        if (cell) {\n            return Object.assign(Object.assign({}, Object.assign({ config: Object.assign({ cell: Object.assign(Object.assign({}, defaultCellConfig), cell) }) }, config)), spec);\n        }\n        else {\n            return Object.assign(Object.assign({}, Object.assign({ config: Object.assign({ cell: Object.assign({}, defaultCellConfig) }) }, config)), spec);\n        }\n    }\n    Private.updateVegaLiteDefaults = updateVegaLiteDefaults;\n})(Private || (Private = {}));\n"],"sourceRoot":""}