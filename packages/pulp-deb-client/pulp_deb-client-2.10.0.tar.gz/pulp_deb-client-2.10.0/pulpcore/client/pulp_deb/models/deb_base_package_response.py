# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_deb.configuration import Configuration


class DebBasePackageResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'pulp_created': 'datetime',
        'artifact': 'str',
        'relative_path': 'str',
        'md5': 'str',
        'sha1': 'str',
        'sha224': 'str',
        'sha256': 'str',
        'sha384': 'str',
        'sha512': 'str',
        'package': 'str',
        'source': 'str',
        'version': 'str',
        'architecture': 'str',
        'section': 'str',
        'priority': 'str',
        'origin': 'str',
        'tag': 'str',
        'bugs': 'str',
        'essential': 'str',
        'build_essential': 'str',
        'installed_size': 'str',
        'maintainer': 'str',
        'original_maintainer': 'str',
        'description': 'str',
        'description_md5': 'str',
        'homepage': 'str',
        'built_using': 'str',
        'auto_built_package': 'str',
        'multi_arch': 'str',
        'breaks': 'str',
        'conflicts': 'str',
        'depends': 'str',
        'recommends': 'str',
        'suggests': 'str',
        'enhances': 'str',
        'pre_depends': 'str',
        'provides': 'str',
        'replaces': 'str'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'pulp_created': 'pulp_created',
        'artifact': 'artifact',
        'relative_path': 'relative_path',
        'md5': 'md5',
        'sha1': 'sha1',
        'sha224': 'sha224',
        'sha256': 'sha256',
        'sha384': 'sha384',
        'sha512': 'sha512',
        'package': 'package',
        'source': 'source',
        'version': 'version',
        'architecture': 'architecture',
        'section': 'section',
        'priority': 'priority',
        'origin': 'origin',
        'tag': 'tag',
        'bugs': 'bugs',
        'essential': 'essential',
        'build_essential': 'build_essential',
        'installed_size': 'installed_size',
        'maintainer': 'maintainer',
        'original_maintainer': 'original_maintainer',
        'description': 'description',
        'description_md5': 'description_md5',
        'homepage': 'homepage',
        'built_using': 'built_using',
        'auto_built_package': 'auto_built_package',
        'multi_arch': 'multi_arch',
        'breaks': 'breaks',
        'conflicts': 'conflicts',
        'depends': 'depends',
        'recommends': 'recommends',
        'suggests': 'suggests',
        'enhances': 'enhances',
        'pre_depends': 'pre_depends',
        'provides': 'provides',
        'replaces': 'replaces'
    }

    def __init__(self, pulp_href=None, pulp_created=None, artifact=None, relative_path=None, md5=None, sha1=None, sha224=None, sha256=None, sha384=None, sha512=None, package=None, source=None, version=None, architecture=None, section=None, priority=None, origin=None, tag=None, bugs=None, essential=None, build_essential=None, installed_size=None, maintainer=None, original_maintainer=None, description=None, description_md5=None, homepage=None, built_using=None, auto_built_package=None, multi_arch=None, breaks=None, conflicts=None, depends=None, recommends=None, suggests=None, enhances=None, pre_depends=None, provides=None, replaces=None, local_vars_configuration=None):  # noqa: E501
        """DebBasePackageResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._pulp_created = None
        self._artifact = None
        self._relative_path = None
        self._md5 = None
        self._sha1 = None
        self._sha224 = None
        self._sha256 = None
        self._sha384 = None
        self._sha512 = None
        self._package = None
        self._source = None
        self._version = None
        self._architecture = None
        self._section = None
        self._priority = None
        self._origin = None
        self._tag = None
        self._bugs = None
        self._essential = None
        self._build_essential = None
        self._installed_size = None
        self._maintainer = None
        self._original_maintainer = None
        self._description = None
        self._description_md5 = None
        self._homepage = None
        self._built_using = None
        self._auto_built_package = None
        self._multi_arch = None
        self._breaks = None
        self._conflicts = None
        self._depends = None
        self._recommends = None
        self._suggests = None
        self._enhances = None
        self._pre_depends = None
        self._provides = None
        self._replaces = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if pulp_created is not None:
            self.pulp_created = pulp_created
        if artifact is not None:
            self.artifact = artifact
        if relative_path is not None:
            self.relative_path = relative_path
        if md5 is not None:
            self.md5 = md5
        if sha1 is not None:
            self.sha1 = sha1
        if sha224 is not None:
            self.sha224 = sha224
        if sha256 is not None:
            self.sha256 = sha256
        if sha384 is not None:
            self.sha384 = sha384
        if sha512 is not None:
            self.sha512 = sha512
        if package is not None:
            self.package = package
        if source is not None:
            self.source = source
        if version is not None:
            self.version = version
        if architecture is not None:
            self.architecture = architecture
        if section is not None:
            self.section = section
        if priority is not None:
            self.priority = priority
        if origin is not None:
            self.origin = origin
        if tag is not None:
            self.tag = tag
        if bugs is not None:
            self.bugs = bugs
        if essential is not None:
            self.essential = essential
        if build_essential is not None:
            self.build_essential = build_essential
        if installed_size is not None:
            self.installed_size = installed_size
        if maintainer is not None:
            self.maintainer = maintainer
        if original_maintainer is not None:
            self.original_maintainer = original_maintainer
        if description is not None:
            self.description = description
        if description_md5 is not None:
            self.description_md5 = description_md5
        if homepage is not None:
            self.homepage = homepage
        if built_using is not None:
            self.built_using = built_using
        if auto_built_package is not None:
            self.auto_built_package = auto_built_package
        if multi_arch is not None:
            self.multi_arch = multi_arch
        if breaks is not None:
            self.breaks = breaks
        if conflicts is not None:
            self.conflicts = conflicts
        if depends is not None:
            self.depends = depends
        if recommends is not None:
            self.recommends = recommends
        if suggests is not None:
            self.suggests = suggests
        if enhances is not None:
            self.enhances = enhances
        if pre_depends is not None:
            self.pre_depends = pre_depends
        if provides is not None:
            self.provides = provides
        if replaces is not None:
            self.replaces = replaces

    @property
    def pulp_href(self):
        """Gets the pulp_href of this DebBasePackageResponse.  # noqa: E501


        :return: The pulp_href of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this DebBasePackageResponse.


        :param pulp_href: The pulp_href of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def pulp_created(self):
        """Gets the pulp_created of this DebBasePackageResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this DebBasePackageResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this DebBasePackageResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this DebBasePackageResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def artifact(self):
        """Gets the artifact of this DebBasePackageResponse.  # noqa: E501

        Artifact file representing the physical content  # noqa: E501

        :return: The artifact of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this DebBasePackageResponse.

        Artifact file representing the physical content  # noqa: E501

        :param artifact: The artifact of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._artifact = artifact

    @property
    def relative_path(self):
        """Gets the relative_path of this DebBasePackageResponse.  # noqa: E501

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :return: The relative_path of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this DebBasePackageResponse.

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :param relative_path: The relative_path of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def md5(self):
        """Gets the md5 of this DebBasePackageResponse.  # noqa: E501

        The MD5 checksum if available.  # noqa: E501

        :return: The md5 of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this DebBasePackageResponse.

        The MD5 checksum if available.  # noqa: E501

        :param md5: The md5 of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    @property
    def sha1(self):
        """Gets the sha1 of this DebBasePackageResponse.  # noqa: E501

        The SHA-1 checksum if available.  # noqa: E501

        :return: The sha1 of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this DebBasePackageResponse.

        The SHA-1 checksum if available.  # noqa: E501

        :param sha1: The sha1 of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._sha1 = sha1

    @property
    def sha224(self):
        """Gets the sha224 of this DebBasePackageResponse.  # noqa: E501

        The SHA-224 checksum if available.  # noqa: E501

        :return: The sha224 of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._sha224

    @sha224.setter
    def sha224(self, sha224):
        """Sets the sha224 of this DebBasePackageResponse.

        The SHA-224 checksum if available.  # noqa: E501

        :param sha224: The sha224 of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._sha224 = sha224

    @property
    def sha256(self):
        """Gets the sha256 of this DebBasePackageResponse.  # noqa: E501

        The SHA-256 checksum if available.  # noqa: E501

        :return: The sha256 of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this DebBasePackageResponse.

        The SHA-256 checksum if available.  # noqa: E501

        :param sha256: The sha256 of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    @property
    def sha384(self):
        """Gets the sha384 of this DebBasePackageResponse.  # noqa: E501

        The SHA-384 checksum if available.  # noqa: E501

        :return: The sha384 of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._sha384

    @sha384.setter
    def sha384(self, sha384):
        """Sets the sha384 of this DebBasePackageResponse.

        The SHA-384 checksum if available.  # noqa: E501

        :param sha384: The sha384 of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._sha384 = sha384

    @property
    def sha512(self):
        """Gets the sha512 of this DebBasePackageResponse.  # noqa: E501

        The SHA-512 checksum if available.  # noqa: E501

        :return: The sha512 of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._sha512

    @sha512.setter
    def sha512(self, sha512):
        """Sets the sha512 of this DebBasePackageResponse.

        The SHA-512 checksum if available.  # noqa: E501

        :param sha512: The sha512 of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._sha512 = sha512

    @property
    def package(self):
        """Gets the package of this DebBasePackageResponse.  # noqa: E501


        :return: The package of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this DebBasePackageResponse.


        :param package: The package of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._package = package

    @property
    def source(self):
        """Gets the source of this DebBasePackageResponse.  # noqa: E501


        :return: The source of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DebBasePackageResponse.


        :param source: The source of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def version(self):
        """Gets the version of this DebBasePackageResponse.  # noqa: E501


        :return: The version of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DebBasePackageResponse.


        :param version: The version of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def architecture(self):
        """Gets the architecture of this DebBasePackageResponse.  # noqa: E501


        :return: The architecture of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this DebBasePackageResponse.


        :param architecture: The architecture of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def section(self):
        """Gets the section of this DebBasePackageResponse.  # noqa: E501


        :return: The section of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this DebBasePackageResponse.


        :param section: The section of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def priority(self):
        """Gets the priority of this DebBasePackageResponse.  # noqa: E501


        :return: The priority of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DebBasePackageResponse.


        :param priority: The priority of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def origin(self):
        """Gets the origin of this DebBasePackageResponse.  # noqa: E501


        :return: The origin of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this DebBasePackageResponse.


        :param origin: The origin of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def tag(self):
        """Gets the tag of this DebBasePackageResponse.  # noqa: E501


        :return: The tag of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DebBasePackageResponse.


        :param tag: The tag of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def bugs(self):
        """Gets the bugs of this DebBasePackageResponse.  # noqa: E501


        :return: The bugs of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._bugs

    @bugs.setter
    def bugs(self, bugs):
        """Sets the bugs of this DebBasePackageResponse.


        :param bugs: The bugs of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._bugs = bugs

    @property
    def essential(self):
        """Gets the essential of this DebBasePackageResponse.  # noqa: E501


        :return: The essential of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._essential

    @essential.setter
    def essential(self, essential):
        """Sets the essential of this DebBasePackageResponse.


        :param essential: The essential of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._essential = essential

    @property
    def build_essential(self):
        """Gets the build_essential of this DebBasePackageResponse.  # noqa: E501


        :return: The build_essential of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_essential

    @build_essential.setter
    def build_essential(self, build_essential):
        """Sets the build_essential of this DebBasePackageResponse.


        :param build_essential: The build_essential of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._build_essential = build_essential

    @property
    def installed_size(self):
        """Gets the installed_size of this DebBasePackageResponse.  # noqa: E501


        :return: The installed_size of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._installed_size

    @installed_size.setter
    def installed_size(self, installed_size):
        """Sets the installed_size of this DebBasePackageResponse.


        :param installed_size: The installed_size of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._installed_size = installed_size

    @property
    def maintainer(self):
        """Gets the maintainer of this DebBasePackageResponse.  # noqa: E501


        :return: The maintainer of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this DebBasePackageResponse.


        :param maintainer: The maintainer of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._maintainer = maintainer

    @property
    def original_maintainer(self):
        """Gets the original_maintainer of this DebBasePackageResponse.  # noqa: E501


        :return: The original_maintainer of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._original_maintainer

    @original_maintainer.setter
    def original_maintainer(self, original_maintainer):
        """Sets the original_maintainer of this DebBasePackageResponse.


        :param original_maintainer: The original_maintainer of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._original_maintainer = original_maintainer

    @property
    def description(self):
        """Gets the description of this DebBasePackageResponse.  # noqa: E501


        :return: The description of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DebBasePackageResponse.


        :param description: The description of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_md5(self):
        """Gets the description_md5 of this DebBasePackageResponse.  # noqa: E501


        :return: The description_md5 of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._description_md5

    @description_md5.setter
    def description_md5(self, description_md5):
        """Sets the description_md5 of this DebBasePackageResponse.


        :param description_md5: The description_md5 of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._description_md5 = description_md5

    @property
    def homepage(self):
        """Gets the homepage of this DebBasePackageResponse.  # noqa: E501


        :return: The homepage of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this DebBasePackageResponse.


        :param homepage: The homepage of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._homepage = homepage

    @property
    def built_using(self):
        """Gets the built_using of this DebBasePackageResponse.  # noqa: E501


        :return: The built_using of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._built_using

    @built_using.setter
    def built_using(self, built_using):
        """Sets the built_using of this DebBasePackageResponse.


        :param built_using: The built_using of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._built_using = built_using

    @property
    def auto_built_package(self):
        """Gets the auto_built_package of this DebBasePackageResponse.  # noqa: E501


        :return: The auto_built_package of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._auto_built_package

    @auto_built_package.setter
    def auto_built_package(self, auto_built_package):
        """Sets the auto_built_package of this DebBasePackageResponse.


        :param auto_built_package: The auto_built_package of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._auto_built_package = auto_built_package

    @property
    def multi_arch(self):
        """Gets the multi_arch of this DebBasePackageResponse.  # noqa: E501


        :return: The multi_arch of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._multi_arch

    @multi_arch.setter
    def multi_arch(self, multi_arch):
        """Sets the multi_arch of this DebBasePackageResponse.


        :param multi_arch: The multi_arch of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._multi_arch = multi_arch

    @property
    def breaks(self):
        """Gets the breaks of this DebBasePackageResponse.  # noqa: E501


        :return: The breaks of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._breaks

    @breaks.setter
    def breaks(self, breaks):
        """Sets the breaks of this DebBasePackageResponse.


        :param breaks: The breaks of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._breaks = breaks

    @property
    def conflicts(self):
        """Gets the conflicts of this DebBasePackageResponse.  # noqa: E501


        :return: The conflicts of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts):
        """Sets the conflicts of this DebBasePackageResponse.


        :param conflicts: The conflicts of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._conflicts = conflicts

    @property
    def depends(self):
        """Gets the depends of this DebBasePackageResponse.  # noqa: E501


        :return: The depends of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._depends

    @depends.setter
    def depends(self, depends):
        """Sets the depends of this DebBasePackageResponse.


        :param depends: The depends of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._depends = depends

    @property
    def recommends(self):
        """Gets the recommends of this DebBasePackageResponse.  # noqa: E501


        :return: The recommends of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._recommends

    @recommends.setter
    def recommends(self, recommends):
        """Sets the recommends of this DebBasePackageResponse.


        :param recommends: The recommends of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._recommends = recommends

    @property
    def suggests(self):
        """Gets the suggests of this DebBasePackageResponse.  # noqa: E501


        :return: The suggests of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._suggests

    @suggests.setter
    def suggests(self, suggests):
        """Sets the suggests of this DebBasePackageResponse.


        :param suggests: The suggests of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._suggests = suggests

    @property
    def enhances(self):
        """Gets the enhances of this DebBasePackageResponse.  # noqa: E501


        :return: The enhances of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._enhances

    @enhances.setter
    def enhances(self, enhances):
        """Sets the enhances of this DebBasePackageResponse.


        :param enhances: The enhances of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._enhances = enhances

    @property
    def pre_depends(self):
        """Gets the pre_depends of this DebBasePackageResponse.  # noqa: E501


        :return: The pre_depends of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._pre_depends

    @pre_depends.setter
    def pre_depends(self, pre_depends):
        """Sets the pre_depends of this DebBasePackageResponse.


        :param pre_depends: The pre_depends of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._pre_depends = pre_depends

    @property
    def provides(self):
        """Gets the provides of this DebBasePackageResponse.  # noqa: E501


        :return: The provides of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._provides

    @provides.setter
    def provides(self, provides):
        """Sets the provides of this DebBasePackageResponse.


        :param provides: The provides of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._provides = provides

    @property
    def replaces(self):
        """Gets the replaces of this DebBasePackageResponse.  # noqa: E501


        :return: The replaces of this DebBasePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._replaces

    @replaces.setter
    def replaces(self, replaces):
        """Sets the replaces of this DebBasePackageResponse.


        :param replaces: The replaces of this DebBasePackageResponse.  # noqa: E501
        :type: str
        """

        self._replaces = replaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebBasePackageResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DebBasePackageResponse):
            return True

        return self.to_dict() != other.to_dict()
