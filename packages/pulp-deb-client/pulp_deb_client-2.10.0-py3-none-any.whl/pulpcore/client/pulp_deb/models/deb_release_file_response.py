# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_deb.configuration import Configuration


class DebReleaseFileResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'pulp_created': 'datetime',
        'artifacts': 'object',
        'codename': 'str',
        'suite': 'str',
        'distribution': 'str',
        'relative_path': 'str'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'pulp_created': 'pulp_created',
        'artifacts': 'artifacts',
        'codename': 'codename',
        'suite': 'suite',
        'distribution': 'distribution',
        'relative_path': 'relative_path'
    }

    def __init__(self, pulp_href=None, pulp_created=None, artifacts=None, codename=None, suite=None, distribution=None, relative_path=None, local_vars_configuration=None):  # noqa: E501
        """DebReleaseFileResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._pulp_created = None
        self._artifacts = None
        self._codename = None
        self._suite = None
        self._distribution = None
        self._relative_path = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if pulp_created is not None:
            self.pulp_created = pulp_created
        self.artifacts = artifacts
        if codename is not None:
            self.codename = codename
        if suite is not None:
            self.suite = suite
        self.distribution = distribution
        if relative_path is not None:
            self.relative_path = relative_path

    @property
    def pulp_href(self):
        """Gets the pulp_href of this DebReleaseFileResponse.  # noqa: E501


        :return: The pulp_href of this DebReleaseFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this DebReleaseFileResponse.


        :param pulp_href: The pulp_href of this DebReleaseFileResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def pulp_created(self):
        """Gets the pulp_created of this DebReleaseFileResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this DebReleaseFileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this DebReleaseFileResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this DebReleaseFileResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def artifacts(self):
        """Gets the artifacts of this DebReleaseFileResponse.  # noqa: E501

        A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'  # noqa: E501

        :return: The artifacts of this DebReleaseFileResponse.  # noqa: E501
        :rtype: object
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this DebReleaseFileResponse.

        A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'  # noqa: E501

        :param artifacts: The artifacts of this DebReleaseFileResponse.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and artifacts is None:  # noqa: E501
            raise ValueError("Invalid value for `artifacts`, must not be `None`")  # noqa: E501

        self._artifacts = artifacts

    @property
    def codename(self):
        """Gets the codename of this DebReleaseFileResponse.  # noqa: E501

        Codename of the release, i.e. \"buster\".  # noqa: E501

        :return: The codename of this DebReleaseFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this DebReleaseFileResponse.

        Codename of the release, i.e. \"buster\".  # noqa: E501

        :param codename: The codename of this DebReleaseFileResponse.  # noqa: E501
        :type: str
        """

        self._codename = codename

    @property
    def suite(self):
        """Gets the suite of this DebReleaseFileResponse.  # noqa: E501

        Suite of the release, i.e. \"stable\".  # noqa: E501

        :return: The suite of this DebReleaseFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._suite

    @suite.setter
    def suite(self, suite):
        """Sets the suite of this DebReleaseFileResponse.

        Suite of the release, i.e. \"stable\".  # noqa: E501

        :param suite: The suite of this DebReleaseFileResponse.  # noqa: E501
        :type: str
        """

        self._suite = suite

    @property
    def distribution(self):
        """Gets the distribution of this DebReleaseFileResponse.  # noqa: E501

        Distribution of the release, i.e. \"stable/updates\".  # noqa: E501

        :return: The distribution of this DebReleaseFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this DebReleaseFileResponse.

        Distribution of the release, i.e. \"stable/updates\".  # noqa: E501

        :param distribution: The distribution of this DebReleaseFileResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and distribution is None:  # noqa: E501
            raise ValueError("Invalid value for `distribution`, must not be `None`")  # noqa: E501

        self._distribution = distribution

    @property
    def relative_path(self):
        """Gets the relative_path of this DebReleaseFileResponse.  # noqa: E501

        Path of file relative to url.  # noqa: E501

        :return: The relative_path of this DebReleaseFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this DebReleaseFileResponse.

        Path of file relative to url.  # noqa: E501

        :param relative_path: The relative_path of this DebReleaseFileResponse.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebReleaseFileResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DebReleaseFileResponse):
            return True

        return self.to_dict() != other.to_dict()
