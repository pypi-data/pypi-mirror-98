"""
    WhyLabs API client

    WhyLabs API that enables end-to-end AI observability  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: support@whylabs.ai
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from whylabs_client.api_client import ApiClient, Endpoint as _Endpoint
from whylabs_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from whylabs_client.model.user_api_key import UserApiKey


class ApiKeyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_api_key(
            self,
            org_id,
            user_id,
            **kwargs
        ):
            """Generate an API key for a user.  # noqa: E501

            Generates an API key for a given user. Must be called either by system administrator or by the user themselves  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_api_key(org_id, user_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_id (str): Your company's unique organization ID
                user_id (str): The unique user ID in an organization.

            Keyword Args:
                expiration_time (int, none_type): Expiration time in epoch milliseconds. [optional]
                scopes ([str], none_type): Scopes of the token  An object with key ID and other metadata about the key. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserApiKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_id'] = \
                org_id
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.create_api_key = _Endpoint(
            settings={
                'response_type': (UserApiKey,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/api-key',
                'operation_id': 'create_api_key',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'user_id',
                    'expiration_time',
                    'scopes',
                ],
                'required': [
                    'org_id',
                    'user_id',
                ],
                'nullable': [
                    'expiration_time',
                    'scopes',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'user_id':
                        (str,),
                    'expiration_time':
                        (int, none_type,),
                    'scopes':
                        ([str], none_type,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'user_id': 'user_id',
                    'expiration_time': 'expiration_time',
                    'scopes': 'scopes',
                },
                'location_map': {
                    'org_id': 'path',
                    'user_id': 'query',
                    'expiration_time': 'query',
                    'scopes': 'query',
                },
                'collection_format_map': {
                    'scopes': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__create_api_key
        )
