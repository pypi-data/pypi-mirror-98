# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.17)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget iDynTree::idyntree-core iDynTree::idyntree-model iDynTree::idyntree-sensors iDynTree::idyntree-modelio-xml iDynTree::idyntree-modelio-urdf iDynTree::idyntree-estimation iDynTree::idyntree-solid-shapes iDynTree::idyntree-high-level iDynTree::idyntree-inverse-kinematics iDynTree::idyntree-optimalcontrol iDynTree::idyntree-yarp iDynTree::idyntree-icub iDynTree::idyntree-visualization)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target iDynTree::idyntree-core
add_library(iDynTree::idyntree-core STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-core PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_attribute_deprecated"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:Eigen3::Eigen>"
)

# Create imported target iDynTree::idyntree-model
add_library(iDynTree::idyntree-model STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-model PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;\$<LINK_ONLY:Eigen3::Eigen>"
)

# Create imported target iDynTree::idyntree-sensors
add_library(iDynTree::idyntree-sensors STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-sensors PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;\$<LINK_ONLY:Eigen3::Eigen>"
)

# Create imported target iDynTree::idyntree-modelio-xml
add_library(iDynTree::idyntree-modelio-xml STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-modelio-xml PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:Eigen3::Eigen>;\$<LINK_ONLY:LibXml2::LibXml2>;\$<LINK_ONLY:iDynTree::idyntree-core>"
)

# Create imported target iDynTree::idyntree-modelio-urdf
add_library(iDynTree::idyntree-modelio-urdf STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-modelio-urdf PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;iDynTree::idyntree-sensors;iDynTree::idyntree-modelio-xml;\$<LINK_ONLY:Eigen3::Eigen>;\$<LINK_ONLY:LibXml2::LibXml2>"
)

# Create imported target iDynTree::idyntree-estimation
add_library(iDynTree::idyntree-estimation STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-estimation PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;iDynTree::idyntree-sensors;iDynTree::idyntree-modelio-urdf;\$<LINK_ONLY:Eigen3::Eigen>"
)

# Create imported target iDynTree::idyntree-solid-shapes
add_library(iDynTree::idyntree-solid-shapes STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-solid-shapes PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;\$<LINK_ONLY:Eigen3::Eigen>;\$<LINK_ONLY:assimp::assimp>"
)

# Create imported target iDynTree::idyntree-high-level
add_library(iDynTree::idyntree-high-level STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-high-level PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;iDynTree::idyntree-sensors;iDynTree::idyntree-modelio-urdf;\$<LINK_ONLY:Eigen3::Eigen>"
)

# Create imported target iDynTree::idyntree-inverse-kinematics
add_library(iDynTree::idyntree-inverse-kinematics STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-inverse-kinematics PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-high-level;\$<LINK_ONLY:Eigen3::Eigen>;/usr/lib/libipopt.so;/usr/lib/x86_64-linux-gnu/libdmumps_seq.so;/usr/lib/x86_64-linux-gnu/libblas.so;/usr/lib/x86_64-linux-gnu/liblapack.so;/usr/lib/x86_64-linux-gnu/libblas.so;/usr/lib/x86_64-linux-gnu/libdmumps_seq.so;/usr/lib/x86_64-linux-gnu/libdl.so;/usr/lib/gcc/x86_64-linux-gnu/9/libgfortran.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/gcc/x86_64-linux-gnu/9/libquadmath.so;/usr/lib/x86_64-linux-gnu/libblas.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so"
)

# Create imported target iDynTree::idyntree-optimalcontrol
add_library(iDynTree::idyntree-optimalcontrol STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-optimalcontrol PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;/usr/lib/libipopt.so;/usr/lib/x86_64-linux-gnu/libdmumps_seq.so;/usr/lib/x86_64-linux-gnu/libblas.so;/usr/lib/x86_64-linux-gnu/liblapack.so;/usr/lib/x86_64-linux-gnu/libblas.so;/usr/lib/x86_64-linux-gnu/libdmumps_seq.so;/usr/lib/x86_64-linux-gnu/libdl.so;/usr/lib/gcc/x86_64-linux-gnu/9/libgfortran.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/gcc/x86_64-linux-gnu/9/libquadmath.so;/usr/lib/x86_64-linux-gnu/libblas.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so;\$<LINK_ONLY:Eigen3::Eigen>"
)

# Create imported target iDynTree::idyntree-yarp
add_library(iDynTree::idyntree-yarp INTERFACE IMPORTED)

set_target_properties(iDynTree::idyntree-yarp PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model"
)

# Create imported target iDynTree::idyntree-icub
add_library(iDynTree::idyntree-icub INTERFACE IMPORTED)

set_target_properties(iDynTree::idyntree-icub PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;iDynTree::idyntree-yarp;iDynTree::idyntree-estimation"
)

# Create imported target iDynTree::idyntree-visualization
add_library(iDynTree::idyntree-visualization STATIC IMPORTED)

set_target_properties(iDynTree::idyntree-visualization PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "iDynTree::idyntree-core;iDynTree::idyntree-model;\$<LINK_ONLY:Eigen3::Eigen>"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/iDynTreeTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
