Metadata-Version: 2.1
Name: concrete-datastore
Version: 1.28.0
Summary: A highly versatile REST Datastore
Home-page: https://customer.caas.microservices.rest/
Author: Netsach
Author-email: contact@netsach.org
License: GNU GENERAL PUBLIC LICENSE Version 3
Project-URL: Bug Tracker, https://github.com/Netsach/concrete-datastore/issues
Project-URL: Documentation, https://concrete-datastore.netsach.org/en/latest/
Project-URL: Source Code, https://github.com/Netsach/concrete-datastore/
Project-URL: Tests Coverage, https://codecov.io/gh/Netsach/concrete-datastore
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Description-Content-Type: text/markdown
Requires-Dist: Django (<2.3,>=2.2)
Requires-Dist: django-cors-headers (<2,>=1.3.1)
Requires-Dist: django-extensions (<2,>=1.7)
Requires-Dist: django-filter (<3,>=2.1.0)
Requires-Dist: django-otp (<1,>=0.7.0)
Requires-Dist: djangorestframework (==3.10.2)
Requires-Dist: djangorestframework-gis (<0.18.0,>=0.17.0)
Requires-Dist: drf-extra-fields (<4,>=3.0.4)
Requires-Dist: social-auth-app-django (<3.2,>=3.1.0)
Requires-Dist: social-auth-core (<3.3,>=3.2.0)
Requires-Dist: psycopg2-binary (<3,>=2.8.1)
Requires-Dist: concrete-mailer (<3,>=2.13.0)
Requires-Dist: pendulum (<3,>=2.0)
Requires-Dist: Pillow (<9,>=8)
Requires-Dist: pytz (>=2018.5)
Requires-Dist: requests (<3,>=2.13.0)
Requires-Dist: pyyaml (<6,>=5.1.2)
Requires-Dist: uritemplate (<4,>=3.0.0)
Requires-Dist: six (<2,>=1.12)
Requires-Dist: python-slugify (<4,>=3.0.3)
Requires-Dist: celery (<5,>=4.3)
Requires-Dist: redis (<4,>=3.2)
Provides-Extra: dev
Requires-Dist: ipython ; extra == 'dev'
Requires-Dist: django-debug-toolbar ; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mkdocs (<2,>=1.0.4) ; extra == 'docs'
Requires-Dist: mkdocs-material (<4.5,>=4.4.3) ; extra == 'docs'
Provides-Extra: full
Requires-Dist: ipython ; extra == 'full'
Requires-Dist: django-debug-toolbar ; extra == 'full'
Requires-Dist: mock ; extra == 'full'
Requires-Dist: pytest-django ; extra == 'full'
Requires-Dist: pytest-cov ; extra == 'full'
Requires-Dist: pytest ; extra == 'full'
Requires-Dist: codecov ; extra == 'full'
Requires-Dist: bandit ; extra == 'full'
Requires-Dist: pylint ; extra == 'full'
Requires-Dist: black ; extra == 'full'
Provides-Extra: quality
Requires-Dist: pylint ; extra == 'quality'
Requires-Dist: black ; extra == 'quality'
Provides-Extra: security
Requires-Dist: bandit ; extra == 'security'
Provides-Extra: tests
Requires-Dist: mock ; extra == 'tests'
Requires-Dist: pytest-django ; extra == 'tests'
Requires-Dist: pytest-cov ; extra == 'tests'
Requires-Dist: pytest ; extra == 'tests'
Requires-Dist: codecov ; extra == 'tests'

# README

## Code Quality

![GitHub Workflow Status](https://img.shields.io/github/workflow/status/Netsach/concrete-datastore/Check%20Bandit?label=security)
![GitHub Workflow Status](https://img.shields.io/github/workflow/status/Netsach/concrete-datastore/Check%20Black?label=black)
![GitHub Workflow Status](https://img.shields.io/github/workflow/status/Netsach/concrete-datastore/Lint?label=lint)
![GitHub Workflow Status](https://img.shields.io/github/workflow/status/Netsach/concrete-datastore/Tests?label=tests)
![Codecov](https://img.shields.io/codecov/c/github/Netsach/concrete-datastore?logo=codecov)
![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)
![Python](https://img.shields.io/badge/python-3.6-3473A7?logo=python&logoColor=FED646)
![Python](https://img.shields.io/badge/python-3.7-3473A7?logo=python&logoColor=FED646)
![Python](https://img.shields.io/badge/python-3.8-3473A7?logo=python&logoColor=FED646)

## Description

`concrete-datastore` is a highly versatile HTTP REST Datastore based on the web framework [Django](https://djangoproject.com/).

It is used mainly as a HTTP database server for single page web application (SPA).

As opposed to a classic database server such as PostgreSQL or MySQL where queries are performed using SQL language, each operation is performed using plain HTTP requests. `concrete-datastore` abstracts the database layer.

`concrete-datastore` can be seen as a NoSQL server or as a Firebase alternative.

## Quick start

![Term sheet sample](https://concrete-datastore.netsach.org/en/latest/assets/mini-term-sample.svg)

```shell
git clone https://github.com/Netsach/concrete-datastore.git
cd concrete-datastore
docker run --name postgres-concrete-datastore -d -p 5432:5432 postgres
export DATAMODEL_FILE=./docs/assets/sample-datamodel.yml
python3 -m venv env
source env/bin/activate
pip install -e ".[full]"
concrete-datastore makemigrations
concrete-datastore migrate
concrete-datastore createsuperuser
concrete-datastore runserver
```

Now browse to [http://127.0.0.1:8000/concrete-datastore-admin/](http://127.0.0.1:8000/concrete-datastore-admin/)

You can now create a token to use the API (or use the login endpoint).

## Features

`concrete-datastore` comes with a lot of built-in features such as:

- User and permission management
- Automatically generated backoffice for administrators
- Fully REST API using JSON as serialization format
- Simple statistics generation
- Email sending capabilities from the API
- ...

## How does it work ?

In order to describe the database schema, the developer has to write a `datamodel` file in YAML or JSON. This `datamodel` file allows `concrete-datastore` to manage the underlying database using PostgreSQL.

Each API requests is controlled by this `datamodel` file as it acts as a specification of what is in the database and what should be allowed per user.

You can create manually the `datamodel` file following the examples and the documentation or use the online editor [microservices.rest](https://www.microservices.rest/)

## Official documentation

See the [official documentation](http://concrete-datastore.netsach.org/)


