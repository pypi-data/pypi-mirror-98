!function(n,e){"function"==typeof define&&define.amd?define(["exports"],e):"undefined"!=typeof exports?e(exports):(e(e={}),n.modCallbacks=e)}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:this,function(n){"use strict";function o(n,e){var t;if("undefined"==typeof Symbol||null==n[Symbol.iterator]){if(Array.isArray(n)||(t=function(n,e){if(!n)return;if("string"==typeof n)return c(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);"Object"===t&&n.constructor&&(t=n.constructor.name);if("Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return c(n,e)}(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var o=0,e=function(){};return{s:e,n:function(){return o>=n.length?{done:!0}:{done:!1,value:n[o++]}},e:function(n){throw n},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,a=!0,i=!1;return{s:function(){t=n[Symbol.iterator]()},n:function(){var n=t.next();return a=n.done,n},e:function(n){i=!0,r=n},f:function(){try{a||null==t.return||t.return()}finally{if(i)throw r}}}}function c(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}Object.defineProperty(n,"__esModule",{value:!0}),n.callbacks=void 0;var r=MyAMS.$,e={init:function(){0},initElement:function(t){return new Promise(function(n,e){var l=[];r("[data-ams-callback]",t).each(function(n,a){var i=r(a).data(),e=i.amsCallback;if("string"==typeof e)try{e=JSON.parse(i.amsCallback)}catch(n){e=i.amsCallback.split(/[\s,;]+/)}r.isArray(e)||(e=[e]);var c,t=o(e);try{for(t.s();!(c=t.n()).done;)!function(){var n=c.value,e=void 0,t=void 0,o=void 0,r=void 0;"string"==typeof n?(e=n,t=MyAMS.core.getFunctionByName(e),o=i.amsCallbackOptions,"string"==typeof(r=i.amsCallbackOptions)&&(r=r.unserialize())):(e=n.callback,t=MyAMS.core.getFunctionByName(e),o=n.source,r=n.options),void 0===t?o?l.push(MyAMS.core.getScript(o).then(function(){void 0===(t=MyAMS.core.getFunctionByName(e))?console.warn("Missing callback ".concat(e,"!")):t.call(document,a,r)})):console.warn("Missing source for undefined callback ".concat(n,"!")):l.push(Promise.resolve(t.call(document,a,r)))}()}catch(n){t.e(n)}finally{t.f()}}),r.when.apply(r,l).then(n,e)})}};n.callbacks=e,window.MyAMS&&(MyAMS.env.bundle?MyAMS.config.modules.push("callbacks"):(MyAMS.callbacks=e,console.debug("MyAMS: callbacks module loaded...")))});