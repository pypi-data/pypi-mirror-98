.\" Man page generated from reStructuredText.
.
.TH "NXSRECCONFIG" "1" "Mar 10, 2021" "3.21" "NXSRecSelector"
.SH NAME
nxsrecconfig \- nxsrecconfig Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Authors: Jan Kotanski
Introduction
.sp
Tango server with Sardana Recorder settings
.sp
Tango Server API: \fI\%https://nexdatas.github.io/recselector/doc_html\fP
.nf
Source code: \fI\%https://github.com/nexdatas/recselector\fP
Web page: \fI\%https://nexdatas.github.io/recselector\fP
NexDaTaS Web page: \fI\%https://nexdatas.github.io\fP
.fi
.sp
.SH INSTALLATION
.sp
Install the dependencies:
.nf
Sardana, PyTango, sphinx
.fi
.sp
.SS From sources
.sp
Download the latest version of NeXuS Configuration Server from
.nf
\fI\%https://github.com/nexdatas/recselector\fP
.fi
.sp
.sp
Extract the sources and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python setup.py install
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Debian packages
.sp
Debian stretch (and jessie, wheezy) or ubuntu bionic nad xenial packages can be found in the HDRI repository.
.sp
To install the debian packages, add the PGP repository key
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo su
$ wget \-q \-O \- http://repos.pni\-hdri.de/debian_repo.pub.gpg | apt\-key add \-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and then download the corresponding source list
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd /etc/apt/sources.list.d
$ wget http://repos.pni\-hdri.de/stretch\-pni\-hdri.list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally, install module
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get update
$ apt\-get install python\-nxsrecselector
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and the NXSRecSelector tango server
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get update
$ apt\-get install nxsrecselector
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To instal other NexDaTaS packages
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get install python\-nxswriter nxsconfigtool nxstools python\-nxsconfigserver nxsconfigserver\-db
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get install nxselector python\-sardana\-nxsrecorder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
for Component Selector and Sardana related packages.
.SS From pip
.sp
To install it from pip you can
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python3 \-m venv myvenv
$ . myvenv/bin/activate

$ pip install nxsrecselector
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Moreover it is also good to install
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pip install pytango
$ pip install taurus
$ pip install sardana
$ pip install nxswriter
$ pip install nxsconfigserver
$ pip install nxstools
$ pip install pymysqldb
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SETTING ENVIRONMENT
.SS Setting Saradna
.sp
If sardana is not yet set up run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ Pool
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
enter a new instance name
.IP \(bu 2
create the new instance
.UNINDENT
.sp
Then wait a while until Pool is started and in a new terminal run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ MacroServer
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
enter a new instance name
.IP \(bu 2
create the new instance
.IP \(bu 2
connect pool
.UNINDENT
.sp
Next, run Astor and change start\-up levels: for Pool to 2,
for MacroServer to 3 and restart servers.
.sp
Alternatively, terminate Pool and MacroServer in the terminals and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup \-s Pool \-l2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
wait until Pool is started and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup \-s MacroServer \-l3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Additionally, one can create dummy devices by running \fIsar_demo\fP in
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ spock
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Setting NeXus Servers
.sp
To set up  NeXus Servers run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup \-x
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup \-x NXSDataWriter
$ nxsetup \-x NXSConfigServer
$ nxsetup \-x NXSRecSelector
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
for specific servers.
.sp
If the \fIRecoderPath\fP property of MacroServer is not set one can do it by
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup \-a /usr/lib/python2.7/dist\-packages/sardananxsrecorder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where the path should point the \fIsardananxsrecorder\fP package.
.SH NXSRECCONFIG PACKAGE
.SS Submodules
.SS nxsrecconfig.CheckerThread module
.sp
Component CheckerThread \- thread which checks tango server attributes
.INDENT 0.0
.TP
.B nxsrecconfig.CheckerThread.ATTRIBUTESTOCHECK = [\(aqValue\(aq, \(aqPosition\(aq, \(aqCounts\(aq, \(aqData\(aq, \(aqVoltage\(aq, \(aqEnergy\(aq, \(aqSampleTime\(aq]
(\fI\%list\fP < \fI\%str\fP>) default attributes to check
.UNINDENT
.INDENT 0.0
.TP
.B exception nxsrecconfig.CheckerThread.AlarmStateError
Bases: \fI\%Exception\fP
.sp
Alarm State Exception class
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.CheckerThread.CheckerItem(name)
Bases: \fI\%list\fP
.sp
Checker list Item
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fI\%str\fP) – checker item name
.UNINDENT
.INDENT 7.0
.TP
.B active = None
(\fI\%bool\fP) enabled flag
.UNINDENT
.INDENT 7.0
.TP
.B errords = None
(\fI\%str\fP) datasource with first error
.UNINDENT
.INDENT 7.0
.TP
.B message = None
(\fI\%str\fP) first error message
.UNINDENT
.INDENT 7.0
.TP
.B name = None
(\fI\%str\fP) checker name
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.CheckerThread.CheckerThread(index, queue)
Bases: \fI\%threading.Thread\fP
.sp
Single CheckerThread
.sp
constructor
.INDENT 7.0
.TP
.B Brief
It creates ElementThread from the runnable element
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBindex\fP (\fI\%int\fP) – the current thread index
.IP \(bu 2
\fBqueue\fP (\fI\%Queue.Queue\fP) – queue with tasks
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B index = None
(\fI\%int\fP) thread index
.UNINDENT
.INDENT 7.0
.TP
.B run()
runner
.INDENT 7.0
.TP
.B Brief
It runs the defined thread
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception nxsrecconfig.CheckerThread.FaultStateError
Bases: \fI\%Exception\fP
.sp
Fault State Exception class
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.CheckerThread.TangoDSItem(name=None, device=None, attr=None)
Bases: \fI\%object\fP
.sp
Tango DataSource item
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fI\%str\fP) – datasource name
.IP \(bu 2
\fBdevice\fP (\fI\%str\fP) – datasource device
.IP \(bu 2
\fBattr\fP (\fI\%str\fP) – device attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B attr
(\fI\%str\fP) datasource device attribute
.UNINDENT
.INDENT 7.0
.TP
.B device
(\fI\%str\fP) datasource device
.UNINDENT
.INDENT 7.0
.TP
.B name
(\fI\%str\fP) datasource name
.UNINDENT
.UNINDENT
.SS nxsrecconfig.Converter module
.sp
Selection version converter
.INDENT 0.0
.TP
.B class nxsrecconfig.Converter.Converter(ver)
Bases: \fI\%object\fP
.sp
selection version converter
.sp
contstructor
.INDENT 7.0
.TP
.B Parameters
\fBver\fP (\fI\%str\fP) – the required selection version
.UNINDENT
.INDENT 7.0
.TP
.B allkeys(selection)
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fInxsrecconfig.Selection.Selection\fP) – selection dictionary object
.TP
.B Returns
selection keys
.TP
.B Return type
\fI\%set\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B convert(selection)
converts selection from any version to any other
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – selection dictionary object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B down = None
(\fI\%list\fP <\fI\%ConverterXtoY\fP>) converter down sequence
.UNINDENT
.INDENT 7.0
.TP
.B majorversion = None
(\fI\%int\fP) major selection version
.UNINDENT
.INDENT 7.0
.TP
.B minorversion = None
(\fI\%int\fP) minor selection version
.UNINDENT
.INDENT 7.0
.TP
.B patchversion = None
(\fI\%int\fP) patch selection version
.UNINDENT
.INDENT 7.0
.TP
.B up = None
(\fI\%list\fP <\fI\%ConverterXtoY\fP>) converter up sequence
.UNINDENT
.INDENT 7.0
.TP
.B classmethod version(selection)
.INDENT 7.0
.TP
.B fetches selection version and converts it
into (major, minor, patch)
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fInxsrecconfig.Selection.Selection\fP) – selection dictionary object
.TP
.B Returns
(major, minor, patch) tuple with integers
.TP
.B Return type
(\fI\%int\fP , \fI\%int\fP , \fI\%int\fP)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Converter.Converter1to2
Bases: \fI\%nxsrecconfig.Converter.ConverterXtoY\fP
.sp
Selection converter from version 1 to 2
.sp
constructor
.INDENT 7.0
.TP
.B convert(selection)
converts selection from version 1 to 2
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – selection dictionary object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B names = None
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) names to convert
.UNINDENT
.INDENT 7.0
.TP
.B pnames = None
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) names of properties
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Converter.Converter2to1
Bases: \fI\%nxsrecconfig.Converter.ConverterXtoY\fP
.sp
Selection converter from version 2 to 1
.sp
constructor
.INDENT 7.0
.TP
.B convert(selection)
converts selection from version 2 to 1
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – selection dictionary object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B names = None
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) names to convert
.UNINDENT
.INDENT 7.0
.TP
.B pnames = None
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) names of properties
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Converter.Converter2to3
Bases: \fI\%nxsrecconfig.Converter.ConverterXtoY\fP
.sp
Selection converter from version 2 to 3
.sp
converter
.INDENT 7.0
.TP
.B convert(selection)
converts selection from version 2 to 3
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – selection dictionary object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B names = None
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) names to convert
.UNINDENT
.INDENT 7.0
.TP
.B seltoint(jselelem)
converters list/dict of elements to dictionary with logical values
.INDENT 7.0
.TP
.B Parameters
\fBjselelem\fP (\fI\%str\fP) – json list or dict selection element
.TP
.B Returns
json dictionary
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Converter.Converter3to2
Bases: \fI\%nxsrecconfig.Converter.ConverterXtoY\fP
.sp
Selection converter from version 3 to 2
.sp
constructor
.INDENT 7.0
.TP
.B convert(selection)
converts selection from version 3 to 2
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – selection dictionary object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B names = None
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) names to convert
.UNINDENT
.INDENT 7.0
.TP
.B seltobool(jselelem)
.INDENT 7.0
.TP
.B converters dictioanry with None/True/False values
to dictionary with True/False values
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBjselelem\fP (\fI\%str\fP) – json dictionary selection element
.TP
.B Returns
converter json dictionary
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B seltolist(jselelem)
.INDENT 7.0
.TP
.B converters dictioanry with None/True/False values
to list of elementes with walue True
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBjselelem\fP (\fI\%str\fP) – json dictionary selection element
.TP
.B Returns
converter json dictionary
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Converter.ConverterXtoY
Bases: \fI\%object\fP
.sp
virtual selection version converter
.sp
constructor
.INDENT 7.0
.TP
.B convert(selection)
converts selection to the current selector version
.INDENT 7.0
.TP
.B Parameters
\fBselection\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – selection dictionary object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B names = None
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) names to convert
.UNINDENT
.UNINDENT
.SS nxsrecconfig.Describer module
.sp
Component Describer
.INDENT 0.0
.TP
.B class nxsrecconfig.Describer.DSItem(name=None, dstype=None, record=None, dsitem=None)
Bases: \fI\%object\fP
.sp
Basic DataSource item
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fI\%str\fP) – datasource name
.IP \(bu 2
\fBdstype\fP (\fI\%str\fP) – datasource type
.IP \(bu 2
\fBrecord\fP (\fI\%str\fP) – datasource record
.IP \(bu 2
\fBdsitem\fP (\fI\%DSItem\fP) – datasource item
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B dstype
(\fI\%str\fP) datasource type
.UNINDENT
.INDENT 7.0
.TP
.B name
(\fI\%str\fP) datasource name
.UNINDENT
.INDENT 7.0
.TP
.B record
(\fI\%str\fP) datasource record
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Describer.Describer(nexusconfig_device, tree=False, pyevalfromscript=False)
Bases: \fI\%object\fP
.sp
Lists datasources, strategy, dstype and record name
of given component
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnexusconfig_device\fP (\fBPyTango.DeviceProxy\fP              or \fI\%nxsconfigserver.XMLConfigurator.XMLConfigurator\fP) – configserver configuration server
.IP \(bu 2
\fBtree\fP (\fI\%bool\fP) – flag for output tree dictionary
.IP \(bu 2
\fBpyevalfromscript\fP (\fI\%bool\fP) – if evalulate PYEVAL datasources from script
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B components(components=None, strategy=\(aq\(aq, dstype=\(aq\(aq, cfvars=None)
describes given components. If \fBtree\fP = True it returns
.nf
[{ cpname : { dsname : [         |           (strategy, dstype, record, nxstype, shape), …] } } ]
.fi
.sp
.sp
else
.nf
[{“dsname”: dsname, “strategy”: strategy, “dstype”: dstype,         |     “record”: record, “nxstype”: nxstype, “shape”: shape ,         |     “cpname”: cpname}, …]
.fi
.sp
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomponents\fP (\fI\%list\fP <\fI\%str\fP>) – given components.
If None all available ones are taken
.IP \(bu 2
\fBstrategy\fP (\fI\%str\fP) – list datasets only with given strategy.
If ‘’ all available ones are taken
.IP \(bu 2
\fBdstype\fP (\fI\%str\fP) – list datasets only with given datasource type.
If ‘’ all available ones are taken
.IP \(bu 2
\fBcfvars\fP (\fI\%str\fP) – configuration variables in JSON dictionary
.UNINDENT
.TP
.B Returns
list of dictionary with description of components
.TP
.B Return type
[\fI\%dict\fP <\fI\%str\fP, \fI\%dict\fP <\fI\%str\fP,                  \fI\%list\fP <(\fI\%str\fP, \fI\%str\fP, \fI\%str\fP,                       \fI\%str\fP, \fI\%list\fP <\fI\%int\fP>)> > > ] or                 [{“dsname”: \fI\%str\fP, “strategy”: \fI\%str\fP,                   “dstype”: \fI\%str\fP, “record”: \fI\%str\fP,                   “nxstype”: \fI\%str\fP, “shape”: \fI\%list\fP <\fI\%int\fP> ,           “cpname”: \fI\%str\fP}, …]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B dataSources(names=None, dstype=\(aq\(aq)
describes given datasources
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnames\fP (\fI\%list\fP <\fI\%str\fP>) – given datasources.
If None all available ones are taken
.IP \(bu 2
\fBdstype\fP (\fI\%str\fP) – list datasources only with given type.
If ‘’ all available ones are taken
.UNINDENT
.TP
.B Returns
list of dictionary with description of datasources
.TP
.B Return type
[\fI\%dict\fP <\fI\%str\fP, \fI\%ExDSDict\fP > ] or                 [{“dsname”: \fI\%str\fP, “dstype”: \fI\%str\fP,                   “record”: \fI\%str\fP}, …]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Describer.ExDSDict(*args, **kw)
Bases: \fI\%dict\fP
.sp
Extended DataSource Dictionary
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBargs\fP (\fI\%list\fP <\fIany\fP>) – dict args
.IP \(bu 2
\fBkw\fP (\fI\%dict\fP <\fIany\fP , \fIany\fP>) – dict kw
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B appendDSList(dslist, mode, nxtype=None, shape=None)
appends a list of ExDSItem
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdslist\fP (\fI\%list\fP <\fI\%DSItem\fP>) – DSItem list
.IP \(bu 2
\fBmode\fP (\fI\%str\fP) – startegy mode
.IP \(bu 2
\fBnxtype\fP – NeXus type
.IP \(bu 2
\fBshape\fP (\fI\%list\fP <\fI\%int\fP>) – data shape
.UNINDENT
.TP
.B Returns
datasource name for first added datasource
or None if not appended
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Describer.ExDSItem(dsitem=None, mode=None, nxtype=None, shape=None)
Bases: \fI\%nxsrecconfig.Describer.DSItem\fP
.sp
Extended DataSource item
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdsitem\fP (\fI\%DSItem\fP) – datasource item
.IP \(bu 2
\fBmode\fP (\fI\%str\fP) – writing strategy mode
.IP \(bu 2
\fBnxtype\fP – nexus type
.IP \(bu 2
\fBshape\fP (\fI\%list\fP <\fI\%int\fP>) – datasource shape
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mode
(\fI\%str\fP) writing strategy mode
.UNINDENT
.INDENT 7.0
.TP
.B nxtype
(\fI\%str\fP) nexus type
.UNINDENT
.INDENT 7.0
.TP
.B shape
(\fI\%list\fP <\fI\%int\fP>) datasource shape
.UNINDENT
.UNINDENT
.SS nxsrecconfig.DynamicComponent module
.sp
Dynamic Component
.INDENT 0.0
.TP
.B class nxsrecconfig.DynamicComponent.DynamicComponent(nexusconfig_device, defaultpath="/$var.entryname#\(aqscan\(aq$var.serialno:NXentry/NXinstrument/collection")
Bases: \fI\%object\fP
.sp
Creates dynamic component
of given component
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnexusconfig_device\fP (\fBPyTango.DeviceProxy\fP              or \fI\%nxsconfigserver.XMLConfigurator.XMLConfigurator\fP) – configserver configuration server
.IP \(bu 2
\fBdefaultpath\fP (\fI\%str\fP) – default dynamic component path
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B create()
creates dynamic component
.INDENT 7.0
.TP
.B Returns
dynanic component name
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B remove(name)
removes dynamic component
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fI\%str\fP) – dynamic component name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setDefaultLinkPath(dynamicLinks, dynamicPath, dynamicInitLinks=None)
sets default nexus path and link flag for dynamic components
.INDENT 7.0
.TP
.B Brief
if dynamicPath is None or “” it is reset to default one
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdynamicPath\fP (\fI\%str\fP) – nexus default path
.IP \(bu 2
\fBdynamicLinks\fP (\fI\%bool\fP) – default link flag
.IP \(bu 2
\fBdynamicInitLinks\fP (\fI\%bool\fP) – default link flag
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setInitDSources(dsources)
sets init datasources
.INDENT 7.0
.TP
.B Parameters
\fBdsources\fP (\fI\%list\fP <\fI\%str\fP>) – list of init datasources
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setLabelParams(labels, paths, links, types, shapes)
sets label parameters for specific dynamic components
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBlabels\fP (\fI\%dict\fP <\fI\%str\fP , \fI\%str\fP>) – label dictionaries
.IP \(bu 2
\fBpaths\fP (\fI\%dict\fP <\fI\%str\fP , \fI\%str\fP>) – nexus path dictionaries
.IP \(bu 2
\fBlinks\fP (\fI\%dict\fP <\fI\%str\fP , \fI\%bool\fP>) – link dictionaries
.IP \(bu 2
\fBtypes\fP (\fI\%dict\fP <\fI\%str\fP , \fI\%str\fP>) – nexus type dictionaries
.IP \(bu 2
\fBshapes\fP (\fI\%dict\fP <\fI\%str\fP , \fI\%list\fP <\fI\%int\fP> >) – data shape dictionaries
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setStepDSources(dsources)
sets step datasources
.INDENT 7.0
.TP
.B Parameters
\fBdsources\fP (\fI\%list\fP <\fI\%str\fP>) – list of step datasources
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setStepDictDSources(dctlist)
sets user datasources with type and shape
.INDENT 7.0
.TP
.B Parameters
\fBdctlist\fP (\fI\%str\fP) – json list of parameter dictionaries
[{“name”: <dsname>, “dtype”: <num_type>, “shape”:<list>}, …]
.UNINDENT
.UNINDENT
.UNINDENT
.SS nxsrecconfig.MacroServerPools module
.sp
Selection state
.INDENT 0.0
.TP
.B class nxsrecconfig.MacroServerPools.MacroServerPools(numberOfThreads)
Bases: \fI\%object\fP
.sp
sardanamacro server and pools
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
\fBnumberOfThreads\fP (\fI\%str\fP) – number of threads
.UNINDENT
.INDENT 7.0
.TP
.B checkChannels(door, configdevice, channels, componentgroup, datasourcegroup, channelerrors)
checks component channels
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdoor\fP (\fI\%str\fP) – door device name
.IP \(bu 2
\fBconfigdevice\fP (\fBPyTango.DeviceProxy\fP              or \fI\%nxsconfigserver.XMLConfigurator.XMLConfigurator\fP) – configuration server
.IP \(bu 2
\fBchannels\fP (\fI\%list\fP <\fI\%str\fP>) – pool channels
.IP \(bu 2
\fBcomponentgroup\fP (\fI\%dict\fP <\fI\%str\fP , \fI\%bool\fP>) – preselected component group
.IP \(bu 2
\fBchannelerrors\fP (\fI\%list\fP <\fI\%str\fP>) – list of deactivated component errors
.UNINDENT
.TP
.B Returns
json dictionary with selected active components
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B getMacroServer(door)
door macro server device name
.INDENT 7.0
.TP
.B Parameters
\fBdoor\fP (\fI\%str\fP) – door device name
.TP
.B Returns
macroserver device name
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B getPools(door)
door pool device proxies
.INDENT 7.0
.TP
.B Parameters
\fBdoor\fP (\fI\%str\fP) – door device name
.TP
.B Returns
pool device proxies
.TP
.B Return type
\fI\%list\fP <\fBPyTango.DeviceProxy\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B getScanEnv(door)
fetches Scan Environment Data
.INDENT 7.0
.TP
.B Parameters
\fBdoor\fP (\fI\%str\fP) – door device
.TP
.B Returns
JSON String with important variables
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B getSelectorEnv(door, names, data)
imports Environment Data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdoor\fP (\fI\%str\fP) – door device
.IP \(bu 2
\fBnames\fP (\fI\%list\fP <\fI\%str\fP>) – names of required variables
.IP \(bu 2
\fBdata\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP>) – dictionary with resulting data
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B poolBlacklist = None
(\fI\%list\fP <\fI\%str\fP>) black list of pools
.UNINDENT
.INDENT 7.0
.TP
.B setScanEnv(door, jdata)
stores Scan Environment Data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdoor\fP (\fI\%str\fP) – door device
.IP \(bu 2
\fBjdata\fP (\fI\%str\fP) – JSON String with important variables
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setSelectorEnv(door, data, cmddata=None)
exports all Environment Data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdoor\fP (\fI\%str\fP) – door device
.IP \(bu 2
\fBdata\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP>) – data dictionary
.IP \(bu 2
\fBcmddata\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP>) – command data dictionary
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B updateMacroServer(door)
updates MacroServer and sardana pools for given door
.INDENT 7.0
.TP
.B Parameters
\fBdoor\fP (\fI\%str\fP) – door device name
.UNINDENT
.UNINDENT
.UNINDENT
.SS nxsrecconfig.NXSConfig module
.sp
Selector Server for NeXus Sardana Recorder
.INDENT 0.0
.TP
.B class nxsrecconfig.NXSConfig.NXSRecSelector(cl, name)
Bases: \fBtango._tango.Device_4Impl\fP
.sp
NXSRecSelector server interface
.INDENT 7.0
.TP
.B Brief
Tango Server for Nexus Sardana Recorder Settings.
Device States Description:
DevState.ON \- Server is ON,
DevState.RUNNING \- Performing a query
.UNINDENT
.sp
Device constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcl\fP (\fI\%str\fP) – class name
.IP \(bu 2
\fBname\fP (\fI\%str\fP) – device name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B AddStepDataSources(argin)
AddStepDataSources command
.INDENT 7.0
.TP
.B Brief
switch datasources to step mode
.TP
.B Parameters
\fBargin\fP (\fI\%list\fP <\fI\%str\fP>) – DevVarStringArray    list of datasource names
.TP
.B Returns
DevVarStringArray list of datasources not found in components
.TP
.B Rtypes
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B AdministratorDataNames()
AdministratorDataNames command
.INDENT 7.0
.TP
.B Brief
Provide Administrator Data Names
.TP
.B Returns
DevVarStringArray    data record names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B AvailableComponents()
AvailableComponents command
.INDENT 7.0
.TP
.B Brief
Return a list of available component names
.TP
.B Returns
DevVarStringArray    list of available component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B AvailableDataSources()
AvailableDataSources command
.INDENT 7.0
.TP
.B Brief
Return a list of available DataSource names
.TP
.B Returns
DevVarStringArray    list of available DataSource names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B AvailableMntGrps()
AvailableMntGrps command
.INDENT 7.0
.TP
.B Brief
Return a list of available mntgrp names
.TP
.B Returns
DevVarStringArray    list of available mntgrp names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B AvailableProfiles()
AvailableProfiles command
.INDENT 7.0
.TP
.B Brief
Return a list of available selection names
.TP
.B Returns
DevVarStringArray    list of available selection names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B AvailableTimers()
AvailableTimers command
.INDENT 7.0
.TP
.B Brief
Returns a list of available component names
.TP
.B Returns
DevVarStringArray    list of available component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ChannelProperties(argin)
ChannelProperties command
.INDENT 7.0
.TP
.B Brief
Provide JSON dictionary with channel properties
{channel:property}
.TP
.B Parameters
\fBargin\fP (\fI\%str\fP) – DevString    property type
.TP
.B Returns
DevString    JSON dictionary with channel properties
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ComponentClientSources(argin)
ComponentClientSources command
.INDENT 7.0
.TP
.B Brief
Describe client datasources from components
.TP
.B Parameters
\fBargin\fP (\fI\%list\fP <\fI\%str\fP>) – DevVarStringArray    list of component names
.TP
.B Returns
DevVarString         description of component datasources
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ComponentDataSources()
ComponentDataSources command
.INDENT 7.0
.TP
.B Brief
Provide the component datasources
.TP
.B Returns
DevVarStringArray    component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ComponentDescription()
ComponentDescription command
.INDENT 7.0
.TP
.B Brief
Return a list of available component names
.TP
.B Returns
DevString   list of available component names
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ComponentSources(argin)
ComponentSources command
.INDENT 7.0
.TP
.B Brief
Describe datasources from components
.TP
.B Parameters
\fBargin\fP (\fI\%list\fP <\fI\%str\fP>) – DevVarStringArray    list of component names
.TP
.B Returns
DevVarString         description of component datasources
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B CreateDataSources(argin)
It creates new DataSources on the ConfigServer
.INDENT 7.0
.TP
.B Parameters
\fBargin\fP (\fI\%str\fP) – JSON dictionary with {\fBdsname\fP: \fBtangosource\fP, …}
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B CreateDynamicComponent(argin)
CreateDynamicComponent command
.INDENT 7.0
.TP
.B Brief
Create dynamic component
.TP
.B Parameters
\fBargin\fP (\fI\%list\fP <\fI\%str\fP>) – DevVarStringArray    list of datasource parameters
.TP
.B Returns
DevVarString         name of created dynamic component
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B CreateWriterConfiguration(argin)
CreateWriterConfiguration command
.INDENT 7.0
.TP
.B Brief
Create configuration from the given components
.TP
.B Parameters
\fBargin\fP (\fI\%list\fP <\fI\%str\fP>) – DevVarStringArray    list of component names
.TP
.B Returns
DevVarString         XML configuration string
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B DataSourceDescription(argin)
DataSourceDescription command
.INDENT 7.0
.TP
.B Brief
Provide datasource description
.TP
.B Parameters
\fBargin\fP (\fI\%list\fP <\fI\%str\fP>) – DevVarStringArray    list of datasource names
.TP
.B Returns
DevVarStringArray    description of datasources
.TP
.B Rtypes
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B DeleteAllProfiles()
DeleteAllProfiles command
.INDENT 7.0
.TP
.B Brief
Delete all profiles from Configuration Server
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B DeleteProfile(argin)
DeleteProfile command
.INDENT 7.0
.TP
.B Brief
Delete the given mntgrp
.TP
.B Parameters
\fBargin\fP (\fI\%str\fP) – DevString  measurement group name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ExportEnvProfile()
ExportEnvProfile command
.INDENT 7.0
.TP
.B Brief
Export all environment variables
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B FetchProfile()
FetchProfile command
.INDENT 7.0
.TP
.B Brief
Fetch server configuration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B FullDeviceNames()
FullDeviceNames command
.INDENT 7.0
.TP
.B Brief
Return a JSON with full device names for all aliases
.TP
.B Returns
DevString JSON dictionary with full device names
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ImportEnvProfile()
ImportEnvProfile command
.INDENT 7.0
.TP
.B Brief
Import all environment variables
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ImportMntGrp()
ImportMntGrp command
.INDENT 7.0
.TP
.B Brief
Import active mntgrp configuration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B IsMntGrpUpdated()
IsMntGrpUpdated command
.INDENT 7.0
.TP
.B Returns
True if mntgrp was changed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B LoadProfile()
LoadProfile command
.INDENT 7.0
.TP
.B Brief
Load server configuration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B MandatoryComponents()
MandatoryComponents command
.INDENT 7.0
.TP
.B Brief
Set the mandatory components
.TP
.B Returns
DevVarStringArray    component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B MntGrpConfiguration()
MntGrpConfiguration command
.INDENT 7.0
.TP
.B Brief
returns mntgrp configuration
.TP
.B Returns
Provide mntgrp configuration in json string
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B MutedChannels()
MutedChannels command
.INDENT 7.0
.TP
.B Brief
Return a list of muted channel names
.TP
.B Returns
DevVarStringArray    list of muted channel names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B PoolElementNames(argin)
PoolElementNames command
.INDENT 7.0
.TP
.B Brief
Return a list of available pool channels
.TP
.B Parameters
\fBargin\fP (\fI\%str\fP) – DevString            name of pool list attribute
.TP
.B Returns
DevVarStringArray    list of available pool elements
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B PreselectComponents()
PreselectComponents command
.INDENT 7.0
.TP
.B Brief
Check existing devices of pools
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B PreselectedComponents()
PreselectedComponents command
.INDENT 7.0
.TP
.B Brief
Provide the preselected components
.TP
.B Returns
DevVarStringArray    component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B PreselectedDataSources()
PreselectedDataSources command
.INDENT 7.0
.TP
.B Brief
Provide the preselected components
.TP
.B Returns
DevVarStringArray    component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B RemoveDynamicComponent(argin)
RemoveDynamicComponent command
.INDENT 7.0
.TP
.B Brief
Delete the given dynamic component
.TP
.B Parameters
\fBargin\fP (\fI\%str\fP) – DevString  dynamic component name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ResetPreselectedComponents()
ResetPreselectedComponents command
.INDENT 7.0
.TP
.B Brief
reset PreselectedComponents
to DefaultPreselectedComponents
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B SaveProfile()
SaveProfile command
.INDENT 7.0
.TP
.B Brief
Save server configuration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ScanEnvVariables()
ScanEnvVariables command
.INDENT 7.0
.TP
.B Brief
Fetch ScanDir, ScanFile, ScanID and NeXusSelectorDevice
in environment variables
.TP
.B Returns
DevString    json dictionary with environment data
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B SelectedComponents()
SelectedComponents command
.INDENT 7.0
.TP
.B Brief
Provide the selected components
.TP
.B Returns
DevVarStringArray    component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B SelectedDataSources()
SelectedDataSources command
.INDENT 7.0
.TP
.B Brief
Provide the selected datasources
.TP
.B Returns
DevVarStringArray    component names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B SetChannelProperties(argin)
SetChannelProperties command SetChannelProperties
.INDENT 7.0
.TP
.B Brief
Set Channel Properties of the given type
.TP
.B Parameters
\fBargin\fP ([\fI\%str\fP, \fI\%str\fP]) – DevVarStringArray two element list with a property type
and JSON value dictionary {channel:property}
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B SetScanEnvVariables(argin)
SetScanEnvVariables command
.INDENT 7.0
.TP
.B Brief
Store ScanDir, ScanFile and NeXusSelectorDevice
in environment variables
.TP
.B Parameters
\fBargin\fP (\fI\%str\fP) – json dictionary with environment data
.TP
.B Returns
DevLong    scan ID
.TP
.B Return type
\fI\%int\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B StoreProfile()
StoreProfile command command
.INDENT 7.0
.TP
.B Brief
Store server configuration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B SwitchProfile()
SwitchProfile command
.INDENT 7.0
.TP
.B Brief
Switch mntgrp configuration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B UpdateConfigVariables()
UpdateConfigVariables command
.INDENT 7.0
.TP
.B Brief
Send ConfigVariables into ConfigServer
and update serialno if appendEntry selected
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B UpdateMntGrp()
UpdateMntGrp command
.INDENT 7.0
.TP
.B Brief
Update mntgrp configuration
.TP
.B Returns
mntgrp configuration string
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B UpdateProfile()
UpdateProfile command
.INDENT 7.0
.TP
.B Brief
Update mntgrp configuration
.TP
.B Returns
JSON string with mntgrp configuration info
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B VariableComponents()
VariableComponents command
.INDENT 7.0
.TP
.B Brief
Returns a list of available component names
.TP
.B Returns
DevString    list of available component names
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B always_executed_hook()
Always excuted hook method
.UNINDENT
.INDENT 7.0
.TP
.B delete_device()
Device destructor
.UNINDENT
.INDENT 7.0
.TP
.B init_device()
Device initialization
.UNINDENT
.INDENT 7.0
.TP
.B is_AdministratorDataNames_allowed()
AdministratorDataNames command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_AvailableComponents_allowed()
AvailableComponents command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_AvailableDataSources_allowed()
AvailableDataSources command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_AvailableMntGrps_allowed()
AvailableMntGrps command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_AvailableProfiles_allowed()
AvailableProfiles command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_AvailableTimers_allowed()
AvailableTimers command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_CanFailDataSources_write_allowed()
CanFailDataSources attribute Write State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ChannelProperties_allowed()
ChannelProperties command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ComponentClientSources_allowed()
ComponentClientSources command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ComponentDataSources_allowed()
ComponentDataSources command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ComponentDescription_allowed()
ComponentDescription command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ComponentSources_allowed()
ComponentSources command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_CreateDataSources_allowed()
CreateDataSources command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_CreateDynamicComponent_allowed()
CreateDynamicComponent command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_CreateWriterConfiguration_allowed()
CreateWriterConfiguration command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_DataSourceDescription_allowed()
DataSourceDescription command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_DeleteAllProfiles_allowed()
DeleteAllProfiles command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_DeleteProfile_allowed()
DeleteProfile command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ExportEnv_allowed()
ExportMntGrp command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_FetchProfile_allowed()
FetchProfile command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_FullDeviceNames_allowed()
FullDeviceNames command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ImportEnv_allowed()
ImportMntGrp command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ImportMntGrp_allowed()
ImportMntGrp command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_IsMntGrpUpdated_allowed()
IsMntGrpUpdated command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_LinkDataSources_write_allowed()
LinkDataSources attribute Write State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_LoadProfile_allowed()
LoadProfile command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_MandatoryComponents_allowed()
MandatoryComponents command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_MntGrpConfiguration_allowed()
MntGrpConfiguration command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_MutedChannels_allowed()
MutedChannels command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_PoolElementNames_allowed()
PoolElementNames command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_PreselectComponents_allowed()
PreselectComponents command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_PreselectedComponents_allowed()
PreselectedComponents command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_PreselectedDataSources_allowed()
PreselectedDataSources command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_RemoveDynamicComponent_allowed()
RemoveDynamicComponent command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ResetPreselectedComponents_allowed()
ResetPreselectedComponents command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_SaveProfile_allowed()
SaveProfile command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_ScanEnvVariables_allowed()
ScanEnvVariables command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_SelectedComponents_allowed()
SelectedComponents command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_SelectedDataSources_allowed()
SelectedDataSources command State Machine
.UNINDENT
.INDENT 7.0
.TP
.B is_SetChannelProperties_allowed()
SetChannelProperties command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_SetScanEnvVariables_allowed()
SetScanEnvVariables command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_StepDataSources_write_allowed()
StepDataSources attribute Write State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_StoreProfile_allowed()
StoreProfile command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_SwitchProfile_allowed()
SwitchProfile command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_UpdateConfigVariables_allowed()
UpdateConfigVariables command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_UpdateMntGrp_allowed()
UpdateMntGrp command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_UpdateProfile_allowed()
UpdateProfile command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_VariableComponents_allowed()
VariableComponents command State Machine
.INDENT 7.0
.TP
.B Returns
True if the operation allowed
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_AppendEntry(attr)
Read AppendEntry attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_CanFailDataSources(attr)
Read CanFailDataSources attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_Components(attr)
Read Components attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_ConfigDevice(attr)
Read ConfigDevice attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_ConfigVariables(attr)
Read ConfigVariables attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_DataSources(attr)
Read DataSources attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_DescriptionErrors(attr)
Read DescriptionErrors attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_DeviceGroups(attr)
Read DeviceGroups attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_Door(attr)
Read Door attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_LinkDataSources(attr)
Read LinkDataSources attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_MacroServer(attr)
Read MacroServer attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_MntGrp(attr)
Read MntGrp attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_ProfileConfiguration(attr)
Read ProfileConfiguration attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_ProfileFile(attr)
Read ProfileFile attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_ScanDir(attr)
Read ScanDir attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_ScanFile(attr)
Read ScanFile attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_ScanID(attr)
Read ScanID attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_StepDataSources(attr)
Read StepDataSources attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_UserData(attr)
Read UserData attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_Version(attr)
Read Version attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_WriterDevice(attr)
Read WriterDevice attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – read attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_attr_hardware(_)
Read Attribute Hardware
.UNINDENT
.INDENT 7.0
.TP
.B write_AppendEntry(attr)
Write AppendEntry attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_CanFailDataSources(attr)
Write CanFailDataSources attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_ConfigDevice(attr)
Write ConfigDevice attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_ConfigVariables(attr)
Write ConfigVariables attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_DeviceGroups(attr)
Write DeviceGroups attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_Door(attr)
Write Door attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_LinkDataSources(attr)
Write LinkDataSources attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_MntGrp(attr)
Write MntGrp attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_ProfileConfiguration(attr)
Write ProfileConfiguration attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_ProfileFile(attr)
Write ProfileFile attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_ScanDir(attr)
Write ScanDir attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_ScanFile(attr)
Write ScanFile attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_ScanID(attr)
Write ScanID attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_StepDataSources(attr)
Write StepDataSources attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_UserData(attr)
Write UserData attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_WriterDevice(attr)
Write WriterDevice attribute
.INDENT 7.0
.TP
.B Parameters
\fBattr\fP (\fBPyTango.Attribute\fP) – written attribute
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.NXSConfig.NXSRecSelectorClass(name)
Bases: \fBtango._tango.DeviceClass\fP
.sp
NXSRecSelectorclass Constructor
.INDENT 7.0
.TP
.B attr_list = {\(aqAppendEntry\(aq: [[tango._tango.CmdArgType.DevBoolean, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqAppend Entry\(aq, \(aqdescription\(aq: \(aqflag for entry appending\(aq}], \(aqCanFailDataSources\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqlist of datasources to be switch into canfail mode\(aq, \(aqdescription\(aq: \(aqlist of datasources to be switched into canfail mode\(aq, \(aqDisplay level\(aq: tango._tango.DispLevel.EXPERT}], \(aqComponents\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SPECTRUM, tango._tango.AttrWriteType.READ, 10000], {\(aqlabel\(aq: \(aqSelected Components\(aq, \(aqdescription\(aq: \(aqlist of Selected Components\(aq}], \(aqConfigDevice\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqConfiguration Device\(aq, \(aqdescription\(aq: \(aqConfiguration device name\(aq, \(aqMemorized\(aq: \(aqtrue\(aq}], \(aqConfigVariables\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqConfiguration Variables\(aq, \(aqdescription\(aq: \(aqJSON dictionary with configuration variablesfor templated components\(aq, \(aqDisplay level\(aq: tango._tango.DispLevel.EXPERT}], \(aqDataSources\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SPECTRUM, tango._tango.AttrWriteType.READ, 10000], {\(aqlabel\(aq: \(aqSelected Datasources\(aq, \(aqdescription\(aq: \(aqlist of Selected Datasources\(aq}], \(aqDescriptionErrors\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SPECTRUM, tango._tango.AttrWriteType.READ, 10000], {\(aqlabel\(aq: \(aqDescriptive Component Errors\(aq, \(aqdescription\(aq: \(aqlist of Descriptive Component Errors\(aq}], \(aqDeviceGroups\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqDevice groups\(aq, \(aqdescription\(aq: \(aqJSON dictionary with device groups\(aq, \(aqMemorized\(aq: \(aqtrue\(aq, \(aqDisplay level\(aq: tango._tango.DispLevel.EXPERT}], \(aqDoor\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqDoor\(aq, \(aqdescription\(aq: \(aqDoor device name\(aq, \(aqMemorized\(aq: \(aqtrue\(aq}], \(aqLinkDataSources\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqlist of datasources to which a link will be added\(aq, \(aqdescription\(aq: \(aqlist of datasources to which a link will be added\(aq, \(aqDisplay level\(aq: tango._tango.DispLevel.EXPERT}], \(aqMacroServer\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ], {\(aqlabel\(aq: \(aqMacroServer\(aq, \(aqdescription\(aq: \(aqMacro Server device name\(aq}], \(aqMntGrp\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aq Measurement Group\(aq, \(aqdescription\(aq: \(aq Measurement Group name\(aq}], \(aqProfileConfiguration\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqProfile Configuration\(aq, \(aqdescription\(aq: \(aqJSON dict of server configuration\(aq, \(aqDisplay level\(aq: tango._tango.DispLevel.EXPERT}], \(aqProfileFile\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqProfile File with its Path\(aq, \(aqdescription\(aq: \(aqconfig file with its full path\(aq, \(aqMemorized\(aq: \(aqtrue\(aq}], \(aqScanDir\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqScan Directory\(aq, \(aqdescription\(aq: \(aqScan Directory\(aq}], \(aqScanFile\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqScan File(s)\(aq, \(aqdescription\(aq: \(aqScan File(s)\(aq}], \(aqScanID\(aq: [[tango._tango.CmdArgType.DevLong, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqScan ID\(aq, \(aqdescription\(aq: \(aqScan ID\(aq}], \(aqStepDataSources\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqlist of datasources to be switch into step mode\(aq, \(aqdescription\(aq: \(aqlist of datasources to be switched into step mode\(aq, \(aqDisplay level\(aq: tango._tango.DispLevel.EXPERT}], \(aqUserData\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqClient Data\(aq, \(aqdescription\(aq: \(aqJSON dictionary with User Data\(aq, \(aqDisplay level\(aq: tango._tango.DispLevel.EXPERT}], \(aqVersion\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ], {\(aqlabel\(aq: \(aqVersion\(aq, \(aqdescription\(aq: \(aqserver version\(aq}], \(aqWriterDevice\(aq: [[tango._tango.CmdArgType.DevString, tango._tango.AttrDataFormat.SCALAR, tango._tango.AttrWriteType.READ_WRITE], {\(aqlabel\(aq: \(aqWriter Device\(aq, \(aqdescription\(aq: \(aqWriter device device name\(aq}]}
.UNINDENT
.INDENT 7.0
.TP
.B class_property_list = {}
(\fI\%dict\fP <\fI\%str\fP, [ \fI\%str\fP, \fBPyTango.CmdArgType\fP, [ \fI\%list\fP <\fI\%int\fP> ] ] > ) Class Properties
.UNINDENT
.INDENT 7.0
.TP
.B cmd_list = {\(aqAddStepDataSources\(aq: [[tango._tango.CmdArgType.DevVarStringArray, \(aqlist of required datasources\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of datasources not found in components\(aq]], \(aqAdministratorDataNames\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqadministrator data names\(aq]], \(aqAvailableComponents\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of available component names\(aq]], \(aqAvailableDataSources\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of available DataSource names\(aq]], \(aqAvailableMntGrps\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of available mntgrp names\(aq]], \(aqAvailableProfiles\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of available selection names\(aq]], \(aqAvailableTimers\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of available timers\(aq]], \(aqChannelProperties\(aq: [[tango._tango.CmdArgType.DevString, \(aqproperty type\(aq], [tango._tango.CmdArgType.DevString, \(aqJSON dictionary with channel properties {channel:property}\(aq]], \(aqComponentClientSources\(aq: [[tango._tango.CmdArgType.DevVarStringArray, \(aqlist of component client datasources\(aq], [tango._tango.CmdArgType.DevString, \(aqJSON with description of component CLIENT Datasources\(aq]], \(aqComponentDataSources\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqprofile component datasources\(aq]], \(aqComponentDescription\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevString, \(aqJSON component description\(aq]], \(aqComponentSources\(aq: [[tango._tango.CmdArgType.DevVarStringArray, \(aqlist of components\(aq], [tango._tango.CmdArgType.DevString, \(aqJSON with description of component Datasources\(aq]], \(aqCreateDataSources\(aq: [[tango._tango.CmdArgType.DevString, \(aqJSON dictionary with {\(ga\(gadsname\(ga\(ga: \(ga\(gatangosource\(ga\(ga, ...}\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqCreateDynamicComponent\(aq: [[tango._tango.CmdArgType.DevVarStringArray, \(aqlist of JSON strings with datasource parameters\(aq], [tango._tango.CmdArgType.DevString, \(aqname of dynamic Component\(aq]], \(aqCreateWriterConfiguration\(aq: [[tango._tango.CmdArgType.DevVarStringArray, \(aqlist of required components\(aq], [tango._tango.CmdArgType.DevString, \(aqXML Settinges\(aq]], \(aqDataSourceDescription\(aq: [[tango._tango.CmdArgType.DevVarStringArray, \(aqlist of required datasources\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of JSON with description of CLIENT Datasources\(aq]], \(aqDeleteAllProfiles\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqDeleteProfile\(aq: [[tango._tango.CmdArgType.DevString, \(aqmntgrp name\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqExportEnvProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqFetchProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqFullDeviceNames\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevString, \(aqJSON Dictionary with full device names for  all aliases \(aq]], \(aqImportEnvProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqImportMntGrp\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqIsMntGrpUpdated\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevBoolean, \(aqtrue if mntgrp changed\(aq]], \(aqLoadProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqMandatoryComponents\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqcomponent names\(aq]], \(aqMntGrpConfiguration\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevString, \(aqmntgrp configuration string\(aq]], \(aqMutedChannels\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of muted channels\(aq]], \(aqPoolElementNames\(aq: [[tango._tango.CmdArgType.DevString, \(aqpool list attribute name\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of available pool elements\(aq]], \(aqPreselectComponents\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqPreselectedComponents\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqcomponent names\(aq]], \(aqPreselectedDataSources\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqdatasources names\(aq]], \(aqRemoveDynamicComponent\(aq: [[tango._tango.CmdArgType.DevString, \(aqname of dynamic Component\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqResetPreselectedComponents\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqSaveProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqScanEnvVariables\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevString, \(aqenvironment data\(aq]], \(aqSelectedComponents\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqcomponent names\(aq]], \(aqSelectedDataSources\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVarStringArray, \(aqprofile datasources\(aq]], \(aqSetChannelProperties\(aq: [[tango._tango.CmdArgType.DevVarStringArray, \(aqa two element list with a property type and JSON value dictionary {channel:property}\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqSetScanEnvVariables\(aq: [[tango._tango.CmdArgType.DevString, \(aqenvironment data\(aq], [tango._tango.CmdArgType.DevLong, \(aqscanID\(aq]], \(aqStoreProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqSwitchProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqUpdateConfigVariables\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevVoid, \(aq\(aq]], \(aqUpdateMntGrp\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevString, \(aqconfiguration\(aq]], \(aqUpdateProfile\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevString, \(aqmntgrp configuration string\(aq]], \(aqVariableComponents\(aq: [[tango._tango.CmdArgType.DevVoid, \(aq\(aq], [tango._tango.CmdArgType.DevString, \(aqJSON Dictionary with all Components for   configuration variable\(aq]]}
(\fI\%dict\fP <\fI\%str\fP, [[ \fBPyTango.CmdArgType\fP, \fI\%str\fP]] >)
Command definitions
.UNINDENT
.INDENT 7.0
.TP
.B device_property_list = {\(aqAdminDataNames\(aq: [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of administrator data names\(aq, []], \(aqClientRecordKeys\(aq: [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of record keys for CLIENT datasources\(aq, []], \(aqDefaultCanFailDataSources\(aq: [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of default datasources in the CanFail mode\(aq, []], \(aqDefaultMntGrp\(aq: [tango._tango.CmdArgType.DevString, \(aqdefault measurement group name\(aq, [\(aqnxsmntgrp\(aq]], \(aqDefaultNeXusPath\(aq: [tango._tango.CmdArgType.DevString, \(aqdefault NeXus path\(aq, ["/$var.entryname#\(aqscan\(aq$var.serialno:NXentry/NXinstrument/collection"]], \(aqDefaultPreselectedComponents\(aq: [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of default preselected components\(aq, []], \(aqDefaultTimeZone\(aq: [tango._tango.CmdArgType.DevString, \(aqdefault Time Zone\(aq, [\(aqEurope/Berlin\(aq]], \(aqMutedChannelFilters\(aq: [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of muted channel filters\(aq, []], \(aqNumberOfThreads\(aq: [tango._tango.CmdArgType.DevLong, \(aqmaximal number of threads\(aq, [20]], \(aqPoolBlacklist\(aq: [tango._tango.CmdArgType.DevVarStringArray, \(aqblacklist of pools\(aq, []], \(aqSyncSnapshot\(aq: [tango._tango.CmdArgType.DevBoolean, \(aqpreselection merges the current ScanSnapshot\(aq, [False]], \(aqTimerFilters\(aq: [tango._tango.CmdArgType.DevVarStringArray, \(aqlist of timer device name filters\(aq, []]}
(\fI\%dict\fP <\fI\%str\fP, [ \fI\%str\fP, \fBPyTango.CmdArgType\fP, [ \fI\%list\fP <\fI\%int\fP> ] ] > ) Device Properties
.UNINDENT
.UNINDENT
.SS nxsrecconfig.ProfileManager module
.sp
ProfileManager
.INDENT 0.0
.TP
.B nxsrecconfig.ProfileManager.DEFAULT_RECORD_KEYS = [\(aqserialno\(aq, \(aqend_time\(aq, \(aqstart_time\(aq, \(aqpoint_nb\(aq, \(aqtimestamps\(aq, \(aqscan_title\(aq, \(aqfilename\(aq]
(\fI\%list\fP <\fI\%str\fP>) default data names
.UNINDENT
.INDENT 0.0
.TP
.B nxsrecconfig.ProfileManager.NXSTOOLS = True
(\fI\%bool\fP) flag for nxstools installed
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.ProfileManager.ProfileManager(selector, syncsnapshot=False)
Bases: \fI\%object\fP
.sp
Manages Measurement Group and Profile from Selector
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBselector\fP (\fI\%nxsrecconfig.Selector.Selector\fP) – selector object
.IP \(bu 2
\fBsyncsnapshot\fP (\fI\%bool\fP) – preselection merges current ScanSnapshot
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B availableMntGrps()
available mntgrps
.INDENT 7.0
.TP
.B Returns
list of available measurement groups
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clientRecordKeys = None
(\fI\%list\fP <\fI\%str\fP>) client record keys
.UNINDENT
.INDENT 7.0
.TP
.B componentDataSources()
provides a list of Component DataSources
.INDENT 7.0
.TP
.B Returns
list of component datasources
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B components()
provides selected components
.INDENT 7.0
.TP
.B Returns
list of available selected components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cpdescription(full=False)
provides description of components
.INDENT 7.0
.TP
.B Parameters
\fBfull\fP (\fI\%bool\fP) – if True describes all available ones are taken
otherwise selectect, preselected and mandatory
.TP
.B Returns
description of required components
.TP
.B Return type
[\fI\%dict\fP <\fI\%str\fP, \fI\%dict\fP <\fI\%str\fP,                  \fI\%list\fP <(\fI\%str\fP, \fI\%str\fP, \fI\%str\fP,                       \fI\%str\fP, \fI\%list\fP <\fI\%int\fP>)> > > ] or                 [{“dsname”: \fI\%str\fP, “strategy”: \fI\%str\fP,                   “dstype”: \fI\%str\fP, “record”: \fI\%str\fP,                   “nxstype”: \fI\%str\fP, “shape”: \fI\%list\fP <\fI\%int\fP> ,           “cpname”: \fI\%str\fP}, …]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B createDataSources(tangods, dsg=None)
adds known and creates unknown datasources
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtangods\fP (\fI\%list\fP < [\fI\%str\fP , \fI\%str\fP , \fI\%str\fP ] >) – tango datasources list
with elements (name, label, source)
.IP \(bu 2
\fBdsg\fP (\fI\%dict\fP <\fI\%str\fP, \fI\%bool\fP or \fINone\fP>) – datasource selection dictionary
.UNINDENT
.TP
.B Returns
dictionary with of source alias names
.TP
.B Return type
\fI\%dict\fP <\fI\%str\fP ,  \fI\%str\fP >
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B dataSources()
provides selected datasources
.INDENT 7.0
.TP
.B Returns
list of available selected datasources
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B defaultPreselectedComponents = None
(\fI\%list\fP <\fI\%str\fP>) default preselectedComponents
.UNINDENT
.INDENT 7.0
.TP
.B deleteProfile(name)
deletes mntgrp
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fI\%str\fP) – mntgrp name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B fetchProfile()
fetches the profile configuration
.UNINDENT
.INDENT 7.0
.TP
.B importMntGrp()
import setting from active measurement
.UNINDENT
.INDENT 7.0
.TP
.B isMntGrpUpdated()
check if active measurement group was changed
.INDENT 7.0
.TP
.B Returns
True if it is different to the current setting
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mntGrpConfiguration()
provides configuration of mntgrp
.INDENT 7.0
.TP
.B Returns
string with mntgrp configuration
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B preselectedComponents()
provides preselected components
.INDENT 7.0
.TP
.B Returns
list of available preselected components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B preselectedDataSources()
provides preselected datasources
.INDENT 7.0
.TP
.B Returns
list of available preselected components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B switchProfile(toActive=True)
switchProfile to active measurement
.INDENT 7.0
.TP
.B Parameters
\fBtoActive\fP (\fI\%bool\fP) – if False update the current profile
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B timerFilters = None
(\fI\%list\fP <\fI\%str\fP>) timer filters
.UNINDENT
.INDENT 7.0
.TP
.B updateProfile(sync=False)
sets active measurement group from components and
import setting from active measurement
.INDENT 7.0
.TP
.B Parameters
\fBsync\fP (\fI\%bool\fP) – make profile and mntgrp synchronization
.TP
.B Returns
json dictionary with mntgrp configuration information
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS nxsrecconfig.Release module
.sp
NeXus Sardana Recorder Settings \- Release
.SS nxsrecconfig.Selection module
.sp
Selection state
.INDENT 0.0
.TP
.B class nxsrecconfig.Selection.Selection(*args, **kw)
Bases: \fI\%dict\fP
.sp
Selection Dictionary which contains the following records:
{
“Timer”:  ‘[]’,
“OrderedChannels”:  ‘[]’,
“ComponentSelection”:  ‘{}’,
“DataSourceSelection”:  ‘{}’,
“DataSourcePreselection”:  ‘{}’,
“ComponentPreselection”:  ‘{}’,
“PreselectingDataSources”:  ‘[]’,
“OptionalComponents”:  ‘[]’,
“AppendEntry”:  False,
“ComponentsFromMntGrp”:  False,
“ConfigVariables”:  ‘{}’,
“UserData”:  ‘{}’,
“ChannelProperties”:  ‘{}’,
“UnplottedComponents”:  ‘[]’,
“DynamicComponents”:  True,
“DefaultDynamicLinks”:  True,
“DefaultDynamicPath”:      ‘/$var.entryname#’scan’$var.serialno:NXentry/NXinstrument/collection’,
“TimeZone”:  self.__defaultzone,
“ConfigDevice”:  ‘’,
“WriterDevice”:  ‘’,
“Door”:  ‘’,
“MntGrp”:  ‘’,
“Version”:  self.__version,
“MntGrpConfiguration”:  ‘’
}
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBargs\fP (\fI\%list\fP <\fIany\fP>) – dictionary args
.IP \(bu 2
\fBkw\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – dictionary kw
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B deselect()
deselects components and datasources
.UNINDENT
.INDENT 7.0
.TP
.B reset()
resets dictionary to default value
.UNINDENT
.INDENT 7.0
.TP
.B resetMntGrp()
reset method for mntGrp attribute
.INDENT 7.0
.TP
.B Brief
If MntGrp not defined set it to default value
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B resetPreselectedComponents(components)
resets Preselected Components with given components and set them
to not active
:param components: list of components to be set
:type components: \fI\%list\fP <\fI\%str\fP>
.UNINDENT
.INDENT 7.0
.TP
.B resetTimeZone()
reset method for timeZone attribute
.INDENT 7.0
.TP
.B Brief
If TimeZone not defined set it to default value
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B updateChannelProperties(devicecontrollers, triggergate)
update method for orderedChannels attribute
.INDENT 7.0
.TP
.B Brief
sets pool channels in order defined by OrderedChannels
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdevicecontrollers\fP (\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>) – device controller dictionary
.IP \(bu 2
\fBtriggergate\fP (\fI\%list\fP <\fI\%str\fP>) – trigger gate list
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B updateComponentSelection()
update method for componentGroup attribute
.INDENT 7.0
.TP
.B Brief
It removes datasource components from component group
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B updateDataSourceSelection(channels, datasources)
update method for dataSourceGroup attribute
.INDENT 7.0
.TP
.B Brief
It removes datasources from DataSourceSelection if they are
neither in poolchannels nor in avaiblable datasources
It adds new channels to DataSourceSelection
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBchannels\fP (\fI\%list\fP <\fI\%str\fP>) – pool channels
.IP \(bu 2
\fBdatasources\fP (\fI\%list\fP <\fI\%str\fP>) – available datasources
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B updateOrderedChannels(channels)
update method for orderedChannels attribute
.INDENT 7.0
.TP
.B Brief
sets pool channels in order defined by OrderedChannels
.TP
.B Parameters
\fBchannels\fP (\fI\%list\fP <\fI\%str\fP>) – pool channels
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B updatePreselectingDataSources(datasources)
update method for Preselected DataSources
.INDENT 7.0
.TP
.B Brief
appends new datasources to Preselected DataSources
.TP
.B Parameters
\fBdatasources\fP (\fI\%list\fP <\fI\%str\fP>) – list of datasources
.UNINDENT
.UNINDENT
.UNINDENT
.SS nxsrecconfig.Selector module
.sp
Selection state
.INDENT 0.0
.TP
.B class nxsrecconfig.Selector.Selector(macroserverpools, version, defaultpath="/$var.entryname#\(aqscan\(aq$var.serialno:NXentry/NXinstrument/collection", defaulttimezone=\(aqEurope/Berlin\(aq, defaultmntgrp=\(aqnxsmntgrp\(aq)
Bases: \fI\%object\fP
.sp
access class to Selection dictionary and Config Device
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmacroserverpools\fP (\fI\%nxsrecconfig.MacroServerPools.MacroServerPools\fP) – MacroServerPools object
.IP \(bu 2
\fBversion\fP (\fI\%str\fP) – selector version
.IP \(bu 2
\fBdefaultpath\fP (\fI\%str\fP) – default dynamic component path
.IP \(bu 2
\fBdefaultpath\fP – default dynamic component path
.IP \(bu 2
\fBdefaulttimezone\fP (\fI\%str\fP) – default time zone
.IP \(bu 2
\fBdefaultmntgrp\fP (\fI\%str\fP) – default measurement group name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B configCommand(command, *var)
executes command on configuration server
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcommand\fP (\fI\%str\fP) – command name
.IP \(bu 2
\fBvar\fP ([ \fIany\fP ]) – parameter list
.UNINDENT
.TP
.B Returns
command result
.TP
.B Return type
\fIany\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B descErrors = None
(\fI\%list\fP <\fI\%str\fP>) error descriptions
.UNINDENT
.INDENT 7.0
.TP
.B deselect()
deselects all seleciton elements
.UNINDENT
.INDENT 7.0
.TP
.B exportEnv(data=None, cmddata=None)
exports Selector Environment Data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdata\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP>) – dictionary with input data
.IP \(bu 2
\fBcmddata\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP>) – dictionary with command input data
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B fetchSelection()
fetch configuration
.INDENT 7.0
.TP
.B Returns
if configuration was fetched
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get()
provides selection data
.INDENT 7.0
.TP
.B Returns
selection data
.TP
.B Return type
\fI\%dict\fP <\fI\%str\fP, \fIany\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B getMacroServer()
provides MacroServer name
.INDENT 7.0
.TP
.B Returns
MacroServer name
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B getPools()
provides pool proxies
.INDENT 7.0
.TP
.B Returns
list of pool proxies
.TP
.B Return type
\fI\%list\fP <\fBPyTango.DeviceProxy\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B getScanEnvVariables()
gets Scan Environment Data
.INDENT 7.0
.TP
.B Returns
JSON String with important variables
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B importEnv(names=None, data=None)
imports Selector Environment Data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnames\fP (\fI\%list\fP <\fI\%str\fP>) – names of required variables
.IP \(bu 2
\fBdata\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP>) – dictionary with resulting data
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B keys()
provides all names of variables
.INDENT 7.0
.TP
.B Returns
selection keys
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B moduleLabel = None
(\fI\%str\fP) module label
.UNINDENT
.INDENT 7.0
.TP
.B poolElementNames(listattr)
provides names from the given pool listattr
.INDENT 7.0
.TP
.B Parameters
\fBlistattr\fP (\fI\%str\fP) – pool attribute with list
.TP
.B Returns
names from given pool listattr
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B preselect()
updates active state of preselected components
.INDENT 7.0
.TP
.B Brief
It provides new group of preselected components
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B reset()
resets seleciton except Door and ConfigDevice
.UNINDENT
.INDENT 7.0
.TP
.B resetPreselectedComponents(components)
resets preselected components to set of given components
.INDENT 7.0
.TP
.B Parameters
\fBcomponents\fP (\fI\%list\fP <\fI\%str\fP>) – new selection preselected components
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set(state)
sets selection from state data
.INDENT 7.0
.TP
.B Parameters
\fBstate\fP (\fI\%dict\fP <\fI\%str\fP, \fIany\fP>) – state data
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setConfigInstance()
sets config instances
.INDENT 7.0
.TP
.B Returns
set config instance
.TP
.B Return type
\fBPyTango.DeviceProxy\fP              or \fI\%nxsconfigserver.XMLConfigurator.XMLConfigurator\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setScanEnvVariables(jdata)
sets Scan Environment Data
.INDENT 7.0
.TP
.B Parameters
\fBjdata\fP (\fI\%str\fP) – JSON String with important variables
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B storeSelection()
saves configuration
.UNINDENT
.UNINDENT
.SS nxsrecconfig.Settings module
.sp
NeXus Sardana Recorder Settings implementation
.INDENT 0.0
.TP
.B class nxsrecconfig.Settings.Settings(server=None, numberofthreads=None, defaultnexuspath=None, defaulttimezone=None, defaultmntgrp=None, syncsnapshot=False)
Bases: \fI\%object\fP
.sp
NeXus Sardana Recorder settings
.sp
contructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBserver\fP (\fI\%nxsrecconfig.NXSConfig.NXSRecSelector\fP) – NXSRecSelector server
.IP \(bu 2
\fBnumberofthreads\fP (\fI\%str\fP) – number of threads used to check device state
.IP \(bu 2
\fBdefaultnexuspath\fP (\fI\%str\fP) – default dynamic component path
.IP \(bu 2
\fBsyncsnapshot\fP (\fI\%bool\fP) – preselection merges current ScanSnapshot
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B addStepDataSources(datasources)
describe datasources
.INDENT 7.0
.TP
.B Parameters
\fBdatasources\fP (\fI\%list\fP <\fI\%str\fP>) – list for datasource names
.TP
.B Returns
list of datasources not found in components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B adminDataNames = None
(\fI\%list\fP <\fI\%str\fP>) administator data
.UNINDENT
.INDENT 7.0
.TP
.B administratorDataNames()
provides administrator data names
.INDENT 7.0
.TP
.B Returns
list of provides administrator data names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B appendEntry
(\fI\%bool\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B availableComponents()
available components
.INDENT 7.0
.TP
.B Returns
list of available components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B availableDataSources()
available datasources
.INDENT 7.0
.TP
.B Returns
list of available datasources
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B availableMntGrps()
available mntgrps
.INDENT 7.0
.TP
.B Returns
list of available measurement groups
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B availableProfiles()
available selections
.INDENT 7.0
.TP
.B Returns
list of available selections
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B availableTimers()
provides available Timers from MacroServer pools
.INDENT 7.0
.TP
.B Returns
available Timers from MacroServer pools
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B canfaildatasources
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B channelProperties(ptype)
provides channel properties of the given type
.INDENT 7.0
.TP
.B Parameters
\fBptype\fP (\fI\%str\fP) – property type
.TP
.B Returns
json dictionary with channel properties
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clientRecordKeys
(\fI\%list\fP <\fI\%str\fP>) client record keys
.UNINDENT
.INDENT 7.0
.TP
.B componentClientSources(cps)
provides description of client datasources
.INDENT 7.0
.TP
.B Parameters
\fBcps\fP (\fI\%list\fP <\fI\%str\fP>) – component names
.TP
.B Returns
JSON string with description of client datasources
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B componentDataSources()
provides a list of profile component DataSources
.INDENT 7.0
.TP
.B Returns
list of profile component datasources
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B componentDescription()
provides description of all components
.INDENT 7.0
.TP
.B Returns
JSON string with description of all components
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B componentSources(cps)
provides description of datasources
.INDENT 7.0
.TP
.B Parameters
\fBcps\fP (\fI\%list\fP <\fI\%str\fP>) – component names
.TP
.B Returns
JSON string with description of client datasources
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B components
(\fI\%list\fP <\fI\%str\fP>) provides selected components
.UNINDENT
.INDENT 7.0
.TP
.B configDevice
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B configVariables
(\fI\%str\fP) the json variables string
.UNINDENT
.INDENT 7.0
.TP
.B createDataSources(datasources)
describe datasources
.INDENT 7.0
.TP
.B Parameters
\fBdatasources\fP (\fI\%str\fP) – JSON dictionary with
{\fBdsname\fP: \fBtangosource\fP, …}
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B createDynamicComponent(params)
creates dynamic component
.INDENT 7.0
.TP
.B Parameters
\fBparams\fP (\fI\%list\fP <\fI\%str\fP>) – datasource parameters
.TP
.B Returns
dynamic component name
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B createWriterConfiguration(cps)
create configuration and clean stepdatasources and linkdatasources
.INDENT 7.0
.TP
.B Parameters
\fBcps\fP (\fI\%list\fP <\fI\%str\fP>) – component names
.TP
.B Returns
JSON string with description of client datasources
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B dataSourceDescription(datasources)
describe datasources
.INDENT 7.0
.TP
.B Parameters
\fBdatasources\fP (\fI\%list\fP <\fI\%str\fP>) – list for datasource names
.TP
.B Returns
list of dictionary with description of datasources
.TP
.B Return type
[{“dsname”: \fI\%str\fP, “dstype”: \fI\%str\fP,                   “record”: \fI\%str\fP}, …]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B dataSources
(\fI\%list\fP <\fI\%str\fP>) provides all selected data sources
.UNINDENT
.INDENT 7.0
.TP
.B defaultCanFailDataSources = None
(\fI\%str\fP) default CanFail DataSources
.UNINDENT
.INDENT 7.0
.TP
.B defaultMntGrp = None
(\fI\%str\fP) default measurement group
.UNINDENT
.INDENT 7.0
.TP
.B defaultNeXusPath = None
(\fI\%str\fP) default NeXus path
.UNINDENT
.INDENT 7.0
.TP
.B defaultPreselectedComponents
(\fI\%list\fP <\fI\%str\fP>) default PreselectedComponents
.UNINDENT
.INDENT 7.0
.TP
.B defaultTimeZone = None
(\fI\%str\fP) default time zone
.UNINDENT
.INDENT 7.0
.TP
.B deleteAllProfiles()
clear all selections
.UNINDENT
.INDENT 7.0
.TP
.B deleteProfile(name)
deletes mntgrp
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fI\%str\fP) – mntgrp name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B descriptionErrors
(\fI\%list\fP <\fI\%str\fP>) provides preselected components
.UNINDENT
.INDENT 7.0
.TP
.B deviceGroups
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B door
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B exportEnvProfile()
exports all Enviroutment Data
.UNINDENT
.INDENT 7.0
.TP
.B fetchProfile()
fetch configuration
.UNINDENT
.INDENT 7.0
.TP
.B fullDeviceNames()
provides full names of pool devices
.INDENT 7.0
.TP
.B Returns
JSON string with full names of pool devices
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B importEnvProfile()
imports all Enviroutment Data
.UNINDENT
.INDENT 7.0
.TP
.B importMntGrp()
import setting from active measurement
.UNINDENT
.INDENT 7.0
.TP
.B isMntGrpUpdated()
check if active measurement group was changed
.INDENT 7.0
.TP
.B Returns
True if it is different to the current setting
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B linkdatasources
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B loadProfile()
loads configuration
.UNINDENT
.INDENT 7.0
.TP
.B macroServer
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B mandatoryComponents()
mandatory components
.INDENT 7.0
.TP
.B Returns
list of mandatory components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mntGrp
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B mntGrpConfiguration()
provides configuration of mntgrp
.INDENT 7.0
.TP
.B Returns
string with mntgrp configuration
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mutedChannelFilters = None
(\fI\%list\fP <\fI\%str\fP>) timer filters
.UNINDENT
.INDENT 7.0
.TP
.B mutedChannels()
provides muted channels from pool
.INDENT 7.0
.TP
.B Returns
muted channels from pool
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B names()
provides names of variables
.INDENT 7.0
.TP
.B Returns
all names of variables
.TP
.B Rtypes
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B numberOfThreads = None
(\fI\%int\fP) number of threads
.UNINDENT
.INDENT 7.0
.TP
.B poolBlacklist
(\fI\%list\fP <\fI\%str\fP>) black list of pools
.UNINDENT
.INDENT 7.0
.TP
.B poolElementNames(listattr)
provides names from given pool listattr
.INDENT 7.0
.TP
.B Parameters
\fBlistattr\fP (\fI\%str\fP) – name of pool attribute with a element list
.TP
.B Returns
names from given pool listattr
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B preselectComponents()
checks existing controllers of pools
.UNINDENT
.INDENT 7.0
.TP
.B preselectedComponents()
provides preselected components
.INDENT 7.0
.TP
.B Returns
list of available preselected components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B preselectedDataSources()
provides preselected datasources
.INDENT 7.0
.TP
.B Returns
list of available preselected datasources
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B profileConfiguration
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B profileFile = None
(\fI\%str\fP) configuration file
.UNINDENT
.INDENT 7.0
.TP
.B removeDynamicComponent(name)
removes dynamic component
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fI\%str\fP) – dynamic component name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B resetPreselectedComponents()
reset preselected Components to defaultPreselectedComponents
.UNINDENT
.INDENT 7.0
.TP
.B saveProfile()
saves configuration
.UNINDENT
.INDENT 7.0
.TP
.B scanDir
the json data string
.UNINDENT
.INDENT 7.0
.TP
.B scanEnvVariables()
gets Scan Environment Data
.INDENT 7.0
.TP
.B Returns
JSON String with important variables
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B scanFile
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B scanID
(\fI\%int\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B selectedComponents()
provides user selected components
.INDENT 7.0
.TP
.B Returns
list of available selected components
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B selectedDataSources()
provides selected datasources
.INDENT 7.0
.TP
.B Returns
list of available selected datasources
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setChannelProperties(typeandvariables)
sets channel properties of the given type
.INDENT 7.0
.TP
.B Parameters
\fBtypeandvariables\fP ((\fI\%str\fP, \fI\%str\fP)) – (property type, json dictionary of channel propertie values)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B setScanEnvVariables(jdata)
sets Scan Environment Data
.INDENT 7.0
.TP
.B Parameters
\fBjdata\fP (\fI\%str\fP) – JSON String with important variables
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B stepdatasources
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B storeProfile()
saves configuration
.UNINDENT
.INDENT 7.0
.TP
.B switchProfile(toActive=True)
switch to active measurement
.INDENT 7.0
.TP
.B Parameters
\fBtoActive\fP (\fI\%bool\fP) – if False update the current profile
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B syncSnapshot = None
(\fI\%bool\fP) preselection merges current ScanSnapshot
.UNINDENT
.INDENT 7.0
.TP
.B timerFilters
(\fI\%list\fP <\fI\%str\fP>) timer filters
.UNINDENT
.INDENT 7.0
.TP
.B updateConfigVariables()
sends ConfigVariables into ConfigServer
and updates serialno if appendEntry selected
.UNINDENT
.INDENT 7.0
.TP
.B updateMntGrp()
set active measurement group from components
.INDENT 7.0
.TP
.B Returns
string with mntgrp configuration
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B updateProfile()
update profile and measurement group
.INDENT 7.0
.TP
.B Returns
string with mntgrp configuration
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B userData
(\fI\%str\fP) the json data string
.UNINDENT
.INDENT 7.0
.TP
.B value(name)
provides values of the required variable
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fI\%str\fP) – name of the required variable
.TP
.B Returns
values of the required variable
.TP
.B Return type
\fIany\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B variableComponents()
provides components for all variables
.INDENT 7.0
.TP
.B Returns
json dictionary with components for all variables
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B version
(\fI\%str\fP) server version
.UNINDENT
.INDENT 7.0
.TP
.B writerDevice
(\fI\%str\fP) the json data string
.UNINDENT
.UNINDENT
.SS nxsrecconfig.StreamSet module
.sp
labels to Tango Streams
.INDENT 0.0
.TP
.B class nxsrecconfig.StreamSet.StreamSet(streams)
Bases: \fI\%object\fP
.sp
streamset constractor
.INDENT 7.0
.TP
.B Parameters
\fBstreams\fP (\fI\%StreamSet\fP or \fBPyTango.Device_4Impl\fP) – tango\-like steamset class
.UNINDENT
.INDENT 7.0
.TP
.B debug(message, std=True)
writes debug message
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmessage\fP (\fI\%str\fP) – debug message
.IP \(bu 2
\fBstd\fP (\fI\%bool\fP) – True if it writes to sys stream
when log stream does not exist
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B error(message, std=True)
writes error message
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmessage\fP (\fI\%str\fP) – error message
.IP \(bu 2
\fBstd\fP (\fI\%bool\fP) – True if it writes to sys stream
when log stream does not exist
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B fatal(message, std=True)
writes fatal error message
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmessage\fP (\fI\%str\fP) – error message
.IP \(bu 2
\fBstd\fP (\fI\%bool\fP) – True if it writes to sys stream
when log stream does not exist
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B info(message, std=True)
writes info message
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmessage\fP (\fI\%str\fP) – info message
.IP \(bu 2
\fBstd\fP (\fI\%bool\fP) – True if it writes to sys stream
when log stream does not exist
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B log_debug = None
(\fBPyTango.log4tango.TangoStream\fP) Tango debug log stream
.UNINDENT
.INDENT 7.0
.TP
.B log_error = None
(\fBPyTango.log4tango.TangoStream\fP) Tango error log stream
.UNINDENT
.INDENT 7.0
.TP
.B log_fatal = None
(\fBPyTango.log4tango.TangoStream\fP) Tango fatal log stream
.UNINDENT
.INDENT 7.0
.TP
.B log_info = None
(\fBPyTango.log4tango.TangoStream\fP) Tango info log stream
.UNINDENT
.INDENT 7.0
.TP
.B log_warn = None
(\fBPyTango.log4tango.TangoStream\fP) Tango warn log stream
.UNINDENT
.INDENT 7.0
.TP
.B warn(message, std=True)
writes warning message
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmessage\fP (\fI\%str\fP) – warning message
.IP \(bu 2
\fBstd\fP (\fI\%bool\fP) – True if it writes to sys stream
when log stream does not exist
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS nxsrecconfig.Utils module
.sp
Tango Utilities
.INDENT 0.0
.TP
.B class nxsrecconfig.Utils.MSUtils
Bases: \fI\%object\fP
.sp
MacroServer Utilities
.INDENT 7.0
.TP
.B classmethod getEnv(var, ms)
provides environment variable value
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvar\fP (\fI\%str\fP) – variable name
.IP \(bu 2
\fBms\fP (\fI\%str\fP) – macroserver
.UNINDENT
.TP
.B Returns
environment variable value
.TP
.B Return type
\fIany\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getMacroServer(db, door)
provides macro server of given door
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP (\fBPyTango.Database\fP) – tango database
.IP \(bu 2
\fBdoor\fP (\fI\%str\fP) – given door
.UNINDENT
.TP
.B Returns
first MacroServer of the given door
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod setEnv(var, value, ms)
sets environment variable value
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvar\fP (\fI\%str\fP) – variable name
.IP \(bu 2
\fBvalue\fP (\fIany\fP) – variable value
.IP \(bu 2
\fBms\fP (\fI\%str\fP) – macroserver
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod setEnvs(varvalues, ms)
sets environment variable value
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvarvalues\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP>) – variable value dictionary
.IP \(bu 2
\fBms\fP (\fI\%str\fP) – macroserver
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod usetEnv(var, ms)
unsets environment variable
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvar\fP (\fI\%str\fP) – variable name
.IP \(bu 2
\fBms\fP (\fI\%str\fP) – macroserver
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod writeEnvAttr(value, dp)
sets environment variable value
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fI\%dict\fP <\fI\%str\fP , \fIany\fP> or \fIany\fP) – variable value dictionary
.IP \(bu 2
\fBdp\fP (\fI\%str\fP) – macroserver
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception nxsrecconfig.Utils.OldTangoError
Bases: \fI\%Exception\fP
.sp
Old Tango version Exception class
.UNINDENT
.INDENT 0.0
.TP
.B nxsrecconfig.Utils.PYTG_BUG_213 = False
(\fI\%bool\fP) PyTango bug #213 flag related to EncodedAttributes in python3
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Utils.PoolUtils
Bases: \fI\%object\fP
.sp
Pool Utilities
.INDENT 7.0
.TP
.B classmethod filterNames(pools, filters=None, lst=None)
provides channels of given pools
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBfilters\fP (\fI\%list\fP <\fI\%str\fP>) – device name filter list
.UNINDENT
.TP
.B Returns
list of channel names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getAliases(pools, names=None)
find aliases from fullnames
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBnames\fP (\fI\%list\fP <\fI\%str\fP>) – fullnames if None returns all aliases
.UNINDENT
.TP
.B Returns
full device name
.TP
.B Return type
\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getChannelSources(pools, devices)
provides channel sources
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBdevices\fP (\fI\%list\fP <\fI\%str\fP>) – alias names
.UNINDENT
.TP
.B Returns
device sources
.TP
.B Return type
\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getDeviceControllers(pools, devices=None)
provides device controller full names
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBdevices\fP (\fI\%list\fP <\fI\%str\fP>) – alias names
.UNINDENT
.TP
.B Returns
device controller full names
.TP
.B Return type
\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getElementNames(pools, listattr, typefilter=None)
provides experimental Channels
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBlistattr\fP (\fI\%str\fP) – pool attribute with list
.IP \(bu 2
\fBtypefilter\fP (\fI\%list\fP <\fI\%str\fP>) – pool attribute with list
.UNINDENT
.TP
.B Returns
names from given pool listattr
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getFullDeviceNames(pools, names=None)
find device names from aliases
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBnames\fP (\fI\%list\fP <\fI\%str\fP>) – alias names if None returns name for all aliases
.UNINDENT
.TP
.B Returns
full device name
.TP
.B Return type
\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getMntGrpName(pools, alias)
find measurement group name from alias
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBalias\fP (\fI\%str\fP) – mntgrp alias
.UNINDENT
.TP
.B Returns
full name of the measurement group alias
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getSource(name)
provides datasource from pool device
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fI\%str\fP) – pool device name
.TP
.B Returns
source of pool device
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getTimers(pools, filters=None)
provides tiemrs of given pools
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpools\fP (\fI\%list\fP <\fBPyTango.DeviceProxy\fP>) – list of pool devices
.IP \(bu 2
\fBfilters\fP (\fI\%list\fP <\fI\%str\fP>) – device name filter list
.UNINDENT
.TP
.B Returns
list of timer names
.TP
.B Return type
\fI\%list\fP <\fI\%str\fP>
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Utils.TangoUtils
Bases: \fI\%object\fP
.sp
Tango Utilities
.INDENT 7.0
.TP
.B classmethod command(server, command, *var)
executes command on server on python package
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBserver\fP (\fBPyTango.DeviceProxy\fP              or \fI\%nxsconfigserver.XMLConfigurator.XMLConfigurator\fP) – tango server name or package name
.IP \(bu 2
\fBcommand\fP (\fI\%str\fP) – command name
.IP \(bu 2
\fBvar\fP ([ \fIany\fP ]) – command variable list
.UNINDENT
.TP
.B Returns
command result
.TP
.B Return type
\fIany\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getDeviceName(db, cname)
finds device of give class
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP (\fBPyTango.DeviceProxy\fP) – tango database
.IP \(bu 2
\fBcname\fP (\fI\%str\fP) – device class name
.UNINDENT
.TP
.B Returns
device name if exists
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getFullAttrName(source, fqdn=False)
provides tango device full name with host and port
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\fI\%str\fP) – string with device name and its attribute
.IP \(bu 2
\fBfqdn\fP (\fI\%bool\fP) – if true adds fqdn host name
.UNINDENT
.TP
.B Returns
database host and port in url string
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getProxies(names)
provides proxies of given device names
.INDENT 7.0
.TP
.B Parameters
\fBnames\fP (\fI\%list\fP <\fI\%str\fP>) – given device names
.TP
.B Returns
list of device DeviceProxies
.TP
.B Return type
\fI\%list\fP <\fBPyTango.DeviceProxy\fP>
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getShapeTypeUnit(source)
retrives shape type units for attribure
.INDENT 7.0
.TP
.B Parameters
\fBsource\fP (\fI\%str\fP) – string with device name and its attribute
.TP
.B Returns
(shape, data_type, units)
.TP
.B Return type
(\fI\%list\fP <\fI\%int\fP>, \fI\%str\fP, \fI\%str\fP)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod openProxy(device, counter=1000)
opens device proxy of the given device
.INDENT 7.0
.TP
.B Parameters
\fBdevice\fP (\fI\%str\fP) – device name
.TP
.B Returns
DeviceProxy of device
.TP
.B Return type
\fBPyTango.DeviceProxy\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tTnp = {tango._tango.CmdArgType.DevBoolean: \(aqbool\(aq, tango._tango.CmdArgType.DevShort: \(aqint16\(aq, tango._tango.CmdArgType.DevLong: \(aqint32\(aq, tango._tango.CmdArgType.DevFloat: \(aqfloat32\(aq, tango._tango.CmdArgType.DevDouble: \(aqfloat64\(aq, tango._tango.CmdArgType.DevUShort: \(aquint16\(aq, tango._tango.CmdArgType.DevULong: \(aquint32\(aq, tango._tango.CmdArgType.DevString: \(aqstring\(aq, tango._tango.CmdArgType.DevUChar: \(aquint8\(aq, tango._tango.CmdArgType.DevLong64: \(aqint64\(aq, tango._tango.CmdArgType.DevULong64: \(aquint64\(aq, tango._tango.CmdArgType.DevEncoded: \(aqencoded\(aq}
(\fI\%dict\fP <\fBPyTango.CmdArgType\fP, \fI\%str\fP>)
map of Tango:Numpy types
.UNINDENT
.INDENT 7.0
.TP
.B classmethod wait(proxy, counter=100, state=\(aqRUNNING\(aq)
waits for device proxy not running
.INDENT 7.0
.TP
.B Parameters
\fBproxy\fP (\fBPyTango.DeviceProxy\fP) – device proxy
.TP
.B Returns
if proxy device ready
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nxsrecconfig.Utils.Utils
Bases: \fI\%object\fP
.sp
Miscellaneous Utilities
.INDENT 7.0
.TP
.B classmethod compareDict(dct, dct2)
copares two dictionaries
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdct\fP (\fI\%dict\fP) – first dictinary
.IP \(bu 2
\fBdct2\fP (\fI\%dict\fP) – second dictinary
.UNINDENT
.TP
.B Returns
if dictionaries are the same
.TP
.B Return type
\fI\%bool\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getRecord(node)
provides datasource record from xml dom node
.INDENT 7.0
.TP
.B Parameters
\fBnode\fP (\fBlxml.etree.Element\fP) – xml DOM node
.TP
.B Returns
datasource record
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod getText(node)
collects text from text child nodes
.INDENT 7.0
.TP
.B Parameters
\fBnode\fP (\fI\%xml.etree.ElementTree.Element\fP) – parent node
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod pickleloads(bytestr)
loads pickle byte string
:param bytestr: byte string to convert
:type bytesstr: \fI\%bytes\fP
:returns: loaded bytestring
:rtype: \fI\%any\fP
.UNINDENT
.INDENT 7.0
.TP
.B classmethod stringToDictJson(string, toBool=False)
converts string to json dictionary
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fI\%str\fP) – string with list of item or json dictionary
.IP \(bu 2
\fBtoBool\fP (\fI\%bool\fP) – if true convert dictionary values to bool
.UNINDENT
.TP
.B Returns
json dictionary
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod stringToListJson(string)
converts string to json list
.INDENT 7.0
.TP
.B Parameters
\fBstring\fP (\fI\%str\fP) – with list of item or json list
.TP
.B Returns
json list
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod toString(obj)
converts list/dict/object of unicode/string to string object
.INDENT 7.0
.TP
.B Parameters
\fBobj\fP (\fIany\fP) – given unicode/string object
.TP
.B Returns
string object
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod tostr(text)
convert bytestr or unicode to python str
:param text: text to convert
:type text: \fI\%bytes\fP or \fI\%unicode\fP or \fI\%str\fP
:returns: converted text
:rtype: \fI\%str\fP
.UNINDENT
.UNINDENT
.SS Module contents
.sp
NeXus Sardana Recorder Settings \- Tango Server
.INDENT 0.0
.TP
.B nxsrecconfig.run(argv)
runs the TANGO server
.INDENT 7.0
.TP
.B Parameters
\fBargv\fP (\fI\%list\fP <\fI\%str\fP>) – command\-line arguments
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Author
.SH COPYRIGHT
2012-2017 DESY, Jan Kotanski <jkotan@mail.desy.de>

GNU GENERAL PUBLIC LICENSE, version 3
.\" Generated by docutils manpage writer.
.
