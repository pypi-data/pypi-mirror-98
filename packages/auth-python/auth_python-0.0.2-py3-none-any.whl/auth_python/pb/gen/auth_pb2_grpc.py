# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import auth_pb2 as auth__pb2


class HwsAuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateActions = channel.unary_unary(
                '/auth.HwsAuth/CreateActions',
                request_serializer=auth__pb2.CreateActionsRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.CreateAction = channel.unary_unary(
                '/auth.HwsAuth/CreateAction',
                request_serializer=auth__pb2.CreateActionRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.UpdateAction = channel.unary_unary(
                '/auth.HwsAuth/UpdateAction',
                request_serializer=auth__pb2.UpdateActionsRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.CreateRole = channel.unary_unary(
                '/auth.HwsAuth/CreateRole',
                request_serializer=auth__pb2.SaveRoleRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.UpdateRole = channel.unary_unary(
                '/auth.HwsAuth/UpdateRole',
                request_serializer=auth__pb2.SaveRoleRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.QueryRole = channel.unary_unary(
                '/auth.HwsAuth/QueryRole',
                request_serializer=auth__pb2.RoleQueryRequest.SerializeToString,
                response_deserializer=auth__pb2.RolesResponse.FromString,
                )
        self.DeleteRole = channel.unary_unary(
                '/auth.HwsAuth/DeleteRole',
                request_serializer=auth__pb2.DelRoleRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.Auth = channel.unary_unary(
                '/auth.HwsAuth/Auth',
                request_serializer=auth__pb2.AuthRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.Grant = channel.unary_unary(
                '/auth.HwsAuth/Grant',
                request_serializer=auth__pb2.PolicyRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.Revoke = channel.unary_unary(
                '/auth.HwsAuth/Revoke',
                request_serializer=auth__pb2.PolicyRevokeRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.QueryPolicy = channel.unary_unary(
                '/auth.HwsAuth/QueryPolicy',
                request_serializer=auth__pb2.PolicyQueryRequest.SerializeToString,
                response_deserializer=auth__pb2.PolicyQueryResponse.FromString,
                )
        self.CleanCache = channel.unary_unary(
                '/auth.HwsAuth/CleanCache',
                request_serializer=auth__pb2.CleanCacheRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.SubjectRoles = channel.unary_unary(
                '/auth.HwsAuth/SubjectRoles',
                request_serializer=auth__pb2.SubjectRoleRequest.SerializeToString,
                response_deserializer=auth__pb2.SubjectRoleResponse.FromString,
                )
        self.CreateOwner = channel.unary_unary(
                '/auth.HwsAuth/CreateOwner',
                request_serializer=auth__pb2.SaveOwnerRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )
        self.QueryOwner = channel.unary_unary(
                '/auth.HwsAuth/QueryOwner',
                request_serializer=auth__pb2.OwnerQueryRequest.SerializeToString,
                response_deserializer=auth__pb2.OwnersResponse.FromString,
                )
        self.DeleteOwner = channel.unary_unary(
                '/auth.HwsAuth/DeleteOwner',
                request_serializer=auth__pb2.DelOwnerRequest.SerializeToString,
                response_deserializer=auth__pb2.CommonResponse.FromString,
                )


class HwsAuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateActions(self, request, context):
        """CreatePermissionAction 批量创建权限动作
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAction(self, request, context):
        """CreatePermissionAction 创建权限动作
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAction(self, request, context):
        """UpdatePermissionAction 更新权限动作
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRole(self, request, context):
        """CreateRole 创建角色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRole(self, request, context):
        """UpdateRole 更新角色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryRole(self, request, context):
        """QueryRole 角色查询
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRole(self, request, context):
        """DeleteRole 删除角色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Auth(self, request, context):
        """Auth 认证授权请求
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Grant(self, request, context):
        """Grant 授权
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Revoke(self, request, context):
        """Revoke 吊销授权
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryPolicy(self, request, context):
        """QueryPolicy 查询授权
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanCache(self, request, context):
        """TODO:: CleanCache清除缓存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubjectRoles(self, request, context):
        """SubjectRoles 获取subject角色权限
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOwner(self, request, context):
        """CreateOwner 创建owner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryOwner(self, request, context):
        """QueryOwner owner查询
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOwner(self, request, context):
        """DeleteOwner 删除owner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HwsAuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateActions': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateActions,
                    request_deserializer=auth__pb2.CreateActionsRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'CreateAction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAction,
                    request_deserializer=auth__pb2.CreateActionRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'UpdateAction': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAction,
                    request_deserializer=auth__pb2.UpdateActionsRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=auth__pb2.SaveRoleRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'UpdateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRole,
                    request_deserializer=auth__pb2.SaveRoleRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'QueryRole': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryRole,
                    request_deserializer=auth__pb2.RoleQueryRequest.FromString,
                    response_serializer=auth__pb2.RolesResponse.SerializeToString,
            ),
            'DeleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRole,
                    request_deserializer=auth__pb2.DelRoleRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'Auth': grpc.unary_unary_rpc_method_handler(
                    servicer.Auth,
                    request_deserializer=auth__pb2.AuthRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'Grant': grpc.unary_unary_rpc_method_handler(
                    servicer.Grant,
                    request_deserializer=auth__pb2.PolicyRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'Revoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Revoke,
                    request_deserializer=auth__pb2.PolicyRevokeRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'QueryPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryPolicy,
                    request_deserializer=auth__pb2.PolicyQueryRequest.FromString,
                    response_serializer=auth__pb2.PolicyQueryResponse.SerializeToString,
            ),
            'CleanCache': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanCache,
                    request_deserializer=auth__pb2.CleanCacheRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'SubjectRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.SubjectRoles,
                    request_deserializer=auth__pb2.SubjectRoleRequest.FromString,
                    response_serializer=auth__pb2.SubjectRoleResponse.SerializeToString,
            ),
            'CreateOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOwner,
                    request_deserializer=auth__pb2.SaveOwnerRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
            'QueryOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryOwner,
                    request_deserializer=auth__pb2.OwnerQueryRequest.FromString,
                    response_serializer=auth__pb2.OwnersResponse.SerializeToString,
            ),
            'DeleteOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOwner,
                    request_deserializer=auth__pb2.DelOwnerRequest.FromString,
                    response_serializer=auth__pb2.CommonResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.HwsAuth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HwsAuth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/CreateActions',
            auth__pb2.CreateActionsRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/CreateAction',
            auth__pb2.CreateActionRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/UpdateAction',
            auth__pb2.UpdateActionsRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/CreateRole',
            auth__pb2.SaveRoleRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/UpdateRole',
            auth__pb2.SaveRoleRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/QueryRole',
            auth__pb2.RoleQueryRequest.SerializeToString,
            auth__pb2.RolesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/DeleteRole',
            auth__pb2.DelRoleRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Auth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/Auth',
            auth__pb2.AuthRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Grant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/Grant',
            auth__pb2.PolicyRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Revoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/Revoke',
            auth__pb2.PolicyRevokeRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/QueryPolicy',
            auth__pb2.PolicyQueryRequest.SerializeToString,
            auth__pb2.PolicyQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CleanCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/CleanCache',
            auth__pb2.CleanCacheRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubjectRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/SubjectRoles',
            auth__pb2.SubjectRoleRequest.SerializeToString,
            auth__pb2.SubjectRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/CreateOwner',
            auth__pb2.SaveOwnerRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/QueryOwner',
            auth__pb2.OwnerQueryRequest.SerializeToString,
            auth__pb2.OwnersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.HwsAuth/DeleteOwner',
            auth__pb2.DelOwnerRequest.SerializeToString,
            auth__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
