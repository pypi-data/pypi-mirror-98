#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from {{modelPackage}}.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
{{#imports}}{{import}}
{{/imports}}
from {{packageName}} import util

{{#models}}
{{#model}}
class {{classname}}(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """{{#allowableValues}}

    """
    allowed enum values
    """
    {{#enumVars}}
        {{name}} = {{{value}}}{{^-last}}
        {{/-last}}
    {{/enumVars}}{{/allowableValues}}

    def __init__(self{{#vars}}, {{name}}{{^supportPython2}}: {{datatype}}{{/supportPython2}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}, validate=True):
        """{{classname}} - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

        {{#vars}}
            :param {{name}}: The {{name}} of this {{classname}}.
            :type {{name}}: {{datatype}}
        {{/vars}}
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
        {{#vars}}
        {{#isContainer}}
            '{{name}}': util.convert_type('{{{datatype}}}'){{#hasMore}},{{/hasMore}}
        {{/isContainer}}
        {{^isContainer}}
            '{{name}}': {{{datatype}}}{{#hasMore}},{{/hasMore}}
        {{/isContainer}}
        {{/vars}}
        }

        self.attribute_map = {
        {{#vars}}
            '{{name}}': '{{baseName}}'{{#hasMore}},{{/hasMore}}
        {{/vars}}
        }
        {{#vars}}{{#-first}}
        {{/-first}}
        # Validating the attribute {{name}} and then saving it.
        {{#isContainer}}
        expected_type = util.convert_type('{{{datatype}}}')
        element_type = util.get_contained_type('{{{datatype}}}')
        {{#required}}
        if validate and {{name}} is None:
            raise GeneratedClassesError(
                "The required parameter '{{name}}' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          expected_type,
                                                          True,
                                                          element_type)
        {{/required}}
        {{^required}}
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          expected_type,
                                                          False,
                                                          element_type)
        {{/required}}
        {{/isContainer}}
        {{^isContainer}}
        {{#required}}
        if validate and {{name}} is None:
            raise GeneratedClassesError(
                "The required parameter '{{name}}' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          {{datatype}},
                                                          True)
        {{/required}}
        {{^required}}
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          {{datatype}},
                                                          False)
        {{/required}}
        {{/isContainer}}
        if validate and type_error:
            raise type_error
        {{#isEnum}}
        {{#required}}
        allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        {{#isContainer}}
        {{#isListContainer}}
        if validate and not set({{name}}).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid values for '{{name}}'. Was [{0}] but must be a subset"
                " of [{1}].".format(
                    ', '.join(map(str, set({{name}}) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isListContainer}}
        {{#isMapContainer}}
        if validate and not set({{name}}.keys()).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid keys in '{{name}}'. Was [{0}] but must be a subset of"
                " [{1}].".format(
                    ', '.join(map(str, set({{name}}.keys()) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isMapContainer}}
        {{/isContainer}}
        {{^isContainer}}
        if validate and {{name}} not in allowed_values:
            raise GeneratedClassesError(
                "Invalid enum value {0} for '{{name}}', must be one of [{1}]."
                .format({{name}}, ', '.join(allowed_values)))
        {{/isContainer}}
        {{/required}}
        {{^required}}
        allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        {{#isContainer}}
        {{#isListContainer}}
        if {{name}} is not None and not set({{name}}).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid values for '{{name}}'. Was [{0}] but must be a subset"
                " of [{1}] if defined.".format(
                    ', '.join(map(str, set({{name}}) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isListContainer}}
        {{#isMapContainer}}
        if {{name}} is not None and not set({{name}}.keys()).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid keys in '{{name}}'. Was [{0}] but must be a subset of"
                " [{1}] if defined.".format(
                    ', '.join(map(str, set({{name}}.keys()) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isMapContainer}}
        {{/isContainer}}
        {{^isContainer}}
        if {{name}} is not None and {{name}} not in allowed_values:
            raise GeneratedClassesError(
                "Invalid enum value {0} for '{{name}}', must be one of [{1}]"
                " if defined.".format({{name}}, ', '.join(allowed_values)))
        {{/isContainer}}
        {{/required}}
        {{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', length was {} but must be less"
                " than or equal to {{maxLength}}.".format(len({{name}})))
        {{/maxLength}}
        {{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', length was {} but must be"
                " greater than or equal to {{minLength}}.".format(len({{name}})))
        {{/minLength}}
        {{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', value was {} but must be less"
                " than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.".format({{name}}))
        {{/maximum}}
        {{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', value was {} but must be greater"
                " than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.".format({{name}}))
        {{/minimum}}
        {{#pattern}}
        if ({{name}} is not None
                and not re.search('{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}})):
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', was '{}' but must follow the"
                " pattern '{{{vendorExtensions.x-regex}}}'.".format({{name}}))
        {{/pattern}}
        {{#maxItems}}
            if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise GeneratedClassesError(
            "Invalid size for '{{name}}', number of items was {} but must"
            " be less than or equal to '{{maxItems}}'.".format(len({{name}})))
        {{/maxItems}}
        {{#minItems}}
            if {{name}} is not None and len({{name}}) < {{minItems}}:
            raise GeneratedClassesError(
            "Invalid size for '{{name}}', number of items was {} but must"
            " be greater than or equal to '{{minItems}}'.".format(len({{name}})))
        {{/minItems}}
        {{/hasValidation}}
        self._{{name}} = {{name}}{{#hasMore}}

        {{/hasMore}}
        {{/vars}}

    @classmethod
    def from_dict(cls, dikt){{^supportPython2}} -> '{{classname}}'{{/supportPython2}}:
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The {{name}} of this {{classname}}.
        :rtype: {{classname}}
        """
        return util.deserialize_model(dikt, cls){{#vars}}{{#-first}}

    {{/-first}}
    @property
    def {{name}}(self){{^supportPython2}} -> {{datatype}}{{/supportPython2}}:
        """Gets the {{name}} of this {{classname}}.

        {{#description}}
        {{{description}}}
        {{/description}}

        :return: The {{name}} of this {{classname}}.
        :rtype: {{datatype}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}{{^supportPython2}}: {{datatype}}{{/supportPython2}}):
        """Sets the {{name}} of this {{classname}}.

        {{#description}}
        {{{description}}}
        {{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.
        :type {{name}}: {{datatype}}
        """
        # Validating the attribute {{name}} and then saving it.
        {{#isContainer}}
        expected_type = util.convert_type('{{{datatype}}}')
        element_type = util.get_contained_type('{{{datatype}}}')
        {{#required}}
        if {{name}} is None:
            raise GeneratedClassesError(
                "The required parameter '{{name}}' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          expected_type,
                                                          True,
                                                          element_type)
        {{/required}}
        {{^required}}
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          expected_type,
                                                          False,
                                                          element_type)
        {{/required}}
        {{/isContainer}}
        {{^isContainer}}
        {{#required}}
        if {{name}} is None:
            raise GeneratedClassesError(
                "The required parameter '{{name}}' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          {{datatype}},
                                                          True)
        {{/required}}
        {{^required}}
        type_error = GeneratedClassesTypeError.type_error({{classname}},
                                                          '{{name}}',
                                                          {{name}},
                                                          {{datatype}},
                                                          False)
        {{/required}}
        {{/isContainer}}
        if type_error:
            raise type_error
        {{#isEnum}}
        {{#required}}
        allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        {{#isContainer}}
        {{#isListContainer}}
        if not set({{name}}).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid values for '{{name}}'. Was [{0}] but must be a subset"
                " of [{1}].".format(
                    ', '.join(map(str, set({{name}}) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isListContainer}}
        {{#isMapContainer}}
        if not set({{name}}.keys()).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid keys in '{{name}}'. Was [{0}] but must be a subset of"
                " [{1}].".format(
                    ', '.join(map(str, set({{name}}.keys()) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isMapContainer}}
        {{/isContainer}}
        {{^isContainer}}
        if {{name}} not in allowed_values:
            raise GeneratedClassesError(
                "Invalid enum value {0} for '{{name}}', must be one of [{1}]."
                .format({{name}}, ', '.join(allowed_values)))
        {{/isContainer}}
        {{/required}}
        {{^required}}
        allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        {{#isContainer}}
        {{#isListContainer}}
        if {{name}} is not None and not set({{name}}).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid values for '{{name}}'. Was [{0}] but must be a subset"
                " of [{1}] if defined.".format(
                    ', '.join(map(str, set({{name}}) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isListContainer}}
        {{#isMapContainer}}
        if {{name}} is not None and not set({{name}}.keys()).issubset(set(allowed_values)):
            raise GeneratedClassesError(
                "Invalid keys in '{{name}}'. Was [{0}] but must be a subset of"
                " [{1}] if defined.".format(
                    ', '.join(map(str, set({{name}}.keys()) - set(allowed_values))),
                    ', '.join(map(str, allowed_values))))
        {{/isMapContainer}}
        {{/isContainer}}
        {{^isContainer}}
        if {{name}} is not None and {{name}} not in allowed_values:
            raise GeneratedClassesError(
                "Invalid enum value {0} for '{{name}}', must be one of [{1}]"
                " if defined.".format({{name}}, ', '.join(allowed_values)))
        {{/isContainer}}
        {{/required}}
        {{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', length was {} but must be less"
                " than or equal to {{maxLength}}.".format(len({{name}})))
        {{/maxLength}}
        {{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', length was {} but must be"
                " greater than or equal to {{minLength}}.".format(len({{name}})))
        {{/minLength}}
        {{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', value was {} but must be less"
                " than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.".format({{name}}))
        {{/maximum}}
        {{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', value was {} but must be greater"
                " than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.".format({{name}}))
        {{/minimum}}
        {{#pattern}}
        if ({{name}} is not None
                and not re.search('{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}})):
            raise GeneratedClassesError(
                "Invalid value for '{{name}}', was '{}' but must follow the"
                " pattern '{{{vendorExtensions.x-regex}}}'.".format({{name}}))
        {{/pattern}}
        {{#maxItems}}
            if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise GeneratedClassesError(
            "Invalid size for '{{name}}', number of items was {} but must"
            " be less than or equal to '{{maxItems}}'.".format(len({{name}})))
        {{/maxItems}}
        {{#minItems}}
            if {{name}} is not None and len({{name}}) < {{minItems}}:
            raise GeneratedClassesError(
            "Invalid size for '{{name}}', number of items was {} but must"
            " be greater than or equal to '{{minItems}}'.".format(len({{name}})))
        {{/minItems}}
        {{/hasValidation}}
        self._{{name}} = {{name}}{{^-last}}

        {{/-last}}
        {{/vars}}
{{/model}}
{{/models}}

