{"version":3,"sources":["static/model/experimentsManager.ts","components/managementExp/expFunction.ts","components/managementExp/experimentConst.ts","components/managementExp/Header.tsx","components/managementExp/TrialIdColumn.tsx","components/managementExp/FilterBtns.tsx","components/managementExp/ExperimentManager.tsx","components/overview/TitleContext.tsx","components/public-child/CopyButton.tsx","components/overview/Title.tsx"],"names":["ExperimentsManager","experimentList","platform","errorMessage","this","requestAxios","concat","MANAGER_IP","then","data","_step","platforms","Set","_iterator","_createForOfIteratorHelper","s","n","done","item","value","undefined","port","JSON","parse","add","err","e","f","_this","sort","a","b","startTime","Array","from","error","message","compareDate","date1","date2","getFullYear","getMonth","getDate","filterByStatusOrPlatform","val","type","filter","temp","isArray","length","includes","fillOptions","arr","list","map","push","key","text","getSortedSource","source","sortInfo","copyAndSort","field","isDescend","MAXSCREENCOLUMNWIDHT","MINSCREENCOLUMNWIDHT","Hearder","react_default","createElement","className","Stack","horizontal","StackItem","grow","styles","root","minWidth","display","verticalAlign","NNILOGO","horizontalAlign","tokens","stackTokens","stackStyle","react_router_dom","to","CommandBarButton","iconProps","RevToggleKey","TrialIdColumn","props","Object","classCallCheck","_super","call","_this$props","id","status","hostname","window","location","protocol","webuiPortal","react","href","target","rel","CopyButton","React","FilterBtns","selectedStatus","selectedPlatform","selectedStartDate","selectedEndDate","selectStatus","selectPlatform","getSelectedData","setSearchSource","Dropdown","label","selectedKeys","multiSelect","onChange","bind","placeholder","options","EXPERIMENTSTATUS","selectedKey","DatePicker","firstDayOfWeek","DayOfWeek","Sunday","showMonthPickerAsOverlay","ariaLabel","onSelectDate","DefaultButton","onClick","Icon","iconName","Experiment","onColumnClick","_ev","getColumn","_this$state","state","columns","newColumns","slice","currColumn","forEach","newCol","isSortedDescending","isSorted","newItems","fieldName","setState","name","maxWidth","isResizable","onRender","experimentName","managementExp_TrialIdColumn","expformatTimestamp","endTime","commonSelectString","_this$state2","toConsumableArray","Date","_event","_this$state3","searchSource","newSelectedStatus","selected","result","_this$state4","hideFilter","searchInputVal","originExperimentList","EXPERIMENTMANAGER","init","getExperimentList","getPlatformList","getExpErrorMessage","_this$state5","style","minHeight","innerHeight","Header_Hearder","MessageInfo","info","typeInfo","TitleContext","Provider","icon","Title","SearchBox","onEscape","setOriginSource","onClear","searchNameAndId","clickFilter","gap","managementExp_FilterBtns","DetailsList","items","setKey","compact","selectionMode","_e","sortedData","newValue","_this$state6","searchInput","trim","toLowerCase","sortedResult","date","_this$state7","hasPlatform","_this$state8","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1__","copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1___default","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","_fluentui_react__WEBPACK_IMPORTED_MODULE_4__","_static_const__WEBPACK_IMPORTED_MODULE_5__","_ref","hideTooltip","ref","useRef","fontSize","FontSizes","small","event","stopPropagation","copy","current","show","setTimeout","dismiss","onMouseDown","onMouseUp","hidden","content","componentRef","delay","tooltipProps","calloutProps","beak","background","TOOLTIP_BACKGROUND_COLOR","beakCurtain","calloutMain","_fluentui_react__WEBPACK_IMPORTED_MODULE_1__","_TitleContext__WEBPACK_IMPORTED_MODULE_4__","initializeIcons","Consumer"],"mappings":"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","file":"static/js/8.9ca8957d.chunk.js","sourcesContent":["import { MANAGER_IP } from '../const';\nimport { AllExperimentList } from '../interface';\nimport { requestAxios } from '../function';\n\nclass ExperimentsManager {\n    private experimentList: AllExperimentList[] = [];\n    private platform: string[] = [];\n    private errorMessage: string = '';\n\n    public getExperimentList(): AllExperimentList[] {\n        return this.experimentList;\n    }\n\n    public getPlatformList(): string[] {\n        return this.platform;\n    }\n\n    public getExpErrorMessage(): string {\n        return this.errorMessage;\n    }\n\n    public async init(): Promise<void> {\n        await requestAxios(`${MANAGER_IP}/experiments-info`)\n            .then(data => {\n                const platforms: Set<string> = new Set();\n                for (const item of data) {\n                    if (item.port !== undefined) {\n                        if (typeof item.port === 'string') {\n                            item.port = JSON.parse(item.port);\n                        }\n                    }\n                    platforms.add(item.platform);\n                }\n                // this.experimentList = data.reverse();\n                this.experimentList = data.sort((a, b) => b.startTime - a.startTime);\n                this.platform = Array.from(platforms);\n            })\n            .catch(error => {\n                this.errorMessage = error.message;\n            });\n    }\n}\n\nexport { ExperimentsManager };\n","import { AllExperimentList, SortInfo } from '../../static/interface';\nimport { copyAndSort } from '../../static/function';\n\nfunction compareDate(date1: Date, date2: Date): boolean {\n    if (date1 !== undefined && date2 !== undefined) {\n        if (date1.getFullYear() === date2.getFullYear()) {\n            if (date1.getMonth() === date2.getMonth()) {\n                if (date1.getDate() === date2.getDate()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nconst filterByStatusOrPlatform = (\n    val: string | string[],\n    type: string,\n    data: AllExperimentList[]\n): AllExperimentList[] => {\n    if (typeof val === 'string' && val !== '') {\n        return data.filter(temp => temp[type] === val);\n    }\n\n    if (Array.isArray(val) && val.length !== 0) {\n        return data.filter(temp => val.includes(temp[type]));\n    }\n\n    return data;\n};\n\nfunction fillOptions(arr: string[]): any {\n    const list: Array<object> = [];\n\n    arr.map(item => {\n        list.push({ key: item, text: item });\n    });\n\n    return list;\n}\n\nfunction getSortedSource(source: AllExperimentList[], sortInfo: SortInfo): AllExperimentList[] {\n    const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n    return keepSortedSource;\n}\n\nexport { compareDate, filterByStatusOrPlatform, fillOptions, getSortedSource };\n","const MAXSCREENCOLUMNWIDHT = 180;\nconst MINSCREENCOLUMNWIDHT = 139;\n\nexport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT };\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Stack, StackItem, CommandBarButton } from '@fluentui/react';\r\nimport { RevToggleKey } from '../buttons/Icon';\r\nimport { NNILOGO } from '../stateless-component/NNItabs';\r\nimport { stackTokens, stackStyle } from '../NavConst';\r\n\r\nexport const Hearder = (): any => (\r\n    <div className='header'>\r\n        <div className='headerCon'>\r\n            <Stack className='nav' horizontal>\r\n                <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\r\n                    <span className='desktop-logo'>{NNILOGO}</span>\r\n                    <span className='logoTitle'>Neural Network Intelligence</span>\r\n                </StackItem>\r\n                <StackItem grow={70} className='navOptions'>\r\n                    <Stack horizontal horizontalAlign='end' tokens={stackTokens} styles={stackStyle}>\r\n                        <Link to='/oview' className='experiment'>\r\n                            <CommandBarButton iconProps={RevToggleKey} text='Back to the experiment' />\r\n                        </Link>\r\n                    </Stack>\r\n                </StackItem>\r\n            </Stack>\r\n        </div>\r\n    </div>\r\n);\r\n","import * as React from 'react';\r\nimport { Stack } from '@fluentui/react';\r\nimport CopyButton from '../public-child/CopyButton';\r\n\r\ninterface TrialIdColumnProps {\r\n    port: number;\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\nclass TrialIdColumn extends React.Component<TrialIdColumnProps, {}> {\r\n    constructor(props: TrialIdColumnProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const { port, id, status } = this.props;\r\n        const hostname = window.location.hostname;\r\n        const protocol = window.location.protocol;\r\n        const webuiPortal = `${protocol}//${hostname}:${port}/oview`;\r\n        return (\r\n            <Stack horizontal className='ellipsis idCopy'>\r\n                {status === 'STOPPED' ? (\r\n                    <div className='idColor'>{id}</div>\r\n                ) : (\r\n                    <a\r\n                        href={webuiPortal}\r\n                        className='link toAnotherExp idColor'\r\n                        target='_blank'\r\n                        rel='noopener noreferrer'\r\n                    >\r\n                        {id}\r\n                    </a>\r\n                )}\r\n                <CopyButton value={id} />\r\n            </Stack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrialIdColumn;\r\n","import * as React from 'react';\r\nimport { DefaultButton, Icon, Dropdown, DatePicker, DayOfWeek } from '@fluentui/react';\r\nimport { EXPERIMENTSTATUS } from '../../static/const';\r\nimport { fillOptions } from './expFunction';\r\n\r\ninterface FilterBtnsProps {\r\n    platform: string[];\r\n    selectedStatus: string[];\r\n    selectedPlatform: string;\r\n    selectedStartDate: Date;\r\n    selectedEndDate: Date;\r\n    selectStatus: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    selectPlatform: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    getSelectedData: (type: string, date: Date | null | undefined) => void;\r\n    setSearchSource: () => void;\r\n}\r\n\r\nclass FilterBtns extends React.Component<FilterBtnsProps, {}> {\r\n    constructor(props: FilterBtnsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            selectedStatus,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            selectStatus,\r\n            selectPlatform,\r\n            getSelectedData,\r\n            setSearchSource\r\n        } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Dropdown\r\n                    label='Status'\r\n                    selectedKeys={selectedStatus}\r\n                    multiSelect\r\n                    onChange={selectStatus.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(EXPERIMENTSTATUS)}\r\n                    className='filter-condition-status'\r\n                />\r\n                <Dropdown\r\n                    label='Platform'\r\n                    selectedKey={selectedPlatform}\r\n                    onChange={selectPlatform.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(platform)}\r\n                    className='filter-condition-platform'\r\n                />\r\n                <DatePicker\r\n                    label='Start time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedStartDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'start')}\r\n                />\r\n                <DatePicker\r\n                    label='End time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedEndDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'end')}\r\n                />\r\n                <DefaultButton onClick={setSearchSource.bind(this)} className='reset'>\r\n                    <Icon iconName='Refresh' />\r\n                    <span className='margin'>Reset</span>\r\n                </DefaultButton>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterBtns;\r\n","import * as React from 'react';\r\nimport { Stack, DetailsList, DefaultButton, Icon, SearchBox, IColumn } from '@fluentui/react';\r\nimport { ExperimentsManager } from '../../static/model/experimentsManager';\r\nimport { expformatTimestamp, copyAndSort } from '../../static/function';\r\nimport { AllExperimentList, SortInfo } from '../../static/interface';\r\nimport MessageInfo from '../modals/MessageInfo';\r\nimport { compareDate, filterByStatusOrPlatform, getSortedSource } from './expFunction';\r\nimport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT } from './experimentConst';\r\nimport { Hearder } from './Header';\r\nimport NameColumn from './TrialIdColumn';\r\nimport FilterBtns from './FilterBtns';\r\nimport { TitleContext } from '../overview/TitleContext';\r\nimport { Title } from '../overview/Title';\r\nimport '../../App.scss';\r\nimport '../../static/style/common.scss';\r\nimport '../../static/style/nav/nav.scss';\r\nimport '../../static/style/experiment/experiment.scss';\r\nimport '../../static/style/overview/probar.scss';\r\nimport '../../static/style/tableStatus.css';\r\n\r\ninterface ExpListState {\r\n    columns: IColumn[];\r\n    platform: string[];\r\n    errorMessage: string;\r\n    hideFilter: boolean;\r\n    searchInputVal: string;\r\n    selectedStatus: string[];\r\n    selectedPlatform: string;\r\n    selectedStartDate?: Date;\r\n    selectedEndDate?: Date;\r\n    sortInfo: SortInfo;\r\n    source: AllExperimentList[];\r\n    originExperimentList: AllExperimentList[];\r\n    searchSource: AllExperimentList[];\r\n}\r\n\r\nclass Experiment extends React.Component<{}, ExpListState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            platform: [],\r\n            columns: this.columns,\r\n            errorMessage: '',\r\n            hideFilter: true,\r\n            searchInputVal: '',\r\n            selectedStatus: [],\r\n            selectedPlatform: '',\r\n            source: [], // data in table\r\n            originExperimentList: [], // api /experiments-info\r\n            searchSource: [], // search box search result\r\n            sortInfo: { field: '', isDescend: false }\r\n        };\r\n    }\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const EXPERIMENTMANAGER = new ExperimentsManager();\r\n        await EXPERIMENTMANAGER.init();\r\n        const result = EXPERIMENTMANAGER.getExperimentList();\r\n        this.setState(() => ({\r\n            source: result,\r\n            originExperimentList: result,\r\n            searchSource: result,\r\n            platform: EXPERIMENTMANAGER.getPlatformList(),\r\n            errorMessage: EXPERIMENTMANAGER.getExpErrorMessage()\r\n        }));\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            hideFilter,\r\n            selectedStatus,\r\n            source,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            errorMessage\r\n        } = this.state;\r\n        return (\r\n            <Stack className='nni' style={{ minHeight: window.innerHeight }}>\r\n                <Hearder />\r\n                {errorMessage !== undefined ? (\r\n                    <div className='warning'>\r\n                        <MessageInfo info={errorMessage} typeInfo='error' />\r\n                    </div>\r\n                ) : null}\r\n                <Stack className='contentBox expBackground'>\r\n                    {/* 56px: navBarHeight; 48: marginTop & Bottom */}\r\n                    <Stack className='content' styles={{ root: { minHeight: window.innerHeight - 104 } }}>\r\n                        <Stack className='experimentList'>\r\n                            <TitleContext.Provider value={{ text: 'All experiments', icon: 'CustomList' }}>\r\n                                <Title />\r\n                            </TitleContext.Provider>\r\n                            <Stack className='box' horizontal>\r\n                                <div className='search'>\r\n                                    <SearchBox\r\n                                        className='search-input'\r\n                                        placeholder='Search the experiment by name or ID'\r\n                                        onEscape={this.setOriginSource.bind(this)}\r\n                                        onClear={this.setOriginSource.bind(this)}\r\n                                        onChange={this.searchNameAndId.bind(this)}\r\n                                    />\r\n                                </div>\r\n                                <div className='filter'>\r\n                                    <DefaultButton\r\n                                        onClick={this.clickFilter.bind(this)}\r\n                                        className={`${!hideFilter ? 'filter-button-open' : null}`}\r\n                                    >\r\n                                        <Icon iconName='Equalizer' />\r\n                                        <span className='margin'>Filter</span>\r\n                                    </DefaultButton>\r\n                                </div>\r\n                            </Stack>\r\n                            <Stack className={`${hideFilter ? 'hidden' : ''} filter-condition`} horizontal gap={25}>\r\n                                <FilterBtns\r\n                                    platform={platform}\r\n                                    selectedStatus={selectedStatus}\r\n                                    selectedPlatform={selectedPlatform}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedStartDate={selectedStartDate!}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedEndDate={selectedEndDate!}\r\n                                    selectStatus={this.selectStatus.bind(this)}\r\n                                    selectPlatform={this.selectPlatform.bind(this)}\r\n                                    getSelectedData={this.getSelectedData.bind(this)}\r\n                                    setSearchSource={this.setSearchSource.bind(this)}\r\n                                />\r\n                            </Stack>\r\n                            <DetailsList\r\n                                columns={this.columns}\r\n                                items={source}\r\n                                setKey='set'\r\n                                compact={true}\r\n                                selectionMode={0} // close selector function\r\n                                className='table'\r\n                            />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\r\n        const { columns, source } = this.state;\r\n        const newColumns: IColumn[] = columns.slice();\r\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\r\n        newColumns.forEach((newCol: IColumn) => {\r\n            if (newCol === currColumn) {\r\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\r\n                currColumn.isSorted = true;\r\n            } else {\r\n                newCol.isSorted = false;\r\n                newCol.isSortedDescending = true;\r\n            }\r\n        });\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\r\n        this.setState(() => ({\r\n            columns: newColumns,\r\n            source: newItems,\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\r\n        }));\r\n    };\r\n\r\n    private columns: IColumn[] = [\r\n        {\r\n            name: 'Name',\r\n            key: 'experimentName',\r\n            fieldName: 'experimentName', // required!\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{item.experimentName}</div>\r\n        },\r\n        {\r\n            name: 'ID',\r\n            key: 'id',\r\n            fieldName: 'id',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            className: 'tableHead leftTitle',\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <NameColumn port={item.port} status={item.status} id={item.id} />\r\n        },\r\n        {\r\n            name: 'Status',\r\n            key: 'status',\r\n            fieldName: 'status',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className={`${item.status} commonStyle`}>{item.status}</div>\r\n        },\r\n        {\r\n            name: 'Port',\r\n            key: 'port',\r\n            fieldName: 'port',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => (\r\n                <div className={item.status === 'STOPPED' ? 'gray-port' : ''}>\r\n                    {item.port !== undefined ? item.port : '--'}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            name: 'Platform',\r\n            key: 'platform',\r\n            fieldName: 'platform',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className='commonStyle'>{item.platform}</div>\r\n        },\r\n        {\r\n            name: 'Start time',\r\n            key: 'startTime',\r\n            fieldName: 'startTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.startTime)}</div>\r\n        },\r\n        {\r\n            name: 'End time',\r\n            key: 'endTime',\r\n            fieldName: 'endTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.endTime)}</div>\r\n        }\r\n    ];\r\n\r\n    private clickFilter(_e: any): void {\r\n        const { hideFilter } = this.state;\r\n        if (!hideFilter === true) {\r\n            this.setSearchSource();\r\n        }\r\n        this.setState(() => ({ hideFilter: !hideFilter }));\r\n    }\r\n\r\n    private setOriginSource(): void {\r\n        let { originExperimentList } = this.state;\r\n        const { sortInfo } = this.state;\r\n        if (originExperimentList !== undefined) {\r\n            originExperimentList = this.commonSelectString(originExperimentList, '');\r\n            const sortedData = getSortedSource(originExperimentList, sortInfo);\r\n            this.setState(() => ({\r\n                source: sortedData\r\n            }));\r\n        }\r\n    }\r\n\r\n    private searchNameAndId(_event, newValue): void {\r\n        const { originExperimentList, sortInfo } = this.state;\r\n        if (newValue !== undefined) {\r\n            if (newValue === '') {\r\n                this.setOriginSource();\r\n            } else {\r\n                const searchInput = newValue.trim();\r\n                let result = originExperimentList.filter(\r\n                    item =>\r\n                        item.experimentName.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                        item.id.toLowerCase().includes(searchInput.toLowerCase())\r\n                );\r\n                result = this.commonSelectString(result, '');\r\n                const sortedResult = getSortedSource(result, sortInfo);\r\n                this.setState(() => ({\r\n                    source: sortedResult,\r\n                    searchSource: sortedResult\r\n                }));\r\n            }\r\n            this.setState(() => ({\r\n                searchInputVal: newValue.trim()\r\n            }));\r\n        }\r\n    }\r\n\r\n    /***\r\n     * status, platform\r\n     * param\r\n     * data: searchSource\r\n     * field: no care selected filed\r\n     */\r\n    private commonSelectString = (data: AllExperimentList[], field: string): AllExperimentList[] => {\r\n        const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate } = this.state;\r\n\r\n        if (field === 'status') {\r\n            data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\r\n        }\r\n        if (field === 'platform') {\r\n            data = filterByStatusOrPlatform(selectedStatus, 'status', data);\r\n        }\r\n\r\n        if (field === '') {\r\n            data = Array.from(\r\n                new Set([\r\n                    ...filterByStatusOrPlatform(selectedPlatform, 'platform', data),\r\n                    ...filterByStatusOrPlatform(selectedStatus, 'status', data)\r\n                ])\r\n            );\r\n        }\r\n\r\n        data = data.filter(\r\n            item =>\r\n                (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate)) &&\r\n                (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\r\n        );\r\n\r\n        return data;\r\n    };\r\n\r\n    // status platform startTime endTime\r\n    private selectStatus = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo, selectedStatus } = this.state;\r\n            const newSelectedStatus = item.selected\r\n                ? [...selectedStatus, item.key as string]\r\n                : selectedStatus.filter(key => key !== item.key);\r\n            let result = filterByStatusOrPlatform(newSelectedStatus, 'status', searchSource);\r\n            result = this.commonSelectString(result, 'status');\r\n            this.setState({\r\n                selectedStatus: newSelectedStatus,\r\n                source: getSortedSource(result, sortInfo)\r\n            });\r\n        }\r\n    };\r\n\r\n    private selectPlatform = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo } = this.state;\r\n            let result = filterByStatusOrPlatform(item.key, 'platform', searchSource);\r\n            result = this.commonSelectString(result, 'platform');\r\n            this.setState({ selectedPlatform: item.key, source: getSortedSource(result, sortInfo) });\r\n        }\r\n    };\r\n\r\n    private getSelectedData(type: string, date: Date | null | undefined): void {\r\n        if (date !== null && date !== undefined) {\r\n            const {\r\n                selectedStatus,\r\n                selectedPlatform,\r\n                selectedStartDate,\r\n                selectedEndDate,\r\n                searchSource,\r\n                sortInfo\r\n            } = this.state;\r\n            const hasPlatform = selectedPlatform === '' ? false : true;\r\n\r\n            // filter status, platform\r\n            let result = filterByStatusOrPlatform(selectedStatus, 'status', searchSource);\r\n            if (hasPlatform) {\r\n                result = result.filter(temp => temp.platform === selectedPlatform);\r\n            }\r\n\r\n            if (type === 'start') {\r\n                result = result.filter(\r\n                    item =>\r\n                        compareDate(new Date(item.startTime), date) &&\r\n                        (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\r\n                );\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedStartDate: date\r\n                }));\r\n            } else {\r\n                result = result.filter(\r\n                    item =>\r\n                        compareDate(new Date(item.endTime), date) &&\r\n                        (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate))\r\n                );\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedEndDate: date\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset\r\n    private setSearchSource(): void {\r\n        const { sortInfo, originExperimentList } = this.state;\r\n        let { searchInputVal } = this.state;\r\n        searchInputVal = searchInputVal.trim();\r\n        // hert re-search data for fix this status: filter first -> searchBox search result null -> close filter\r\n        const result = originExperimentList.filter(\r\n            item =>\r\n                item.experimentName.toLowerCase().includes(searchInputVal.toLowerCase()) ||\r\n                item.id.toLowerCase().includes(searchInputVal.toLowerCase())\r\n        );\r\n        this.setState(() => ({\r\n            source: getSortedSource(result, sortInfo),\r\n            selectedStatus: [],\r\n            selectedPlatform: '',\r\n            selectedStartDate: undefined,\r\n            selectedEndDate: undefined\r\n        }));\r\n    }\r\n}\r\n\r\nexport default Experiment;\r\n","import * as React from 'react';\r\n\r\nexport const TitleContext = React.createContext({\r\n    text: '',\r\n    icon: ''\r\n});\r\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport copy from 'copy-to-clipboard';\r\nimport { IconButton, FontSizes, TooltipHost } from '@fluentui/react';\r\nimport { TOOLTIP_BACKGROUND_COLOR } from '../../static/const';\r\n\r\nconst COPIED_TOOLTIP_CLOSE_DELAY = 1000;\r\n\r\nconst CopyButton = ({ value, hideTooltip }): any => {\r\n    const ref = useRef(null);\r\n    return (\r\n        <div>\r\n            <IconButton\r\n                iconProps={{ iconName: 'Copy' }}\r\n                styles={{ icon: [{ fontSize: FontSizes.small }] }}\r\n                onClick={(event: React.SyntheticEvent<EventTarget>): void => {\r\n                    event.stopPropagation();\r\n                    copy(value);\r\n                    ref.current && (ref as any).current.show();\r\n                    setTimeout(() => {\r\n                        ref.current !== null && (ref as any).current.dismiss();\r\n                    }, COPIED_TOOLTIP_CLOSE_DELAY);\r\n                }}\r\n                onMouseDown={(e): void => {\r\n                    e.stopPropagation();\r\n                }}\r\n                onMouseUp={(e): void => {\r\n                    e.stopPropagation();\r\n                }}\r\n            />\r\n            <TooltipHost\r\n                hidden={hideTooltip}\r\n                content='Copied'\r\n                componentRef={ref}\r\n                delay={0}\r\n                tooltipProps={{\r\n                    calloutProps: {\r\n                        styles: {\r\n                            beak: { background: TOOLTIP_BACKGROUND_COLOR },\r\n                            beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\r\n                            calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nCopyButton.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    hideTooltip: PropTypes.bool\r\n};\r\n\r\nexport default CopyButton;\r\n","import React from 'react';\r\nimport { Stack, Icon, initializeIcons } from '@fluentui/react';\r\nimport { TitleContext } from './TitleContext';\r\nimport '../../static/style/overview/overviewTitle.scss';\r\ninitializeIcons();\r\n\r\nexport const Title = (): any => (\r\n    <TitleContext.Consumer>\r\n        {(value): React.ReactNode => (\r\n            <Stack horizontal className='panelTitle'>\r\n                <Icon iconName={value.icon} />\r\n                <span>{value.text}</span>\r\n            </Stack>\r\n        )}\r\n    </TitleContext.Consumer>\r\n);\r\n"],"sourceRoot":""}