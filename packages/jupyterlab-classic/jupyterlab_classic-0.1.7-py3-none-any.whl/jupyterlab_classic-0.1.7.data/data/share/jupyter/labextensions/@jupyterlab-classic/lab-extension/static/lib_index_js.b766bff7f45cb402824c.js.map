{"version":3,"sources":["webpack://@jupyterlab-classic/lab-extension/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACoD;AACkB;AACnB;AACF;AACO;AACA;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,kBAAkB,kEAAW;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,iEAAe,EAAE,2DAAS,EAAE,8DAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC,+BAA+B,QAAQ,oBAAoB,aAAa;AACxE,aAAa;AACb;AACA,SAAS;AACT;AACA,6BAA6B,qDAAqD;AAClF;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","file":"lib_index_js.b766bff7f45cb402824c.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell } from '@jupyterlab/application';\nimport { ICommandPalette, ToolbarButton } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { jupyterIcon } from '@jupyterlab/ui-components';\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Toggle Top Bar visibility\n     */\n    CommandIDs.openClassic = 'jupyterlab-classic:open';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A notebook widget extension that adds a jupyterlab classic button to the toolbar.\n */\nclass ClassicButton {\n    /**\n     * Instantiate a new ClassicButton.\n     * @param commands The command registry.\n     */\n    constructor(commands) {\n        this._commands = commands;\n    }\n    /**\n     * Create a new extension object.\n     */\n    createNew(panel) {\n        const button = new ToolbarButton({\n            tooltip: 'Open with JupyterLab Classic',\n            icon: jupyterIcon,\n            onClick: () => {\n                this._commands.execute(CommandIDs.openClassic);\n            }\n        });\n        panel.toolbar.insertAfter('cellType', 'jupyterlabClassic', button);\n        return button;\n    }\n}\n/**\n * A plugin for the checkpoint indicator\n */\nconst openClassic = {\n    id: '@jupyterlab-classic/lab-extension:open-classic',\n    autoStart: true,\n    optional: [INotebookTracker, ICommandPalette, IMainMenu, ILabShell],\n    activate: (app, notebookTracker, palette, menu, labShell) => {\n        // TODO: do not activate if already in a IClassicShell?\n        if (!notebookTracker || !labShell) {\n            // to prevent showing the toolbar button in JupyterLab Classic\n            return;\n        }\n        const { commands, docRegistry, shell } = app;\n        const baseUrl = PageConfig.getBaseUrl();\n        const isEnabled = () => {\n            return (notebookTracker.currentWidget !== null &&\n                notebookTracker.currentWidget === shell.currentWidget);\n        };\n        commands.addCommand(CommandIDs.openClassic, {\n            label: 'Open in JupyterLab Classic',\n            execute: () => {\n                const current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                const { context } = current;\n                window.open(`${baseUrl}classic/notebooks/${context.path}`);\n            },\n            isEnabled\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.openClassic, category: 'Other' });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.openClassic }], 1);\n        }\n        const classicButton = new ClassicButton(commands);\n        docRegistry.addWidgetExtension('Notebook', classicButton);\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [openClassic];\nexport default plugins;\n"],"sourceRoot":""}