{"version":3,"sources":["webpack://jupyterlab-gpulab/./lib/handler.js","webpack://jupyterlab-gpulab/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzB+D;AACZ;AACF;AACV;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,eAAe,iEAAe;AAC9B;AACA;AACA;AACA;AACA,+BAA+B,oDAAU;AACzC;AACA;AACA;AACA,qEAAqE,OAAO;AAC5E;AACA;AACA,4BAA4B;AAC5B;AACA,gCAAgC,oDAAU;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oEAAoE,WAAW,KAAK,OAAO;AAC3F;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iEAAe,SAAS,EAAC;AACzB,2BAA2B,wDAAM;AACjC;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA","file":"lib_index_js.b001230fb4bf4d6a3f4c.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-gpulab', endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n","import { ICommandPalette, IFrame } from \"@jupyterlab/apputils\";\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { requestAPI } from './handler';\n/**\n * The command IDs used by the server extension plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.get = 'server:get-file';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for jupyterlab-gpulab server extension.\n */\nconst extension = {\n    id: 'jupyterlab-gpulab',\n    autoStart: true,\n    optional: [ILauncher],\n    requires: [ICommandPalette],\n    activate: async (app, palette, launcher) => {\n        console.log('JupyterLab extension server-extension-example is activated!');\n        // GET request\n        try {\n            const data = await requestAPI('hello');\n            console.log(data);\n        }\n        catch (reason) {\n            console.error(`Error on GET /jupyterlab-gpulab/hello.\\n${reason}`);\n        }\n        // POST request\n        const dataToSend = { name: 'George' };\n        try {\n            const reply = await requestAPI('hello', {\n                body: JSON.stringify(dataToSend),\n                method: 'POST'\n            });\n            console.log(reply);\n        }\n        catch (reason) {\n            console.error(`Error on POST /jupyterlab-gpulab/hello ${dataToSend}.\\n${reason}`);\n        }\n        const { commands, shell } = app;\n        const command = CommandIDs.get;\n        const category = 'GPULab';\n        commands.addCommand(command, {\n            label: 'Get Server Content in a IFrame Widget',\n            caption: 'Get Server Content in a IFrame Widget',\n            execute: () => {\n                const widget = new IFrameWidget();\n                shell.add(widget, 'main');\n            }\n        });\n        palette.addItem({ command, category: category });\n        if (launcher) {\n            // Add launcher\n            launcher.add({\n                command: command,\n                category: category\n            });\n        }\n    }\n};\nexport default extension;\nclass IFrameWidget extends IFrame {\n    constructor() {\n        super();\n        const baseUrl = PageConfig.getBaseUrl();\n        this.url = baseUrl + 'jupyterlab-gpulab/public/index.html';\n        this.id = 'doc-example';\n        this.title.label = 'Server Doc';\n        this.title.closable = true;\n        this.node.style.overflowY = 'auto';\n    }\n}\n"],"sourceRoot":""}