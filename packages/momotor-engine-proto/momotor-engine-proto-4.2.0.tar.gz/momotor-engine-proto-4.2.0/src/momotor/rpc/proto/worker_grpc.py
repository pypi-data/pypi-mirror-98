# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: momotor/rpc/proto/worker.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import momotor.rpc.proto.asset_pb2
import momotor.rpc.proto.exception_pb2
import momotor.rpc.proto.shared_pb2
import momotor.rpc.proto.task_pb2
import momotor.rpc.proto.worker_pb2


class WorkerBase(abc.ABC):

    @abc.abstractmethod
    async def getTask(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.task_pb2.GetTaskRequest, momotor.rpc.proto.task_pb2.GetTaskResponse]') -> None:
        pass

    @abc.abstractmethod
    async def downloadAsset(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.asset_pb2.DownloadAssetRequest, momotor.rpc.proto.asset_pb2.DownloadAssetResponse]') -> None:
        pass

    @abc.abstractmethod
    async def uploadAsset(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.asset_pb2.UploadAssetRequest, momotor.rpc.proto.asset_pb2.UploadAssetResponse]') -> None:
        pass

    @abc.abstractmethod
    async def updateTaskStatus(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.worker_pb2.UpdateTaskStatusRequest, momotor.rpc.proto.worker_pb2.UpdateTaskStatusResponse]') -> None:
        pass

    @abc.abstractmethod
    async def sharedLock(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.shared_pb2.SharedLockRequest, momotor.rpc.proto.shared_pb2.SharedLockResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/momotor.rpc.proto.Worker/getTask': grpclib.const.Handler(
                self.getTask,
                grpclib.const.Cardinality.UNARY_UNARY,
                momotor.rpc.proto.task_pb2.GetTaskRequest,
                momotor.rpc.proto.task_pb2.GetTaskResponse,
            ),
            '/momotor.rpc.proto.Worker/downloadAsset': grpclib.const.Handler(
                self.downloadAsset,
                grpclib.const.Cardinality.STREAM_STREAM,
                momotor.rpc.proto.asset_pb2.DownloadAssetRequest,
                momotor.rpc.proto.asset_pb2.DownloadAssetResponse,
            ),
            '/momotor.rpc.proto.Worker/uploadAsset': grpclib.const.Handler(
                self.uploadAsset,
                grpclib.const.Cardinality.STREAM_STREAM,
                momotor.rpc.proto.asset_pb2.UploadAssetRequest,
                momotor.rpc.proto.asset_pb2.UploadAssetResponse,
            ),
            '/momotor.rpc.proto.Worker/updateTaskStatus': grpclib.const.Handler(
                self.updateTaskStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                momotor.rpc.proto.worker_pb2.UpdateTaskStatusRequest,
                momotor.rpc.proto.worker_pb2.UpdateTaskStatusResponse,
            ),
            '/momotor.rpc.proto.Worker/sharedLock': grpclib.const.Handler(
                self.sharedLock,
                grpclib.const.Cardinality.STREAM_STREAM,
                momotor.rpc.proto.shared_pb2.SharedLockRequest,
                momotor.rpc.proto.shared_pb2.SharedLockResponse,
            ),
        }


class WorkerStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.getTask = grpclib.client.UnaryUnaryMethod(
            channel,
            '/momotor.rpc.proto.Worker/getTask',
            momotor.rpc.proto.task_pb2.GetTaskRequest,
            momotor.rpc.proto.task_pb2.GetTaskResponse,
        )
        self.downloadAsset = grpclib.client.StreamStreamMethod(
            channel,
            '/momotor.rpc.proto.Worker/downloadAsset',
            momotor.rpc.proto.asset_pb2.DownloadAssetRequest,
            momotor.rpc.proto.asset_pb2.DownloadAssetResponse,
        )
        self.uploadAsset = grpclib.client.StreamStreamMethod(
            channel,
            '/momotor.rpc.proto.Worker/uploadAsset',
            momotor.rpc.proto.asset_pb2.UploadAssetRequest,
            momotor.rpc.proto.asset_pb2.UploadAssetResponse,
        )
        self.updateTaskStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/momotor.rpc.proto.Worker/updateTaskStatus',
            momotor.rpc.proto.worker_pb2.UpdateTaskStatusRequest,
            momotor.rpc.proto.worker_pb2.UpdateTaskStatusResponse,
        )
        self.sharedLock = grpclib.client.StreamStreamMethod(
            channel,
            '/momotor.rpc.proto.Worker/sharedLock',
            momotor.rpc.proto.shared_pb2.SharedLockRequest,
            momotor.rpc.proto.shared_pb2.SharedLockResponse,
        )
