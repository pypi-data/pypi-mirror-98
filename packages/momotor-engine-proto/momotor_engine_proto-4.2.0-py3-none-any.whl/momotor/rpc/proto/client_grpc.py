# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: momotor/rpc/proto/client.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.empty_pb2
import momotor.rpc.proto.asset_pb2
import momotor.rpc.proto.job_pb2
import momotor.rpc.proto.client_pb2


class ClientBase(abc.ABC):

    @abc.abstractmethod
    async def createJob(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.job_pb2.CreateJobRequest, momotor.rpc.proto.job_pb2.CreateJobResponse]') -> None:
        pass

    @abc.abstractmethod
    async def uploadAsset(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.asset_pb2.UploadAssetRequest, momotor.rpc.proto.asset_pb2.UploadAssetResponse]') -> None:
        pass

    @abc.abstractmethod
    async def startJob(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.job_pb2.StartJobRequest, momotor.rpc.proto.job_pb2.StartJobResponse]') -> None:
        pass

    @abc.abstractmethod
    async def jobStatus(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.job_pb2.JobStatusRequest, momotor.rpc.proto.job_pb2.JobStatusResponse]') -> None:
        pass

    @abc.abstractmethod
    async def downloadAsset(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.asset_pb2.DownloadAssetRequest, momotor.rpc.proto.asset_pb2.DownloadAssetResponse]') -> None:
        pass

    @abc.abstractmethod
    async def endJob(self, stream: 'grpclib.server.Stream[momotor.rpc.proto.job_pb2.EndJobRequest, momotor.rpc.proto.job_pb2.EndJobResponse]') -> None:
        pass

    @abc.abstractmethod
    async def multiJobStatusStream(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, momotor.rpc.proto.job_pb2.JobStatusStream]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/momotor.rpc.proto.Client/createJob': grpclib.const.Handler(
                self.createJob,
                grpclib.const.Cardinality.UNARY_UNARY,
                momotor.rpc.proto.job_pb2.CreateJobRequest,
                momotor.rpc.proto.job_pb2.CreateJobResponse,
            ),
            '/momotor.rpc.proto.Client/uploadAsset': grpclib.const.Handler(
                self.uploadAsset,
                grpclib.const.Cardinality.STREAM_STREAM,
                momotor.rpc.proto.asset_pb2.UploadAssetRequest,
                momotor.rpc.proto.asset_pb2.UploadAssetResponse,
            ),
            '/momotor.rpc.proto.Client/startJob': grpclib.const.Handler(
                self.startJob,
                grpclib.const.Cardinality.UNARY_UNARY,
                momotor.rpc.proto.job_pb2.StartJobRequest,
                momotor.rpc.proto.job_pb2.StartJobResponse,
            ),
            '/momotor.rpc.proto.Client/jobStatus': grpclib.const.Handler(
                self.jobStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                momotor.rpc.proto.job_pb2.JobStatusRequest,
                momotor.rpc.proto.job_pb2.JobStatusResponse,
            ),
            '/momotor.rpc.proto.Client/downloadAsset': grpclib.const.Handler(
                self.downloadAsset,
                grpclib.const.Cardinality.STREAM_STREAM,
                momotor.rpc.proto.asset_pb2.DownloadAssetRequest,
                momotor.rpc.proto.asset_pb2.DownloadAssetResponse,
            ),
            '/momotor.rpc.proto.Client/endJob': grpclib.const.Handler(
                self.endJob,
                grpclib.const.Cardinality.UNARY_UNARY,
                momotor.rpc.proto.job_pb2.EndJobRequest,
                momotor.rpc.proto.job_pb2.EndJobResponse,
            ),
            '/momotor.rpc.proto.Client/multiJobStatusStream': grpclib.const.Handler(
                self.multiJobStatusStream,
                grpclib.const.Cardinality.UNARY_STREAM,
                google.protobuf.empty_pb2.Empty,
                momotor.rpc.proto.job_pb2.JobStatusStream,
            ),
        }


class ClientStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.createJob = grpclib.client.UnaryUnaryMethod(
            channel,
            '/momotor.rpc.proto.Client/createJob',
            momotor.rpc.proto.job_pb2.CreateJobRequest,
            momotor.rpc.proto.job_pb2.CreateJobResponse,
        )
        self.uploadAsset = grpclib.client.StreamStreamMethod(
            channel,
            '/momotor.rpc.proto.Client/uploadAsset',
            momotor.rpc.proto.asset_pb2.UploadAssetRequest,
            momotor.rpc.proto.asset_pb2.UploadAssetResponse,
        )
        self.startJob = grpclib.client.UnaryUnaryMethod(
            channel,
            '/momotor.rpc.proto.Client/startJob',
            momotor.rpc.proto.job_pb2.StartJobRequest,
            momotor.rpc.proto.job_pb2.StartJobResponse,
        )
        self.jobStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/momotor.rpc.proto.Client/jobStatus',
            momotor.rpc.proto.job_pb2.JobStatusRequest,
            momotor.rpc.proto.job_pb2.JobStatusResponse,
        )
        self.downloadAsset = grpclib.client.StreamStreamMethod(
            channel,
            '/momotor.rpc.proto.Client/downloadAsset',
            momotor.rpc.proto.asset_pb2.DownloadAssetRequest,
            momotor.rpc.proto.asset_pb2.DownloadAssetResponse,
        )
        self.endJob = grpclib.client.UnaryUnaryMethod(
            channel,
            '/momotor.rpc.proto.Client/endJob',
            momotor.rpc.proto.job_pb2.EndJobRequest,
            momotor.rpc.proto.job_pb2.EndJobResponse,
        )
        self.multiJobStatusStream = grpclib.client.UnaryStreamMethod(
            channel,
            '/momotor.rpc.proto.Client/multiJobStatusStream',
            google.protobuf.empty_pb2.Empty,
            momotor.rpc.proto.job_pb2.JobStatusStream,
        )
