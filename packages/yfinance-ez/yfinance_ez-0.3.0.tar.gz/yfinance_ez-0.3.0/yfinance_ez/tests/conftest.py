import pytest
from unittest.mock import MagicMock
import json

@pytest.fixture
def ticker_symbol():
    return 'MSFT'


@pytest.fixture
def historical_data_resp():
    resp = MagicMock()
    resp.text = '{"chart":{"result":[{"meta":{"currency":"USD","symbol":"MSFT","exchangeName":"NMS","instrumentType":"EQUITY","firstTradeDate":511108200,"regularMarketTime":1591387201,"gmtoffset":-14400,"timezone":"EDT","exchangeTimezoneName":"America/New_York","regularMarketPrice":187.2,"chartPreviousClose":180.76,"priceHint":2,"currentTradingPeriod":{"pre":{"timezone":"EDT","start":1591344000,"end":1591363800,"gmtoffset":-14400},"regular":{"timezone":"EDT","start":1591363800,"end":1591387200,"gmtoffset":-14400},"post":{"timezone":"EDT","start":1591387200,"end":1591401600,"gmtoffset":-14400}},"dataGranularity":"1d","range":"1mo","validRanges":["1d","5d","1mo","3mo","6mo","1y","2y","5y","10y","ytd","max"]},"timestamp":[1588771800,1588858200,1588944600,1589203800,1589290200,1589376600,1589463000,1589549400,1589808600,1589895000,1589981400,1590067800,1590154200,1590499800,1590586200,1590672600,1590759000,1591018200,1591104600,1591191000,1591277400,1591363800],"events":{"dividends":{"1589981400":{"amount":0.51,"date":1589981400}}},"indicators":{"quote":[{"open":[182.0800018310547,184.1699981689453,184.97999572753906,183.14999389648438,186.8000030517578,182.5500030517578,177.5399932861328,179.05999755859375,185.75,185.02999877929688,184.80999755859375,185.39999389648438,183.19000244140625,186.33999633789062,180.1999969482422,180.74000549316406,182.72999572753906,182.5399932861328,184.25,184.82000732421875,184.3000030517578,182.6199951171875],"close":[182.5399932861328,183.60000610351562,184.67999267578125,186.74000549316406,182.50999450683594,179.75,180.52999877929688,183.16000366210938,184.91000366210938,183.6300048828125,185.66000366210938,183.42999267578125,183.50999450683594,181.57000732421875,181.80999755859375,181.39999389648438,183.25,182.8300018310547,184.91000366210938,185.36000061035156,182.9199981689453,187.1999969482422],"low":[181.6300048828125,182.5800018310547,183.36000061035156,182.85000610351562,182.3000030517578,176.5399932861328,175.67999267578125,177.0,183.9600067138672,183.49000549316406,183.94000244140625,183.2899932861328,182.5399932861328,181.10000610351562,176.60000610351562,180.3800048828125,180.41000366210938,181.4600067138672,181.35000610351562,183.5800018310547,182.3000030517578,182.00999450683594],"volume":[32139300,28316000,30912600,30892700,32038200,44711500,41873900,46610400,35306600,26799100,31261300,29119500,20826900,36073600,39517100,33810200,42146700,22622400,30794600,27311000,28761800,39874600],"high":[184.1999969482422,184.5500030517578,185.0,187.50999450683594,187.0399932861328,184.0500030517578,180.69000244140625,187.05999755859375,186.1999969482422,186.60000610351562,185.85000610351562,186.6699981689453,184.4600067138672,186.5,181.99000549316406,184.14999389648438,184.27000427246094,183.0,185.0,185.94000244140625,185.83999633789062,187.72999572753906]}],"adjclose":[{"adjclose":[182.03302001953125,183.090087890625,184.1670684814453,186.2213592529297,182.0030975341797,179.2507781982422,180.0286102294922,182.65130615234375,184.3964385986328,183.1199951171875,185.66000366210938,183.42999267578125,183.50999450683594,181.57000732421875,181.80999755859375,181.39999389648438,183.25,182.8300018310547,184.91000366210938,185.36000061035156,182.9199981689453,187.1999969482422]}]}}],"error":null}}'
    resp.json.return_value = json.loads(resp.text)

    return resp


@pytest.fixture
def yahoo_down_resp():
    resp = MagicMock()
    resp.text = 'Will be right back'

    return resp
