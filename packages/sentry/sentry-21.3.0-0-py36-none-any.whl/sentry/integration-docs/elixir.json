{
  "id": "elixir",
  "name": "Elixir",
  "html": "<h2 id=\"install\" style=\"position:relative;\">Install</h2>\n<p>Edit your mix.exs file to add it as a dependency and add the <code>:sentry</code> package to your applications:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir highlight\"><code class=\"language-elixir\"><span class=\"token keyword\">defp</span> deps <span class=\"token keyword\">do</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:sentry</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"~&gt; 8.0\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:jason</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"~&gt; 1.1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># if you are using plug_cowboy</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:plug_cowboy</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"~&gt; 2.3\"</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2 id=\"configure\" style=\"position:relative;\">Configure</h2>\n<p>Setup the application production environment in your <code>config/prod.exs</code></p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir highlight\"><code class=\"language-elixir\">config <span class=\"token atom symbol\">:sentry</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">dsn:</span> <span class=\"token string\">\"___PUBLIC_DSN___\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">environment_name:</span> <span class=\"token atom symbol\">:prod</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">enable_source_code_context:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">root_source_code_path:</span> File<span class=\"token punctuation\">.</span>cwd!<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">tags:</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">env:</span> <span class=\"token string\">\"production\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">included_environments:</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:prod</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>The <code>environment_name</code> and <code>included_environments</code> work together to determine if and when Sentry should record exceptions. The <code>environment_name</code> is the name of the current environment. In the example above, we have explicitly set the environment to <code>:prod</code> which works well if you are inside an environment specific configuration like <code>config/prod.exs</code>.</p>\n<p>An alternative is to use <code>Mix.env</code> in your general configuration file:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir highlight\"><code class=\"language-elixir\">config <span class=\"token atom symbol\">:sentry</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">dsn:</span> <span class=\"token string\">\"___PUBLIC_DSN___\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">included_environments:</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:prod</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">environment_name:</span> Mix<span class=\"token punctuation\">.</span>env</code></pre></div>\n<p>This will set the environment name to whatever the current Mix environment atom is, but it will only send events if the current environment is <code>:prod</code>, since that is the only entry in the <code>included_environments</code> key.</p>\n<p>You can even rely on more custom determinations of the environment name. It's not uncommon for most applications to have a \"staging\" environment. In order to handle this without adding an additional Mix environment, you can set an environment variable that determines the release level.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir highlight\"><code class=\"language-elixir\">config <span class=\"token atom symbol\">:sentry</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">dsn:</span> <span class=\"token string\">\"___PUBLIC_DSN___\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">included_environments:</span> <span class=\"token string\">~w(production staging)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">environment_name:</span> System<span class=\"token punctuation\">.</span>get_env<span class=\"token punctuation\">(</span><span class=\"token string\">\"RELEASE_LEVEL\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"development\"</span></code></pre></div>\n<p>In this example, we are getting the environment name from the <code>RELEASE_LEVEL</code> environment variable. If that variable does not exist, it will default to <code>\"development\"</code>. Now, on our servers, we can set the environment variable appropriately. On our local development machines, exceptions will never be sent, because the default value is not in the list of <code>included_environments</code>.</p>\n<p>If using an environment with Plug or Phoenix, add the following to <code>Plug.Router</code> or <code>Phoenix.Endpoint</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir highlight\"><code class=\"language-elixir\"><span class=\"token comment\"># Phoenix</span>\n<span class=\"token keyword\">use</span> Sentry<span class=\"token punctuation\">.</span>PlugCapture\n<span class=\"token keyword\">use</span> Phoenix<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">otp_app:</span> <span class=\"token atom symbol\">:my_app</span>\n<span class=\"token comment\"># ...</span>\nplug Plug<span class=\"token punctuation\">.</span>Parsers<span class=\"token punctuation\">,</span>\n <span class=\"token attr-name\">parsers:</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:urlencoded</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:multipart</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:json</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token attr-name\">pass:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token attr-name\">json_decoder:</span> Phoenix<span class=\"token punctuation\">.</span>json_library<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplug Sentry<span class=\"token punctuation\">.</span>PlugContext\n<span class=\"token comment\"># Plug</span>\n<span class=\"token keyword\">use</span> Plug<span class=\"token punctuation\">.</span>Router\n<span class=\"token keyword\">use</span> Sentry<span class=\"token punctuation\">.</span>PlugCapture\n<span class=\"token comment\"># ...</span>\nplug Plug<span class=\"token punctuation\">.</span>Parsers<span class=\"token punctuation\">,</span>\n <span class=\"token attr-name\">parsers:</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:urlencoded</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:multipart</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:json</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token attr-name\">pass:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token attr-name\">json_decoder:</span> Phoenix<span class=\"token punctuation\">.</span>json_library<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplug Sentry<span class=\"token punctuation\">.</span>PlugContext</code></pre></div>\n<p><code>Sentry.PlugContext</code> gathers the contextual information for errors, and <code>Sentry.PlugCapture</code> captures and sends any errors that occur in the Plug stack. <code>Sentry.PlugContext</code> should be below <code>Plug.Parsers</code> if you are using it.</p>\n<p>To capture crashed crashed process exceptions, add <code>Sentry.LoggerBackend</code> to your Logger backends:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text highlight\"><code class=\"language-text\">config :logger,\n  backends: [:console, Sentry.LoggerBackend]</code></pre></div>\n<h2 id=\"capturing-errors\" style=\"position:relative;\">Capturing Errors</h2>\n<p>If you use the LoggerBackend and set up the Plug/Phoenix integrations, all errors will bubble up to Sentry.</p>\n<p>Otherwise, we provide a simple way to capture exceptions manually:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir highlight\"><code class=\"language-elixir\"><span class=\"token keyword\">try</span> <span class=\"token keyword\">do</span>\n  ThisWillError<span class=\"token punctuation\">.</span>really<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">rescue</span>\n  my_exception <span class=\"token operator\">-&gt;</span>\n    Sentry<span class=\"token punctuation\">.</span>capture_exception<span class=\"token punctuation\">(</span>my_exception<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">stacktrace:</span> __STACKTRACE__<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">extra:</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">extra:</span> information<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>",
  "link": "https://docs.sentry.io/platforms/elixir/"
}
