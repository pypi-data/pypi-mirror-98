{"version":3,"sources":["webpack:///./app/views/organizationStats/performanceAlert.tsx","webpack:///./app/views/organizationStats/projectTableLayout.tsx","webpack:///./app/views/organizationStats/projectTable.tsx","webpack:///./app/views/organizationStats/organizationStatsDetails.tsx","webpack:///./app/views/organizationStats/index.tsx"],"names":["PerformanceAlert","message","features","type","icon","data-test-id","t","ProjectTableLayout","ProjectTableDataElement","space","overflowEllipsis","ProjectTable","projectMap","projectTotals","orgTotal","organization","getPercent","item","total","formatPercentage","elements","sort","a","b","received","map","index","project","id","projectLink","slug","StyledProjectTableLayout","key","StyledProjectTitle","to","value","accepted","Percentage","rejected","blacklisted","Fragment","p","theme","innerBorder","children","props","gray300","OrganizationStats","this","statsLoading","statsError","orgSeries","projectsLoading","projectsError","colors","series","color","withMargins","className","avgRate","withPadding","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","stacked","height","undefined","pageLinks","renderContent","React","Component","OrganizationStatsContainer","until","Math","floor","Date","getTime","since","state","projectsRequestsPending","statsRequestsPending","rawProjectData","rawOrgData","querySince","queryUntil","fetchData","nextProps","location","search","setState","prevProps","prevParams","params","currentParams","orgId","window","scrollTo","fetchProjectData","processOrgData","processProjectData","api","request","getOrganizationProjectsEndpoint","query","success","data","_textStatus","jqxhr","forEach","prevState","getResponseHeader","error","statEndpoint","getOrganizationStatsEndpoint","Object","keys","statName","resolution","stat","group","oReceived","oRejected","oBlacklisted","aReceived","orgAccepted","seriesName","gray200","orgRejected","red300","orgFiltered","orange400","point","idx","dReceived","dRejected","dFiltered","dAccepted","max","time","push","name","round","projectId","pReceived","pRejected","pBlacklisted","title","withApi","withOrganization"],"mappings":"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","file":"OrganizationStats.js","sourcesContent":["import React from 'react';\n\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport {IconInfo} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = {message?: React.ReactNode};\n\nconst PerformanceAlert = ({message}: Props) => (\n  <Feature features={['performance-view']}>\n    <Alert type=\"info\" icon={<IconInfo />} data-test-id=\"performance-usage\">\n      {message ||\n        t('Transactions, sessions, and attachments are not yet included in the chart.')}\n    </Alert>\n  </Feature>\n);\n\nexport default PerformanceAlert;\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\n\nexport const ProjectTableLayout = styled('div')`\n  display: grid;\n  grid-template-columns: auto 110px 120px 100px 100px;\n  width: 100%;\n`;\n\nexport const ProjectTableDataElement = styled('div')`\n  text-align: right;\n  padding: 0 ${space(0.5)};\n  ${overflowEllipsis};\n`;\n","import React from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Count from 'app/components/count';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {formatPercentage} from 'app/utils/formatters';\nimport {\n  ProjectTableDataElement,\n  ProjectTableLayout,\n} from 'app/views/organizationStats/projectTableLayout';\n\nimport {ProjectTotal} from './types';\n\ntype Props = {\n  organization: Organization;\n  projectMap: Record<string, Project>;\n  projectTotals: ProjectTotal[];\n  orgTotal: ProjectTotal & {avgRate: number};\n};\n\nconst ProjectTable = ({projectMap, projectTotals, orgTotal, organization}: Props) => {\n  const getPercent = (item: number, total: number): string => {\n    if (total === 0) {\n      return '';\n    }\n    return formatPercentage(item / total, 0);\n  };\n\n  if (!projectTotals) {\n    return null;\n  }\n\n  const elements = projectTotals\n    .sort((a, b) => b.received - a.received)\n    .map((item, index) => {\n      const project = projectMap[item.id];\n\n      if (!project) {\n        return null;\n      }\n\n      const projectLink = `/organizations/${organization.slug}/issues/?project=${project.id}`;\n\n      return (\n        <StyledProjectTableLayout key={index}>\n          <StyledProjectTitle>\n            <Link to={projectLink}>{project.slug}</Link>\n          </StyledProjectTitle>\n          <ProjectTableDataElement>\n            <Count value={item.accepted} />\n            <Percentage>{getPercent(item.accepted, orgTotal.accepted)}</Percentage>\n          </ProjectTableDataElement>\n          <ProjectTableDataElement>\n            <Count value={item.rejected} />\n            <Percentage>{getPercent(item.rejected, orgTotal.rejected)}</Percentage>\n          </ProjectTableDataElement>\n          <ProjectTableDataElement>\n            <Count value={item.blacklisted} />\n            <Percentage>{getPercent(item.blacklisted, orgTotal.blacklisted)}</Percentage>\n          </ProjectTableDataElement>\n          <ProjectTableDataElement>\n            <Count value={item.received} />\n            <Percentage>{getPercent(item.received, orgTotal.received)}</Percentage>\n          </ProjectTableDataElement>\n        </StyledProjectTableLayout>\n      );\n    });\n  return <React.Fragment>{elements}</React.Fragment>;\n};\n\nconst StyledProjectTitle = styled(ProjectTableDataElement)`\n  display: flex;\n  align-items: center;\n  text-align: left;\n`;\n\nconst StyledProjectTableLayout = styled(ProjectTableLayout)`\n  padding: ${space(2)};\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\ntype PercentageProps = React.HTMLProps<HTMLDivElement>;\n\nconst Percentage = styled(({children, ...props}: PercentageProps) => {\n  if (children === '') {\n    return null;\n  }\n  return <div {...props}>{children}</div>;\n})`\n  margin-top: ${space(0.25)};\n  color: ${p => p.theme.gray300};\n  font-size: 12px;\n  line-height: 1.2;\n`;\n\nexport default ProjectTable;\n","import React from 'react';\n\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PageHeading from 'app/components/pageHeading';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization, Project} from 'app/types';\nimport {Series} from 'app/types/echarts';\nimport PerformanceAlert from 'app/views/organizationStats/performanceAlert';\nimport ProjectTable from 'app/views/organizationStats/projectTable';\nimport {\n  ProjectTableDataElement,\n  ProjectTableLayout,\n} from 'app/views/organizationStats/projectTableLayout';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport {OrgTotal, ProjectTotal} from './types';\n\ntype Props = {\n  organization: Organization;\n  statsLoading: boolean;\n  projectsLoading: boolean;\n  orgTotal: null | OrgTotal;\n  statsError: null | boolean;\n  orgSeries: null | Series[];\n  projectMap: Record<string, Project>;\n  projectTotals: null | ProjectTotal[];\n  projectsError: null | boolean;\n  pageLinks: null | string;\n};\n\nclass OrganizationStats extends React.Component<Props> {\n  renderContent() {\n    const {\n      statsLoading,\n      orgTotal,\n      statsError,\n      orgSeries,\n      projectsLoading,\n      projectTotals,\n      projectMap,\n      projectsError,\n      organization,\n    } = this.props;\n\n    const colors = orgSeries?.map(series => series.color || '');\n\n    return (\n      <div>\n        <PageHeading withMargins>{t('Organization Stats')}</PageHeading>\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <TextBlock>\n              {t(\n                `The chart below reflects events the system has received\n                across your entire organization. Events are broken down into\n                three categories: Accepted, Rate Limited, and Filtered. Rate\n                Limited events are entries that the system threw away due to quotas\n                being hit, and Filtered events are events that were blocked\n                due to your inbound data filter rules.`\n              )}\n            </TextBlock>\n          </div>\n          {orgTotal && (\n            <div className=\"col-md-3 stats-column\">\n              <h6 className=\"nav-header\">{t('Events per minute')}</h6>\n              <p className=\"count\">{orgTotal.avgRate}</p>\n            </div>\n          )}\n        </div>\n        <div>\n          <PerformanceAlert />\n          {statsLoading ? (\n            <LoadingIndicator />\n          ) : statsError ? (\n            <LoadingError />\n          ) : (\n            <Panel>\n              <PanelBody withPadding>\n                <MiniBarChart\n                  isGroupedByDate\n                  showTimeInTooltip\n                  labelYAxisExtents\n                  stacked\n                  height={150}\n                  colors={colors}\n                  series={orgSeries ?? undefined}\n                />\n              </PanelBody>\n            </Panel>\n          )}\n        </div>\n\n        <Panel>\n          <PanelHeader>\n            <ProjectTableLayout>\n              <div>{t('Project')}</div>\n              <ProjectTableDataElement>{t('Accepted')}</ProjectTableDataElement>\n              <ProjectTableDataElement>{t('Rate Limited')}</ProjectTableDataElement>\n              <ProjectTableDataElement>{t('Filtered')}</ProjectTableDataElement>\n              <ProjectTableDataElement>{t('Total')}</ProjectTableDataElement>\n            </ProjectTableLayout>\n          </PanelHeader>\n          <PanelBody>\n            {!orgTotal || !projectTotals || statsLoading || projectsLoading ? (\n              <LoadingIndicator />\n            ) : projectsError ? (\n              <LoadingError />\n            ) : (\n              <ProjectTable\n                projectTotals={projectTotals}\n                orgTotal={orgTotal}\n                organization={organization}\n                projectMap={projectMap}\n              />\n            )}\n          </PanelBody>\n        </Panel>\n        {this.props.pageLinks && <Pagination {...this.props} />}\n      </div>\n    );\n  }\n\n  render() {\n    return <PageContent>{this.renderContent()}</PageContent>;\n  }\n}\n\nexport default OrganizationStats;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport {Organization, Project, TimeseriesValue} from 'app/types';\nimport {Series} from 'app/types/echarts';\nimport theme from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport OrganizationStatsDetails from './organizationStatsDetails';\nimport {OrgTotal, ProjectTotal} from './types';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype RawData = {\n  received: TimeseriesValue[];\n  rejected: TimeseriesValue[];\n  blacklisted: TimeseriesValue[];\n};\n\ntype State = {\n  projectsError: boolean;\n  projectsLoading: boolean;\n  projectsRequestsPending: number;\n  statsError: boolean;\n  statsLoading: boolean;\n  statsRequestsPending: number;\n  projectMap: Record<string, Project>;\n  rawProjectData: {\n    received: Record<string, TimeseriesValue[]>;\n    rejected: Record<string, TimeseriesValue[]>;\n    blacklisted: Record<string, TimeseriesValue[]>;\n  };\n  rawOrgData: RawData;\n  orgSeries: null | Series[];\n  orgTotal: null | OrgTotal;\n  projectTotals: null | ProjectTotal[];\n  querySince: number;\n  queryUntil: number;\n  pageLinks: null | string;\n};\n\nclass OrganizationStatsContainer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 7;\n\n    this.state = {\n      projectsError: false,\n      projectsLoading: false,\n      projectsRequestsPending: 0,\n      statsError: false,\n      statsLoading: false,\n      statsRequestsPending: 0,\n      projectMap: {},\n      rawProjectData: {received: {}, rejected: {}, blacklisted: {}},\n      rawOrgData: {received: [], rejected: [], blacklisted: []},\n      orgSeries: null,\n      orgTotal: null,\n      projectTotals: null,\n      querySince: since,\n      queryUntil: until,\n      pageLinks: null,\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    // If query string changes, it will be due to pagination.\n    // Intentionally only fetch projects since stats are fetched for a fixed period during\n    // the initial payload\n    if (nextProps.location.search !== this.props.location.search) {\n      this.setState({\n        projectsError: false,\n        projectsRequestsPending: 1,\n        projectsLoading: true,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevParams = prevProps.params,\n      currentParams = this.props.params;\n\n    if (prevParams.orgId !== currentParams.orgId) {\n      this.fetchData();\n    }\n\n    // Query string is changed, probably due to pagination, re-fetch only project data\n    if (prevProps.location.search !== this.props.location.search) {\n      // Not sure why, but when we use pagination and the new results load and re-render,\n      // the scroll position does not reset to top like in Audit Log\n      if (window.scrollTo) {\n        window.scrollTo(0, 0);\n      }\n      this.fetchProjectData();\n    }\n    const state = this.state;\n    if (state.statsLoading && !state.statsRequestsPending) {\n      this.processOrgData();\n    }\n    if (state.projectsLoading && !state.projectsRequestsPending) {\n      this.processProjectData();\n    }\n  }\n\n  fetchProjectData() {\n    this.props.api.request(this.getOrganizationProjectsEndpoint(), {\n      query: this.props.location.query,\n      success: (data, _textStatus, jqxhr) => {\n        const projectMap: Record<string, Project> = {};\n        data.forEach((project: Project) => {\n          projectMap[project.id] = project;\n        });\n\n        this.setState(prevState => ({\n          pageLinks: jqxhr ? jqxhr.getResponseHeader('Link') : null,\n          projectMap,\n          projectsRequestsPending: prevState.projectsRequestsPending - 1,\n        }));\n      },\n      error: () => {\n        this.setState({\n          projectsError: true,\n        });\n      },\n    });\n  }\n\n  fetchData() {\n    this.setState({\n      statsError: false,\n      statsLoading: true,\n      statsRequestsPending: 3,\n      projectsError: false,\n      projectsLoading: true,\n      projectsRequestsPending: 4,\n    });\n\n    const statEndpoint = this.getOrganizationStatsEndpoint();\n\n    Object.keys(this.state.rawOrgData).forEach(statName => {\n      this.props.api.request(statEndpoint, {\n        query: {\n          since: this.state.querySince,\n          until: this.state.queryUntil,\n          resolution: '1h',\n          stat: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawOrgData = prevState.rawOrgData;\n            rawOrgData[statName] = data;\n\n            return {\n              rawOrgData,\n              statsRequestsPending: prevState.statsRequestsPending - 1,\n            };\n          });\n        },\n        error: () => {\n          this.setState({\n            statsError: true,\n          });\n        },\n      });\n    });\n\n    Object.keys(this.state.rawProjectData).forEach(statName => {\n      this.props.api.request(statEndpoint, {\n        query: {\n          since: this.state.querySince,\n          until: this.state.queryUntil,\n          stat: statName,\n          group: 'project',\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawProjectData = prevState.rawProjectData;\n            rawProjectData[statName] = data;\n\n            return {\n              rawProjectData,\n              projectsRequestsPending: prevState.projectsRequestsPending - 1,\n            };\n          });\n        },\n        error: () => {\n          this.setState({\n            projectsError: true,\n          });\n        },\n      });\n    });\n\n    this.fetchProjectData();\n  }\n\n  getOrganizationStatsEndpoint() {\n    const params = this.props.params;\n    return '/organizations/' + params.orgId + '/stats/';\n  }\n\n  getOrganizationProjectsEndpoint() {\n    const params = this.props.params;\n    return '/organizations/' + params.orgId + '/projects/';\n  }\n\n  processOrgData() {\n    let oReceived = 0;\n    let oRejected = 0;\n    let oBlacklisted = 0;\n    const aReceived = [0, 0]; // received, points\n    const rawOrgData = this.state.rawOrgData;\n\n    const orgAccepted: Series = {\n      seriesName: t('Accepted'),\n      color: theme.gray200,\n      data: [],\n    };\n    const orgRejected: Series = {\n      seriesName: t('Rate limited'),\n      color: theme.red300,\n      data: [],\n    };\n    const orgFiltered: Series = {\n      seriesName: t('Filtered'),\n      color: theme.orange400,\n      data: [],\n    };\n\n    rawOrgData.received.forEach((point, idx) => {\n      const dReceived = point[1];\n      const dRejected = rawOrgData.rejected[idx][1];\n      const dFiltered = rawOrgData.blacklisted[idx][1];\n      const dAccepted = Math.max(0, dReceived - dRejected - dFiltered);\n\n      const time = point[0] * 1000;\n      orgAccepted.data.push({name: time, value: dAccepted});\n      orgRejected.data.push({name: time, value: dRejected});\n      orgFiltered.data.push({name: time, value: dFiltered});\n      oReceived += dReceived;\n      oRejected += dRejected;\n      oBlacklisted += dFiltered;\n      if (dReceived > 0) {\n        aReceived[0] += dReceived;\n        aReceived[1] += 1;\n      }\n    });\n\n    this.setState({\n      orgSeries: [orgAccepted, orgRejected, orgFiltered],\n      orgTotal: {\n        id: '',\n        received: oReceived,\n        rejected: oRejected,\n        blacklisted: oBlacklisted,\n        accepted: Math.max(0, oReceived - oRejected - oBlacklisted),\n        avgRate: aReceived[1] ? Math.round(aReceived[0] / aReceived[1] / 60) : 0,\n      },\n      statsLoading: false,\n    });\n  }\n\n  processProjectData() {\n    const rawProjectData = this.state.rawProjectData;\n    const projectTotals: ProjectTotal[] = [];\n    Object.keys(rawProjectData.received).forEach(projectId => {\n      const data = rawProjectData.received[projectId];\n      let pReceived = 0;\n      let pRejected = 0;\n      let pBlacklisted = 0;\n      data.forEach((point, idx) => {\n        pReceived += point[1];\n        pRejected += rawProjectData.rejected[projectId][idx][1];\n        pBlacklisted += rawProjectData.blacklisted[projectId][idx][1];\n      });\n      projectTotals.push({\n        id: projectId,\n        received: pReceived,\n        rejected: pRejected,\n        blacklisted: pBlacklisted,\n        accepted: Math.max(0, pReceived - pRejected - pBlacklisted),\n      });\n    });\n    this.setState({\n      projectTotals,\n      projectsLoading: false,\n    });\n  }\n\n  render() {\n    const organization = this.props.organization;\n\n    return (\n      <DocumentTitle title={`Stats - ${organization.slug} - Sentry`}>\n        <OrganizationStatsDetails organization={organization} {...this.state} />\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {OrganizationStatsContainer};\n\nexport default withApi(withOrganization(OrganizationStatsContainer));\n"],"sourceRoot":""}