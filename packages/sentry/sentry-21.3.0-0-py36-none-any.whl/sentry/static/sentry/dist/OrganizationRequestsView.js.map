{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/views/settings/organizationMembers/inviteRequestRow.tsx","webpack:///./app/views/settings/organizationMembers/organizationAccessRequests.tsx","webpack:///./app/views/settings/organizationMembers/organizationRequestsView.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","withTeams","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TeamStore","getInitialState","teams","getAll","onTeamUpdate","setState","render","props","state","RoleSelectControl","roles","disableUnallowed","options","map","r","value","id","label","name","disabled","allowed","description","desc","components","Option","data","optionProps","RoleItem","styles","control","provided","borderBottomLeftRadius","theme","borderRadius","borderBottomRightRadius","menu","marginTop","space","width","overflow","p","fontSizeSmall","InviteModalHook","HookOrDefault","hookName","defaultComponent","onSendInvites","children","sendInvites","canSend","InviteRequestRow","inviteRequest","inviteRequestBusy","organization","onApprove","onDeny","onUpdate","allTeams","allRoles","role","find","roleDisallowed","willInvite","headerInfo","StyledPanelItem","style","marginBottom","UserName","email","inviteStatus","inviterName","Description","t","tct","JoinRequestIndicator","tooltipText","StyledRoleSelectControl","onChange","TeamSelectControl","placeholder","team","slug","multiple","clearable","ButtonGroup","onConfirm","disableConfirmButton","message","Fragment","priority","size","busy","undefined","onClick","Tag","PanelItem","fontSizeLarge","subText","SelectControl","OrganizationAccessRequests","accessRequestBusy","handleApprove","e","stopPropagation","handleAction","isApproved","successMessage","errorMessage","handleDeny","api","orgId","onRemoveAccessRequest","requestPromise","method","addSuccessMessage","addErrorMessage","requestList","length","member","requester","memberName","user","username","requesterName","key","data-test-id","StyledButton","React","Component","Button","withApi","OrganizationRequestsView","a","eventKey","eventName","params","onRemoveInviteRequest","trackAnalyticsEvent","organization_id","member_id","parseInt","invite_status","approve","handleRedirect","router","showInviteRequests","push","inviteRequests","onUpdateInviteRequest","MEMBER_ROLES","defaultProps","withOrganization"],"mappings":"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","file":"OrganizationRequestsView.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import React from 'react';\nimport {components, OptionProps} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport SelectControl, {ControlProps} from 'app/components/forms/selectControl';\nimport space from 'app/styles/space';\nimport {MemberRole} from 'app/types';\nimport theme from 'app/utils/theme';\n\ntype OptionType = {\n  label: string;\n  value: string;\n  disabled: boolean;\n  description: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  roles: MemberRole[];\n  disableUnallowed: boolean;\n  value?: string;\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: disableUnallowed && !r.allowed,\n            description: r.desc,\n          } as OptionType)\n      )}\n      components={{\n        Option: ({label, data, ...optionProps}: OptionProps<OptionType>) => (\n          <components.Option label={label} {...(optionProps as any)}>\n            <RoleItem>\n              <h1>{label}</h1>\n              <div>{data.description}</div>\n            </RoleItem>\n          </components.Option>\n        ),\n      }}\n      styles={{\n        control: provided => ({\n          ...provided,\n          borderBottomLeftRadius: theme.borderRadius,\n          borderBottomRightRadius: theme.borderRadius,\n        }),\n        menu: provided => ({\n          ...provided,\n          borderRadius: theme.borderRadius,\n          marginTop: space(0.5),\n          width: '350px',\n          overflow: 'hidden',\n        }),\n      }}\n      {...props}\n    />\n  );\n}\n\nconst RoleItem = styled('div')`\n  display: grid;\n  grid-template-columns: 80px 1fr;\n  grid-gap: ${space(1)};\n\n  h1,\n  div {\n    font-size: ${p => p.theme.fontSizeSmall};\n    line-height: 1.4;\n    margin: ${space(0.25)} 0;\n  }\n`;\n\nexport default RoleSelectControl;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport SelectControl from 'app/components/forms/selectControl';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport {PanelItem} from 'app/components/panels';\nimport RoleSelectControl from 'app/components/roleSelectControl';\nimport Tag from 'app/components/tag';\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Member, MemberRole, Organization, Team} from 'app/types';\n\ntype Props = {\n  inviteRequest: Member;\n  inviteRequestBusy: {[key: string]: boolean};\n  organization: Organization;\n  onApprove: (inviteRequest: Member) => void;\n  onDeny: (inviteRequest: Member) => void;\n  onUpdate: (data: Partial<Member>) => void;\n  allTeams: Team[];\n  allRoles: MemberRole[];\n};\n\nconst InviteModalHook = HookOrDefault({\n  hookName: 'member-invite-modal:customization',\n  defaultComponent: ({onSendInvites, children}) =>\n    children({sendInvites: onSendInvites, canSend: true}),\n});\n\ntype InviteModalRenderFunc = React.ComponentProps<typeof InviteModalHook>['children'];\n\nconst InviteRequestRow = ({\n  inviteRequest,\n  inviteRequestBusy,\n  organization,\n  onApprove,\n  onDeny,\n  onUpdate,\n  allTeams,\n  allRoles,\n}: Props) => {\n  const role = allRoles.find(r => r.id === inviteRequest.role);\n  const roleDisallowed = !(role && role.allowed);\n\n  // eslint-disable-next-line react/prop-types\n  const hookRenderer: InviteModalRenderFunc = ({sendInvites, canSend, headerInfo}) => (\n    <StyledPanelItem>\n      <div>\n        <h5 style={{marginBottom: space(0.5)}}>\n          <UserName>{inviteRequest.email}</UserName>\n        </h5>\n        {inviteRequest.inviteStatus === 'requested_to_be_invited' ? (\n          inviteRequest.inviterName && (\n            <Description>\n              <Tooltip\n                title={t(\n                  'An existing member has asked to invite this user to your organization'\n                )}\n              >\n                {tct('Requested by [inviterName]', {\n                  inviterName: inviteRequest.inviterName,\n                })}\n              </Tooltip>\n            </Description>\n          )\n        ) : (\n          <JoinRequestIndicator\n            tooltipText={t('This user has asked to join your organization.')}\n          >\n            {t('Join request')}\n          </JoinRequestIndicator>\n        )}\n      </div>\n\n      <StyledRoleSelectControl\n        name=\"role\"\n        disableUnallowed\n        onChange={r => onUpdate({role: r.value})}\n        value={inviteRequest.role}\n        roles={allRoles}\n      />\n\n      <TeamSelectControl\n        name=\"teams\"\n        placeholder={t('Add to teams\\u2026')}\n        onChange={teams => onUpdate({teams: teams.map(team => team.value)})}\n        value={inviteRequest.teams}\n        options={allTeams.map(({slug}) => ({\n          value: slug,\n          label: `#${slug}`,\n        }))}\n        multiple\n        clearable\n      />\n\n      <ButtonGroup>\n        <Confirm\n          onConfirm={sendInvites}\n          disableConfirmButton={!canSend}\n          disabled={roleDisallowed}\n          message={\n            <React.Fragment>\n              {tct('Are you sure you want to invite [email] to your organization?', {\n                email: inviteRequest.email,\n              })}\n              {headerInfo}\n            </React.Fragment>\n          }\n        >\n          <Button\n            priority=\"primary\"\n            size=\"small\"\n            busy={inviteRequestBusy[inviteRequest.id]}\n            title={\n              roleDisallowed\n                ? t(\n                    `You do not have permission to approve a user of this role.\n                     Select a different role to approve this user.`\n                  )\n                : undefined\n            }\n          >\n            {t('Approve')}\n          </Button>\n        </Confirm>\n        <Button\n          size=\"small\"\n          busy={inviteRequestBusy[inviteRequest.id]}\n          onClick={() => onDeny(inviteRequest)}\n        >\n          {t('Deny')}\n        </Button>\n      </ButtonGroup>\n    </StyledPanelItem>\n  );\n\n  return (\n    <InviteModalHook\n      willInvite\n      organization={organization}\n      onSendInvites={() => onApprove(inviteRequest)}\n    >\n      {hookRenderer}\n    </InviteModalHook>\n  );\n};\n\nconst JoinRequestIndicator = styled(Tag)`\n  text-transform: uppercase;\n`;\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(150px, auto) minmax(100px, 140px) 220px max-content;\n  grid-gap: ${space(2)};\n  align-items: center;\n`;\n\nconst UserName = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Description = styled('div')`\n  display: block;\n  color: ${p => p.theme.subText};\n  font-size: 14px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst StyledRoleSelectControl = styled(RoleSelectControl)`\n  max-width: 140px;\n`;\n\nconst TeamSelectControl = styled(SelectControl)`\n  max-width: 220px;\n  .Select-value-label {\n    max-width: 150px;\n    word-break: break-all;\n  }\n`;\n\nconst ButtonGroup = styled('div')`\n  display: inline-grid;\n  grid-template-columns: repeat(2, max-content);\n  grid-gap: ${space(1)};\n`;\n\nexport default InviteRequestRow;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AccessRequest} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  orgId: string;\n  onRemoveAccessRequest: (id: string) => void;\n  requestList: AccessRequest[];\n};\n\ntype State = {\n  accessRequestBusy: Record<string, boolean>;\n};\n\ntype HandleOpts = {\n  id: string;\n  isApproved: boolean;\n  successMessage: string;\n  errorMessage: string;\n};\n\nclass OrganizationAccessRequests extends React.Component<Props, State> {\n  state: State = {\n    accessRequestBusy: {},\n  };\n\n  async handleAction({id, isApproved, successMessage, errorMessage}: HandleOpts) {\n    const {api, orgId, onRemoveAccessRequest} = this.props;\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: true},\n    }));\n\n    try {\n      await api.requestPromise(`/organizations/${orgId}/access-requests/${id}/`, {\n        method: 'PUT',\n        data: {isApproved},\n      });\n      onRemoveAccessRequest(id);\n      addSuccessMessage(successMessage);\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: false},\n    }));\n  }\n\n  handleApprove = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: true,\n      successMessage: t('Team request approved'),\n      errorMessage: t('Error approving team request'),\n    });\n  };\n\n  handleDeny = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: false,\n      successMessage: t('Team request denied'),\n      errorMessage: t('Error denying team request'),\n    });\n  };\n\n  render() {\n    const {requestList} = this.props;\n    const {accessRequestBusy} = this.state;\n\n    if (!requestList || !requestList.length) {\n      return null;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Pending Team Requests')}</PanelHeader>\n\n        <PanelBody>\n          {requestList.map(({id, member, team, requester}) => {\n            const memberName =\n              member.user &&\n              (member.user.name || member.user.email || member.user.username);\n            const requesterName =\n              requester && (requester.name || requester.email || requester.username);\n            return (\n              <StyledPanelItem key={id}>\n                <div data-test-id=\"request-message\">\n                  {requesterName\n                    ? tct('[requesterName] requests to add [name] to the [team] team.', {\n                        requesterName,\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })\n                    : tct('[name] requests access to the [team] team.', {\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })}\n                </div>\n                <div>\n                  <StyledButton\n                    priority=\"primary\"\n                    size=\"small\"\n                    onClick={e => this.handleApprove(id, e)}\n                    busy={accessRequestBusy[id]}\n                  >\n                    {t('Approve')}\n                  </StyledButton>\n                  <Button\n                    busy={accessRequestBusy[id]}\n                    onClick={e => this.handleDeny(id, e)}\n                    size=\"small\"\n                  >\n                    {t('Deny')}\n                  </Button>\n                </div>\n              </StyledPanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: auto max-content;\n  grid-gap: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(OrganizationAccessRequests);\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {MEMBER_ROLES} from 'app/constants';\nimport {t, tct} from 'app/locale';\nimport {AccessRequest, Member, Organization, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport InviteRequestRow from './inviteRequestRow';\nimport OrganizationAccessRequests from './organizationAccessRequests';\n\ntype DefaultProps = {\n  inviteRequests: Member[];\n};\n\ntype Props = {\n  organization: Organization;\n  requestList: AccessRequest[];\n  teams: Team[];\n  onUpdateInviteRequest: (id: string, data: Partial<Member>) => void;\n  onRemoveInviteRequest: (id: string) => void;\n  onRemoveAccessRequest: (id: string) => void;\n  showInviteRequests: boolean;\n} & RouteComponentProps<{orgId: string}, {}> &\n  DefaultProps;\n\ntype State = AsyncView['state'] & {\n  inviteRequestBusy: {[key: string]: boolean};\n};\n\nclass OrganizationRequestsView extends AsyncView<Props, State> {\n  static defaultProps: DefaultProps = {\n    inviteRequests: [],\n  };\n\n  getDefaultState() {\n    const state = super.getDefaultState();\n    return {\n      ...state,\n      inviteRequestBusy: {},\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    super.UNSAFE_componentWillMount();\n    this.handleRedirect();\n  }\n\n  componentDidUpdate() {\n    this.handleRedirect();\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const orgId = this.props.organization.slug;\n\n    return [['member', `/organizations/${orgId}/members/me/`]];\n  }\n\n  handleRedirect() {\n    const {router, params, requestList, showInviteRequests} = this.props;\n\n    // redirect to the members view if the user cannot see\n    // the invite requests panel and all of the team requests\n    // have been approved or denied\n    if (showInviteRequests || requestList.length) {\n      return null;\n    }\n    return router.push(`/settings/${params.orgId}/members/`);\n  }\n\n  handleAction = async ({\n    inviteRequest,\n    method,\n    data,\n    successMessage,\n    errorMessage,\n    eventKey,\n    eventName,\n  }) => {\n    const {params, organization, onRemoveInviteRequest} = this.props;\n\n    this.setState(state => ({\n      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: true},\n    }));\n\n    try {\n      await this.api.requestPromise(\n        `/organizations/${params.orgId}/invite-requests/${inviteRequest.id}/`,\n        {\n          method,\n          data,\n        }\n      );\n\n      onRemoveInviteRequest(inviteRequest.id);\n      addSuccessMessage(successMessage);\n      trackAnalyticsEvent({\n        eventKey,\n        eventName,\n        organization_id: organization.id,\n        member_id: parseInt(inviteRequest.id, 10),\n        invite_status: inviteRequest.inviteStatus,\n      });\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: false},\n    }));\n  };\n\n  handleApprove = (inviteRequest: Member) => {\n    this.handleAction({\n      inviteRequest,\n      method: 'PUT',\n      data: {\n        role: inviteRequest.role,\n        teams: inviteRequest.teams,\n        approve: 1,\n      },\n      successMessage: tct('[email] has been invited', {email: inviteRequest.email}),\n      errorMessage: tct('Error inviting [email]', {email: inviteRequest.email}),\n      eventKey: 'invite_request.approved',\n      eventName: 'Invite Request Approved',\n    });\n  };\n\n  handleDeny = (inviteRequest: Member) => {\n    this.handleAction({\n      inviteRequest,\n      method: 'DELETE',\n      data: {},\n      successMessage: tct('Invite request for [email] denied', {\n        email: inviteRequest.email,\n      }),\n      errorMessage: tct('Error denying invite request for [email]', {\n        email: inviteRequest.email,\n      }),\n      eventKey: 'invite_request.denied',\n      eventName: 'Invite Request Denied',\n    });\n  };\n\n  render() {\n    const {\n      params,\n      requestList,\n      showInviteRequests,\n      inviteRequests,\n      onRemoveAccessRequest,\n      onUpdateInviteRequest,\n      organization,\n      teams,\n    } = this.props;\n    const {inviteRequestBusy, member} = this.state;\n\n    return (\n      <React.Fragment>\n        {showInviteRequests && (\n          <Panel>\n            <PanelHeader>{t('Pending Invite Requests')}</PanelHeader>\n            <PanelBody>\n              {inviteRequests.map(inviteRequest => (\n                <InviteRequestRow\n                  key={inviteRequest.id}\n                  organization={organization}\n                  inviteRequest={inviteRequest}\n                  inviteRequestBusy={inviteRequestBusy}\n                  allTeams={teams}\n                  allRoles={member ? member.roles : MEMBER_ROLES}\n                  onApprove={this.handleApprove}\n                  onDeny={this.handleDeny}\n                  onUpdate={data => onUpdateInviteRequest(inviteRequest.id, data)}\n                />\n              ))}\n              {inviteRequests.length === 0 && (\n                <EmptyMessage>{t('No requests found.')}</EmptyMessage>\n              )}\n            </PanelBody>\n          </Panel>\n        )}\n\n        <OrganizationAccessRequests\n          orgId={params.orgId}\n          requestList={requestList}\n          onRemoveAccessRequest={onRemoveAccessRequest}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withTeams(withOrganization(OrganizationRequestsView));\n"],"sourceRoot":""}