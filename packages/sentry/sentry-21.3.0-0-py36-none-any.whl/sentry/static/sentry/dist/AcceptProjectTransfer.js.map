{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/acceptProjectTransfer.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","AcceptProjectTransfer","handleSubmit","formData","api","request","method","data","location","query","organization","success","orgSlug","router","push","addSuccessMessage","t","error","errorMsg","responseJSON","detail","addErrorMessage","disableLog","transferDetails","state","options","organizations","map","org","label","slug","value","tct","projectSettings","project","onSubmit","submitLabel","submitPriority","initialData","undefined","name","style","borderBottom"],"mappings":"0qBAQqBA,E,uIAKjB,MAAO,K,+BAIP,IAAMC,EAAQC,KAAKC,WACnB,OACE,YAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBC,KAAKE,uB,GATJC,KAHWL,E,6nBCkBfM,E,qIAKK,MAUHJ,KAAKK,MARPC,EAFK,EAELA,KACAP,EAHK,EAGLA,MACAQ,EAJK,EAILA,SACAC,EALK,EAKLA,OACAC,EANK,EAMLA,KACAC,EAPK,EAOLA,cACAC,EARK,EAQLA,KACGN,EATE,0EAeDO,GAAYL,EAElB,OACE,kBAASF,EACP,YAACQ,EAAD,CAAiBD,SAAUA,GACzB,YAACE,EAAD,KACGR,GAAQ,YAACS,EAAD,KAAOT,GACfP,GACC,YAACiB,EAAD,CAAOP,KAAMA,EAAMQ,OAAQP,GACzB,YAAC,IAAD,KAAcX,GACbQ,GAAY,YAACW,EAAD,KAAWX,KAI7BC,GAAU,YAACW,EAAD,CAAQP,SAAUA,GAAWJ,IAGzCG,GAAQ,YAACS,EAAD,KAAcT,GACtBF,GAAQ,YAACY,EAAD,KAAcZ,Q,GAtCUa,IAAMC,WAAzCnB,E,yCAAAA,EACGoB,aAAe,CACpBd,eAAe,GA+CnB,IAAMG,EAAkB,YAAO,MAAP,8CAAH,6BAEJ,SAAAY,GAAC,OAAKA,EAAEb,SAAW,SAAW,eAF1B,KAIfE,EAAe,YAAO,MAAP,2CAAH,mCAIZE,EAAQ,YAAO,MAAP,qCACV,SAAAS,GAAC,OAAKA,EAAER,QAAH,uCADE,WAECS,YAAM,GAFP,IAEaA,YAAM,GAFnB,IAEyBA,YAAM,GAF/B,OAILR,EAAW,YAAO,MAAP,uCAAH,UACH,SAAAO,GAAC,OAAIA,EAAEE,MAAMC,UADV,+BAGC,SAAAH,GAAC,OAAIA,EAAEE,MAAME,gBAHd,YAIDH,YAAM,KAJL,SAORX,EAAO,YAAO,MAAP,mCAAH,gBACQW,YAAM,GADd,KAIJP,EAAS,YAAO,MAAP,qCAAH,eACI,SAAAM,GAAC,OAAKA,EAAEb,SAAW,IAAMc,YAAM,KADnC,KAINI,EAAqB,YAAO1B,EAAP,iDAAH,8BAIPsB,YAAM,GAJC,KAOlBN,EAAc,YAAO,MAAP,0CAAH,qBAEDM,YAAM,GAFL,KAIXL,EAAc,YAAO,MAAP,0CAAH,2CAKFS,O,0oBC/FTC,E,kLAUJC,aAAe,SAAAC,GACb,EAAKC,IAAIC,QAAQ,oBAAqB,CACpCC,OAAQ,OACRC,KAAM,CACJA,KAAM,EAAKhC,MAAMiC,SAASC,MAAMF,KAChCG,aAAcP,EAASO,cAEzBC,QAAS,WACP,IAAMC,EAAUT,EAASO,aAEzB,EAAKnC,MAAMsC,OAAOC,KAAlB,WAA2BF,IAC3BG,YAAkBC,YAAE,sCAEtBC,MAAO,SAAAA,GACL,IAAMC,EACJD,GAASA,EAAME,cAAqD,iBAA9BF,EAAME,aAAaC,OACrDH,EAAME,aAAaC,OACnB,GAENC,YACEL,YAAE,8BAAgCE,EAAlC,YAAkDA,GAAa,Q,qDA3BrE,MAAO,CAAC,CAAC,kBAAmB,oBAAqB,CAACT,MADpCvC,KAAKK,MAAMiC,SAASC,W,iCAKlC,OAAOO,YAAE,6B,kCA6BCC,GACV,IAAIK,GAAa,EAQjB,OALIL,GAASA,EAAME,cAAqD,iBAA9BF,EAAME,aAAaC,SAC3DC,YAAgBJ,EAAME,aAAaC,QACnCE,GAAa,GAGf,mDAAyBL,EAAOK,K,mCAGrB,MACJC,EAAmBrD,KAAKsD,MAAxBD,gBACDE,EAAUF,aAAH,EAAGA,EAAiBG,cAAcC,KAAI,SAAAC,GAAG,MAAK,CACzDC,MAAOD,EAAIE,KACXC,MAAOH,EAAIE,SAEPpB,EAAee,SAAH,UAAGA,EAAU,UAAb,aAAG,EAAcM,MAEnC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAoB9D,MAAO+C,YAAE,sCAC7B,qBACGgB,YACC,mQAIA,CACEtB,aAAc,0BAASM,YAAE,iBACzBiB,gBAAiB,0BAASjB,YAAE,wBAIjCO,GACC,qBACGS,YACC,yEACA,CACEtB,aAAc,0BAASM,YAAE,iBACzBkB,QAASX,EAAgBW,QAAQJ,QAKzC,YAAC,IAAD,CACEK,SAAUjE,KAAKgC,aACfkC,YAAapB,YAAE,oBACfqB,eAAe,SACfC,YAAa5B,EAAe,CAACA,qBAAgB6B,GAE7C,YAAC,IAAD,CACEd,QAASA,EACTI,MAAOb,YAAE,gBACTwB,KAAK,eACLC,MAAO,CAACC,aAAc,gB,GA5FE1E,KAoGrBiC","file":"AcceptProjectTransfer.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype TransferDetails = {\n  organizations: Organization[];\n  project: Project;\n};\n\ntype State = {\n  transferDetails: TransferDetails | null;\n} & AsyncView['state'];\n\nclass AcceptProjectTransfer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const query = this.props.location.query;\n    return [['transferDetails', '/accept-transfer/', {query}]];\n  }\n\n  getTitle() {\n    return t('Accept Project Transfer');\n  }\n\n  handleSubmit = formData => {\n    this.api.request('/accept-transfer/', {\n      method: 'POST',\n      data: {\n        data: this.props.location.query.data,\n        organization: formData.organization,\n      },\n      success: () => {\n        const orgSlug = formData.organization;\n\n        this.props.router.push(`/${orgSlug}`);\n        addSuccessMessage(t('Project successfully transferred'));\n      },\n      error: error => {\n        const errorMsg =\n          error && error.responseJSON && typeof error.responseJSON.detail === 'string'\n            ? error.responseJSON.detail\n            : '';\n\n        addErrorMessage(\n          t('Unable to transfer project') + errorMsg ? `: ${errorMsg}` : ''\n        );\n      },\n    });\n  };\n\n  renderError(error) {\n    let disableLog = false;\n    // Check if there is an error message with `transferDetails` endpoint\n    // If so, show as toast and ignore, otherwise log to sentry\n    if (error && error.responseJSON && typeof error.responseJSON.detail === 'string') {\n      addErrorMessage(error.responseJSON.detail);\n      disableLog = true;\n    }\n\n    return super.renderError(error, disableLog);\n  }\n\n  renderBody() {\n    const {transferDetails} = this.state;\n    const options = transferDetails?.organizations.map(org => ({\n      label: org.slug,\n      value: org.slug,\n    }));\n    const organization = options?.[0]?.value;\n\n    return (\n      <NarrowLayout>\n        <SettingsPageHeader title={t('Approve Transfer Project Request')} />\n        <p>\n          {tct(\n            'Projects must be transferred to a specific [organization]. ' +\n              'You can grant specific teams access to the project later under the [projectSettings]. ' +\n              '(Note that granting access to at least one team is necessary for the project to ' +\n              'appear in all parts of the UI.)',\n            {\n              organization: <strong>{t('Organization')}</strong>,\n              projectSettings: <strong>{t('Project Settings')}</strong>,\n            }\n          )}\n        </p>\n        {transferDetails && (\n          <p>\n            {tct(\n              'Please select which [organization] you want for the project [project].',\n              {\n                organization: <strong>{t('Organization')}</strong>,\n                project: transferDetails.project.slug,\n              }\n            )}\n          </p>\n        )}\n        <Form\n          onSubmit={this.handleSubmit}\n          submitLabel={t('Transfer Project')}\n          submitPriority=\"danger\"\n          initialData={organization ? {organization} : undefined}\n        >\n          <SelectField\n            options={options}\n            label={t('Organization')}\n            name=\"organization\"\n            style={{borderBottom: 'none'}}\n          />\n        </Form>\n      </NarrowLayout>\n    );\n  }\n}\n\nexport default AcceptProjectTransfer;\n"],"sourceRoot":""}