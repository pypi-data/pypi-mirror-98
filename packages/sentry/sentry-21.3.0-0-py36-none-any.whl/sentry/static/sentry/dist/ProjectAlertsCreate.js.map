{"version":3,"sources":["webpack:///./app/views/settings/incidentRules/create.tsx","webpack:///./app/views/settings/projectAlerts/alertTypeChooser.tsx","webpack:///./app/views/settings/projectAlerts/create.tsx"],"names":["IncidentRulesCreate","handleSubmitSuccess","router","props","orgId","params","push","this","project","eventView","sessionId","defaultRule","createRuleFromEventView","createDefaultRule","onSubmitSuccess","rule","projects","slug","React","Component","MetricsTooltip","children","title","t","IssuesTooltip","TypeChooser","onChange","organization","selected","trackedOnChange","type","trackAnalyticsEvent","eventKey","eventName","organization_id","id","Container","TypeCard","interactive","onClick","RadioLabel","aria-label","checked","requireAll","features","hasFeature","Fragment","tct","tooltip","ExampleHeading","symbol","code","space","p","theme","fontSizeSmall","subText","Card","textStyles","Create","state","undefined","alertType","location","pathname","includes","uniqueId","handleChangeAlertType","setState","project_id","session_id","query","createFromDiscover","EventView","fromLocation","hasMetricAlerts","projectId","shouldShowAlertTypeChooser","projectSlug","orgSlug","StyledPageHeader","PageHeader"],"mappings":"y1CA4BMA,E,kLACJC,oBAAsB,WAAM,IACnBC,EAAU,EAAKC,MAAfD,OACAE,EAAS,EAAKD,MAAME,OAApBD,MAEPF,EAAOI,KAAP,yBAA8BF,EAA9B,oB,+CAGO,MAC2CG,KAAKJ,MAAhDK,EADA,EACAA,QAASC,EADT,EACSA,UAAWC,EADpB,EACoBA,UAAcP,EADlC,2CAEDQ,EAAcF,EAChBG,YAAwBH,GACxBI,cAEJ,OACE,YAAC,IAAD,KACEC,gBAAiBP,KAAKN,oBACtBc,KAAI,OAAMJ,GAAN,IAAmBK,SAAU,CAACR,EAAQS,QAC1CP,UAAWA,EACXF,QAASA,GACLL,Q,GApBsBe,IAAMC,WAAlCnB,E,kCA0BSA,Q,wEC/BToB,EAAiB,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACrB,YAAC,IAAD,CACEC,MAAOC,YAAE,kHAKT,wBAAOF,KAPLD,E,6BAWN,IAAMI,EAAgB,SAAC,GAAD,IAAEH,EAAF,EAAEA,SAAF,OACpB,YAAC,IAAD,CACEC,MAAOC,YAAE,qGAKT,wBAAOF,KAPLG,E,4BAWN,IAAMC,EAAc,SAAC,GAA8C,IAA7CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,SACtCC,EAAkB,SAACC,GACvBC,YAAoB,CAClBC,SAAU,6BACVC,UAAW,8BACXC,gBAAiBP,EAAaQ,GAC9BL,SAGFJ,EAASI,IAGX,OACE,YAACM,EAAD,KACE,YAACC,EAAD,CAAUC,aAAW,EAACC,QAAS,kBAAMV,EAAgB,YACnD,YAACW,EAAD,KACE,YAAC,IAAD,CACEC,aAAW,SACXC,QAAsB,WAAbd,EACTF,SAAU,kBAAMG,EAAgB,aAEjCN,YAAE,iBAEL,YAAC,IAAD,CAASoB,YAAU,EAACC,SAAU,CAAC,oCAC5B,qBAAEC,WAEC,YAAC,IAAMC,SAAP,KACE,qBACGC,YAAI,4DAA6D,CAChEC,QAAS,YAAC,EAAD,UAGXpB,GACA,YAAC,IAAMkB,SAAP,KACE,YAACG,EAAD,KAAiB1B,YAAE,iBACnB,YAAC,IAAD,CAAM2B,OAAO,UACX,YAAC,IAAD,KACG3B,YAAE,+CAEL,YAAC,IAAD,KACGA,YAAE,kEAOb,YAAC,IAAMuB,SAAP,KACE,qBACGC,YAAI,0IAGH,CAACC,QAAS,YAAC,EAAD,UAGZpB,GACA,YAAC,IAAMkB,SAAP,KACE,YAACG,EAAD,KAAiB1B,YAAE,iBACnB,YAAC,IAAD,CAAM2B,OAAO,UACX,YAAC,IAAD,KACG3B,YAAE,mDAEL,YAAC,IAAD,KACGwB,YACC,2EACA,CAACI,KAAM,mCAW3B,YAACd,EAAD,CAAUC,aAAW,EAACC,QAAS,kBAAMV,EAAgB,WACnD,YAACW,EAAD,KACE,YAAC,IAAD,CACEC,aAAW,QACXC,QAAsB,UAAbd,EACTF,SAAU,kBAAMG,EAAgB,YAEjCN,YAAE,gBAEL,qBACGwB,YAAI,mGAGH,CAACC,QAAS,YAAC,EAAD,UAGZpB,GACA,YAAC,IAAMkB,SAAP,KACE,YAACG,EAAD,KAAiB1B,YAAE,iBACnB,YAAC,IAAD,CAAM2B,OAAO,UACX,YAAC,IAAD,KAAW3B,YAAE,8BACb,YAAC,IAAD,KACGA,YAAE,2DAlGbE,E,0BA4GN,IAAMe,EAAa,YAAO,QAAP,wCAAH,gCAEGY,YAAM,GAFT,iGAOFA,YAAM,GAPJ,KAUVH,EAAiB,YAAO,MAAP,4CAAH,uCAEL,SAAAI,GAAC,OAAIA,EAAEC,MAAMC,gBAFR,4BAIT,SAAAF,GAAC,OAAIA,EAAEC,MAAME,UAJJ,kBAKDJ,YAAM,GALL,KAQdhB,EAAY,YAAO,MAAP,uCAAH,uDAGDgB,YAAM,GAHL,KAMTf,EAAW,YAAOoB,IAAP,sCAAH,0BAEDL,YAAM,GAFL,kBAGKA,YAAM,GAHX,IAIVM,IAJU,KAOCjC,K,6aCnJTkC,G,mLACJC,MAAe,CACbnD,eAAWoD,EACXC,UAAW,EAAK3D,MAAM4D,SAASC,SAASC,SAAS,kBAC7C,QACA,EAAK9D,MAAM4D,SAASC,SAASC,SAAS,yBACtC,SACA,M,EAsBNvD,UAAYwD,c,EAEZC,sBAAwB,SAACL,GAEvB,EAAKM,SAAS,CAACN,e,0DAvBG,QACwBvD,KAAKJ,MAAxCwB,EADW,EACXA,aAAcoC,EADH,EACGA,SAAUvD,EADb,EACaA,QAU/B,GARAuB,YAAoB,CAClBC,SAAU,wBACVC,UAAW,yBACXC,gBAAiBP,EAAaQ,GAC9BkC,WAAY7D,EAAQ2B,GACpBmC,WAAY/D,KAAKG,YAGfqD,SAAJ,UAAIA,EAAUQ,aAAd,OAAI,EAAiBC,mBAAoB,CACvC,IAAM/D,EAAYgE,IAAUC,aAAaX,GAEzCxD,KAAK6D,SAAS,CAACN,UAAW,SAAUrD,iB,+BAY/B,MAMHF,KAAKJ,MAJPwE,EAFK,EAELA,gBACAhD,EAHK,EAGLA,aACAnB,EAJK,EAILA,QACSoE,EALJ,EAKLvE,OAASuE,UALJ,EAOwBrE,KAAKqD,MAA7BE,EAPA,EAOAA,UAAWrD,EAPX,EAOWA,UAEZoE,EAA6BF,EAC7BrD,EAAQC,YAAE,kBAEhB,OACE,YAAC,IAAMuB,SAAP,KACE,YAAC,IAAD,CAAqBxB,MAAOA,EAAOwD,YAAaF,IAChD,YAAC,IAAD,KACE,YAAC,IAAD,CACED,gBAAiBA,EACjBI,QAASpD,EAAaV,KACtBK,MAAOA,IAET,YAAC0D,GAAD,KACE,YAAC,IAAD,KAAc1D,IAEfuD,GACC,YAAC,GAAD,CACElD,aAAcA,EACdC,SAAUkC,EACVpC,SAAUnB,KAAK4D,0BAIhBQ,GAAiC,UAAdb,IACpB,YAAC,IAAD,OAAqBvD,KAAKJ,MAA1B,CAAiCK,QAASA,KAG3CmE,GAAiC,WAAdb,GAClB,YAAC,EAAD,OACMvD,KAAKJ,MADX,CAEEM,UAAWA,EACXC,UAAWH,KAAKG,UAChBF,QAASA,W,GA7EFU,IAAMC,WAArBwC,G,qBAsFN,IAAMqB,GAAmB,YAAOC,IAAP,+CAAH,iBACH7B,YAAM,GADH,KAIPO","file":"ProjectAlertsCreate.js","sourcesContent":["import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n} from 'app/views/settings/incidentRules/constants';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  eventView: EventView | undefined;\n  sessionId?: string;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nclass IncidentRulesCreate extends React.Component<Props> {\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  };\n\n  render() {\n    const {project, eventView, sessionId, ...props} = this.props;\n    const defaultRule = eventView\n      ? createRuleFromEventView(eventView)\n      : createDefaultRule();\n\n    return (\n      <RuleForm\n        onSubmitSuccess={this.handleSubmitSuccess}\n        rule={{...defaultRule, projects: [project.slug]}}\n        sessionId={sessionId}\n        project={project}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesCreate;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport Card from 'app/components/card';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport Radio from 'app/components/radio';\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport textStyles from 'app/styles/text';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype Props = {\n  organization: Organization;\n  selected?: string | null;\n  onChange: (type: AlertType) => void;\n};\n\nconst MetricsTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `A metric is the value of an aggregate function like count() or avg()\n       applied to your events over time`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst IssuesTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `Sentry groups similar events into an Issue based on their stack trace\n       and other factors.`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst TypeChooser = ({onChange, organization, selected}: Props) => {\n  const trackedOnChange = (type: AlertType) => {\n    trackAnalyticsEvent({\n      eventKey: 'alert_chooser_cards.select',\n      eventName: 'Alert Chooser Cards: Select',\n      organization_id: organization.id,\n      type,\n    });\n\n    onChange(type);\n  };\n\n  return (\n    <Container>\n      <TypeCard interactive onClick={() => trackedOnChange('metric')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"metric\"\n            checked={selected === 'metric'}\n            onChange={() => trackedOnChange('metric')}\n          />\n          {t('Metric Alert')}\n        </RadioLabel>\n        <Feature requireAll features={['organizations:performance-view']}>\n          {({hasFeature}) =>\n            hasFeature ? (\n              <React.Fragment>\n                <p>\n                  {tct(`Notifies you when a [tooltip:metric] crosses a threshold.`, {\n                    tooltip: <MetricsTooltip />,\n                  })}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <List symbol=\"bullet\">\n                      <ListItem>\n                        {t('Performance metrics like latency and apdex')}\n                      </ListItem>\n                      <ListItem>\n                        {t('Frequency of error events or users affected in the project')}\n                      </ListItem>\n                    </List>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <p>\n                  {tct(\n                    `Notifies you when a [tooltip:metric] like frequency of events or users affected in\n                   the project crosses a threshold.`,\n                    {tooltip: <MetricsTooltip />}\n                  )}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <List symbol=\"bullet\">\n                      <ListItem>\n                        {t('Total events in the project exceed 1000/minute')}\n                      </ListItem>\n                      <ListItem>\n                        {tct(\n                          'Events with tag [code:database] and \"API\" in the title exceed 100/minute',\n                          {code: <code />}\n                        )}\n                      </ListItem>\n                    </List>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            )\n          }\n        </Feature>\n      </TypeCard>\n      <TypeCard interactive onClick={() => trackedOnChange('issue')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"issue\"\n            checked={selected === 'issue'}\n            onChange={() => trackedOnChange('issue')}\n          />\n          {t('Issue Alert')}\n        </RadioLabel>\n        <p>\n          {tct(\n            `Notifies you when individual [tooltip:Sentry Issues] trigger your\n           alerting criteria.`,\n            {tooltip: <IssuesTooltip />}\n          )}\n        </p>\n        {!selected && (\n          <React.Fragment>\n            <ExampleHeading>{t('For Example:')}</ExampleHeading>\n            <List symbol=\"bullet\">\n              <ListItem>{t('New Issues or regressions')}</ListItem>\n              <ListItem>\n                {t('Frequency of individual Issues exceeds 100/minute')}\n              </ListItem>\n            </List>\n          </React.Fragment>\n        )}\n      </TypeCard>\n    </Container>\n  );\n};\n\nconst RadioLabel = styled('label')`\n  cursor: pointer;\n  margin-bottom: ${space(3)};\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: max-content;\n  align-items: center;\n  grid-gap: ${space(2)};\n`;\n\nconst ExampleHeading = styled('div')`\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  color: ${p => p.theme.subText};\n  margin-bottom: ${space(2)};\n`;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: ${space(3)};\n`;\n\nconst TypeCard = styled(Card)`\n  cursor: pointer;\n  padding: ${space(4)};\n  margin-bottom: ${space(3)};\n  ${textStyles};\n`;\n\nexport default TypeChooser;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport PageHeading from 'app/components/pageHeading';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\nimport {uniqueId} from 'app/utils/guid';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesCreate from 'app/views/settings/incidentRules/create';\nimport IssueRuleEditor from 'app/views/settings/projectAlerts/issueRuleEditor';\n\nimport AlertTypeChooser from './alertTypeChooser';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype State = {\n  alertType: AlertType;\n  eventView: EventView | undefined;\n};\n\nclass Create extends React.Component<Props, State> {\n  state: State = {\n    eventView: undefined,\n    alertType: this.props.location.pathname.includes('/alerts/rules/')\n      ? 'issue'\n      : this.props.location.pathname.includes('/alerts/metric-rules/')\n      ? 'metric'\n      : null,\n  };\n\n  componentDidMount() {\n    const {organization, location, project} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'new_alert_rule.viewed',\n      eventName: 'New Alert Rule: Viewed',\n      organization_id: organization.id,\n      project_id: project.id,\n      session_id: this.sessionId,\n    });\n\n    if (location?.query?.createFromDiscover) {\n      const eventView = EventView.fromLocation(location);\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({alertType: 'metric', eventView});\n    }\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  handleChangeAlertType = (alertType: AlertType) => {\n    // alertType should be `issue` or `metric`\n    this.setState({alertType});\n  };\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      project,\n      params: {projectId},\n    } = this.props;\n    const {alertType, eventView} = this.state;\n\n    const shouldShowAlertTypeChooser = hasMetricAlerts;\n    const title = t('New Alert Rule');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n        <PageContent>\n          <BuilderBreadCrumbs\n            hasMetricAlerts={hasMetricAlerts}\n            orgSlug={organization.slug}\n            title={title}\n          />\n          <StyledPageHeader>\n            <PageHeading>{title}</PageHeading>\n          </StyledPageHeader>\n          {shouldShowAlertTypeChooser && (\n            <AlertTypeChooser\n              organization={organization}\n              selected={alertType}\n              onChange={this.handleChangeAlertType}\n            />\n          )}\n\n          {(!hasMetricAlerts || alertType === 'issue') && (\n            <IssueRuleEditor {...this.props} project={project} />\n          )}\n\n          {hasMetricAlerts && alertType === 'metric' && (\n            <IncidentRulesCreate\n              {...this.props}\n              eventView={eventView}\n              sessionId={this.sessionId}\n              project={project}\n            />\n          )}\n        </PageContent>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(4)};\n`;\n\nexport default Create;\n"],"sourceRoot":""}