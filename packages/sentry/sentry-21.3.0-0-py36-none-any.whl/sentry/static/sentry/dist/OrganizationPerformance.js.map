{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationPerformance/index.tsx"],"names":["UnstyledSettingsPageHeader","this","props","icon","title","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","PermissionAlert","access","hasAccess","type","size","t","fields","name","required","label","help","tct","link","href","OrganizationPerformance","handleSuccess","data","updateOrganization","location","organization","features","Set","endpoint","slug","jsonFormSettings","disabled","has","Fragment","data-test-id","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","onSubmitSuccess","onSubmitError","addErrorMessage","forms","withOrganization"],"mappings":"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","file":"OrganizationPerformance.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import React from 'react';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\n\nconst fields: JsonFormObject[] = [\n  {\n    title: t('General'),\n    fields: [\n      {\n        name: 'apdexThreshold',\n        type: 'number',\n        required: true,\n        label: t('Response Time Threshold (Apdex)'),\n        help: tct(\n          `Set a response time threshold in milliseconds to help define what satisfactory\n                and tolerable response times are. This value will be reflected in the\n                calculation of your [link:Apdex], a standard measurement in performance.`,\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/performance-monitoring/performance/metrics/#apdex\" />\n            ),\n          }\n        ),\n      },\n    ],\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n};\n\nclass OrganizationPerformance extends React.Component<Props> {\n  handleSuccess = (data: Organization) => {\n    updateOrganization(data);\n  };\n\n  render() {\n    const {location, organization} = this.props;\n    const features = new Set(organization.features);\n    const access = new Set(organization.access);\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      location,\n      features,\n      access,\n      disabled: !(access.has('org:write') && features.has('performance-view')),\n    };\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title=\"Performance\" />\n        <PermissionAlert />\n\n        <Form\n          data-test-id=\"organization-performance-settings\"\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          saveOnBlur\n          allowUndo\n          initialData={organization}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={() => addErrorMessage('Unable to save changes')}\n        >\n          <JsonForm {...jsonFormSettings} forms={fields} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationPerformance);\n"],"sourceRoot":""}