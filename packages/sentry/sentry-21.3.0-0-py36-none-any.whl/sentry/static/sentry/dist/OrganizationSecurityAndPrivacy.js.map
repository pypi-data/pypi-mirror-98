{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/data/forms/organizationSecurityAndPrivacyGroups.tsx","webpack:///./app/views/settings/organizationSecurityAndPrivacy/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","route","t","fields","name","type","label","help","confirm","true","false","deprecatedSelectControl","visible","features","has","placeholder","value","formatStoreCrashReports","choices","getStoreCrashReportsValues","SettingScope","Organization","map","hasSsoEnabled","multiline","autosize","maxRows","rows","extraHelp","getValue","val","extractMultilineFields","setValue","convertMultilineFieldValue","OrganizationSecurityAndPrivacyContent","handleUpdateOrganization","data","updateOrganization","orgId","props","params","organization","initialData","endpoint","access","Set","relayPiiConfig","authProvider","state","Fragment","orgSlug","slug","data-test-id","apiMethod","apiEndpoint","additionalFieldProps","onSubmitSuccess","onSubmitError","addErrorMessage","saveOnBlur","allowUndo","forms","organizationSecurityAndPrivacyGroups","disabled","additionalContext","withOrganization"],"mappings":"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","file":"OrganizationSecurityAndPrivacy.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import {t} from 'app/locale';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'app/utils';\nimport {\n  formatStoreCrashReports,\n  getStoreCrashReportsValues,\n  SettingScope,\n} from 'app/utils/crashReports';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/security-and-privacy/';\nexport default [\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'require2FA',\n        type: 'boolean',\n        label: t('Require Two-Factor Authentication'),\n        help: t('Require and enforce two-factor authentication for all members'),\n        confirm: {\n          true: t(\n            'This will remove all members without two-factor authentication' +\n              ' from your organization. It will also send them an email to setup 2FA' +\n              ' and reinstate their access and settings. Do you want to continue?'\n          ),\n          false: t(\n            'Are you sure you want to allow users to access your organization without having two-factor authentication enabled?'\n          ),\n        },\n      },\n      {\n        name: 'allowSharedIssues',\n        type: 'boolean',\n\n        label: t('Allow Shared Issues'),\n        help: t('Enable sharing of limited details on issues to anonymous users'),\n        confirm: {\n          true: t('Are you sure you want to allow sharing issues to anonymous users?'),\n        },\n      },\n      {\n        name: 'enhancedPrivacy',\n        type: 'boolean',\n\n        label: t('Enhanced Privacy'),\n        help: t(\n          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'scrapeJavaScript',\n        type: 'boolean',\n        confirm: {\n          false: t(\n            \"Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts.\"\n          ),\n        },\n        label: t('Allow JavaScript Source Fetching'),\n        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n      },\n      {\n        name: 'storeCrashReports',\n        type: 'select',\n        deprecatedSelectControl: false,\n        label: t('Store Native Crash Reports'),\n        help: t(\n          'Store native crash reports such as Minidumps for improved processing and download in issue details'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n        // HACK: some organization can have limit of stored crash reports a number that's not in the options (legacy reasons),\n        // we therefore display it in a placeholder\n        placeholder: ({value}) => formatStoreCrashReports(value),\n        choices: () =>\n          getStoreCrashReportsValues(SettingScope.Organization).map(value => [\n            value,\n            formatStoreCrashReports(value),\n          ]),\n      },\n      {\n        name: 'allowJoinRequests',\n        type: 'boolean',\n\n        label: t('Allow Join Requests'),\n        help: t('Allow users to request to join your organization'),\n        confirm: {\n          true: t(\n            'Are you sure you want to allow users to request to join your organization?'\n          ),\n        },\n        visible: ({hasSsoEnabled}) => !hasSsoEnabled,\n      },\n    ],\n  },\n  {\n    title: t('Data Scrubbing'),\n    fields: [\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Require Data Scrubber'),\n        help: t('Require server-side data scrubbing be enabled for all projects'),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        label: t('Require Using Default Scrubbers'),\n        help: t(\n          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: 'e.g. email',\n        label: t('Global Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields.'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('e.g. business-email'),\n        label: t('Global Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        label: t('Prevent Storing of IP Addresses'),\n        help: t(\n          'Preventing IP addresses from being stored for new events on all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n    ],\n  },\n] as JsonFormObject[];\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport organizationSecurityAndPrivacyGroups from 'app/data/forms/organizationSecurityAndPrivacyGroups';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport DataScrubbing from '../components/dataScrubbing';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n};\n\nclass OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n    return [['authProvider', `/organizations/${orgId}/auth-provider/`]];\n  }\n\n  handleUpdateOrganization = (data: Organization) => {\n    // This will update OrganizationStore (as well as OrganizationsStore\n    // which is slightly incorrect because it has summaries vs a detailed org)\n    updateOrganization(data);\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n    const {orgId} = this.props.params;\n    const initialData = organization;\n    const endpoint = `/organizations/${orgId}/`;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n    const relayPiiConfig = organization.relayPiiConfig;\n    const {authProvider} = this.state;\n    const title = t('Security & Privacy');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} orgSlug={organization.slug} />\n        <SettingsPageHeader title={title} />\n        <Form\n          data-test-id=\"organization-settings-security-and-privacy\"\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          additionalFieldProps={{hasSsoEnabled: !!authProvider}}\n          onSubmitSuccess={this.handleUpdateOrganization}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          saveOnBlur\n          allowUndo\n        >\n          <JsonForm\n            features={features}\n            forms={organizationSecurityAndPrivacyGroups}\n            disabled={!access.has('org:write')}\n          />\n        </Form>\n        <DataScrubbing\n          additionalContext={t('These rules can be configured for each project.')}\n          endpoint={endpoint}\n          relayPiiConfig={relayPiiConfig}\n          disabled={!access.has('org:write')}\n          organization={organization}\n          onSubmitSuccess={this.handleUpdateOrganization}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSecurityAndPrivacyContent);\n"],"sourceRoot":""}