{"version":3,"sources":["webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTags.tsx"],"names":["deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","a","DeviceName","props","_isMounted","state","this","then","setState","value","children","deviceName","data-test-id","React","Component","GroupTags","tagList","loading","error","fetchData","api","group","environments","request","id","query","environment","success","data","prevProps","isEqual","baseUrl","onRetry","map","tag","tagIdx","valueChildren","topValues","tagValue","tagValueIdx","label","pct","percent","count","totalValues","key","version","name","anchor","className","to","pathname","style","width","TagItem","hasButtons","textTransform","fontSize","DetailsLinkWrapper","t","withPadding","listStyleType","padding","margin","Container","type","tct","link","href","getTagsDocsUrl","space","withApi"],"mappings":"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","file":"GroupTags.js","sourcesContent":["import React from 'react';\n\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import(/* webpackChunkName: \"iOSDeviceList\" */ 'ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Count from 'app/components/count';\nimport DeviceName from 'app/components/deviceName';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport Version from 'app/components/version';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Group, TagWithTopValues} from 'app/types';\nimport {percent} from 'app/utils';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  baseUrl: string;\n  group: Group;\n  api: Client;\n  environments: string[];\n};\n\ntype State = {\n  tagList: null | TagWithTopValues[];\n  loading: boolean;\n  error: boolean;\n};\n\nclass GroupTags extends React.Component<Props, State> {\n  state: State = {\n    tagList: null,\n    loading: true,\n    error: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.environments, this.props.environments)) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    const {api, group, environments} = this.props;\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    api.request(`/issues/${group.id}/tags/`, {\n      query: {environment: environments},\n      success: data => {\n        this.setState({\n          tagList: data,\n          error: false,\n          loading: false,\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  };\n\n  getTagsDocsUrl() {\n    return 'https://docs.sentry.io/platform-redirect/?next=/enriching-events/tags';\n  }\n\n  render() {\n    const {baseUrl} = this.props;\n\n    let children: React.ReactNode[] = [];\n\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (this.state.tagList) {\n      children = this.state.tagList.map((tag, tagIdx) => {\n        const valueChildren = tag.topValues.map((tagValue, tagValueIdx) => {\n          let label: React.ReactNode = null;\n          const pct = percent(tagValue.count, tag.totalValues);\n          const query = tagValue.query || `${tag.key}:\"${tagValue.value}\"`;\n\n          switch (tag.key) {\n            case 'release':\n              label = <Version version={tagValue.name} anchor={false} />;\n              break;\n            default:\n              label = <DeviceName value={tagValue.name} />;\n          }\n\n          return (\n            <li key={tagValueIdx} data-test-id={tag.key}>\n              <GlobalSelectionLink\n                className=\"tag-bar\"\n                to={{\n                  pathname: `${baseUrl}events/`,\n                  query: {query},\n                }}\n              >\n                <span className=\"tag-bar-background\" style={{width: pct + '%'}} />\n                <span className=\"tag-bar-label\">{label}</span>\n                <span className=\"tag-bar-count\">\n                  <Count value={tagValue.count} />\n                </span>\n              </GlobalSelectionLink>\n            </li>\n          );\n        });\n\n        return (\n          <TagItem key={tagIdx}>\n            <Panel>\n              <PanelHeader hasButtons style={{textTransform: 'none'}}>\n                <div style={{fontSize: 16}}>{tag.key}</div>\n                <DetailsLinkWrapper>\n                  <GlobalSelectionLink\n                    className=\"btn btn-default btn-sm\"\n                    to={`${baseUrl}tags/${tag.key}/`}\n                  >\n                    {t('More Details')}\n                  </GlobalSelectionLink>\n                </DetailsLinkWrapper>\n              </PanelHeader>\n              <PanelBody withPadding>\n                <ul style={{listStyleType: 'none', padding: 0, margin: 0}}>\n                  {valueChildren}\n                </ul>\n              </PanelBody>\n            </Panel>\n          </TagItem>\n        );\n      });\n    }\n\n    return (\n      <div>\n        <Container>{children}</Container>\n        <Alert type=\"info\">\n          {tct(\n            'Tags are automatically indexed for searching and breakdown charts. Learn how to [link: add custom tags to issues]',\n            {\n              link: <a href={this.getTagsDocsUrl()} />,\n            }\n          )}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst DetailsLinkWrapper = styled('div')`\n  display: flex;\n`;\n\nconst Container = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst TagItem = styled('div')`\n  padding: 0 ${space(1)};\n  width: 50%;\n`;\n\nexport default withApi(GroupTags);\n"],"sourceRoot":""}