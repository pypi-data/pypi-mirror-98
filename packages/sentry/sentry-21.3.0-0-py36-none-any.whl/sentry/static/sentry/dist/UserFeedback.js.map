{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/issues/snoozeActionModal.tsx","webpack:///./app/components/issues/compactIssue.tsx","webpack:///./app/views/userFeedback/utils.tsx","webpack:///./app/views/userFeedback/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SnoozeTimes","SnoozeActionModal","Body","Footer","closeModal","onSnooze","handleSnooze","duration","Fragment","t","className","onClick","bind","THIRTY_MINUTES","TWO_HOURS","TWENTY_FOUR_HOURS","undefined","type","CompactIssueHeader","props","data","organization","projectId","eventId","basePath","slug","issueLink","id","commentColor","subscriptionDetails","reason","IssueHeaderMetaWrapper","StyledErrorLevel","size","level","IconLink","to","status","isBookmarked","isSolid","project","numComments","color","getMessage","React","Component","CompactIssue","createReactClass","displayName","mixins","Reflux","listenTo","GroupStore","getInitialState","issue","get","componentWillReceiveProps","nextProps","setState","onGroupChange","itemIds","has","ignoreDuration","onUpdate","state","addLoadingMessage","bulkUpdate","api","orgId","complete","clearIndicators","render","hasSeen","statsPeriod","toggleSelect","flexDirection","style","paddingTop","paddingBottom","showActions","topLevelClasses","caret","openModal","deps","children","withApi","withOrganization","ErrorLevel","space","Link","getQuery","search","query","qs","pick","Object","values","URL_PARAM","OrganizationUserFeedback","location","params","data-test-id","reportList","map","item","key","eventID","StyledEventUserFeedback","report","issueId","projectIds","renderBody","loading","length","renderResults","renderEmpty","pathname","reportListPageLinks","unresolvedQuery","omit","allIssuesQuery","Header","active","Array","isArray","merged","barId","renderStreamBody","pageLinks","withProfiler","EventUserFeedback"],"mappings":"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","file":"UserFeedback.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\n\nenum SnoozeTimes {\n  // all values in minutes\n  THIRTY_MINUTES = 30,\n  TWO_HOURS = 60 * 2,\n  TWENTY_FOUR_HOURS = 60 * 24,\n}\n\ntype Props = ModalRenderProps & {\n  onSnooze: (duration: SnoozeTimes) => {};\n};\n\nconst SnoozeActionModal = ({Body, Footer, closeModal, onSnooze}: Props) => {\n  const handleSnooze = (duration: SnoozeTimes) => {\n    onSnooze(duration);\n    closeModal();\n  };\n\n  return (\n    <React.Fragment>\n      <Body>\n        <h5>{t('How long should we ignore this issue?')}</h5>\n        <ul className=\"nav nav-stacked nav-pills\">\n          <li>\n            <a onClick={handleSnooze.bind(this, SnoozeTimes.THIRTY_MINUTES)}>\n              {t('30 minutes')}\n            </a>\n          </li>\n          <li>\n            <a onClick={handleSnooze.bind(this, SnoozeTimes.TWO_HOURS)}>{t('2 hours')}</a>\n          </li>\n          <li>\n            <a onClick={handleSnooze.bind(this, SnoozeTimes.TWENTY_FOUR_HOURS)}>\n              {t('24 hours')}\n            </a>\n          </li>\n          {/* override click event object w/ undefined to indicate \"no duration\" */}\n          <li>\n            <a onClick={handleSnooze.bind(this, undefined)}>{t('Forever')}</a>\n          </li>\n        </ul>\n      </Body>\n      <Footer>\n        <button type=\"button\" className=\"btn btn-default\" onClick={closeModal}>\n          {t('Cancel')}\n        </button>\n      </Footer>\n    </React.Fragment>\n  );\n};\n\nexport default SnoozeActionModal;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {bulkUpdate} from 'app/actionCreators/group';\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {openModal} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport DropdownLink from 'app/components/dropdownLink';\nimport EventOrGroupTitle from 'app/components/eventOrGroupTitle';\nimport ErrorLevel from 'app/components/events/errorLevel';\nimport SnoozeActionModal from 'app/components/issues/snoozeActionModal';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport GroupChart from 'app/components/stream/groupChart';\nimport {IconChat, IconCheckmark, IconEllipsis, IconMute, IconStar} from 'app/icons';\nimport {t} from 'app/locale';\nimport GroupStore from 'app/stores/groupStore';\nimport space from 'app/styles/space';\nimport {Group, LightWeightOrganization} from 'app/types';\nimport {getMessage} from 'app/utils/events';\nimport {Aliases} from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype HeaderProps = {\n  organization: LightWeightOrganization;\n  projectId: string;\n  data: Group;\n  eventId?: string;\n};\n\nclass CompactIssueHeader extends React.Component<HeaderProps> {\n  render() {\n    const {data, organization, projectId, eventId} = this.props;\n\n    const basePath = `/organizations/${organization.slug}/issues/`;\n\n    const issueLink = eventId\n      ? `/organizations/${organization.slug}/projects/${projectId}/events/${eventId}/`\n      : `${basePath}${data.id}/`;\n\n    const commentColor: keyof Aliases =\n      data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned'\n        ? 'success'\n        : 'textColor';\n\n    return (\n      <React.Fragment>\n        <IssueHeaderMetaWrapper>\n          <StyledErrorLevel size=\"12px\" level={data.level} title={data.level} />\n          <h3 className=\"truncate\">\n            <IconLink to={issueLink || ''}>\n              {data.status === 'ignored' && <IconMute size=\"xs\" />}\n              {data.isBookmarked && <IconStar isSolid size=\"xs\" />}\n              <EventOrGroupTitle data={data} />\n            </IconLink>\n          </h3>\n        </IssueHeaderMetaWrapper>\n        <div className=\"event-extra\">\n          <span className=\"project-name\">\n            <strong>{data.project.slug}</strong>\n          </span>\n          {data.numComments !== 0 && (\n            <span>\n              <IconLink to={`${basePath}${data.id}/activity/`} className=\"comments\">\n                <IconChat size=\"xs\" color={commentColor} />\n                <span className=\"tag-count\">{data.numComments}</span>\n              </IconLink>\n            </span>\n          )}\n          <span className=\"culprit\">{getMessage(data)}</span>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\ntype Props = {\n  api: Client;\n  id: string;\n  organization: LightWeightOrganization;\n  statsPeriod?: string;\n  showActions?: boolean;\n  eventId?: string;\n  data?: Group;\n};\n\ntype State = {\n  issue: Group;\n};\n\nconst CompactIssue = createReactClass<Props, State>({\n  displayName: 'CompactIssue',\n\n  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange') as any],\n\n  getInitialState() {\n    return {\n      issue: this.props.data || GroupStore.get(this.props.id),\n    };\n  },\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.id !== this.props.id) {\n      this.setState({\n        issue: GroupStore.get(this.props.id),\n      });\n    }\n  },\n\n  onGroupChange(itemIds: Set<string>) {\n    if (!itemIds.has(this.props.id)) {\n      return;\n    }\n    const id = this.props.id;\n    const issue = GroupStore.get(id);\n    this.setState({\n      issue,\n    });\n  },\n\n  onSnooze(duration) {\n    const data: Record<string, string> = {\n      status: 'ignored',\n    };\n\n    if (duration) {\n      data.ignoreDuration = duration;\n    }\n\n    this.onUpdate(data);\n  },\n\n  onUpdate(data: Record<string, string>) {\n    const issue = this.state.issue;\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    bulkUpdate(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        projectId: issue.project.slug,\n        itemIds: [issue.id],\n        data,\n      },\n      {\n        complete: () => {\n          clearIndicators();\n        },\n      }\n    );\n  },\n\n  render() {\n    const issue = this.state.issue;\n    const {organization} = this.props;\n\n    let className = 'issue';\n    if (issue.isBookmarked) {\n      className += ' isBookmarked';\n    }\n    if (issue.hasSeen) {\n      className += ' hasSeen';\n    }\n    if (issue.status === 'resolved') {\n      className += ' isResolved';\n    }\n    if (issue.status === 'ignored') {\n      className += ' isIgnored';\n    }\n    if (this.props.statsPeriod) {\n      className += ' with-graph';\n    }\n\n    return (\n      <PanelItem\n        className={className}\n        onClick={this.toggleSelect}\n        flexDirection=\"column\"\n        style={{paddingTop: '12px', paddingBottom: '6px'}}\n      >\n        <CompactIssueHeader\n          data={issue}\n          organization={organization}\n          projectId={issue.project.slug}\n          eventId={this.props.eventId}\n        />\n        {this.props.statsPeriod && (\n          <div className=\"event-graph\">\n            <GroupChart statsPeriod={this.props.statsPeriod} data={this.props.data} />\n          </div>\n        )}\n        {this.props.showActions && (\n          <div className=\"more-menu-container align-right\">\n            <DropdownLink\n              topLevelClasses=\"more-menu\"\n              className=\"more-menu-toggle\"\n              caret={false}\n              title={<IconEllipsis size=\"xs\" />}\n            >\n              <li>\n                <IconLink\n                  to=\"\"\n                  onClick={this.onUpdate.bind(this, {\n                    status: issue.status !== 'resolved' ? 'resolved' : 'unresolved',\n                  })}\n                >\n                  <IconCheckmark size=\"xs\" />\n                </IconLink>\n              </li>\n              <li>\n                <IconLink\n                  to=\"\"\n                  onClick={this.onUpdate.bind(this, {isBookmarked: !issue.isBookmarked})}\n                >\n                  <IconStar isSolid size=\"xs\" />\n                </IconLink>\n              </li>\n              <li>\n                <a\n                  onClick={() =>\n                    openModal(deps => (\n                      <SnoozeActionModal {...deps} onSnooze={this.onSnooze} />\n                    ))\n                  }\n                >\n                  <span>{t('zZz')}</span>\n                </a>\n              </li>\n            </DropdownLink>\n          </div>\n        )}\n        {this.props.children}\n      </PanelItem>\n    );\n  },\n});\n\nexport {CompactIssue};\nexport default withApi(withOrganization(CompactIssue));\n\nconst IssueHeaderMetaWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledErrorLevel = styled(ErrorLevel)`\n  display: block;\n  margin-right: ${space(1)};\n`;\n\nconst IconLink = styled(Link)`\n  & > svg {\n    margin-right: ${space(0.5)};\n  }\n`;\n","import pick from 'lodash/pick';\nimport * as qs from 'query-string';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\n\nconst DEFAULT_STATUS = 'unresolved';\n\n/**\n * Get query for API given the current location.search string\n */\nexport function getQuery(search: string) {\n  const query = qs.parse(search);\n\n  const status = typeof query.status !== 'undefined' ? query.status : DEFAULT_STATUS;\n\n  const queryParams = {\n    status,\n    ...pick(query, ['cursor', ...Object.values(URL_PARAM)]),\n  };\n\n  return queryParams;\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {withProfiler} from '@sentry/react';\nimport omit from 'lodash/omit';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport CompactIssue from 'app/components/issues/compactIssue';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport PageHeading from 'app/components/pageHeading';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, UserReport} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\n\nimport UserFeedbackEmpty from './userFeedbackEmpty';\nimport {getQuery} from './utils';\n\ntype State = AsyncView['state'] & {\n  reportList: UserReport[];\n};\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\nclass OrganizationUserFeedback extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      organization,\n      location: {search},\n    } = this.props;\n\n    return [\n      [\n        'reportList',\n        `/organizations/${organization.slug}/user-feedback/`,\n        {\n          query: getQuery(search),\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `${t('User Feedback')} - ${this.props.organization.slug}`;\n  }\n\n  get projectIds() {\n    const {project} = this.props.location.query;\n\n    return Array.isArray(project)\n      ? project\n      : typeof project === 'string'\n      ? [project]\n      : [];\n  }\n\n  renderResults() {\n    const {orgId} = this.props.params;\n\n    return (\n      <div data-test-id=\"user-feedback-list\">\n        {this.state.reportList.map(item => {\n          const issue = item.issue;\n          return (\n            <CompactIssue key={item.id} id={issue.id} data={issue} eventId={item.eventID}>\n              <StyledEventUserFeedback report={item} orgId={orgId} issueId={issue.id} />\n            </CompactIssue>\n          );\n        })}\n      </div>\n    );\n  }\n\n  renderEmpty() {\n    return <UserFeedbackEmpty projectIds={this.projectIds} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderStreamBody() {\n    const {loading, reportList} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!reportList.length) {\n      return this.renderEmpty();\n    }\n\n    return this.renderResults();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {location} = this.props;\n    const {pathname, search, query} = location;\n    const {status} = getQuery(search);\n    const {reportListPageLinks} = this.state;\n\n    const unresolvedQuery = omit(query, 'status');\n    const allIssuesQuery = {...query, status: ''};\n\n    return (\n      <GlobalSelectionHeader>\n        <PageContent>\n          <LightWeightNoProjectMessage organization={organization}>\n            <div data-test-id=\"user-feedback\">\n              <Header>\n                <PageHeading>{t('User Feedback')}</PageHeading>\n                <ButtonBar active={!Array.isArray(status) ? status || '' : ''} merged>\n                  <Button\n                    size=\"small\"\n                    barId=\"unresolved\"\n                    to={{pathname, query: unresolvedQuery}}\n                  >\n                    {t('Unresolved')}\n                  </Button>\n                  <Button size=\"small\" barId=\"\" to={{pathname, query: allIssuesQuery}}>\n                    {t('All Issues')}\n                  </Button>\n                </ButtonBar>\n              </Header>\n              <Panel>\n                <PanelBody className=\"issue-list\">{this.renderStreamBody()}</PanelBody>\n              </Panel>\n              <Pagination pageLinks={reportListPageLinks} />\n            </div>\n          </LightWeightNoProjectMessage>\n        </PageContent>\n      </GlobalSelectionHeader>\n    );\n  }\n}\n\nexport default withOrganization(withProfiler(OrganizationUserFeedback));\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledEventUserFeedback = styled(EventUserFeedback)`\n  margin: ${space(2)} 0 0;\n`;\n"],"sourceRoot":""}