{"version":3,"sources":["webpack:///./app/views/alerts/utils/index.tsx","webpack:///./app/views/settings/incidentRules/types.tsx","webpack:///./app/views/settings/incidentRules/constants.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/getIncidentDiscoverUrl.tsx","webpack:///./app/views/settings/incidentRules/presets.tsx","webpack:///./app/views/alerts/utils/getIncidentRuleDiscoverUrl.tsx","webpack:///./app/views/settings/incidentRules/incidentRulePresets.tsx"],"names":["uncancellableApi","Client","fetchAlertRule","orgId","ruleId","requestPromise","fetchIncidentsForRule","alertRule","start","end","query","detailed","fetchIncident","api","alertId","fetchIncidentStats","updateSubscription","isSubscribed","method","updateStatus","status","data","isOpen","incident","IncidentStatus","CLOSED","getIncidentMetricPreset","aggregate","dataset","Dataset","ERRORS","PRESET_AGGREGATES","find","p","validDataset","includes","match","test","getIncidentRuleMetricPreset","rule","ALERT_RULE_PRESET_AGGREGATES","getStartEndFromStats","stats","getUtcDateString","eventStats","length","isIssueAlert","hasOwnProperty","DATA_SOURCE_LABELS","t","TRANSACTIONS","Datasource","ERROR_DEFAULT","ERROR","DEFAULT","TRANSACTION","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","eventTypes","EventTypes","convertDatasetEventTypesToSource","getQueryDatasource","slice","sort","join","source","replace","trim","toUpperCase","AlertRuleThreshold","AlertRuleThresholdType","TimePeriod","TimeWindow","ActionType","TargetType","DEFAULT_AGGREGATE","DATASET_EVENT_TYPE_FILTERS","DATASOURCE_EVENT_TYPE_FILTERS","errorFieldConfig","aggregations","fields","transactionFieldConfig","measurementKeys","Object","keys","WEB_VITAL_DETAILS","createDefaultTrigger","label","alertThreshold","actions","createDefaultRule","timeWindow","triggers","projects","environment","resolveThreshold","thresholdType","ABOVE","createRuleFromEventView","eventView","parsedQuery","datasetAndEventtypes","error","getYAxis","IncidentType","IncidentActivityType","IncidentStatusMethod","AlertRuleStatus","getIncidentDiscoverUrl","opts","orgSlug","extraQueryParams","timeWindowString","discoverQuery","id","undefined","name","title","orderby","getAggregateAlias","yAxis","filter","slug","map","Number","version","EventView","fromSavedQuery","getResultsViewUrlTarget","toObject","interval","default","makeCtaParams","makeDefaultCta","makeGenericTransactionCta","tooltip","to","buttonText","tokenizeSearch","transaction","getTagValues","display","DisplayModes","TOP5","period","transactionSummaryRouteWithQuery","projectID","Set","getIncidentRuleDiscoverUrl"],"mappings":"qsBAoBA,IAAMA,EAAmB,IAAIC,IAEtB,SAASC,EAAeC,EAAeC,GAC5C,OAAOJ,EAAiBK,eAAjB,yBACaF,EADb,wBACkCC,EADlC,MAKF,SAASE,EACdH,EACAI,EACAC,EACAC,GAEA,OAAOT,EAAiBK,eAAjB,yBAAkDF,EAAlD,eAAsE,CAC3EO,MAAO,CAACH,YAAWC,QAAOC,MAAKE,UAAU,KAItC,SAASC,EACdC,EACAV,EACAW,GAEA,OAAOD,EAAIR,eAAJ,yBAAqCF,EAArC,sBAAwDW,EAAxD,MAGF,SAASC,EACdF,EACAV,EACAW,GAEA,OAAOD,EAAIR,eAAJ,yBAAqCF,EAArC,sBAAwDW,EAAxD,YAGF,SAASE,EACdH,EACAV,EACAW,EACAG,GAEA,IAAMC,EAASD,EAAe,OAAS,SACvC,OAAOJ,EAAIR,eAAJ,yBACaF,EADb,sBACgCW,EADhC,mBAEL,CACEI,WAKC,SAASC,EACdN,EACAV,EACAW,EACAM,GAEA,OAAOP,EAAIR,eAAJ,yBAAqCF,EAArC,sBAAwDW,EAAxD,KAAoE,CACzEI,OAAQ,MACRG,KAAM,CACJD,YAWC,SAASE,EAAOC,GACrB,OAAQA,EAASH,QACf,KAAKI,IAAeC,OAClB,OAAO,EACT,QACE,OAAO,GAIN,SAASC,EAAwBH,GAAoB,QACpDhB,EAAYgB,aAAH,EAAGA,EAAUhB,UACtBoB,EAAS,UAAGpB,aAAH,EAAGA,EAAWoB,iBAAd,QAA2B,GACpCC,EAAO,UAAGrB,aAAH,EAAGA,EAAWqB,eAAd,QAAyBC,IAAQC,OAE9C,OAAOC,IAAkBC,MACvB,SAAAC,GAAC,OAAIA,EAAEC,aAAaC,SAASP,IAAYK,EAAEG,MAAMC,KAAKV,MAInD,SAASW,EAA4BC,GAAqB,QACzDZ,EAAS,UAAGY,aAAH,EAAGA,EAAMZ,iBAAT,QAAsB,GAC/BC,EAAO,UAAGW,aAAH,EAAGA,EAAMX,eAAT,QAAoBC,IAAQC,OAEzC,OAAOU,IAA6BR,MAClC,SAAAC,GAAC,OAAIA,EAAEC,aAAaC,SAASP,IAAYK,EAAEG,MAAMC,KAAKV,MAOnD,SAASc,EAAqBC,GAMnC,MAAO,CAAClC,MALMmC,YAA+C,IAA9BD,EAAME,WAAWvB,KAAK,GAAG,IAKzCZ,IAJHkC,YACmD,IAA7DD,EAAME,WAAWvB,KAAKqB,EAAME,WAAWvB,KAAKwB,OAAS,GAAG,KA6DrD,SAASC,EACdzB,GAEA,OAAQA,EAAK0B,eAAe,YAGvB,IAAMC,GAAkB,WAC5BnB,IAAQC,OAASmB,YAAE,WADS,MAE5BpB,IAAQqB,aAAeD,YAAE,iBAFG,MAG5BE,IAAWC,cAAgBH,YAAE,2CAHD,MAI5BE,IAAWE,MAAQJ,YAAE,qBAJO,MAK5BE,IAAWG,QAAUL,YAAE,uBALK,MAM5BE,IAAWI,YAAcN,YAAE,2BANC,GAUlBO,GAAkC,WAC5CL,IAAWC,cAAgB,CAC1BxB,QAASC,IAAQC,OACjB2B,WAAY,CAACC,IAAWL,MAAOK,IAAWJ,WAHC,MAK5CH,IAAWE,MAAQ,CAClBzB,QAASC,IAAQC,OACjB2B,WAAY,CAACC,IAAWL,SAPmB,MAS5CF,IAAWG,QAAU,CACpB1B,QAASC,IAAQC,OACjB2B,WAAY,CAACC,IAAWJ,WAXmB,MAa5CH,IAAWI,YAAc,CACxB3B,QAASC,IAAQqB,aACjBO,WAAY,CAACC,IAAWH,eAfmB,GAoBxC,SAASI,EACd/B,EACA6B,GAGA,OAAI7B,IAAYC,IAAQqB,aACfC,IAAWI,YAGfE,EAIDA,EAAWtB,SAASuB,IAAWJ,UAAYG,EAAWtB,SAASuB,IAAWL,OACrEF,IAAWC,cACTK,EAAWtB,SAASuB,IAAWJ,SACjCH,IAAWG,QAEXH,IAAWE,MARXF,IAAWE,MAkBf,SAASO,EACdlD,GAEA,IAAI0B,EAAQ1B,EAAM0B,MAChB,uGAEF,OAAIA,EAGiB,kBADAA,EAAMyB,MAAM,EAAG,GAAGC,OAAOC,KAAK,KAExC,KAGF,CAACC,OAAQb,IAAWC,cAAe1C,MAAOA,EAAMuD,QAAQ7B,EAAM,GAAI,IAAI8B,SAG/E9B,EAAQ1B,EAAM0B,MAAM,oDACPe,IAAWf,EAAM,GAAG+B,eACxB,CACLH,OAAQb,IAAWf,EAAM,GAAG+B,eAC5BzD,MAAOA,EAAMuD,QAAQ7B,EAAM,GAAI,IAAI8B,QAIhC,O,kCCjRF,IAAKE,EAKAC,EAKAxC,EAKA6B,EAMAP,EAuDAmB,EAUAC,EAiBAC,EAQAC,EA/GZ,gR,SAAYL,O,uBAAAA,I,4BAAAA,M,cAKAC,O,iBAAAA,I,kBAAAA,M,cAKAxC,K,gBAAAA,E,6BAAAA,M,cAKA6B,K,kBAAAA,E,cAAAA,E,2BAAAA,M,cAMAP,K,8BAAAA,E,kBAAAA,E,cAAAA,E,2BAAAA,M,cAuDAmB,K,eAAAA,E,aAAAA,E,gBAAAA,E,oBAAAA,E,oBAAAA,E,mBAAAA,M,cAUAC,O,2BAAAA,I,+BAAAA,I,8BAAAA,I,sCAAAA,I,oCAAAA,I,wBAAAA,I,2BAAAA,I,6BAAAA,I,yBAAAA,M,cAiBAC,K,cAAAA,E,cAAAA,E,sBAAAA,E,kBAAAA,E,yBAAAA,M,cAQAC,K,oBAAAA,E,YAAAA,E,YAAAA,E,yBAAAA,M,+6BC/FL,IAAMC,EAAoB,UAEpBC,GAA0B,WACpC9C,IAAQC,OAAS,oBADmB,MAEpCD,IAAQqB,aAAe,0BAFa,GAK1B0B,GAA6B,WACvCzB,IAAWC,cAAgB,4CADY,MAEvCD,IAAWE,MAAQ,oBAFoB,MAGvCF,IAAWG,QAAU,sBAHkB,MAIvCH,IAAWI,YAAc,0BAJc,GAgB7BsB,EAAiC,CAC5CC,aAAc,CAAC,QAAS,gBACxBC,OAAQ,CAAC,SAMEC,EAAuC,CAClDF,aAAc,CACZ,MACA,aACA,eACA,QACA,QACA,MACA,MACA,MACA,MACA,QAEFC,OAAQ,CAAC,wBACTE,gBAAiBC,OAAOC,KAAKC,MAGxB,SAASC,EAAqBC,GACnC,MAAO,CACLA,QACAC,eAAgB,GAChBC,QAAS,IAIN,SAASC,IACd,MAAO,CACL7D,QAASC,IAAQC,OACjB2B,WAAY,CAACC,IAAWL,OACxB1B,UAAW+C,EACXhE,MAAO,GACPgF,WAAY,EACZC,SAAU,CAACN,EAAqB,YAAaA,EAAqB,YAClEO,SAAU,GACVC,YAAa,KACbC,iBAAkB,GAClBC,cAAe1B,IAAuB2B,OAOnC,SAASC,EAAwBC,GAA2C,MAC3EC,EAAcvC,YAAmBsC,EAAUxF,OAC3C0F,EAAuBD,EACzB3C,IAAmC2C,EAAYnC,QAC/CR,IAAmC6C,MACvC,gBACKZ,KACAW,GAFL,IAGE1F,MAAK,UAAEyF,aAAF,EAAEA,EAAazF,aAAf,QAAwBwF,EAAUxF,MACvCiB,UAAWuE,EAAUI,WACrBT,YAAaK,EAAUL,YAAYhD,OAASqD,EAAUL,YAAY,GAAK,S,kCC5CpE,IAAKU,EAMAC,EAQAhF,EAOAiF,EAMAC,EA3BZ,wI,SAAYH,O,uBAAAA,I,qBAAAA,I,0BAAAA,M,cAMAC,O,qBAAAA,I,uBAAAA,I,iCAAAA,I,qBAAAA,I,sBAAAA,M,cAQAhF,O,mBAAAA,I,mBAAAA,I,sBAAAA,I,yBAAAA,M,cAOAiF,O,mBAAAA,I,+BAAAA,I,oCAAAA,M,cAMAC,O,qBAAAA,I,uBAAAA,I,wBAAAA,M,iyBClEL,SAASC,EAAuBC,GAMpC,MACMC,EAAwDD,EAAxDC,QAASjB,EAA+CgB,EAA/ChB,SAAUrE,EAAqCqF,EAArCrF,SAAUmB,EAA2BkE,EAA3BlE,MAAOoE,EAAoBF,EAApBE,iBAE3C,KAAKlB,GAAaA,EAAS/C,QAAWtB,GAAamB,GACjD,MAAO,GAGT,IAAMqE,EAAmB,GAAH,OAAMxF,EAAShB,UAAUmF,WAAzB,KAPrB,EAQoBjD,YAAqBC,GAAnClC,EARN,EAQMA,MAAOC,EARb,EAQaA,IAERuG,EAA0B,EAAH,CAC3BC,QAAIC,EACJC,KAAO5F,GAAYA,EAAS6F,OAAU,GACtCC,QAAS,IAAF,OAAMC,YAAkB/F,EAAShB,UAAUoB,YAClD4F,MAAOhG,EAAShB,UAAUoB,UAC1BjB,MAAK,UAAEa,aAAF,EAAEA,EAAUyF,qBAAZ,QAA6B,GAClCpB,SAAUA,EACP4B,QAAO,gBAAEC,EAAF,EAAEA,KAAF,OAAYlG,EAASqE,SAASzD,SAASsF,MAC9CC,KAAI,gBAAET,EAAF,EAAEA,GAAF,OAAUU,OAAOV,MACxBW,QAAS,EACT7C,OACExD,EAAShB,UAAUqB,UAAYC,IAAQC,OACnC,CAAC,QAAS,UAAW,sBACrB,CAAC,cAAeP,EAAShB,UAAUoB,WACzCnB,QACAC,OACGqG,GA1BJ,EA6BoBe,IAAUC,eAAed,GACJe,wBAAwBlB,GAA3DnG,EA9BN,EA8BMA,MAAUsH,EA9BhB,iBAgCD,UACEtH,MAAO,EAAF,KAAMA,GAAN,IAAauH,SAAUlB,KACzBiB,G,+kBCAA,IAAMjG,EAA8B,CACzC,CACEoF,KAAMlE,YAAE,eACRb,MAAO,aACPF,aAAc,CAACL,IAAQC,QACvBoG,QAAS,UAITC,cAAeC,GAEjB,CACEjB,KAAMlE,YAAE,kBACRb,MAAO,uCACPF,aAAc,CAACL,IAAQC,QACvBoG,QAAS,kCAITC,cAAeC,GAEjB,CACEjB,KAAMlE,YAAE,WACRb,MAAO,wEACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,yCAITC,cAAe,SAAAvB,GAAI,OACjByB,EAA0B,CACxBzB,OACA0B,QAASrF,YAAE,8BAGjB,CACEkE,KAAMlE,YAAE,SACRb,MAAO,oBACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,aAITC,cAAe,SAAAvB,GAAI,OACjByB,EAA0B,CACxBzB,OACA0B,QAASrF,YAAE,4BAGjB,CACEkE,KAAMlE,YAAE,qBACRb,MAAO,aACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,UAITC,cAAe,SAAAvB,GAAI,OAAIyB,EAA0B,CAACzB,WAEpD,CACEO,KAAMlE,YAAE,gBACRb,MAAO,oBACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,iBAITC,cAqFJ,YAAiF,QAApDtB,EAAoD,EAApDA,QAAStF,EAA2C,EAA3CA,SAAUqE,EAAiC,EAAjCA,SAAUlD,EAAuB,EAAvBA,MACxD,IAAKnB,IAAamB,EAChB,MAAO,CAAC6F,GAAI,GAAIC,WAAYvF,YAAE,qBAGhC,IAAMvC,EAAQ+H,YAAc,UAAClH,EAASyF,qBAAV,QAA2B,IACjD0B,EAAW,UAAGhI,EACjBiI,aAAa,sBADC,aAAG,EAEhB3G,MAAK,SAAAwF,GAAM,OAAKA,EAAOrF,SAAS,QAE9B2E,OACYI,IAAhBwB,EAEI,CACE3D,OAAQ,CAAC,qBAAsB,WAC/BsC,QAAS,SACTuB,QAASC,IAAaC,MAGxB,CACE/D,OAAQ,CAAC,cAAe,kBACxBsC,QAAS,gBACTuB,QAASC,IAAaC,MAW9B,MAAO,CACLP,GATkB5B,EAAuB,CACzCE,UACAjB,WACArE,WACAmB,QACAoE,qBAKA0B,WAAYvF,YAAE,oBACdmE,WAAuBF,IAAhBwB,EAA4BzF,YAAE,oCAAiCiE,MA1G1E,SAASmB,EAA0BzB,GAGrB,UAIRA,EAFFA,KAAOC,EAFG,EAEHA,QAASjB,EAFN,EAEMA,SAAUrE,EAFhB,EAEgBA,SAAUmB,EAF1B,EAE0BA,MACpC4F,EACE1B,EADF0B,QAGF,IAAK/G,IAAamB,EAChB,MAAO,CAAC6F,GAAI,GAAIC,WAAYvF,YAAE,qBAGhC,IACMyF,EAAW,UADHD,YAAc,UAAClH,EAASyF,qBAAV,QAA2B,IAEpD2B,aAAa,sBADC,aAAG,EAEhB3G,MAAK,SAAAwF,GAAM,OAAKA,EAAOrF,SAAS,QAGpC,QAAoB+E,IAAhBwB,EAA2B,CAC7B,IAAMK,EAAStG,YAAqBC,GAWpC,MAAO,CACL6F,GAViBS,YAAiC,CAClDnC,UACA6B,cACAO,UAAWrD,EACR4B,QAAO,gBAAEC,EAAF,EAAEA,KAAF,OAAYlG,EAASqE,SAASzD,SAASsF,MAC9CC,KAAI,qBAAET,MACTvG,MAAO,KAAIqI,KAKXP,WAAYvF,YAAE,4BACdmE,MAAOsB,GAKX,IAAM5B,EAAmB,CACvB/B,OAAQ,IAAI,IAAImE,IAAI,CAAC,cAAe,UAAW3H,EAAShB,UAAUoB,aAClE0F,QAAS,SACTuB,QAASC,IAAaC,MAWxB,MAAO,CACLP,GATkB5B,EAAuB,CACzCE,UACAjB,WACArE,WACAmB,QACAoE,qBAKA0B,WAAYvF,YAAE,oBACdmE,MAAOkB,GAyDJ,SAASF,EAAT,GAKsB,IAJ3BvB,EAI2B,EAJ3BA,QACAjB,EAG2B,EAH3BA,SACArE,EAE2B,EAF3BA,SACAmB,EAC2B,EAD3BA,MAEA,IAAKnB,EACH,MAAO,CACLiH,WAAYvF,YAAE,oBACdsF,GAAI,IAIR,IAAMzB,EAAmB,CACvB8B,QAASC,IAAaC,MAGxB,MAAO,CACLN,WAAYvF,YAAE,oBACdsF,GAAI5B,EAAuB,CAACE,UAASjB,WAAUrE,WAAUmB,QAAOoE,wB,ixBChQ7D,SAASqC,EAA2BvC,GAOxC,MACMC,EAAyDD,EAAzDC,QAASjB,EAAgDgB,EAAhDhB,SAAUrD,EAAsCqE,EAAtCrE,KAAM/B,EAAgCoG,EAAhCpG,MAAOC,EAAyBmG,EAAzBnG,IAAKqG,EAAoBF,EAApBE,iBAE5C,IAAKlB,IAAaA,EAAS/C,SAAWN,IAAU/B,IAAUC,EACxD,MAAO,GAGT,IAAMsG,EAAmB,GAAH,OAAMxE,EAAKmD,WAAX,KAEhBsB,EAA0B,EAAH,CAC3BC,QAAIC,EACJC,KAAO5E,GAAQA,EAAK4E,MAAS,GAC7BE,QAAS,IAAF,OAAMC,YAAkB/E,EAAKZ,YACpC4F,MAAOhF,EAAKZ,UACZjB,MAAK,UAAE6B,aAAF,EAAEA,EAAM7B,aAAR,QAAiB,GACtBkF,SAAUA,EACP4B,QAAO,gBAAEC,EAAF,EAAEA,KAAF,OAAYlF,EAAKqD,SAASzD,SAASsF,MAC1CC,KAAI,gBAAET,EAAF,EAAEA,GAAF,OAAUU,OAAOV,MACxBW,QAAS,EACT7C,OACExC,EAAKX,UAAYC,IAAQC,OACrB,CAAC,QAAS,UAAW,sBACrB,CAAC,cAAeS,EAAKZ,WAC3BnB,QACAC,OACGqG,GAzBJ,EA4BoBe,IAAUC,eAAed,GACJe,wBAAwBlB,GAA3DnG,EA7BN,EA6BMA,MAAUsH,EA7BhB,iBA+BD,UACEtH,MAAO,EAAF,KAAMA,GAAN,IAAauH,SAAUlB,KACzBiB,G,cCAMxF,EAAyC,CACpD,CACE2E,KAAMlE,YAAE,eACRb,MAAO,aACPF,aAAc,CAACL,IAAQC,QACvBoG,QAAS,UAITC,cAAeC,GAEjB,CACEjB,KAAMlE,YAAE,kBACRb,MAAO,uCACPF,aAAc,CAACL,IAAQC,QACvBoG,QAAS,kCAITC,cAAeC,GAEjB,CACEjB,KAAMlE,YAAE,WACRb,MAAO,wEACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,yCAITC,cAAe,SAAAvB,GAAI,OACjByB,EAA0B,CACxBzB,OACA0B,QAASrF,YAAE,8BAGjB,CACEkE,KAAMlE,YAAE,SACRb,MAAO,oBACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,aAITC,cAAe,SAAAvB,GAAI,OACjByB,EAA0B,CACxBzB,OACA0B,QAASrF,YAAE,4BAGjB,CACEkE,KAAMlE,YAAE,qBACRb,MAAO,aACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,UAITC,cAAe,SAAAvB,GAAI,OAAIyB,EAA0B,CAACzB,WAEpD,CACEO,KAAMlE,YAAE,gBACRb,MAAO,oBACPF,aAAc,CAACL,IAAQqB,cACvBgF,QAAS,iBAITC,cAoFJ,YAAkF,QAArDtB,EAAqD,EAArDA,QAAStE,EAA4C,EAA5CA,KAAMqD,EAAsC,EAAtCA,SAAUpF,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,IAC3D,IAAK8B,IAAU/B,IAAUC,EACvB,MAAO,CAAC8H,GAAI,GAAIC,WAAYvF,YAAE,uBAGhC,IAAMvC,EAAQ+H,YAAc,UAAClG,EAAK7B,aAAN,QAAe,IACrCgI,EAAW,UAAGhI,EACjBiI,aAAa,sBADC,aAAG,EAEhB3G,MAAK,SAAAwF,GAAM,OAAKA,EAAOrF,SAAS,QAE9B2E,OACYI,IAAhBwB,EAEI,CACE3D,OAAQ,CAAC,qBAAsB,WAC/BsC,QAAS,SACTuB,QAASC,IAAaC,MAGxB,CACE/D,OAAQ,CAAC,cAAe,kBACxBsC,QAAS,gBACTuB,QAASC,IAAaC,MAY9B,MAAO,CACLP,GAVkBY,EAA2B,CAC7CtC,UACAjB,WACArD,OACA/B,QACAC,MACAqG,qBAKA0B,WAAYvF,YAAE,oBACdmE,WAAuBF,IAAhBwB,EAA4BzF,YAAE,oCAAiCiE,MA1G1E,SAASmB,EAA0BzB,GAGrB,UAIRA,EAFFA,KAAOC,EAFG,EAEHA,QAASjB,EAFN,EAEMA,SAAUrD,EAFhB,EAEgBA,KAAM/B,EAFtB,EAEsBA,MAAOC,EAF7B,EAE6BA,IACvC6H,EACE1B,EADF0B,QAGF,IAAK/F,IAAU/B,IAAUC,EACvB,MAAO,CAAC8H,GAAI,GAAIC,WAAYvF,YAAE,uBAGhC,IACMyF,EAAW,UADHD,YAAc,UAAClG,EAAK7B,aAAN,QAAe,IAExCiI,aAAa,sBADC,aAAG,EAEhB3G,MAAK,SAAAwF,GAAM,OAAKA,EAAOrF,SAAS,QAGpC,QAAoB+E,IAAhBwB,EAUF,MAAO,CACLH,GAViBS,YAAiC,CAClDnC,UACA6B,cACAO,UAAWrD,EACR4B,QAAO,gBAAEC,EAAF,EAAEA,KAAF,OAAYlF,EAAKqD,SAASzD,SAASsF,MAC1CC,KAAI,qBAAET,MACTvG,MAAO,CAACF,QAAOC,SAKf+H,WAAYvF,YAAE,4BACdmE,MAAOsB,GAKX,IAAM5B,EAAmB,CACvB/B,OAAQ,IAAI,IAAImE,IAAI,CAAC,cAAe,UAAW3G,EAAKZ,aACpD0F,QAAS,SACTuB,QAASC,IAAaC,MAYxB,MAAO,CACLP,GAVkBY,EAA2B,CAC7CtC,UACAjB,WACArD,OACA/B,QACAC,MACAqG,qBAKA0B,WAAYvF,YAAE,oBACdmE,MAAOkB,GA0DJ,SAASF,EAAT,GAMsB,IAL3BvB,EAK2B,EAL3BA,QACAjB,EAI2B,EAJ3BA,SACArD,EAG2B,EAH3BA,KACA/B,EAE2B,EAF3BA,MACAC,EAC2B,EAD3BA,IAEA,IAAK8B,EACH,MAAO,CACLiG,WAAYvF,YAAE,oBACdsF,GAAI,IAIR,IAAMzB,EAAmB,CACvB8B,QAASC,IAAaC,MAGxB,MAAO,CACLN,WAAYvF,YAAE,oBACdsF,GAAIY,EAA2B,CAC7BtC,UACAjB,WACArD,OACA/B,QACAC,MACAqG","file":"AlertRulesDetails~AlertsDetails~AlertsList~DiscoverV2Results~PerformanceTransactionSummary~Performan~75e5fc52.js","sourcesContent":["import {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport {NewQuery, Project} from 'app/types';\nimport {IssueAlertRule} from 'app/types/alerts';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {getAggregateAlias} from 'app/utils/discover/fields';\nimport {ALERT_RULE_PRESET_AGGREGATES} from 'app/views/settings/incidentRules/incidentRulePresets';\nimport {PRESET_AGGREGATES} from 'app/views/settings/incidentRules/presets';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  IncidentRule,\n  SavedIncidentRule,\n} from 'app/views/settings/incidentRules/types';\n\nimport {Incident, IncidentStats, IncidentStatus} from '../types';\n\n// Use this api for requests that are getting cancelled\nconst uncancellableApi = new Client();\n\nexport function fetchAlertRule(orgId: string, ruleId: string): Promise<IncidentRule> {\n  return uncancellableApi.requestPromise(\n    `/organizations/${orgId}/alert-rules/${ruleId}/`\n  );\n}\n\nexport function fetchIncidentsForRule(\n  orgId: string,\n  alertRule: string,\n  start: string,\n  end: string\n): Promise<Incident[]> {\n  return uncancellableApi.requestPromise(`/organizations/${orgId}/incidents/`, {\n    query: {alertRule, start, end, detailed: true},\n  });\n}\n\nexport function fetchIncident(\n  api: Client,\n  orgId: string,\n  alertId: string\n): Promise<Incident> {\n  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/`);\n}\n\nexport function fetchIncidentStats(\n  api: Client,\n  orgId: string,\n  alertId: string\n): Promise<IncidentStats> {\n  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/stats/`);\n}\n\nexport function updateSubscription(\n  api: Client,\n  orgId: string,\n  alertId: string,\n  isSubscribed?: boolean\n): Promise<Incident> {\n  const method = isSubscribed ? 'POST' : 'DELETE';\n  return api.requestPromise(\n    `/organizations/${orgId}/incidents/${alertId}/subscriptions/`,\n    {\n      method,\n    }\n  );\n}\n\nexport function updateStatus(\n  api: Client,\n  orgId: string,\n  alertId: string,\n  status: IncidentStatus\n): Promise<Incident> {\n  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/`, {\n    method: 'PUT',\n    data: {\n      status,\n    },\n  });\n}\n\n/**\n * Is incident open?\n *\n * @param {Object} incident Incident object\n * @returns {Boolean}\n */\nexport function isOpen(incident: Incident): boolean {\n  switch (incident.status) {\n    case IncidentStatus.CLOSED:\n      return false;\n    default:\n      return true;\n  }\n}\n\nexport function getIncidentMetricPreset(incident: Incident) {\n  const alertRule = incident?.alertRule;\n  const aggregate = alertRule?.aggregate ?? '';\n  const dataset = alertRule?.dataset ?? Dataset.ERRORS;\n\n  return PRESET_AGGREGATES.find(\n    p => p.validDataset.includes(dataset) && p.match.test(aggregate)\n  );\n}\n\nexport function getIncidentRuleMetricPreset(rule?: IncidentRule) {\n  const aggregate = rule?.aggregate ?? '';\n  const dataset = rule?.dataset ?? Dataset.ERRORS;\n\n  return ALERT_RULE_PRESET_AGGREGATES.find(\n    p => p.validDataset.includes(dataset) && p.match.test(aggregate)\n  );\n}\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\n/**\n * Gets the URL for a discover view of the incident with the following default\n * parameters:\n *\n * - Ordered by the incident aggregate, descending\n * - yAxis maps to the aggregate\n * - The following fields are displayed:\n *   - For Error dataset alerts: [issue, count(), count_unique(user)]\n *   - For Transaction dataset alerts: [transaction, count()]\n * - Start and end are scoped to the same period as the alert rule\n */\nexport function getIncidentDiscoverUrl(opts: {\n  orgSlug: string;\n  projects: Project[];\n  incident?: Incident;\n  stats?: IncidentStats;\n  extraQueryParams?: Partial<NewQuery>;\n}) {\n  const {orgSlug, projects, incident, stats, extraQueryParams} = opts;\n\n  if (!projects || !projects.length || !incident || !stats) {\n    return '';\n  }\n\n  const timeWindowString = `${incident.alertRule.timeWindow}m`;\n  const {start, end} = getStartEndFromStats(stats);\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: (incident && incident.title) || '',\n    orderby: `-${getAggregateAlias(incident.alertRule.aggregate)}`,\n    yAxis: incident.alertRule.aggregate,\n    query: incident?.discoverQuery ?? '',\n    projects: projects\n      .filter(({slug}) => incident.projects.includes(slug))\n      .map(({id}) => Number(id)),\n    version: 2,\n    fields:\n      incident.alertRule.dataset === Dataset.ERRORS\n        ? ['issue', 'count()', 'count_unique(user)']\n        : ['transaction', incident.alertRule.aggregate],\n    start,\n    end,\n    ...extraQueryParams,\n  };\n\n  const discoverView = EventView.fromSavedQuery(discoverQuery);\n  const {query, ...toObject} = discoverView.getResultsViewUrlTarget(orgSlug);\n\n  return {\n    query: {...query, interval: timeWindowString},\n    ...toObject,\n  };\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedIncidentRule | IncidentRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: t('event.type:error OR event.type:default'),\n  [Datasource.ERROR]: t('event.type:error'),\n  [Datasource.DEFAULT]: t('event.type:default'),\n  [Datasource.TRANSACTION]: t('event.type:transaction'),\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions only has one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  } else if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  } else {\n    return Datasource.ERROR;\n  }\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {source: Datasource; query: string} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n","export enum AlertRuleThreshold {\n  INCIDENT,\n  RESOLUTION,\n}\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\nexport type UnsavedTrigger = {\n  // UnsavedTrigger can be apart of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n  label: string;\n  alertThreshold: number | '' | null;\n  actions: Action[];\n};\n\nexport type ThresholdControlValue = {\n  thresholdType: AlertRuleThresholdType;\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n};\n\nexport type SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  id: string;\n  dateCreated: string;\n  actions: Action[];\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedIncidentRule = {\n  dataset: Dataset;\n  projects: string[];\n  environment: string | null;\n  query: string;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  aggregate: string;\n  thresholdType: AlertRuleThresholdType;\n  resolveThreshold: number | '' | null;\n  eventTypes?: EventTypes[];\n};\n\nexport type SavedIncidentRule = UnsavedIncidentRule & {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  status: number;\n  name: string;\n};\n\nexport type IncidentRule = Partial<SavedIncidentRule> & UnsavedIncidentRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport type ProjectSelectOption = {\n  label: string;\n  value: number;\n};\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\nexport type SavedAction = UnsavedAction & SavedActionFields;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n};\n\nexport type UnsavedAction = {\n  type: ActionType;\n\n  targetType: TargetType | null;\n\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import EventView from 'app/utils/discover/eventView';\nimport {AggregationKey, LooseFieldKey} from 'app/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'app/utils/performance/vitals/constants';\nimport {\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n  getQueryDatasource,\n} from 'app/views/alerts/utils';\nimport {\n  AlertRuleThresholdType,\n  Dataset,\n  Datasource,\n  EventTypes,\n  Trigger,\n  UnsavedIncidentRule,\n} from 'app/views/settings/incidentRules/types';\n\nexport const DEFAULT_AGGREGATE = 'count()';\n\nexport const DATASET_EVENT_TYPE_FILTERS = {\n  [Dataset.ERRORS]: 'event.type:error',\n  [Dataset.TRANSACTIONS]: 'event.type:transaction',\n} as const;\n\nexport const DATASOURCE_EVENT_TYPE_FILTERS = {\n  [Datasource.ERROR_DEFAULT]: '(event.type:error OR event.type:default)',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n} as const;\n\ntype OptionConfig = {\n  aggregations: AggregationKey[];\n  fields: LooseFieldKey[];\n  measurementKeys?: string[];\n};\n\n/**\n * Allowed error aggregations for alerts\n */\nexport const errorFieldConfig: OptionConfig = {\n  aggregations: ['count', 'count_unique'],\n  fields: ['user'],\n};\n\n/**\n * Allowed transaction aggregations for alerts\n */\nexport const transactionFieldConfig: OptionConfig = {\n  aggregations: [\n    'avg',\n    'percentile',\n    'failure_rate',\n    'apdex',\n    'count',\n    'p50',\n    'p75',\n    'p95',\n    'p99',\n    'p100',\n  ],\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\nexport function createDefaultTrigger(label: 'critical' | 'warning'): Trigger {\n  return {\n    label,\n    alertThreshold: '',\n    actions: [],\n  };\n}\n\nexport function createDefaultRule(): UnsavedIncidentRule {\n  return {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n    aggregate: DEFAULT_AGGREGATE,\n    query: '',\n    timeWindow: 1,\n    triggers: [createDefaultTrigger('critical'), createDefaultTrigger('warning')],\n    projects: [],\n    environment: null,\n    resolveThreshold: '',\n    thresholdType: AlertRuleThresholdType.ABOVE,\n  };\n}\n\n/**\n * Create an unsaved alert from a discover EventView object\n */\nexport function createRuleFromEventView(eventView: EventView): UnsavedIncidentRule {\n  const parsedQuery = getQueryDatasource(eventView.query);\n  const datasetAndEventtypes = parsedQuery\n    ? DATA_SOURCE_TO_SET_AND_EVENT_TYPES[parsedQuery.source]\n    : DATA_SOURCE_TO_SET_AND_EVENT_TYPES.error;\n  return {\n    ...createDefaultRule(),\n    ...datasetAndEventtypes,\n    query: parsedQuery?.query ?? eventView.query,\n    aggregate: eventView.getYAxis(),\n    environment: eventView.environment.length ? eventView.environment[0] : null,\n  };\n}\n","import {Repository, User} from 'app/types';\nimport {IncidentRule} from 'app/views/settings/incidentRules/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport type Incident = {\n  dateClosed: string | null;\n  dateStarted: string;\n  dateDetected: string;\n  dateCreated: string;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  groups: string[]; // Array of group ids\n  discoverQuery: string;\n  organizationId: string;\n  projects: string[]; // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  hasSeen: boolean;\n  alertRule: IncidentRule;\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type IncidentSuspect = {\n  author: User;\n  dateCreated: string;\n  id: string;\n  message: string;\n  repository: Repository;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  eventStats?: {data: Data};\n  previousValue: string | null;\n  value: string | null;\n};\n\nexport enum IncidentType {\n  DETECTED,\n  CREATED,\n  TRIGGERED,\n}\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n","import {NewQuery, Project} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport {getAggregateAlias} from 'app/utils/discover/fields';\nimport {Incident, IncidentStats} from 'app/views/alerts/types';\nimport {getStartEndFromStats} from 'app/views/alerts/utils';\nimport {Dataset} from 'app/views/settings/incidentRules/types';\n/**\n * Gets the URL for a discover view of the incident with the following default\n * parameters:\n *\n * - Ordered by the incident aggregate, descending\n * - yAxis maps to the aggregate\n * - The following fields are displayed:\n *   - For Error dataset alerts: [issue, count(), count_unique(user)]\n *   - For Transaction dataset alerts: [transaction, count()]\n * - Start and end are scoped to the same period as the alert rule\n */\nexport function getIncidentDiscoverUrl(opts: {\n  orgSlug: string;\n  projects: Project[];\n  incident?: Incident;\n  stats?: IncidentStats;\n  extraQueryParams?: Partial<NewQuery>;\n}) {\n  const {orgSlug, projects, incident, stats, extraQueryParams} = opts;\n\n  if (!projects || !projects.length || !incident || !stats) {\n    return '';\n  }\n\n  const timeWindowString = `${incident.alertRule.timeWindow}m`;\n  const {start, end} = getStartEndFromStats(stats);\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: (incident && incident.title) || '',\n    orderby: `-${getAggregateAlias(incident.alertRule.aggregate)}`,\n    yAxis: incident.alertRule.aggregate,\n    query: incident?.discoverQuery ?? '',\n    projects: projects\n      .filter(({slug}) => incident.projects.includes(slug))\n      .map(({id}) => Number(id)),\n    version: 2,\n    fields:\n      incident.alertRule.dataset === Dataset.ERRORS\n        ? ['issue', 'count()', 'count_unique(user)']\n        : ['transaction', incident.alertRule.aggregate],\n    start,\n    end,\n    ...extraQueryParams,\n  };\n\n  const discoverView = EventView.fromSavedQuery(discoverQuery);\n  const {query, ...toObject} = discoverView.getResultsViewUrlTarget(orgSlug);\n\n  return {\n    query: {...query, interval: timeWindowString},\n    ...toObject,\n  };\n}\n","import Link from 'app/components/links/link';\nimport {t} from 'app/locale';\nimport {Project} from 'app/types';\nimport {DisplayModes} from 'app/utils/discover/types';\nimport {tokenizeSearch} from 'app/utils/tokenizeSearch';\nimport {Incident, IncidentStats} from 'app/views/alerts/types';\nimport {getStartEndFromStats} from 'app/views/alerts/utils';\nimport {getIncidentDiscoverUrl} from 'app/views/alerts/utils/getIncidentDiscoverUrl';\nimport {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';\n\nimport {Dataset} from './types';\n\ntype PresetCta = {\n  /**\n   * The location to direct to upon clicking the CTA.\n   */\n  to: React.ComponentProps<typeof Link>['to'];\n  /**\n   * The CTA text\n   */\n  buttonText: string;\n  /**\n   * The tooltip title for the CTA button, may be empty.\n   */\n  title?: string;\n};\n\ntype PresetCtaOpts = {\n  orgSlug: string;\n  projects: Project[];\n  incident?: Incident;\n  stats?: IncidentStats;\n};\n\ntype Preset = {\n  /**\n   * The regex used to match aggregates to this preset.\n   */\n  match: RegExp;\n  /**\n   * The name of the preset\n   */\n  name: string;\n  /**\n   * The dataset that this preset applys to.\n   */\n  validDataset: Dataset[];\n  /**\n   * The default aggregate to use when selecting this preset\n   */\n  default: string;\n  /**\n   * Generates the CTA component\n   */\n  makeCtaParams: (opts: PresetCtaOpts) => PresetCta;\n};\n\nexport const PRESET_AGGREGATES: Preset[] = [\n  {\n    name: t('Error count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count()',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Users affected'),\n    match: /^count_unique\\(tags\\[sentry:user\\]\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count_unique(tags[sentry:user])',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Latency'),\n    match: /^(p[0-9]{2,3}|percentile\\(transaction\\.duration,[^)]+\\)|avg\\([^)]+\\))/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'percentile(transaction.duration, 0.95)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Latency by Transaction'),\n      }),\n  },\n  {\n    name: t('Apdex'),\n    match: /^apdex\\([0-9.]+\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'apdex(300)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Apdex by Transaction'),\n      }),\n  },\n  {\n    name: t('Transaction Count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'count()',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts => makeGenericTransactionCta({opts}),\n  },\n  {\n    name: t('Failure rate'),\n    match: /^failure_rate\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'failure_rate()',\n    /**\n     * See makeFailureRateCta\n     */\n    makeCtaParams: makeFailureRateCta,\n  },\n];\n\n/**\n * - CASE 1: If has a specific transaction filter\n *   - CTA is: \"View Transaction Summary\"\n *   - Tooltip is the transaction name\n *   - the same period as the alert graph (i.e. with alert start time in the middle)\n *\n * - CASE 2: If transaction is NOT filtered, or has a * filter:\n *   - \"Open in Discover\" button with optional tooltip which opens a discover view with...\n *      - fields {transaction, count(), <metric>} sorted by count()\n *      - top-5 activated\n */\nfunction makeGenericTransactionCta(opts: {\n  opts: PresetCtaOpts;\n  tooltip?: string;\n}): PresetCta {\n  const {\n    opts: {orgSlug, projects, incident, stats},\n    tooltip,\n  } = opts;\n\n  if (!incident || !stats) {\n    return {to: '', buttonText: t('Incident details')};\n  }\n\n  const query = tokenizeSearch(incident.discoverQuery ?? '');\n  const transaction = query\n    .getTagValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  // CASE 1\n  if (transaction !== undefined) {\n    const period = getStartEndFromStats(stats);\n\n    const summaryUrl = transactionSummaryRouteWithQuery({\n      orgSlug,\n      transaction,\n      projectID: projects\n        .filter(({slug}) => incident.projects.includes(slug))\n        .map(({id}) => id),\n      query: {...period},\n    });\n\n    return {\n      to: summaryUrl,\n      buttonText: t('View Transaction Summary'),\n      title: transaction,\n    };\n  }\n\n  // CASE 2\n  const extraQueryParams = {\n    fields: [...new Set(['transaction', 'count()', incident.alertRule.aggregate])],\n    orderby: '-count',\n    display: DisplayModes.TOP5,\n  };\n\n  const discoverUrl = getIncidentDiscoverUrl({\n    orgSlug,\n    projects,\n    incident,\n    stats,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: tooltip,\n  };\n}\n\n/**\n * - CASE 1: Filtered to a specific transaction, \"Open in Discover\" with...\n *   - fields [transaction.status, count()] sorted by count(),\n *   - \"Top 5 period\" activated.\n *\n * - CASE 2: If filtered on multiple transactions, \"Open in Discover\" button\n *   with tooltip \"Failure rate by transaction\" which opens a discover view\n *   - fields [transaction, failure_rate()] sorted by failure_rate\n *   - top 5 activated\n */\nfunction makeFailureRateCta({orgSlug, incident, projects, stats}: PresetCtaOpts) {\n  if (!incident || !stats) {\n    return {to: '', buttonText: t('Incident details')};\n  }\n\n  const query = tokenizeSearch(incident.discoverQuery ?? '');\n  const transaction = query\n    .getTagValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  const extraQueryParams =\n    transaction !== undefined\n      ? // CASE 1\n        {\n          fields: ['transaction.status', 'count()'],\n          orderby: '-count',\n          display: DisplayModes.TOP5,\n        }\n      : // Case 2\n        {\n          fields: ['transaction', 'failure_rate()'],\n          orderby: '-failure_rate',\n          display: DisplayModes.TOP5,\n        };\n\n  const discoverUrl = getIncidentDiscoverUrl({\n    orgSlug,\n    projects,\n    incident,\n    stats,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: transaction === undefined ? t('Failure rate by transaction') : undefined,\n  };\n}\n\n/**\n * Get the CTA used for alerts that do not have a preset\n */\nexport function makeDefaultCta({\n  orgSlug,\n  projects,\n  incident,\n  stats,\n}: PresetCtaOpts): PresetCta {\n  if (!incident) {\n    return {\n      buttonText: t('Open in Discover'),\n      to: '',\n    };\n  }\n\n  const extraQueryParams = {\n    display: DisplayModes.TOP5,\n  };\n\n  return {\n    buttonText: t('Open in Discover'),\n    to: getIncidentDiscoverUrl({orgSlug, projects, incident, stats, extraQueryParams}),\n  };\n}\n","import {NewQuery, Project} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport {getAggregateAlias} from 'app/utils/discover/fields';\nimport {Dataset, IncidentRule} from 'app/views/settings/incidentRules/types';\n/**\n * Gets the URL for a discover view of the rule with the following default\n * parameters:\n *\n * - Ordered by the rule aggregate, descending\n * - yAxis maps to the aggregate\n * - The following fields are displayed:\n *   - For Error dataset alert rules: [issue, count(), count_unique(user)]\n *   - For Transaction dataset alert rules: [transaction, count()]\n * - Start and end are the period's values selected in the chart header\n */\nexport function getIncidentRuleDiscoverUrl(opts: {\n  orgSlug: string;\n  projects: Project[];\n  rule?: IncidentRule;\n  start?: string;\n  end?: string;\n  extraQueryParams?: Partial<NewQuery>;\n}) {\n  const {orgSlug, projects, rule, start, end, extraQueryParams} = opts;\n\n  if (!projects || !projects.length || !rule || (!start && !end)) {\n    return '';\n  }\n\n  const timeWindowString = `${rule.timeWindow}m`;\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: (rule && rule.name) || '',\n    orderby: `-${getAggregateAlias(rule.aggregate)}`,\n    yAxis: rule.aggregate,\n    query: rule?.query ?? '',\n    projects: projects\n      .filter(({slug}) => rule.projects.includes(slug))\n      .map(({id}) => Number(id)),\n    version: 2,\n    fields:\n      rule.dataset === Dataset.ERRORS\n        ? ['issue', 'count()', 'count_unique(user)']\n        : ['transaction', rule.aggregate],\n    start,\n    end,\n    ...extraQueryParams,\n  };\n\n  const discoverView = EventView.fromSavedQuery(discoverQuery);\n  const {query, ...toObject} = discoverView.getResultsViewUrlTarget(orgSlug);\n\n  return {\n    query: {...query, interval: timeWindowString},\n    ...toObject,\n  };\n}\n","import Link from 'app/components/links/link';\nimport {t} from 'app/locale';\nimport {Project} from 'app/types';\nimport {DisplayModes} from 'app/utils/discover/types';\nimport {tokenizeSearch} from 'app/utils/tokenizeSearch';\nimport {getIncidentRuleDiscoverUrl} from 'app/views/alerts/utils/getIncidentRuleDiscoverUrl';\nimport {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';\nimport {Dataset, IncidentRule} from 'app/views/settings/incidentRules/types';\n\ntype PresetCta = {\n  /**\n   * The location to direct to upon clicking the CTA.\n   */\n  to: React.ComponentProps<typeof Link>['to'];\n  /**\n   * The CTA text\n   */\n  buttonText: string;\n  /**\n   * The tooltip title for the CTA button, may be empty.\n   */\n  title?: string;\n};\n\ntype PresetCtaOpts = {\n  orgSlug: string;\n  projects: Project[];\n  rule?: IncidentRule;\n  start?: string;\n  end?: string;\n};\n\ntype Preset = {\n  /**\n   * The regex used to match aggregates to this preset.\n   */\n  match: RegExp;\n  /**\n   * The name of the preset\n   */\n  name: string;\n  /**\n   * The dataset that this preset applys to.\n   */\n  validDataset: Dataset[];\n  /**\n   * The default aggregate to use when selecting this preset\n   */\n  default: string;\n  /**\n   * Generates the CTA component\n   */\n  makeCtaParams: (opts: PresetCtaOpts) => PresetCta;\n};\n\nexport const ALERT_RULE_PRESET_AGGREGATES: Preset[] = [\n  {\n    name: t('Error count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count()',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Users affected'),\n    match: /^count_unique\\(tags\\[sentry:user\\]\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count_unique(tags[sentry:user])',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Latency'),\n    match: /^(p[0-9]{2,3}|percentile\\(transaction\\.duration,[^)]+\\)|avg\\([^)]+\\))/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'percentile(transaction.duration, 0.95)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Latency by Transaction'),\n      }),\n  },\n  {\n    name: t('Apdex'),\n    match: /^apdex\\([0-9.]+\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'apdex(300)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Apdex by Transaction'),\n      }),\n  },\n  {\n    name: t('Transaction count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'count()',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts => makeGenericTransactionCta({opts}),\n  },\n  {\n    name: t('Failure rate'),\n    match: /^failure_rate\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'failure_rate()',\n    /**\n     * See makeFailureRateCta\n     */\n    makeCtaParams: makeFailureRateCta,\n  },\n];\n\n/**\n * - CASE 1: If has a specific transaction filter\n *   - CTA is: \"View Transaction Summary\"\n *   - Tooltip is the transaction name\n *   - the same period as the alert rule graph\n *\n * - CASE 2: If transaction is NOT filtered, or has a * filter:\n *   - \"Open in Discover\" button with optional tooltip which opens a discover view with...\n *      - fields {transaction, count(), <metric>} sorted by count()\n *      - top-5 activated\n */\nfunction makeGenericTransactionCta(opts: {\n  opts: PresetCtaOpts;\n  tooltip?: string;\n}): PresetCta {\n  const {\n    opts: {orgSlug, projects, rule, start, end},\n    tooltip,\n  } = opts;\n\n  if (!rule || (!start && !end)) {\n    return {to: '', buttonText: t('Alert rule details')};\n  }\n\n  const query = tokenizeSearch(rule.query ?? '');\n  const transaction = query\n    .getTagValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  // CASE 1\n  if (transaction !== undefined) {\n    const summaryUrl = transactionSummaryRouteWithQuery({\n      orgSlug,\n      transaction,\n      projectID: projects\n        .filter(({slug}) => rule.projects.includes(slug))\n        .map(({id}) => id),\n      query: {start, end},\n    });\n\n    return {\n      to: summaryUrl,\n      buttonText: t('View Transaction Summary'),\n      title: transaction,\n    };\n  }\n\n  // CASE 2\n  const extraQueryParams = {\n    fields: [...new Set(['transaction', 'count()', rule.aggregate])],\n    orderby: '-count',\n    display: DisplayModes.TOP5,\n  };\n\n  const discoverUrl = getIncidentRuleDiscoverUrl({\n    orgSlug,\n    projects,\n    rule,\n    start,\n    end,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: tooltip,\n  };\n}\n\n/**\n * - CASE 1: Filtered to a specific transaction, \"Open in Discover\" with...\n *   - fields [transaction.status, count()] sorted by count(),\n *   - \"Top 5 period\" activated.\n *\n * - CASE 2: If filtered on multiple transactions, \"Open in Discover\" button\n *   with tooltip \"Failure rate by transaction\" which opens a discover view\n *   - fields [transaction, failure_rate()] sorted by failure_rate\n *   - top 5 activated\n */\nfunction makeFailureRateCta({orgSlug, rule, projects, start, end}: PresetCtaOpts) {\n  if (!rule || (!start && !end)) {\n    return {to: '', buttonText: t('Alert rule details')};\n  }\n\n  const query = tokenizeSearch(rule.query ?? '');\n  const transaction = query\n    .getTagValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  const extraQueryParams =\n    transaction !== undefined\n      ? // CASE 1\n        {\n          fields: ['transaction.status', 'count()'],\n          orderby: '-count',\n          display: DisplayModes.TOP5,\n        }\n      : // Case 2\n        {\n          fields: ['transaction', 'failure_rate()'],\n          orderby: '-failure_rate',\n          display: DisplayModes.TOP5,\n        };\n\n  const discoverUrl = getIncidentRuleDiscoverUrl({\n    orgSlug,\n    projects,\n    rule,\n    start,\n    end,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: transaction === undefined ? t('Failure rate by transaction') : undefined,\n  };\n}\n\n/**\n * Get the CTA used for alert rules that do not have a preset\n */\nexport function makeDefaultCta({\n  orgSlug,\n  projects,\n  rule,\n  start,\n  end,\n}: PresetCtaOpts): PresetCta {\n  if (!rule) {\n    return {\n      buttonText: t('Open in Discover'),\n      to: '',\n    };\n  }\n\n  const extraQueryParams = {\n    display: DisplayModes.TOP5,\n  };\n\n  return {\n    buttonText: t('Open in Discover'),\n    to: getIncidentRuleDiscoverUrl({\n      orgSlug,\n      projects,\n      rule,\n      start,\n      end,\n      extraQueryParams,\n    }),\n  };\n}\n"],"sourceRoot":""}