{"version":3,"sources":["webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsLayout.tsx"],"names":["SettingsNavItem","badge","label","index","id","props","LabelHook","HookOrDefault","hookName","defaultComponent","children","Fragment","renderedBadge","type","text","StyledNavItem","onlyActiveOnIndex","activeClassName","Link","p","theme","gray300","textColor","active","backgroundSecondary","SettingsNavigationGroup","organization","project","name","items","NavSection","data-test-id","SettingsHeading","map","path","title","show","recordAnalytics","badgeResult","to","replaceRouterParams","orgId","slug","projectId","key","onClick","window","location","pathname","trackAnalyticsEvent","organization_id","project_id","eventName","eventKey","sidebar_item_id","dest","subText","SettingsNavigation","error","errorInfo","Sentry","scope","Object","keys","forEach","setExtra","href","this","navigationObjects","hooks","hookConfigs","stickyTop","otherProps","navWithHooks","concat","PositionStickyWrapper","config","Hook","i","React","cloneElement","Component","defaultProps","space","breakpoints","AccountSettingsNavigation","getConfiguration","AccountSettingsLayout","prevProps","access","fetchOrganizationDetails","setActive","loadProjects","renderNavigation","childContextTypes","SentryTypes","Organization","withLatestContext"],"mappings":"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","file":"AccountSettingsLayout.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Badge from 'app/components/badge';\nimport FeatureBadge from 'app/components/featureBadge';\nimport HookOrDefault from 'app/components/hookOrDefault';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? <FeatureBadge type=\"new\" /> : <Badge text={badge} />;\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray300};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.textColor};\n\n    &:before {\n      background: ${p => p.theme.active};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: ${p => p.theme.backgroundSecondary};\n    padding-left: 15px;\n    margin-left: -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport {NavigationGroupProps} from 'app/views/settings/types';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id, recordAnalytics}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        const handleClick = () => {\n          //only call the analytics event if the URL is changing\n          if (recordAnalytics && to !== window.location.pathname) {\n            trackAnalyticsEvent({\n              organization_id: organization && organization.id,\n              project_id: project && project.id,\n              eventName: 'Sidebar Item Clicked',\n              eventKey: 'sidebar.item_clicked',\n              sidebar_item_id: id,\n              dest: path,\n            });\n          }\n        };\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n            onClick={handleClick}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport space from 'app/styles/space';\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationProps, NavigationSection} from 'app/views/settings/types';\n\nconst FOOTER_HEIGHT = 93;\n\ntype DefaultProps = {\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n  /**\n   * How far from the top of the page should the navigation be when stickied.\n   */\n  stickyTop: string;\n};\n\ntype Props = DefaultProps &\n  NavigationProps & {\n    /**\n     * The configuration for this navigation panel\n     */\n    navigationObjects: NavigationSection[];\n  };\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    hooks: [],\n    hookConfigs: [],\n    stickyTop: '69px',\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, stickyTop, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <PositionStickyWrapper stickyTop={stickyTop}>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </PositionStickyWrapper>\n    );\n  }\n}\n\nconst PositionStickyWrapper = styled('div')<{stickyTop: string}>`\n  padding: ${space(4)};\n  padding-right: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    position: sticky;\n    top: ${p => p.stickyTop};\n    overflow: scroll;\n    height: calc(100vh - ${p => p.stickyTop} - ${FOOTER_HEIGHT}px);\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n`;\n\nexport default SettingsNavigation;\n","import React from 'react';\n\nimport {Organization} from 'app/types';\nimport getConfiguration from 'app/views/settings/account/navigationConfiguration';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\n\ntype Props = {\n  organization: Organization;\n};\n\nconst AccountSettingsNavigation = ({organization}: Props) => (\n  <SettingsNavigation navigationObjects={getConfiguration({organization})} />\n);\n\nexport default AccountSettingsNavigation;\n","import React from 'react';\n\nimport {fetchOrganizationDetails} from 'app/actionCreators/organizations';\nimport SentryTypes from 'app/sentryTypes';\nimport {Organization} from 'app/types';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport AccountSettingsNavigation from 'app/views/settings/account/accountSettingsNavigation';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\n\ntype Props = React.ComponentProps<typeof SettingsLayout> & {\n  organization: Organization;\n};\n\nclass AccountSettingsLayout extends React.Component<Props> {\n  static childContextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getChildContext() {\n    return {\n      organization: this.props.organization,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SettingsLayout\n        {...this.props}\n        renderNavigation={() => <AccountSettingsNavigation organization={organization} />}\n      >\n        {this.props.children}\n      </SettingsLayout>\n    );\n  }\n}\n\nexport default withLatestContext(AccountSettingsLayout);\n"],"sourceRoot":""}