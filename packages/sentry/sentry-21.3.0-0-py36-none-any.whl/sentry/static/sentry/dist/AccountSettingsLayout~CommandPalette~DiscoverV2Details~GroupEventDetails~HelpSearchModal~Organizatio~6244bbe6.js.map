{"version":3,"sources":["webpack:///./app/components/events/interfaces/keyValueList/keyValueList.tsx","webpack:///./app/components/events/groupingInfo/groupingConfigSelect.tsx","webpack:///./app/components/events/groupingInfo/utils.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentChildren.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentFrames.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentStacktrace.tsx","webpack:///./app/components/events/groupingInfo/groupingComponent.tsx","webpack:///./app/components/events/groupingInfo/groupingVariant.tsx","webpack:///./app/components/events/groupingInfo/index.tsx"],"names":["KeyValueList","data","onClick","isContextData","isSorted","raw","longKeys","Array","filter","kv","Object","entries","sortBy","className","map","key","value","TableData","wide","JSON","stringify","theme","breakpoints","p","GroupingConfigSelect","configs","this","renderBody","props","configId","eventConfigId","onSelect","options","state","id","hidden","label","GroupingConfigItem","isHidden","isActive","items","isOpen","title","t","StyledDropdownButton","size","AsyncComponent","DropdownButton","groupingComponentFilter","showNonContributing","isObject","contributes","hint","values","length","GroupingComponentChildren","component","Fragment","idx","GroupingComponentListItem","GroupingValue","valueType","name","GroupingComponentFrames","collapsed","maxVisibleItems","isCollapsable","item","index","ToggleCollapse","priority","icon","setState","tct","numberOfFrames","React","Component","defaultProps","Button","space","GroupingComponentStacktrace","frameGroups","forEach","v","sort","a","b","localeCompare","join","lastGroup","push","group","GroupingComponent","shouldInlineValue","every","shouldInlineComponentValue","GroupingComponentListItems","GroupingComponentWrapper","isContributing","GroupingHint","GroupingComponentList","isInline","innerBorder","fontSizeSmall","gray200","addFingerprintInfo","variant","matched_rule","TextWithQuestionTooltip","position","client_values","GroupVariant","handleShowNonContributing","handleHideNonContributing","showGroupingConfig","hash","Hash","hashMismatch","type","EventGroupVariantType","COMPONENT","config","CUSTOM_FINGERPRINT","SALTED_COMPONENT","GroupingTree","VariantTitle","ContributionIcon","description","split","i","capitalize","ContributingToggle","merged","active","barId","getVariantData","VariantWrapper","Header","renderTitle","hasNonContributingComponent","renderContributionToggle","fontSizeMedium","isCircled","color","ButtonBar","overflowEllipsis","EventGroupingInfo","toggle","configOverride","handleConfigSelect","selection","reloadData","organization","event","projectId","path","slug","groupInfo","groupedBy","toLowerCase","SummaryGroupedBy","data-test-id","groupingConfig","GroupConfigWrapper","loading","variants","renderGroupConfigSelect","VariantDivider","renderGroupInfoSummary","actions","ToggleButton","renderGroupInfo","subText","textColor","text","familyMono","withOrganization"],"mappings":"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","file":"AccountSettingsLayout~CommandPalette~DiscoverV2Details~GroupEventDetails~HelpSearchModal~Organizatio~6244bbe6.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport sortBy from 'lodash/sortBy';\n\nimport ContextData from 'app/components/contextData';\nimport theme from 'app/utils/theme';\n\ntype Props = {\n  /**\n   * Data to render, could be almost anything as the various event interfaces\n   * support all sorts of data.\n   */\n  data?: null | Record<string, any> | any[];\n  /**\n   * Whether or not the data should be rendered with ContextData\n   */\n  isContextData?: boolean;\n  /**\n   * Should the keys be sorted.\n   */\n  isSorted?: boolean;\n  /**\n   * Should the raw text be rendered.\n   */\n  raw?: boolean;\n  /**\n   * Enable wider rendering of the keys.\n   */\n  longKeys?: boolean;\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void;\n};\n\n/**\n * Generic KeyValue data renderer. The V2 version\n * of this component can also render annotations\n * for datascrubbing.\n */\nfunction KeyValueList({\n  data,\n  onClick,\n  isContextData = false,\n  isSorted = true,\n  raw = false,\n  longKeys = false,\n}: Props) {\n  // TODO(dcramer): use non-string keys as reserved words (\"unauthorized\")\n  // break rendering\n\n  if (data === undefined || data === null) {\n    data = [];\n  } else if (!(data instanceof Array)) {\n    data = Object.entries(data);\n  } else {\n    data = data.filter(kv => kv !== null);\n  }\n\n  data = isSorted ? sortBy(data, [([key]) => key]) : data;\n  return (\n    <table className=\"table key-value\" onClick={onClick}>\n      <tbody>\n        {data.map(([key, value]) => {\n          if (isContextData) {\n            return [\n              <tr key={key}>\n                <TableData className=\"key\" wide={longKeys}>\n                  {key}\n                </TableData>\n                <td className=\"val\">\n                  <ContextData data={!raw ? value : JSON.stringify(value)} />\n                </td>\n              </tr>,\n            ];\n          } else {\n            return [\n              <tr key={key}>\n                <TableData className=\"key\" wide={longKeys}>\n                  {key}\n                </TableData>\n                <td className=\"val\">\n                  <pre className=\"val-string\">{'' + value || ' '}</pre>\n                </td>\n              </tr>,\n            ];\n          }\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst TableData = styled('td')<{wide: boolean}>`\n  @media (min-width: ${theme.breakpoints[2]}) {\n    max-width: ${p => (p.wide ? '620px !important' : null)};\n  }\n`;\n\nexport default KeyValueList;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport {EventGroupingConfig} from 'app/types';\n\nimport {GroupingConfigItem} from '.';\n\ntype Props = AsyncComponent['props'] & {\n  eventConfigId: string;\n  configId: string;\n  onSelect: (selection: any) => void;\n};\n\ntype State = AsyncComponent['state'] & {\n  configs: EventGroupingConfig[];\n};\n\nclass GroupingConfigSelect extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      configs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['configs', '/grouping-configs/']];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {configId, eventConfigId, onSelect} = this.props;\n    const {configs} = this.state;\n\n    const options = configs.map(({id, hidden}) => ({\n      value: id,\n      label: (\n        <GroupingConfigItem isHidden={hidden} isActive={id === eventConfigId}>\n          {id}\n        </GroupingConfigItem>\n      ),\n    }));\n\n    return (\n      <DropdownAutoComplete onSelect={onSelect} items={options}>\n        {({isOpen}) => (\n          <Tooltip title={t('Click here to experiment with other grouping configs')}>\n            <StyledDropdownButton isOpen={isOpen} size=\"small\">\n              <GroupingConfigItem isActive={eventConfigId === configId}>\n                {configId}\n              </GroupingConfigItem>\n            </StyledDropdownButton>\n          </Tooltip>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n}\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  font-weight: inherit;\n`;\n\nexport default GroupingConfigSelect;\n","import isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nexport function hasNonContributingComponent(component: EventGroupComponent | undefined) {\n  if (!component?.contributes) {\n    return true;\n  }\n  for (const value of component.values) {\n    if (isObject(value) && hasNonContributingComponent(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function shouldInlineComponentValue(component: EventGroupComponent) {\n  return (component.values as EventGroupComponent[]).every(value => !isObject(value));\n}\n\nexport function groupingComponentFilter(\n  value: EventGroupComponent | string,\n  showNonContributing: boolean\n) {\n  if (isObject(value)) {\n    // no point rendering such nodes at all, we never show them\n    if (!value.contributes && !value.hint && value.values.length === 0) {\n      return false;\n    }\n    // non contributing values are otherwise optional\n    if (!showNonContributing && !value.contributes) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import React from 'react';\nimport isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent, {\n  GroupingComponentListItem,\n  GroupingValue,\n} from './groupingComponent';\nimport {groupingComponentFilter} from './utils';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentChildren = ({component, showNonContributing}: Props) => {\n  return (\n    <React.Fragment>\n      {(component.values as EventGroupComponent[])\n        .filter(value => groupingComponentFilter(value, showNonContributing))\n        .map((value, idx) => (\n          <GroupingComponentListItem key={idx}>\n            {isObject(value) ? (\n              <GroupingComponent\n                component={value}\n                showNonContributing={showNonContributing}\n              />\n            ) : (\n              <GroupingValue valueType={component.name || component.id}>\n                {typeof value === 'string' || typeof value === 'number'\n                  ? value\n                  : JSON.stringify(value, null, 2)}\n              </GroupingValue>\n            )}\n          </GroupingComponentListItem>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default GroupingComponentChildren;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconAdd, IconSubtract} from 'app/icons';\nimport {tct} from 'app/locale';\nimport space from 'app/styles/space';\n\nimport {GroupingComponentListItem} from './groupingComponent';\n\ntype DefaultProps = {\n  maxVisibleItems: number;\n};\n\ntype Props = DefaultProps & {\n  items: React.ReactNode[];\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nclass GroupingComponentFrames extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    maxVisibleItems: 2,\n  };\n\n  state: State = {\n    collapsed: true,\n  };\n\n  render() {\n    const {items, maxVisibleItems} = this.props;\n    const {collapsed} = this.state;\n    const isCollapsable = items.length > maxVisibleItems;\n\n    return (\n      <React.Fragment>\n        {items.map((item, index) => {\n          if (!collapsed || index < maxVisibleItems) {\n            return (\n              <GroupingComponentListItem isCollapsable={isCollapsable} key={index}>\n                {item}\n              </GroupingComponentListItem>\n            );\n          }\n\n          if (index === maxVisibleItems) {\n            return (\n              <GroupingComponentListItem key={index}>\n                <ToggleCollapse\n                  size=\"small\"\n                  priority=\"link\"\n                  icon={<IconAdd size=\"8px\" />}\n                  onClick={() => this.setState({collapsed: false})}\n                >\n                  {tct('show [numberOfFrames] similiar', {\n                    numberOfFrames: items.length - maxVisibleItems,\n                  })}\n                </ToggleCollapse>\n              </GroupingComponentListItem>\n            );\n          }\n\n          return null;\n        })}\n\n        {!collapsed && items.length > maxVisibleItems && (\n          <GroupingComponentListItem>\n            <ToggleCollapse\n              size=\"small\"\n              priority=\"link\"\n              icon={<IconSubtract size=\"8px\" />}\n              onClick={() => this.setState({collapsed: true})}\n            >\n              {tct('collapse [numberOfFrames] similiar', {\n                numberOfFrames: items.length - maxVisibleItems,\n              })}\n            </ToggleCollapse>\n          </GroupingComponentListItem>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst ToggleCollapse = styled(Button)`\n  margin: ${space(0.5)} 0;\n`;\n\nexport default GroupingComponentFrames;\n","import React from 'react';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent from './groupingComponent';\nimport GroupingComponentFrames from './groupingComponentFrames';\nimport {groupingComponentFilter} from './utils';\n\ntype FrameGroup = {\n  key: string;\n  data: EventGroupComponent[];\n};\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentStacktrace = ({component, showNonContributing}: Props) => {\n  const getFrameGroups = () => {\n    const frameGroups: FrameGroup[] = [];\n\n    (component.values as EventGroupComponent[])\n      .filter(value => groupingComponentFilter(value, showNonContributing))\n      .forEach(value => {\n        const key = (value.values as EventGroupComponent[])\n          .filter(v => groupingComponentFilter(v, showNonContributing))\n          .map(v => v.id)\n          .sort((a, b) => a.localeCompare(b))\n          .join('');\n\n        const lastGroup = frameGroups[frameGroups.length - 1];\n\n        if (lastGroup?.key === key) {\n          lastGroup.data.push(value);\n        } else {\n          frameGroups.push({key, data: [value]});\n        }\n      });\n\n    return frameGroups;\n  };\n\n  return (\n    <React.Fragment>\n      {getFrameGroups().map((group, index) => (\n        <GroupingComponentFrames\n          key={index}\n          items={group.data.map((v, idx) => (\n            <GroupingComponent\n              key={idx}\n              component={v}\n              showNonContributing={showNonContributing}\n            />\n          ))}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default GroupingComponentStacktrace;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponentChildren from './groupingComponentChildren';\nimport GroupingComponentStacktrace from './groupingComponentStacktrace';\nimport {shouldInlineComponentValue} from './utils';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponent = ({component, showNonContributing}: Props) => {\n  const shouldInlineValue = shouldInlineComponentValue(component);\n\n  const GroupingComponentListItems =\n    component.id === 'stacktrace'\n      ? GroupingComponentStacktrace\n      : GroupingComponentChildren;\n\n  return (\n    <GroupingComponentWrapper isContributing={component.contributes}>\n      <span>\n        {component.name || component.id}\n        {component.hint && <GroupingHint>{` (${component.hint})`}</GroupingHint>}\n      </span>\n\n      <GroupingComponentList isInline={shouldInlineValue}>\n        <GroupingComponentListItems\n          component={component}\n          showNonContributing={showNonContributing}\n        />\n      </GroupingComponentList>\n    </GroupingComponentWrapper>\n  );\n};\n\nconst GroupingComponentList = styled('ul')<{isInline: boolean}>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  &,\n  & > li {\n    display: ${p => (p.isInline ? 'inline' : 'block')};\n  }\n`;\n\nexport const GroupingComponentListItem = styled('li')<{isCollapsable?: boolean}>`\n  padding: 0;\n  margin: ${space(0.25)} 0 ${space(0.25)} ${space(1.5)};\n\n  ${p =>\n    p.isCollapsable &&\n    `\n    border-left: 1px solid ${p.theme.innerBorder};\n    margin: 0 0 -${space(0.25)} ${space(1)};\n    padding-left: ${space(0.5)};\n  `}\n`;\n\nexport const GroupingValue = styled('code')<{valueType: string}>`\n  display: inline-block;\n  margin: ${space(0.25)} ${space(0.5)} ${space(0.25)} 0;\n  font-size: ${p => p.theme.fontSizeSmall};\n  padding: 0 ${space(0.25)};\n  background: rgba(112, 163, 214, 0.1);\n  color: #4e3fb4;\n\n  ${({valueType}) =>\n    (valueType === 'function' || valueType === 'symbol') &&\n    `\n    font-weight: bold;\n    color: #2c58a8;\n  `}\n`;\n\nconst GroupingComponentWrapper = styled('div')<{isContributing: boolean}>`\n  color: ${p => (p.isContributing ? null : p.theme.gray200)};\n\n  ${GroupingValue}, button {\n    opacity: ${p => (p.isContributing ? 1 : 0.6)};\n  }\n`;\n\nconst GroupingHint = styled('small')`\n  font-size: 0.8em;\n`;\n\nexport default GroupingComponent;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport Tooltip from 'app/components/tooltip';\nimport {IconCheckmark, IconClose} from 'app/icons';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {EventGroupComponent, EventGroupVariant, EventGroupVariantType} from 'app/types';\n\nimport GroupingComponent from './groupingComponent';\nimport {hasNonContributingComponent} from './utils';\n\ntype Props = {\n  variant: EventGroupVariant;\n  showGroupingConfig: boolean;\n};\n\ntype State = {\n  showNonContributing: boolean;\n};\n\ntype VariantData = [string, React.ReactNode][];\n\nfunction addFingerprintInfo(data: VariantData, variant: EventGroupVariant) {\n  if (variant.matched_rule) {\n    data.push([\n      t('Fingerprint rule'),\n      <TextWithQuestionTooltip key=\"type\">\n        {variant.matched_rule}\n        <QuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t('The server-side fingerprinting rule that produced the fingerprint.')}\n        />\n      </TextWithQuestionTooltip>,\n    ]);\n  }\n  if (variant.values) {\n    data.push([t('Fingerprint values'), variant.values]);\n  }\n  if (variant.client_values) {\n    data.push([\n      t('Client fingerprint values'),\n      <TextWithQuestionTooltip key=\"type\">\n        {variant.client_values}\n        <QuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t(\n            'The client sent a fingerprint that was overridden by a server-side fingerprinting rule.'\n          )}\n        />\n      </TextWithQuestionTooltip>,\n    ]);\n  }\n}\n\nclass GroupVariant extends React.Component<Props, State> {\n  state = {\n    showNonContributing: false,\n  };\n\n  handleShowNonContributing = () => {\n    this.setState({showNonContributing: true});\n  };\n\n  handleHideNonContributing = () => {\n    this.setState({showNonContributing: false});\n  };\n\n  getVariantData(): [VariantData, EventGroupComponent | undefined] {\n    const {variant, showGroupingConfig} = this.props;\n    const data: VariantData = [];\n    let component: EventGroupComponent | undefined;\n\n    if (!this.state.showNonContributing && variant.hash === null) {\n      return [data, component];\n    }\n\n    if (variant.hash !== null) {\n      data.push([\n        t('Hash'),\n        <TextWithQuestionTooltip key=\"hash\">\n          <Hash>{variant.hash}</Hash>\n          <QuestionTooltip\n            size=\"xs\"\n            position=\"top\"\n            title={t('Events with the same hash are grouped together')}\n          />\n        </TextWithQuestionTooltip>,\n      ]);\n    }\n\n    if (variant.hashMismatch) {\n      data.push([\n        t('Hash mismatch'),\n        t('hashing algorithm produced a hash that does not match the event'),\n      ]);\n    }\n\n    switch (variant.type) {\n      case EventGroupVariantType.COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      case EventGroupVariantType.CUSTOM_FINGERPRINT:\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t('Overrides the default grouping by a custom fingerprinting rule')}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        addFingerprintInfo(data, variant);\n        break;\n      case EventGroupVariantType.SALTED_COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data and a fingerprint into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        addFingerprintInfo(data, variant);\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (component) {\n      data.push([\n        t('Grouping'),\n        <GroupingTree key={component.id}>\n          <GroupingComponent\n            component={component}\n            showNonContributing={this.state.showNonContributing}\n          />\n        </GroupingTree>,\n      ]);\n    }\n\n    return [data, component];\n  }\n\n  renderTitle() {\n    const {variant} = this.props;\n    const isContributing = variant.hash !== null;\n\n    let title;\n    if (isContributing) {\n      title = t('Contributing variant');\n    } else {\n      const hint = variant.component?.hint;\n      if (hint) {\n        title = t('Non-contributing variant: %s', hint);\n      } else {\n        title = t('Non-contributing variant');\n      }\n    }\n\n    return (\n      <Tooltip title={title}>\n        <VariantTitle>\n          <ContributionIcon isContributing={isContributing} />\n          {t('By')}{' '}\n          {variant.description\n            ?.split(' ')\n            .map(i => capitalize(i))\n            .join(' ') ?? t('Nothing')}\n        </VariantTitle>\n      </Tooltip>\n    );\n  }\n\n  renderContributionToggle() {\n    const {showNonContributing} = this.state;\n\n    return (\n      <ContributingToggle merged active={showNonContributing ? 'all' : 'relevant'}>\n        <Button barId=\"relevant\" size=\"xsmall\" onClick={this.handleHideNonContributing}>\n          {t('Contributing values')}\n        </Button>\n        <Button barId=\"all\" size=\"xsmall\" onClick={this.handleShowNonContributing}>\n          {t('All values')}\n        </Button>\n      </ContributingToggle>\n    );\n  }\n\n  render() {\n    const [data, component] = this.getVariantData();\n\n    return (\n      <VariantWrapper>\n        <Header>\n          {this.renderTitle()}\n          {hasNonContributingComponent(component) && this.renderContributionToggle()}\n        </Header>\n\n        <KeyValueList data={data} isContextData isSorted={false} />\n      </VariantWrapper>\n    );\n  }\n}\n\nconst VariantWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n  }\n`;\n\nconst VariantTitle = styled('h5')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst ContributionIcon = styled(({isContributing, ...p}) =>\n  isContributing ? (\n    <IconCheckmark size=\"sm\" isCircled color=\"green300\" {...p} />\n  ) : (\n    <IconClose size=\"sm\" isCircled color=\"red\" {...p} />\n  )\n)`\n  margin-right: ${space(1)};\n`;\n\nconst ContributingToggle = styled(ButtonBar)`\n  justify-content: flex-end;\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin-top: ${space(0.5)};\n  }\n`;\n\nconst GroupingTree = styled('div')`\n  color: #2f2936;\n`;\n\nconst TextWithQuestionTooltip = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-template-columns: max-content min-content;\n  grid-gap: ${space(0.5)};\n`;\n\nconst Hash = styled('span')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    ${overflowEllipsis};\n    width: 210px;\n  }\n`;\n\nexport default GroupVariant;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport EventDataSection from 'app/components/events/eventDataSection';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {EventGroupInfo, Organization} from 'app/types';\nimport {Event} from 'app/types/event';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupingConfigSelect from './groupingConfigSelect';\nimport GroupVariant from './groupingVariant';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projectId: string;\n  event: Event;\n  showGroupingConfig: boolean;\n};\n\ntype State = AsyncComponent['state'] & {\n  isOpen: boolean;\n  configOverride: string | null;\n  groupInfo: EventGroupInfo;\n};\n\nclass EventGroupingInfo extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, event, projectId} = this.props;\n\n    let path = `/projects/${organization.slug}/${projectId}/events/${event.id}/grouping-info/`;\n    if (this.state?.configOverride) {\n      path = `${path}?config=${this.state.configOverride}`;\n    }\n\n    return [['groupInfo', path]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      isOpen: false,\n      configOverride: null,\n    };\n  }\n\n  toggle = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n      configOverride: state.isOpen ? null : state.configOverride,\n    }));\n  };\n\n  handleConfigSelect = selection => {\n    this.setState({configOverride: selection.value}, () => this.reloadData());\n  };\n\n  renderGroupInfoSummary() {\n    const {groupInfo} = this.state;\n\n    if (!groupInfo) {\n      return null;\n    }\n\n    const groupedBy = Object.values(groupInfo)\n      .filter(variant => variant.hash !== null && variant.description !== null)\n      .map(variant => variant.description)\n      .sort((a, b) => a!.toLowerCase().localeCompare(b!.toLowerCase()))\n      .join(', ');\n\n    return (\n      <SummaryGroupedBy data-test-id=\"loaded-grouping-info\">{`(${t('grouped by')} ${\n        groupedBy || t('nothing')\n      })`}</SummaryGroupedBy>\n    );\n  }\n\n  renderGroupConfigSelect() {\n    const {configOverride} = this.state;\n    const {event} = this.props;\n\n    const configId = configOverride ?? event.groupingConfig.id;\n\n    return (\n      <GroupConfigWrapper>\n        <GroupingConfigSelect\n          eventConfigId={event.groupingConfig.id}\n          configId={configId}\n          onSelect={this.handleConfigSelect}\n        />\n      </GroupConfigWrapper>\n    );\n  }\n\n  renderGroupInfo() {\n    const {groupInfo, loading} = this.state;\n    const {showGroupingConfig} = this.props;\n\n    const variants = groupInfo\n      ? Object.values(groupInfo).sort((a, b) =>\n          a.hash && !b.hash\n            ? -1\n            : a.description\n                ?.toLowerCase()\n                .localeCompare(b.description?.toLowerCase() ?? '') ?? 1\n        )\n      : [];\n\n    return (\n      <React.Fragment>\n        {showGroupingConfig && this.renderGroupConfigSelect()}\n\n        {loading ? (\n          <LoadingIndicator />\n        ) : (\n          variants.map((variant, index) => (\n            <React.Fragment key={variant.key}>\n              <GroupVariant variant={variant} showGroupingConfig={showGroupingConfig} />\n              {index < variants.length - 1 && <VariantDivider />}\n            </React.Fragment>\n          ))\n        )}\n      </React.Fragment>\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {isOpen} = this.state;\n\n    const title = (\n      <React.Fragment>\n        {t('Event Grouping Information')}\n        {!isOpen && this.renderGroupInfoSummary()}\n      </React.Fragment>\n    );\n\n    const actions = (\n      <ToggleButton onClick={this.toggle} priority=\"link\">\n        {isOpen ? t('Hide Details') : t('Show Details')}\n      </ToggleButton>\n    );\n\n    return (\n      <EventDataSection type=\"grouping-info\" title={title} actions={actions}>\n        {isOpen && this.renderGroupInfo()}\n      </EventDataSection>\n    );\n  }\n}\n\nconst SummaryGroupedBy = styled('small')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n    margin: 0 !important;\n  }\n`;\n\nconst ToggleButton = styled(Button)`\n  font-weight: 700;\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst GroupConfigWrapper = styled('div')`\n  margin-bottom: ${space(1.5)};\n  margin-top: -${space(1)};\n`;\n\nexport const GroupingConfigItem = styled('span')<{\n  isHidden?: boolean;\n  isActive?: boolean;\n}>`\n  font-family: ${p => p.theme.text.familyMono};\n  opacity: ${p => (p.isHidden ? 0.5 : null)};\n  font-weight: ${p => (p.isActive ? 'bold' : null)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst VariantDivider = styled('hr')`\n  padding-top: ${space(1)};\n`;\n\nexport default withOrganization(EventGroupingInfo);\n"],"sourceRoot":""}