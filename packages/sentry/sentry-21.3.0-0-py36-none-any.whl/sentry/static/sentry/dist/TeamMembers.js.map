{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","err","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","TeamMembers","state","loading","dropdownBusy","teamMemberList","orgMemberList","debouncedFetchMembersRequest","debounce","query","setState","fetchMembersRequest","a","props","t","duration","fetchData","addTeamMember","selection","value","orgMember","find","member","undefined","concat","handleMemberFilterChange","e","target","this","nextProps","filter","m","hasWriteAccess","existingMembers","Set","map","canAddMembers","openMembership","items","has","searchKey","email","label","StyledUserListElement","StyledAvatar","user","size","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","onClick","openInviteMembersModal","source","data-test-id","alignMenu","onSelect","openTeamAccessRequestModal","emptyMessage","onChange","busy","onClose","isOpen","icon","isCircled","removeMember","onRetry","config","access","includes","hasButtons","style","textTransform","renderDropdown","length","isSelf","canRemoveMember","StyledMemberContainer","key","avatarSize","useLink","removeButton","React","Component","PanelItem","space","p","theme","fontSizeSmall","overflowEllipsis","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"mappings":"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","file":"TeamMembers.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'app/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelHeader, PanelItem} from 'app/components/panels';\nimport {IconSubtract, IconUser} from 'app/icons';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Config, Member, Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withConfig from 'app/utils/withConfig';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype RouteParams = {\n  orgId: string;\n  teamId: string;\n};\n\ntype Props = {\n  api: Client;\n  config: Config;\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  dropdownBusy: boolean;\n  teamMemberList: Member[];\n  orgMemberList: Member[];\n};\n\nclass TeamMembers extends React.Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    dropdownBusy: false,\n    teamMemberList: [],\n    orgMemberList: [],\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    const params = this.props.params;\n    if (\n      nextProps.params.teamId !== params.teamId ||\n      nextProps.params.orgId !== params.orgId\n    ) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  removeMember(member: Member) {\n    const {params} = this.props;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMemberList: this.state.teamMemberList.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  }\n\n  fetchMembersRequest = async (query: string) => {\n    const {params, api} = this.props;\n    const {orgId} = params;\n\n    try {\n      const data = await api.requestPromise(`/organizations/${orgId}/members/`, {\n        query: {query},\n      });\n      this.setState({\n        orgMemberList: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/teams/${params.orgId}/${params.teamId}/members/`\n      );\n      this.setState({\n        teamMemberList: data,\n        loading: false,\n        error: false,\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: true,\n      });\n    }\n\n    this.fetchMembersRequest('');\n  };\n\n  addTeamMember = (selection: Item) => {\n    const {params} = this.props;\n\n    this.setState({loading: true});\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = this.state.orgMemberList.find(\n            member => member.id === selection.value\n          );\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            loading: false,\n            error: false,\n            teamMemberList: this.state.teamMemberList.concat([orgMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n          });\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(hasWriteAccess: boolean) {\n    const {organization, params} = this.props;\n    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const items = (this.state.orgMemberList || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: params.orgId,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n      >\n        {({isOpen}) => (\n          <DropdownButton isOpen={isOpen} size=\"xsmall\" data-test-id=\"add-member\">\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  removeButton(member: Member) {\n    return (\n      <Button\n        size=\"small\"\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        onClick={() => this.removeMember(member)}\n        label={t('Remove')}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {params, organization, config} = this.props;\n    const {access} = organization;\n    const hasWriteAccess = access.includes('org:write') || access.includes('team:admin');\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <div>{t('Members')}</div>\n          <div style={{textTransform: 'none'}}>{this.renderDropdown(hasWriteAccess)}</div>\n        </PanelHeader>\n        {this.state.teamMemberList.length ? (\n          this.state.teamMemberList.map(member => {\n            const isSelf = member.email === config.user.email;\n            const canRemoveMember = hasWriteAccess || isSelf;\n            return (\n              <StyledMemberContainer key={member.id}>\n                <IdBadge avatarSize={36} member={member} useLink orgId={params.orgId} />\n                {canRemoveMember && this.removeButton(member)}\n              </StyledMemberContainer>\n            );\n          })\n        ) : (\n          <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n            {t('This team has no members')}\n          </EmptyMessage>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst StyledMemberContainer = styled(PanelItem)`\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"sourceRoot":""}