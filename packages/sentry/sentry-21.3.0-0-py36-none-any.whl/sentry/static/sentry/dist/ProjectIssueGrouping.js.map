{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/data/forms/projectIssueGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","route","fields","fingerprintingRules","name","type","label","t","hideLabel","placeholder","multiline","monospace","autosize","inline","maxRows","saveOnBlur","saveMessageAlertType","saveMessage","formatMessageValue","help","Fragment","RuleDescription","tct","pattern","docs","href","RuleExample","visible","groupingEnhancements","validate","groupingConfig","deprecatedSelectControl","selectionInfoFunction","args","groupingConfigs","value","selection","find","id","changelog","Changelog","ChangelogTitle","version","dangerouslySetInnerHTML","__html","marked","choices","map","hidden","toString","key","isHidden","features","has","groupingEnhancementsBase","groupingEnhancementBases","innerBorder","backgroundSecondary","fontSizeMedium","borderRadius","UpgradeGrouping","organization","projectId","project","onUpgrade","api","hasAccess","access","includes","byId","updateNotes","riskLevel","latestGroupingConfig","latestEnhancementsBase","forEach","cfg","latest","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","undefined","getGroupingRisk","noUpdates","newData","handleUpgrade","a","addLoadingMessage","requestPromise","slug","method","data","response","clearIndicators","ProjectActions","updateSuccess","handleXhrErrorResponse","linebreak","disabled","onConfirm","priority","confirmText","message","ProjectDebugSymbols","handleSubmit","params","state","orgId","endpoint","Set","jsonFormProps","additionalFieldProps","link","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","fetchData"],"mappings":"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","file":"ProjectIssueGrouping.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {GroupingConfigItem} from 'app/components/events/groupingInfo';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport marked from 'app/utils/marked';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/issue-grouping/';\n\nexport const fields: Record<string, Field> = {\n  fingerprintingRules: {\n    name: 'fingerprintingRules',\n    type: 'string',\n    label: t('Fingerprint Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'error.type:MyException -> fingerprint-value\\nstack.function:some_panic_function -> fingerprint-value'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing fingerprint rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <React.Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to modify the fingerprint rules on the server with custom rules.\n        Rules follow the pattern [pattern]. To learn more about fingerprint rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob -&gt; fingerprint, values</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=%2Fdata-management%2Fevent-grouping%2Fserver-side-fingerprinting%2F\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# force all errors of the same type to have the same fingerprint\nerror.type:DatabaseUnavailable -> system-down\n# force all memory allocation errors to be grouped together\nstack.function:malloc -> memory-allocation-error`}\n        </RuleExample>\n      </React.Fragment>\n    ),\n    visible: true,\n  },\n  groupingEnhancements: {\n    name: 'groupingEnhancements',\n    type: 'string',\n    label: t('Stack Trace Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'stack.function:raise_an_exception ^-group\\nstack.function:namespace::* +app'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing stack trace rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <React.Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to enhance the grouping algorithm with custom rules.\n        Rules follow the pattern [pattern]. To learn more about stack trace rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob [^v]?[+-]flag</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/data-management/event-grouping/stack-trace-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# remove all frames above a certain function from grouping\nstack.function:panic_handler ^-group\n# mark all functions following a prefix in-app\nstack.function:mylibrary_* +app`}\n        </RuleExample>\n      </React.Fragment>\n    ),\n    validate: () => [],\n    visible: true,\n  },\n  groupingConfig: {\n    name: 'groupingConfig',\n    type: 'select',\n    deprecatedSelectControl: false,\n    label: t('Grouping Config'),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing grouping config will apply to future events only (can take up to a minute).'\n    ),\n    selectionInfoFunction: args => {\n      const {groupingConfigs, value} = args;\n      const selection = groupingConfigs.find(({id}) => id === value);\n      const changelog = selection?.changelog || '';\n      if (!changelog) {\n        return null;\n      }\n      return (\n        <Changelog>\n          <ChangelogTitle>\n            {tct('New in version [version]', {version: selection.id})}:\n          </ChangelogTitle>\n          <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n        </Changelog>\n      );\n    },\n    choices: ({groupingConfigs}) =>\n      groupingConfigs.map(({id, hidden}) => [\n        id.toString(),\n        <GroupingConfigItem key={id} isHidden={hidden}>\n          {id}\n        </GroupingConfigItem>,\n      ]),\n    help: t('Sets the grouping algorithm to be used for new events.'),\n    visible: ({features}) => features.has('set-grouping-config'),\n  },\n  groupingEnhancementsBase: {\n    name: 'groupingEnhancementsBase',\n    type: 'select',\n    deprecatedSelectControl: false,\n    label: t('Stack Trace Rules Base'),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing base will apply to future events only (can take up to a minute).'\n    ),\n    selectionInfoFunction: args => {\n      const {groupingEnhancementBases, value} = args;\n      const selection = groupingEnhancementBases.find(({id}) => id === value);\n      const changelog = selection?.changelog || '';\n      if (!changelog) {\n        return null;\n      }\n      return (\n        <Changelog>\n          <ChangelogTitle>\n            {tct('New in version [version]', {version: selection.id})}:\n          </ChangelogTitle>\n          <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n        </Changelog>\n      );\n    },\n    choices: ({groupingEnhancementBases}) =>\n      groupingEnhancementBases.map(({id}) => [\n        id.toString(),\n        <GroupingConfigItem key={id}>{id}</GroupingConfigItem>,\n      ]),\n    help: t('The built-in base version of stack trace rules.'),\n    visible: ({features}) => features.has('set-grouping-config'),\n  },\n};\n\nconst RuleDescription = styled('div')`\n  margin-bottom: ${space(1)};\n  margin-top: -${space(1)};\n  margin-right: 36px;\n`;\n\nconst RuleExample = styled('pre')`\n  margin-bottom: ${space(1)};\n  margin-right: 36px;\n`;\n\nconst Changelog = styled('div')`\n  position: relative;\n  top: -1px;\n  margin-bottom: -1px;\n  padding: ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  background: ${p => p.theme.backgroundSecondary};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:last-child {\n    border: 0;\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ChangelogTitle = styled('h3')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.75)} !important;\n`;\n","import React from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {\n  EventGroupingConfig,\n  GroupingEnhancementBase,\n  Organization,\n  Project,\n} from 'app/types';\nimport handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';\nimport marked from 'app/utils/marked';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\ntype Props = {\n  groupingConfigs: EventGroupingConfig[];\n  groupingEnhancementBases: GroupingEnhancementBase[];\n  organization: Organization;\n  projectId: string;\n  project: Project;\n  onUpgrade: () => void;\n  api: Client;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  groupingEnhancementBases,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n}: Props) {\n  const hasAccess = organization.access.includes('project:write');\n  const {\n    updateNotes,\n    riskLevel,\n    latestGroupingConfig,\n    latestEnhancementsBase,\n  } = getGroupingChanges(project, groupingConfigs, groupingEnhancementBases);\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = !latestGroupingConfig && !latestEnhancementsBase;\n\n  const newData: Record<string, string> = {};\n  if (latestGroupingConfig) {\n    newData.groupingConfig = latestGroupingConfig.id;\n  }\n  if (latestEnhancementsBase) {\n    newData.groupingEnhancementsBase = latestEnhancementsBase.id;\n  }\n\n  const handleUpgrade = async () => {\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectActions.updateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  };\n\n  if (!groupingConfigs || !groupingEnhancementBases) {\n    return null;\n  }\n\n  function getModalMessage() {\n    return (\n      <React.Fragment>\n        <TextBlock>\n          <strong>{t('Upgrade Grouping Strategy')}</strong>\n        </TextBlock>\n        <TextBlock>\n          {t(\n            'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n          )}\n        </TextBlock>\n        <TextBlock>\n          <strong>{t('New Behavior')}</strong>\n          <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n        </TextBlock>\n        <TextBlock>\n          <Alert type={alertType}>{riskNote}</Alert>\n        </TextBlock>\n      </React.Fragment>\n    );\n  }\n\n  function getButtonTitle() {\n    if (!hasAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id=\"upgrade-grouping\">\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <Field\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <Confirm\n            disabled={noUpdates}\n            onConfirm={handleUpgrade}\n            priority={riskLevel >= 2 ? 'danger' : 'primary'}\n            confirmText={t('Upgrade')}\n            message={getModalMessage()}\n          >\n            <div>\n              <Button\n                disabled={!hasAccess || noUpdates}\n                title={getButtonTitle()}\n                type=\"button\"\n                priority={riskLevel >= 2 ? 'danger' : 'primary'}\n              >\n                {t('Upgrade Grouping Strategy')}\n              </Button>\n            </div>\n          </Confirm>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {EventGroupingConfig, GroupingEnhancementBase, Project} from 'app/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[],\n  groupingEnhancementBases: GroupingEnhancementBase[]\n): {\n  updateNotes: string;\n  riskLevel: number;\n  latestGroupingConfig: EventGroupingConfig | null;\n  latestEnhancementsBase: GroupingEnhancementBase | null;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n  let latestEnhancementsBase: GroupingEnhancementBase | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  groupingEnhancementBases.forEach(base => {\n    if (base.latest && project.groupingEnhancementsBase !== base.id) {\n      updateNotes += '\\n\\n' + base.changelog;\n      latestEnhancementsBase = base;\n    }\n  });\n\n  return {updateNotes, riskLevel, latestGroupingConfig, latestEnhancementsBase};\n}\n\nexport function getGroupingRisk(\n  riskLevel: number\n): {\n  riskNote: React.ReactNode;\n  alertType: React.ComponentProps<typeof Alert>['type'];\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport Feature from 'app/components/acl/feature';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {fields} from 'app/data/forms/projectIssueGrouping';\nimport {t, tct} from 'app/locale';\nimport {\n  EventGroupingConfig,\n  GroupingEnhancementBase,\n  Organization,\n  Project,\n} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n  groupingEnhancementBases: GroupingEnhancementBase[] | null;\n} & AsyncView['state'];\n\nclass ProjectDebugSymbols extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n      groupingEnhancementBases: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [\n      ['groupingConfigs', '/grouping-configs/'],\n      ['groupingEnhancementBases', '/grouping-enhancements/'],\n    ];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectActions.updateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs, groupingEnhancementBases} = this.state;\n    const {organization, project, params} = this.props;\n    const {orgId, projectId} = params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n        groupingEnhancementBases,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=%2Fdata-management%2Fevent-grouping%2F\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[fields.groupingConfig, fields.groupingEnhancementsBase]}\n            />\n          </Feature>\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            groupingEnhancementBases={groupingEnhancementBases ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectDebugSymbols;\n"],"sourceRoot":""}