{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx","webpack:///./app/views/settings/projectSecurityHeaders/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","getSecurityDsn","keyList","endpoint","length","dsn","security","getDynamicText","value","fixed","ReportUri","orgId","projectId","t","type","tct","link","inline","flexibleControlStateSize","ProjectSecurityHeaders","name","url","state","withPadding","style","marginBottom","key_param","className","padding","getReports","ReportItem","key","HeaderName","priority","PanelItem"],"mappings":"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","file":"ProjectSecurityHeaders.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport {Link} from 'react-router';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {ProjectKey} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <Field inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {ProjectKey} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport ReportUri from 'app/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nexport default class ProjectSecurityHeaders extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Security Headers'), projectId, false);\n  }\n\n  getReports() {\n    return [\n      {\n        name: 'Content Security Policy (CSP)',\n        url: recreateRoute('csp/', this.props),\n      },\n      {\n        name: 'Certificate Transparency (Expect-CT)',\n        url: recreateRoute('expect-ct/', this.props),\n      },\n      {\n        name: 'HTTP Public Key Pinning (HPKP)',\n        url: recreateRoute('hpkp/', this.props),\n      },\n    ];\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {keyList} = this.state;\n    if (keyList === null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Security Header Reports')} />\n\n        <ReportUri keyList={keyList} projectId={params.projectId} orgId={params.orgId} />\n\n        <Panel>\n          <PanelHeader>{t('Additional Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextBlock style={{marginBottom: 20}}>\n              {tct(\n                'In addition to the [key_param] parameter, you may also pass the following within the querystring for the report URI:',\n                {\n                  key_param: <code>sentry_key</code>,\n                }\n              )}\n            </TextBlock>\n            <table className=\"table\" style={{marginBottom: 0}}>\n              <tbody>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_environment</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The environment name (e.g. production)')}.\n                  </td>\n                </tr>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_release</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The version of the application.')}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Supported Formats')}</PanelHeader>\n          <PanelBody>\n            {this.getReports().map(({name, url}) => (\n              <ReportItem key={url}>\n                <HeaderName>{name}</HeaderName>\n                <Button to={url} priority=\"primary\">\n                  {t('Instructions')}\n                </Button>\n              </ReportItem>\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst ReportItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst HeaderName = styled('span')`\n  font-size: 1.2em;\n`;\n"],"sourceRoot":""}