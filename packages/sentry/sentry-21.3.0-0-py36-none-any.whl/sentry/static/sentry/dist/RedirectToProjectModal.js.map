{"version":3,"sources":["webpack:///./app/components/text.tsx","webpack:///./app/components/modals/redirectToProject.tsx","webpack:///./app/utils/recreateRoute.tsx"],"names":["Text","textStyles","Panel","space","RedirectToProjectModal","state","timer","setInterval","window","location","assign","newPath","setState","this","props","slug","Header","Body","Fragment","t","tct","project","ButtonWrapper","priority","href","params","recreateRoute","projectId","React","Component","ReactRouter","to","options","lastRootIndex","routeIndex","routes","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams"],"mappings":"kUAmBeA,EAbF,YAAO,MAAP,mCACTC,IADM,IAGYC,IAHZ,mBAIUC,YAAM,GAJhB,kBAKWA,YAAM,GALjB,8BAQWA,YAAM,GARjB,O,qgCCaJC,E,kLACJC,MAAQ,CACNC,MAAO,G,0DAGW,WAClBC,aAAY,WACN,EAAKF,MAAMC,OAAS,EACtBE,OAAOC,SAASC,OAAO,EAAKC,SAI9B,EAAKC,UAAS,SAAAP,GAAK,MAAK,CACtBC,MAAOD,EAAMC,MAAQ,QAEtB,O,+BAeI,MACsBO,KAAKC,MAA3BC,EADA,EACAA,KAAMC,EADN,EACMA,OAAQC,EADd,EACcA,KACrB,OACE,YAAC,IAAMC,SAAP,KACE,YAACF,EAAD,KAASG,YAAE,kCAEX,YAACF,EAAD,KACE,uBACE,YAAC,EAAD,KACE,qBAAIE,YAAE,uCAEN,qBACGC,YACC,4EACA,CACEC,QAAS,0BAASN,GAClBT,MAAO,GAAF,OAAKO,KAAKR,MAAMC,UAI3B,YAACgB,EAAD,KACE,YAAC,IAAD,CAAQC,SAAS,UAAUC,KAAMX,KAAKF,SACnCQ,YAAE,iBAAkBJ,W,8BAlCvB,MACWF,KAAKC,MAArBW,EADK,EACLA,OAAQV,EADH,EACGA,KAEf,OAAOW,YAAc,GAAD,OACfb,KAAKC,OADU,IAElBW,OAAQ,EAAF,KACDA,GADC,IAEJE,UAAWZ,W,GAzBkBa,IAAMC,WAArCzB,E,qCA+DS0B,uBAAuB1B,GAAvB0B,IAGTR,EAAgB,YAAO,MAAP,2CAAH,mE,kCCpFnB,iEA4Be,SAASI,EACtBK,EACAC,GACQ,QAGJC,EACAC,EAHGC,EAAsCH,EAAtCG,OAAQV,EAA8BO,EAA9BP,OAAQhB,EAAsBuB,EAAtBvB,SAAU2B,EAAYJ,EAAZI,SAC3BC,EAAQF,EAAOG,KAAI,qBAAEC,MAAkB,MAK3B,iBAAPR,GACTG,EAAaC,EAAOK,QAAQT,GAAM,EAClCE,EAAgBQ,IAAcJ,EAAMK,MAAM,EAAGR,IAAa,SAAAK,GAAI,MAAgB,MAAZA,EAAK,OAEvEN,EAAgBQ,IAAcJ,GAAO,SAAAE,GAAI,MAAgB,MAAZA,EAAK,MAGpD,IAAII,EAAYN,EAAMK,MAAMT,EAAeC,QAEnB,IAAbE,IACTO,EAAYA,EAAUD,MAAM,EAAGN,IAGjC,IAAMQ,EAAM,UAAGnC,aAAH,EAAGA,EAAUmC,cAAb,QAAuB,GAC7BC,EAAI,UAAGpC,aAAH,EAAGA,EAAUoC,YAAb,QAAqB,GAEzBC,EAAY,GAAH,OAAMH,EAAUI,KAAK,KAArB,OACC,iBAAPhB,EAAkB,GAAKA,GADjB,OAEZa,GAFY,OAEHC,GAEZ,OAAOG,YAAoBF,EAAWrB","file":"RedirectToProjectModal.js","sourcesContent":["import styled from '@emotion/styled';\n\nimport Panel from 'app/components/panels/panel';\nimport space from 'app/styles/space';\nimport textStyles from 'app/styles/text';\n\nconst Text = styled('div')`\n  ${textStyles};\n\n  ${/* sc-selector */ Panel} & {\n    padding-left: ${space(2)};\n    padding-right: ${space(2)};\n\n    &:first-child {\n      padding-top: ${space(2)};\n    }\n  }\n`;\n\nexport default Text;\n","import React from 'react';\nimport * as ReactRouter from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport Text from 'app/components/text';\nimport {t, tct} from 'app/locale';\nimport recreateRoute from 'app/utils/recreateRoute';\n\ntype Props = ModalRenderProps &\n  ReactRouter.WithRouterProps & {\n    slug: string;\n  };\n\ntype State = {\n  timer: number;\n};\n\nclass RedirectToProjectModal extends React.Component<Props, State> {\n  state = {\n    timer: 5,\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      if (this.state.timer <= 1) {\n        window.location.assign(this.newPath);\n        return;\n      }\n\n      this.setState(state => ({\n        timer: state.timer - 1,\n      }));\n    }, 1000);\n  }\n\n  get newPath() {\n    const {params, slug} = this.props;\n\n    return recreateRoute('', {\n      ...this.props,\n      params: {\n        ...params,\n        projectId: slug,\n      },\n    });\n  }\n\n  render() {\n    const {slug, Header, Body} = this.props;\n    return (\n      <React.Fragment>\n        <Header>{t('Redirecting to New Project...')}</Header>\n\n        <Body>\n          <div>\n            <Text>\n              <p>{t('The project slug has been changed.')}</p>\n\n              <p>\n                {tct(\n                  'You will be redirected to the new project [project] in [timer] seconds...',\n                  {\n                    project: <strong>{slug}</strong>,\n                    timer: `${this.state.timer}`,\n                  }\n                )}\n              </p>\n              <ButtonWrapper>\n                <Button priority=\"primary\" href={this.newPath}>\n                  {t('Continue to %s', slug)}\n                </Button>\n              </ButtonWrapper>\n            </Text>\n          </div>\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ReactRouter.withRouter(RedirectToProjectModal);\nexport {RedirectToProjectModal};\n\nconst ButtonWrapper = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n"],"sourceRoot":""}