{"version":3,"sources":["webpack:///./app/views/app/root.tsx"],"names":["AppRoot","config","this","props","lastOrganization","browserHistory","replace","replaceRouterParams","DEFAULT_APP_ROUTE","orgSlug","React","Component","withConfig"],"mappings":"wpBAuBMA,E,gJACgB,IACXC,EAAUC,KAAKC,MAAfF,OAEHA,EAAOG,kBACTC,iBAAeC,QACbC,YAAoBC,IAAmB,CAACC,QAASR,EAAOG,sB,+BAM5D,OAAO,S,GAZWM,IAAMC,WAAtBX,E,sBAgBSY,sBAAWZ","file":"AppRoot.js","sourcesContent":["import React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {DEFAULT_APP_ROUTE} from 'app/constants';\nimport {Config} from 'app/types';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport withConfig from 'app/utils/withConfig';\n\ntype Props = {\n  config: Config;\n} & RouteComponentProps<{}, {}>;\n\n/**\n * This view is used when a user lands on the route `/` which historically\n * is a server-rendered route which redirects the user to their last selected organization\n *\n * However, this does not work when in the experimental SPA mode (e.g. developing against a remote API,\n * or a deploy preview), so we must replicate the functionality and redirect\n * the user to the proper organization.\n *\n * TODO: There might be an edge case where user does not have `lastOrganization` set,\n * in which case we should load their list of organizations and make a decision\n */\nclass AppRoot extends React.Component<Props> {\n  componentDidMount() {\n    const {config} = this.props;\n\n    if (config.lastOrganization) {\n      browserHistory.replace(\n        replaceRouterParams(DEFAULT_APP_ROUTE, {orgSlug: config.lastOrganization})\n      );\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withConfig(AppRoot);\n"],"sourceRoot":""}