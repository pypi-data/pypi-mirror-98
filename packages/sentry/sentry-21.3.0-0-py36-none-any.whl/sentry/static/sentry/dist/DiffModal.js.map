{"version":3,"sources":["webpack:///./app/components/issueDiff/renderGroupingInfo.tsx","webpack:///./app/components/issueDiff/index.tsx","webpack:///./app/components/modals/diffModal.tsx","webpack:///./app/utils/getStacktraceBody.tsx"],"names":["renderGroupVariant","variant","title","t","type","hash","push","description","rv","join","component","renderComponent","contributes","name","id","hint","name_or_id","values","value","line","renderGroupingInfo","groupingInfo","Object","map","flat","IssueDiff","state","loading","groupingDiff","baseEvent","targetEvent","SplitDiffAsync","undefined","toggleDiffMode","setState","fetchData","fetchEventData","issueId","eventId","a","props","orgId","project","api","paramEventId","requestPromise","event","eventID","slug","getStacktraceBody","this","baseIssueId","targetIssueId","baseEventId","targetEventId","Promise","all","then","addErrorMessage","className","DiffComponent","showDiffToggle","features","includes","StyledIssueDiff","HeaderWrapper","merged","active","barId","size","onClick","i","key","base","target","React","Component","defaultProps","withApi","shouldForwardProp","p","isPropValid","theme","backgroundSecondary","space","background","DiffModal","Body","modalCss","entries","exc","find","msg","data","formatted","filter","stacktrace","rawStacktraceContent","platform","reduce","acc","concat"],"mappings":"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","file":"DiffModal.js","sourcesContent":["import {t} from 'app/locale';\nimport {EventGroupComponent, EventGroupInfo, EventGroupVariant} from 'app/types';\n\nfunction renderGroupingInfo(groupingInfo: EventGroupInfo): string[] {\n  return Object.values(groupingInfo).map(renderGroupVariant).flat();\n}\n\nfunction renderGroupVariant(variant: EventGroupVariant): string[] {\n  const title = [t('Type: %s', variant.type)];\n\n  if (variant.hash) {\n    title.push(t('Hash: %s', variant.hash));\n  }\n\n  if (variant.description) {\n    title.push(t('Description: %s', variant.description));\n  }\n\n  const rv = [title.join('\\n')];\n\n  if (variant.component) {\n    rv.push(renderComponent(variant.component).join('\\n'));\n  }\n\n  return rv;\n}\n\nfunction renderComponent(component: EventGroupComponent): string[] {\n  if (!component.contributes) {\n    return [];\n  }\n\n  const {name, id, hint} = component;\n  const name_or_id = name || id;\n  const title = name_or_id && hint ? `${name_or_id} (${hint})` : name_or_id;\n  const rv = title ? [title] : [];\n\n  if (component.values) {\n    for (const value of component.values) {\n      if (typeof value === 'string') {\n        rv.push(`  ${value}`);\n        continue;\n      }\n\n      for (const line of renderComponent(value)) {\n        rv.push(`  ${line}`);\n      }\n    }\n  }\n\n  return rv;\n}\n\nexport default renderGroupingInfo;\n","import React from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SplitDiff from 'app/components/splitDiff';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Project} from 'app/types';\nimport getStacktraceBody from 'app/utils/getStacktraceBody';\nimport withApi from 'app/utils/withApi';\n\nimport renderGroupingInfo from './renderGroupingInfo';\n\nconst defaultProps = {\n  baseEventId: 'latest',\n  targetEventId: 'latest',\n};\n\ntype DefaultProps = typeof defaultProps;\n\ntype Props = {\n  api: Client;\n  baseIssueId: string;\n  targetIssueId: string;\n  orgId: string;\n  project: Project;\n  baseEventId?: string;\n  targetEventId?: string;\n  className?: string;\n};\n\ntype State = {\n  loading: boolean;\n  groupingDiff: boolean;\n  baseEvent: Array<string>;\n  targetEvent: Array<string>;\n  SplitDiffAsync?: typeof SplitDiff;\n};\n\nclass IssueDiff extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = defaultProps;\n\n  state: State = {\n    loading: true,\n    groupingDiff: false,\n    baseEvent: [],\n    targetEvent: [],\n\n    // `SplitDiffAsync` is an async-loaded component\n    // This will eventually contain a reference to the exported component from `./splitDiff`\n    SplitDiffAsync: undefined,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    const {baseIssueId, targetIssueId, baseEventId, targetEventId} = this.props;\n\n    // Fetch component and event data\n    Promise.all([\n      import(/* webpackChunkName: \"splitDiff\" */ '../splitDiff'),\n      this.fetchEventData(baseIssueId, baseEventId ?? 'latest'),\n      this.fetchEventData(targetIssueId, targetEventId ?? 'latest'),\n    ])\n      .then(([{default: SplitDiffAsync}, baseEvent, targetEvent]) => {\n        this.setState({\n          SplitDiffAsync,\n          baseEvent,\n          targetEvent,\n          loading: false,\n        });\n      })\n      .catch(() => {\n        addErrorMessage(t('Error loading events'));\n      });\n  }\n\n  toggleDiffMode = () => {\n    this.setState(\n      state => ({groupingDiff: !state.groupingDiff, loading: true}),\n      this.fetchData\n    );\n  };\n\n  fetchEventData = async (issueId: string, eventId: string) => {\n    const {orgId, project, api} = this.props;\n    const {groupingDiff} = this.state;\n\n    let paramEventId = eventId;\n\n    if (eventId === 'latest') {\n      const event = await api.requestPromise(`/issues/${issueId}/events/latest/`);\n      paramEventId = event.eventID;\n    }\n\n    if (groupingDiff) {\n      const groupingInfo = await api.requestPromise(\n        `/projects/${orgId}/${project.slug}/events/${paramEventId}/grouping-info/`\n      );\n      return renderGroupingInfo(groupingInfo);\n    }\n\n    const event = await api.requestPromise(\n      `/projects/${orgId}/${project.slug}/events/${paramEventId}/`\n    );\n    return getStacktraceBody(event);\n  };\n\n  render() {\n    const {className, project} = this.props;\n    const {\n      SplitDiffAsync: DiffComponent,\n      loading,\n      groupingDiff,\n      baseEvent,\n      targetEvent,\n    } = this.state;\n\n    const showDiffToggle = project.features.includes('similarity-view-v2');\n\n    return (\n      <StyledIssueDiff className={className} loading={loading}>\n        {loading && <LoadingIndicator />}\n        {!loading && showDiffToggle && (\n          <HeaderWrapper>\n            <ButtonBar merged active={groupingDiff ? 'grouping' : 'event'}>\n              <Button barId=\"event\" size=\"small\" onClick={this.toggleDiffMode}>\n                {t('Diff stack trace and message')}\n              </Button>\n              <Button barId=\"grouping\" size=\"small\" onClick={this.toggleDiffMode}>\n                {t('Diff grouping information')}\n              </Button>\n            </ButtonBar>\n          </HeaderWrapper>\n        )}\n        {!loading &&\n          DiffComponent &&\n          baseEvent.map((value, i) => (\n            <DiffComponent\n              key={i}\n              base={value}\n              target={targetEvent[i] ?? ''}\n              type=\"words\"\n            />\n          ))}\n      </StyledIssueDiff>\n    );\n  }\n}\n\nexport default withApi(IssueDiff);\n\n// required for tests which do not provide API as context\nexport {IssueDiff};\n\nconst StyledIssueDiff = styled('div', {\n  shouldForwardProp: p => isPropValid(p) && p !== 'loading',\n})<Pick<State, 'loading'>>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  overflow: auto;\n  padding: ${space(1)};\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  ${p =>\n    p.loading &&\n    `\n        background-color: ${p.theme.background};\n        justify-content: center;\n      `};\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${space(2)};\n`;\n","import React from 'react';\nimport {css} from '@emotion/core';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport IssueDiff from 'app/components/issueDiff';\n\ntype Props = ModalRenderProps & React.ComponentProps<typeof IssueDiff>;\n\nconst DiffModal = ({className, Body, ...props}: Props) => (\n  <Body>\n    <IssueDiff className={className} {...props} />\n  </Body>\n);\n\nconst modalCss = css`\n  .modal-dialog {\n    display: flex;\n    margin: 0;\n    left: 10px;\n    right: 10px;\n    top: 10px;\n    bottom: 10px;\n    width: auto;\n  }\n  .modal-content {\n    display: flex;\n    flex: 1;\n  }\n  .modal-body {\n    display: flex;\n    overflow: hidden;\n    flex: 1;\n  }\n`;\n\nexport {modalCss};\n\nexport default DiffModal;\n","import rawStacktraceContent from 'app/components/events/interfaces/rawStacktraceContent';\nimport {Event} from 'app/types/event';\n\nexport default function getStacktraceBody(event: Event) {\n  if (!event || !event.entries) {\n    return [];\n  }\n\n  // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to\n  // diff multiple exceptions\n  //\n  // See: https://github.com/getsentry/sentry/issues/6055\n  const exc = event.entries.find(({type}) => type === 'exception');\n\n  if (!exc) {\n    // Look for a message if not an exception\n    const msg = event.entries.find(({type}) => type === 'message');\n    if (!msg) {\n      return [];\n    }\n    return msg?.data?.formatted && [msg.data.formatted];\n  }\n\n  if (!exc.data) {\n    return [];\n  }\n\n  // TODO(ts): This should be verified when EntryData has the correct type\n  return exc.data.values\n    .filter(value => !!value.stacktrace)\n    .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))\n    .reduce((acc, value) => acc.concat(value), []);\n}\n"],"sourceRoot":""}