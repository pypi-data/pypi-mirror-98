{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/performance/vitals/constants.ts","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///./app/components/createAlertButton.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx","webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/views/alerts/list/styles.tsx","webpack:///./app/views/alerts/list/sparkLine.tsx","webpack:///./app/views/alerts/list/row.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","WEB_VITAL_DETAILS","WebVital","FP","slug","name","t","acronym","description","poorThreshold","type","measurementType","FCP","LCP","FID","CLS","TTFB","RequestTime","TransactionFilterOptions","transactionSummaryRouteWithQuery","transaction","projectID","query","unselectedSeries","display","trendFunction","trendColumn","showTransactions","pathname","generateTransactionSummaryRoute","project","environment","statsPeriod","start","end","SidebarSpacer","space","IncompatibleQueryAlert","incompatibleQuery","eventView","orgId","onClose","hasProjectError","hasEnvironmentError","hasEventTypeError","hasYAxisError","totalErrors","Object","values","filter","val","length","eventTypeError","clone","eventTypeTransaction","eventTypeDefault","eventTypeErrorDefault","eventTypeLinks","error","to","generateQueryStringObject","default","errorDefault","StyledAlert","icon","color","size","Fragment","tct","yAxis","StyledCode","getYAxis","StyledUnorderedList","StyledCloseButton","isCircled","aria-label","onClick","borderless","CreateAlertFromViewButton","projects","organization","referrer","onIncompatibleQuery","onSuccess","buttonProps","errors","getQueryDatasource","column","explodeFieldString","kind","eventTypeMatch","match","yAxisConfig","errorFieldConfig","transactionFieldConfig","invalidFunction","aggregations","includes","aggregation","AGGREGATIONS","isNumericParameter","parameters","some","param","dataType","allowedParameters","fields","measurementKeys","invalidParameter","incompatibleYAxis","find","p","id","hasErrors","x","undefined","createFromDiscover","CreateAlertButton","event","preventDefault","onAlertClose","withApi","withRouter","iconProps","router","hideIcon","api","showPermissionGuide","handleClickWithoutProject","navigateTo","enableAlertsMemberWrite","a","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","addErrorMessage","permissionTooltipText","settingsLink","renderButton","hasAccess","disabled","tooltipProps","isHoverable","position","popperStyle","maxWidth","showGuide","access","isOrgAdmin","target","onFinish","Alert","theme","textColor","Button","TIME_OPTIONS","label","value","TimePeriod","SIX_HOURS","ONE_DAY","THREE_DAYS","SEVEN_DAYS","ALERT_RULE_DETAILS_DEFAULT_PERIOD","TIME_WINDOWS","TimeWindow","ONE_HOUR","API_INTERVAL_POINTS_LIMIT","API_INTERVAL_POINTS_MIN","AlertHeader","activeTab","BorderlessHeader","StyledLayoutHeaderContent","StyledLayoutTitle","Actions","gap","e","href","priority","TabLayoutHeader","underlined","features","className","Layout","breakpoints","ButtonBar","TableLayout","status","TitleAndSparkLine","Sparklines","React","lazy","SparklinesLine","SparkLine","this","props","eventStats","SparklineError","SparkLinePlaceholder","map","Array","isArray","count","Suspense","fallback","data-test-id","width","height","style","stroke","gray300","fill","strokeWidth","Component","StyledSparkLine","Placeholder","makeRuleDetailsQuery","incident","timeWindowMillis","alertRule","timeWindow","minRange","maxRange","now","moment","utc","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","duration","getUtcDateString","subtract","add","AlertListRow","getProject","memoize","filteredStatus","identifier","renderBody","date","CreatedResolvedTime","isResolved","IncidentStatus","CLOSED","isWarning","WARNING","gray200","orange300","red200","text","StatusIndicator","projectsLoaded","state","stats","started","Date","as","alertLink","isIssueAlert","IncidentPanelItem","Title","renderStatusIndicator","IncidentLink","ErrorLoadingStatsIcon","ProjectBadge","avatarSize","renderTimeSince","seconds","getDynamicText","fixed","getIncidentMetricPreset","AsyncComponent","overflowEllipsis","IdBadge","Link","PanelItem","fontSizeMedium"],"mappings":"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","file":"AlertsDetails~AlertsList.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return <DocumentTitle title={`${docTitle} - Sentry`}>{children}</DocumentTitle>;\n}\n\nexport default SentryDocumentTitle;\n","import {t} from 'app/locale';\nimport {measurementType, WebVital} from 'app/utils/discover/fields';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n","import styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport space from 'app/styles/space';\n\nimport {DisplayModes} from './charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  display?: DisplayModes;\n  trendFunction?: string;\n  trendColumn?: string;\n  unselectedSeries?: string | string[];\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n    },\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","import React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {navigateTo} from 'app/actionCreators/navigation';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport GuideAnchor from 'app/components/assistant/guideAnchor';\nimport Button from 'app/components/button';\nimport Link from 'app/components/links/link';\nimport {IconClose, IconInfo, IconSiren} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport {Aggregation, AGGREGATIONS, explodeFieldString} from 'app/utils/discover/fields';\nimport withApi from 'app/utils/withApi';\nimport {getQueryDatasource} from 'app/views/alerts/utils';\nimport {\n  errorFieldConfig,\n  transactionFieldConfig,\n} from 'app/views/settings/incidentRules/constants';\n\n/**\n * Discover query supports more features than alert rules\n * To create an alert rule from a discover query, some parameters need to be adjusted\n */\ntype IncompatibleQueryProperties = {\n  /**\n   * Must have exactly one project selected and not -1 (all projects)\n   */\n  hasProjectError: boolean;\n  /**\n   * Must have zero or one environments\n   */\n  hasEnvironmentError: boolean;\n  /**\n   * event.type must be error or transaction\n   */\n  hasEventTypeError: boolean;\n  hasYAxisError: boolean;\n};\n\ntype AlertProps = {\n  incompatibleQuery: IncompatibleQueryProperties;\n  eventView: EventView;\n  orgId: string;\n  /**\n   * Dismiss alert\n   */\n  onClose: () => void;\n};\n\n/**\n * Displays messages to the user on what needs to change in their query\n */\nfunction IncompatibleQueryAlert({\n  incompatibleQuery,\n  eventView,\n  orgId,\n  onClose,\n}: AlertProps) {\n  const {\n    hasProjectError,\n    hasEnvironmentError,\n    hasEventTypeError,\n    hasYAxisError,\n  } = incompatibleQuery;\n\n  const totalErrors = Object.values(incompatibleQuery).filter(val => val === true).length;\n\n  const eventTypeError = eventView.clone();\n  eventTypeError.query += ' event.type:error';\n  const eventTypeTransaction = eventView.clone();\n  eventTypeTransaction.query += ' event.type:transaction';\n  const eventTypeDefault = eventView.clone();\n  eventTypeDefault.query += ' event.type:default';\n  const eventTypeErrorDefault = eventView.clone();\n  eventTypeErrorDefault.query += ' event.type:error or event.type:default';\n  const pathname = `/organizations/${orgId}/discover/results/`;\n\n  const eventTypeLinks = {\n    error: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeError.generateQueryStringObject(),\n        }}\n      />\n    ),\n    default: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n    transaction: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeTransaction.generateQueryStringObject(),\n        }}\n      />\n    ),\n    errorDefault: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeErrorDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n  };\n\n  return (\n    <StyledAlert type=\"warning\" icon={<IconInfo color=\"yellow300\" size=\"sm\" />}>\n      {totalErrors === 1 && (\n        <React.Fragment>\n          {hasProjectError &&\n            t('An alert can use data from only one Project. Select one and try again.')}\n          {hasEnvironmentError &&\n            t(\n              'An alert supports data from a single Environment or All Environments. Pick one try again.'\n            )}\n          {hasEventTypeError &&\n            tct(\n              'An alert needs a filter of [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)]. Use one of these and try again.',\n              eventTypeLinks\n            )}\n          {hasYAxisError &&\n            tct(\n              'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n              {\n                yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n              }\n            )}\n        </React.Fragment>\n      )}\n      {totalErrors > 1 && (\n        <React.Fragment>\n          {t('Yikes! That button didn’t work. Please fix the following problems:')}\n          <StyledUnorderedList>\n            {hasProjectError && <li>{t('Select one Project.')}</li>}\n            {hasEnvironmentError && (\n              <li>{t('Select a single Environment or All Environments.')}</li>\n            )}\n            {hasEventTypeError && (\n              <li>\n                {tct(\n                  'Use the filter [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)].',\n                  eventTypeLinks\n                )}\n              </li>\n            )}\n            {hasYAxisError && (\n              <li>\n                {tct(\n                  'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n                  {\n                    yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n                  }\n                )}\n              </li>\n            )}\n          </StyledUnorderedList>\n        </React.Fragment>\n      )}\n      <StyledCloseButton\n        icon={<IconClose color=\"yellow300\" size=\"sm\" isCircled />}\n        aria-label={t('Close')}\n        size=\"zero\"\n        onClick={onClose}\n        borderless\n      />\n    </StyledAlert>\n  );\n}\n\ntype CreateAlertFromViewButtonProps = React.ComponentProps<typeof Button> & {\n  className?: string;\n  projects: Project[];\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  organization: Organization;\n  referrer?: string;\n  /**\n   * Called when the current eventView does not meet the requirements of alert rules\n   * @returns a function that takes an alert close function argument\n   */\n  onIncompatibleQuery: (\n    incompatibleAlertNoticeFn: (onAlertClose: () => void) => React.ReactNode,\n    errors: IncompatibleQueryProperties\n  ) => void;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onSuccess: () => void;\n};\n\nfunction incompatibleYAxis(eventView: EventView): boolean {\n  const column = explodeFieldString(eventView.getYAxis());\n  if (column.kind === 'field') {\n    return true;\n  }\n\n  const eventTypeMatch = eventView.query.match(/event\\.type:(transaction|error)/);\n  if (!eventTypeMatch) {\n    return false;\n  }\n\n  const dataset = eventTypeMatch[1];\n  const yAxisConfig = dataset === 'error' ? errorFieldConfig : transactionFieldConfig;\n\n  const invalidFunction = !yAxisConfig.aggregations.includes(column.function[0]);\n  // Allow empty parameters, allow all numeric parameters - eg. apdex(300)\n  const aggregation: Aggregation | undefined = AGGREGATIONS[column.function[0]];\n  if (!aggregation) {\n    return false;\n  }\n\n  const isNumericParameter = aggregation.parameters.some(\n    param => param.kind === 'value' && param.dataType === 'number'\n  );\n  // There are other measurements possible, but for the time being, only allow alerting\n  // on the predefined set of measurements for alerts.\n  const allowedParameters = [\n    '',\n    ...yAxisConfig.fields,\n    ...(yAxisConfig.measurementKeys ?? []),\n  ];\n  const invalidParameter =\n    !isNumericParameter && !allowedParameters.includes(column.function[1]);\n\n  return invalidFunction || invalidParameter;\n}\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onIncompatibleQuery,\n  onSuccess,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  // Must have exactly one project selected and not -1 (all projects)\n  const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;\n  // Must have one or zero environments\n  const hasEnvironmentError = eventView.environment.length > 1;\n  // Must have event.type of error or transaction\n  const hasEventTypeError = getQueryDatasource(eventView.query) === null;\n  // yAxis must be a function and enabled on alerts\n  const hasYAxisError = incompatibleYAxis(eventView);\n  const errors: IncompatibleQueryProperties = {\n    hasProjectError,\n    hasEnvironmentError,\n    hasEventTypeError,\n    hasYAxisError,\n  };\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const hasErrors = Object.values(errors).some(x => x);\n  const to = hasErrors\n    ? undefined\n    : {\n        pathname: `/organizations/${organization.slug}/alerts/${project?.slug}/new/`,\n        query: {\n          ...eventView.generateQueryStringObject(),\n          createFromDiscover: true,\n          referrer,\n        },\n      };\n\n  const handleClick = (event: React.MouseEvent) => {\n    if (hasErrors) {\n      event.preventDefault();\n      onIncompatibleQuery(\n        (onAlertClose: () => void) => (\n          <IncompatibleQueryAlert\n            incompatibleQuery={errors}\n            eventView={eventView}\n            orgId={organization.slug}\n            onClose={onAlertClose}\n          />\n        ),\n        errors\n      );\n      return;\n    }\n\n    onSuccess();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      {...buttonProps}\n    />\n  );\n}\n\ntype Props = {\n  organization: Organization;\n  projectSlug?: string;\n  iconProps?: React.ComponentProps<typeof IconSiren>;\n  referrer?: string;\n  hideIcon?: boolean;\n  api: Client;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  React.ComponentProps<typeof Button>;\n\nconst CreateAlertButton = withApi(\n  withRouter(\n    ({\n      organization,\n      projectSlug,\n      iconProps,\n      referrer,\n      router,\n      hideIcon,\n      api,\n      showPermissionGuide,\n      ...buttonProps\n    }: Props) => {\n      function handleClickWithoutProject(event: React.MouseEvent) {\n        event.preventDefault();\n\n        navigateTo(\n          `/organizations/${organization.slug}/alerts/:projectId/new/${\n            referrer ? `?referrer=${referrer}` : ''\n          }`,\n          router\n        );\n      }\n\n      async function enableAlertsMemberWrite() {\n        const settingsEndpoint = `/organizations/${organization.slug}/`;\n        addLoadingMessage();\n        try {\n          await api.requestPromise(settingsEndpoint, {\n            method: 'PUT',\n            data: {\n              alertsMemberWrite: true,\n            },\n          });\n          addSuccessMessage(t('Successfully updated organization settings'));\n        } catch (err) {\n          addErrorMessage(t('Unable to update organization settings'));\n        }\n      }\n\n      const permissionTooltipText = tct(\n        'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n        {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n      );\n\n      const renderButton = (hasAccess: boolean) => (\n        <Button\n          disabled={!hasAccess}\n          title={!hasAccess ? permissionTooltipText : undefined}\n          icon={!hideIcon && <IconSiren {...iconProps} />}\n          to={\n            projectSlug\n              ? `/organizations/${organization.slug}/alerts/${projectSlug}/new/`\n              : undefined\n          }\n          tooltipProps={{\n            isHoverable: true,\n            position: 'top',\n            popperStyle: {\n              maxWidth: '270px',\n            },\n          }}\n          onClick={projectSlug ? undefined : handleClickWithoutProject}\n          {...buttonProps}\n        >\n          {buttonProps.children ?? t('Create Alert')}\n        </Button>\n      );\n\n      const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n      return (\n        <Access organization={organization} access={['alerts:write']}>\n          {({hasAccess}) =>\n            showGuide ? (\n              <Access organization={organization} access={['org:write']}>\n                {({hasAccess: isOrgAdmin}) => (\n                  <GuideAnchor\n                    target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                    onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                  >\n                    {renderButton(hasAccess)}\n                  </GuideAnchor>\n                )}\n              </Access>\n            ) : (\n              renderButton(hasAccess)\n            )\n          }\n        </Access>\n      );\n    }\n  )\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n\nconst StyledAlert = styled(Alert)`\n  color: ${p => p.theme.textColor};\n  margin-bottom: 0;\n`;\n\nconst StyledUnorderedList = styled('ul')`\n  margin-bottom: 0;\n`;\n\nconst StyledCode = styled('code')`\n  background-color: transparent;\n  padding: 0;\n`;\n\nconst StyledCloseButton = styled(Button)`\n  transition: opacity 0.1s linear;\n  position: absolute;\n  top: 3px;\n  right: 0;\n\n  &:hover,\n  &:focus {\n    background-color: transparent;\n    opacity: 1;\n  }\n`;\n","import {t} from 'app/locale';\nimport {SelectValue} from 'app/types';\nimport {TimePeriod, TimeWindow} from 'app/views/settings/incidentRules/types';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n];\n\nexport const ALERT_RULE_DETAILS_DEFAULT_PERIOD = TimePeriod.ONE_DAY;\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n};\n\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n","import React from 'react';\nimport {InjectedRouter} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'app/actionCreators/navigation';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport Link from 'app/components/links/link';\nimport {IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\n\ntype Props = {\n  router: InjectedRouter;\n  organization: Organization;\n  activeTab: 'stream' | 'rules';\n};\n\nconst AlertHeader = ({router, organization, activeTab}: Props) => {\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  return (\n    <React.Fragment>\n      <BorderlessHeader>\n        <StyledLayoutHeaderContent>\n          <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n        </StyledLayoutHeaderContent>\n        <Layout.HeaderActions>\n          <Actions gap={1}>\n            <Button\n              size=\"small\"\n              onClick={handleNavigateToSettings}\n              href=\"#\"\n              icon={<IconSettings size=\"xs\" />}\n            >\n              {t('Settings')}\n            </Button>\n\n            <CreateAlertButton\n              organization={organization}\n              iconProps={{size: 'xs'}}\n              size=\"small\"\n              priority=\"primary\"\n              referrer=\"alert_stream\"\n              showPermissionGuide\n            >\n              {t('Create Alert Rule')}\n            </CreateAlertButton>\n          </Actions>\n        </Layout.HeaderActions>\n      </BorderlessHeader>\n      <TabLayoutHeader>\n        <Layout.HeaderNavTabs underlined>\n          <Feature features={['incidents']} organization={organization}>\n            <li className={activeTab === 'stream' ? 'active' : ''}>\n              <Link to={`/organizations/${organization.slug}/alerts/`}>\n                {t('Metric Alerts')}\n              </Link>\n            </li>\n          </Feature>\n          <li className={activeTab === 'rules' ? 'active' : ''}>\n            <Link to={`/organizations/${organization.slug}/alerts/rules/`}>\n              {t('Alert Rules')}\n            </Link>\n          </li>\n        </Layout.HeaderNavTabs>\n      </TabLayoutHeader>\n    </React.Fragment>\n  );\n};\n\nexport default AlertHeader;\n\nconst BorderlessHeader = styled(Layout.Header)`\n  border-bottom: 0;\n\n  /* Not enough buttons to change direction for mobile view */\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    flex-direction: row;\n  }\n`;\n\nconst StyledLayoutHeaderContent = styled(Layout.HeaderContent)`\n  margin-bottom: 0;\n  margin-right: ${space(2)};\n`;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst TabLayoutHeader = styled(Layout.Header)`\n  padding-top: ${space(1)};\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    padding-top: ${space(1)};\n  }\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst TableLayout = styled('div')<{status: 'open' | 'closed'}>`\n  display: grid;\n  grid-template-columns: ${p =>\n    p.status === 'open' ? '4fr 1fr 2fr' : '3fr 2fr 2fr 1fr 2fr'};\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst TitleAndSparkLine = styled('div')<{status: 'open' | 'closed'}>`\n  display: ${p => (p.status === 'open' ? 'grid' : 'flex')};\n  grid-gap: ${space(1)};\n  grid-template-columns: auto 120px;\n  align-items: center;\n  padding-right: ${space(2)};\n  overflow: hidden;\n`;\n\nexport {TableLayout, TitleAndSparkLine};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Placeholder from 'app/components/placeholder';\nimport theme from 'app/utils/theme';\nimport {IncidentStats} from 'app/views/alerts/types';\n\n// Height of sparkline\nconst SPARKLINE_HEIGHT = 38;\n\ntype Props = {\n  className?: string;\n  eventStats: IncidentStats['eventStats'];\n  error?: React.ReactNode;\n};\n\nconst Sparklines = React.lazy(\n  () => import(/* webpackChunkName: \"Sparklines\" */ 'app/components/sparklines')\n);\nconst SparklinesLine = React.lazy(\n  () => import(/* webpackChunkName: \"SparklinesLine\" */ 'app/components/sparklines/line')\n);\n\nclass SparkLine extends React.Component<Props> {\n  render() {\n    const {className, error, eventStats} = this.props;\n\n    if (error) {\n      return <SparklineError error={error} />;\n    }\n\n    if (!eventStats) {\n      return <SparkLinePlaceholder />;\n    }\n\n    const data = eventStats.data.map(([, value]) =>\n      value && Array.isArray(value) && value.length ? value[0].count || 0 : 0\n    );\n\n    return (\n      <React.Suspense fallback={<SparkLinePlaceholder />}>\n        <div data-test-id=\"incident-sparkline\" className={className}>\n          <Sparklines data={data} width={100} height={32}>\n            <SparklinesLine\n              style={{stroke: theme.gray300, fill: 'none', strokeWidth: 2}}\n            />\n          </Sparklines>\n        </div>\n      </React.Suspense>\n    );\n  }\n}\n\nconst StyledSparkLine = styled(SparkLine)`\n  flex-shrink: 0;\n  width: 100%;\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparkLinePlaceholder = styled(Placeholder)`\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparklineError = styled(SparkLinePlaceholder)`\n  align-items: center;\n  line-height: 1;\n`;\n\nexport default StyledSparkLine;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Duration from 'app/components/duration';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport theme from 'app/utils/theme';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {Incident, IncidentStats, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset, isIssueAlert} from '../utils';\n\nimport SparkLine from './sparkLine';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {start: string; end: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  filteredStatus: 'open' | 'closed';\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  stats: IncidentStats;\n} & AsyncComponent['state'];\n\nclass AlertListRow extends AsyncComponent<Props, State> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, incident, filteredStatus} = this.props;\n\n    if (filteredStatus === 'open') {\n      return [\n        ['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`],\n      ];\n    }\n\n    return [];\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderError() {\n    return this.renderBody();\n  }\n\n  renderTimeSince(date: string) {\n    return (\n      <CreatedResolvedTime>\n        <TimeSince date={date} />\n      </CreatedResolvedTime>\n    );\n  }\n\n  renderStatusIndicator() {\n    const {status} = this.props.incident;\n    const isResolved = status === IncidentStatus.CLOSED;\n    const isWarning = status === IncidentStatus.WARNING;\n\n    const color = isResolved ? theme.gray200 : isWarning ? theme.orange300 : theme.red200;\n    const text = isResolved ? t('Resolved') : isWarning ? t('Warning') : t('Critical');\n\n    return (\n      <Tooltip title={tct('Status: [text]', {text})}>\n        <StatusIndicator color={color} />\n      </Tooltip>\n    );\n  }\n\n  renderBody() {\n    const {\n      incident,\n      orgId,\n      projectsLoaded,\n      projects,\n      filteredStatus,\n      organization,\n    } = this.props;\n    const {error, stats} = this.state;\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n    const slug = incident.projects[0];\n\n    const hasRedesign =\n      incident.alertRule &&\n      !isIssueAlert(incident.alertRule) &&\n      organization.features.includes('alert-details-redesign');\n\n    const alertLink = hasRedesign\n      ? {\n          pathname: `/organizations/${orgId}/alerts/rules/details/${incident.alertRule?.id}/`,\n          query: makeRuleDetailsQuery(incident),\n        }\n      : {\n          pathname: `/organizations/${orgId}/alerts/${incident.identifier}/`,\n        };\n\n    return (\n      <ErrorBoundary>\n        <IncidentPanelItem>\n          <TableLayout status={filteredStatus}>\n            <TitleAndSparkLine status={filteredStatus}>\n              <Title>\n                {this.renderStatusIndicator()}\n                <IncidentLink to={alertLink}>Alert #{incident.id}</IncidentLink>\n                {incident.title}\n              </Title>\n\n              {filteredStatus === 'open' && (\n                <SparkLine\n                  error={error && <ErrorLoadingStatsIcon />}\n                  eventStats={stats?.eventStats}\n                />\n              )}\n            </TitleAndSparkLine>\n\n            <ProjectBadge\n              avatarSize={18}\n              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n            />\n\n            {this.renderTimeSince(incident.dateStarted)}\n\n            {filteredStatus === 'closed' && (\n              <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n            )}\n\n            {filteredStatus === 'closed' &&\n              incident.dateClosed &&\n              this.renderTimeSince(incident.dateClosed)}\n          </TableLayout>\n        </IncidentPanelItem>\n      </ErrorBoundary>\n    );\n  }\n}\n\nfunction ErrorLoadingStatsIcon() {\n  return (\n    <Tooltip title={t('Error loading alert stats')}>\n      <IconWarning />\n    </Tooltip>\n  );\n}\n\nconst CreatedResolvedTime = styled('div')`\n  ${overflowEllipsis}\n  line-height: 1.4;\n  display: flex;\n  align-items: center;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StatusIndicator = styled('div')<{color: string}>`\n  width: 10px;\n  height: 12px;\n  background: ${p => p.color};\n  display: inline-block;\n  border-top-right-radius: 40%;\n  border-bottom-right-radius: 40%;\n  margin-bottom: -1px;\n`;\n\nconst Title = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst IncidentLink = styled(Link)`\n  padding: 0 ${space(1)};\n`;\n\nconst IncidentPanelItem = styled(PanelItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default AlertListRow;\n"],"sourceRoot":""}