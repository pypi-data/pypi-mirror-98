{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/views/teamCreate.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","slugify","str","toLowerCase","replace","CreateTeamForm","handleSubmit","data","onSuccess","onError","callIfFunction","props","onSubmit","handleCreateTeamSuccess","organization","Fragment","t","submitLabel","apiEndpoint","slug","apiMethod","onSubmitSuccess","requireChanges","data-test-id","formProps","name","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","React","Component","TeamCreate","handleSubmitSuccess","orgId","params","redirectUrl","router","push","withRouter","withOrganization"],"mappings":"2qBAQqBA,E,uIAKjB,MAAO,K,+BAIP,IAAMC,EAAQC,KAAKC,WACnB,OACE,YAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBC,KAAKE,uB,GATJC,KAHWL,E,2DCNN,SAASM,EAAQC,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,GAHzE,mC,ypBCoBqBC,E,kLACnBC,aAAe,SAACC,EAA2BC,EAAqBC,GAC9DC,YAAe,EAAKC,MAAMC,SAAUL,EAAiBC,EAAWC,I,EAGlEI,wBAA0B,SAACN,GACzBG,YAAe,EAAKC,MAAMH,UAAWD,I,+CAG9B,IACAO,EAAgBjB,KAAKc,MAArBG,aAEP,OACE,YAAC,IAAMC,SAAP,KACE,qBACGC,YACC,yGAIJ,YAAC,IAAD,KACEC,YAAaD,YAAE,eACfE,YAAW,yBAAoBJ,EAAaK,KAAjC,WACXC,UAAU,OACVR,SAAUf,KAAKS,aACfe,gBAAiBxB,KAAKgB,wBACtBS,gBAAc,EACdC,eAAa,oBACT1B,KAAKc,MAAMa,WAEf,YAAC,IAAD,CACEC,KAAK,OACLC,MAAOV,YAAE,aACTW,YAAaX,YAAE,0CACfY,KAAMZ,YAAE,mEACRa,UAAQ,EACRC,SAAO,EACPC,0BAAwB,EACxBC,QAAQ,EACRC,eAAgBhC,Y,GAvCgBiC,IAAMC,WAA7B9B,E,urBCNf+B,E,kLASJC,oBAAsB,SAAA9B,GAAQ,IACrB+B,EAAS,EAAK3B,MAAM4B,OAApBD,MACDE,EAAc,aAAH,OAAgBF,EAAhB,kBAA+B/B,EAAKY,KAApC,KACjB,EAAKR,MAAM8B,OAAOC,KAAKF,I,iDAVvB,OAAOxB,YAAE,iB,qCAIT,MAAO,K,mCAUP,OACE,YAAC,IAAD,KACE,sBAAKA,YAAE,sBAEP,YAAC,IAAD,CACER,UAAWX,KAAKwC,oBAChBvB,aAAcjB,KAAKc,MAAMG,oB,GAtBVnB,KA8BVgD,+BAAWC,YAAiBR","file":"TeamCreate.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport slugify from 'app/utils/slugify';\nimport Form from 'app/views/settings/components/forms/form';\nimport TextField from 'app/views/settings/components/forms/textField';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nexport default class CreateTeamForm extends React.Component<Props> {\n  handleSubmit = (data: Record<string, any>, onSuccess: Function, onError: Function) => {\n    callIfFunction(this.props.onSubmit, data as Payload, onSuccess, onError);\n  };\n\n  handleCreateTeamSuccess = (data: Payload) => {\n    callIfFunction(this.props.onSuccess, data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <React.Fragment>\n        <p>\n          {t(\n            'Members of a team have access to specific areas, such as a new release or a new application feature.'\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.handleSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Name')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport NarrowLayout from 'app/components/narrowLayout';\nimport CreateTeamForm from 'app/components/teams/createTeamForm';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\n\ntype Props = WithRouterProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\nclass TeamCreate extends AsyncView<Props> {\n  getTitle() {\n    return t('Create Team');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSubmitSuccess = data => {\n    const {orgId} = this.props.params;\n    const redirectUrl = `/settings/${orgId}/teams/${data.slug}/`;\n    this.props.router.push(redirectUrl);\n  };\n\n  renderBody() {\n    return (\n      <NarrowLayout>\n        <h3>{t('Create a New Team')}</h3>\n\n        <CreateTeamForm\n          onSuccess={this.handleSubmitSuccess}\n          organization={this.props.organization}\n        />\n      </NarrowLayout>\n    );\n  }\n}\n\nexport {TeamCreate};\nexport default withRouter(withOrganization(TeamCreate));\n"],"sourceRoot":""}