{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/internalStatChart.tsx","webpack:///./app/views/admin/adminQueue.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","InternalStatChart","state","error","loading","data","fetchData","_nextProps","nextState","prevProps","since","props","stat","resolution","setState","api","request","method","key","success","label","height","onRetry","series","seriesName","map","name","value","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","React","Component","withApi","TIME_WINDOWS","AdminQueue","timeWindow","Date","getTime","taskName","seconds","Error","activeTask","taskList","Header","className","merged","active","r","size","barId","onClick","changeWindow","withPadding","onChange","changeTask","clearable","choices","t"],"mappings":"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","file":"AdminQueue.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Client} from 'app/api';\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  since: number;\n  resolution: string;\n  stat: string;\n  label: string;\n  height?: number;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  data: [number, number][] | null;\n};\n\nclass InternalStatChart extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps: Props, nextState: State) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true}),\n    });\n  }\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    } else if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data:\n        data?.map(([timestamp, value]) => ({\n          name: timestamp * 1000,\n          value,\n        })) ?? [],\n    };\n    return (\n      <MiniBarChart\n        height={height ?? 150}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {SelectField} from 'app/components/forms';\nimport InternalStatChart from 'app/components/internalStatChart';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport AsyncView from 'app/views/asyncView';\n\nconst TIME_WINDOWS = ['1h', '1d', '1w'] as const;\n\ntype TimeWindow = typeof TIME_WINDOWS[number];\n\ntype State = AsyncView['state'] & {\n  timeWindow: TimeWindow;\n  since: number;\n  resolution: string;\n  taskName: string;\n  activeTask: string;\n  taskList: string[];\n};\n\nexport default class AdminQueue extends AsyncView<{}, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      timeWindow: '1w',\n      since: new Date().getTime() / 1000 - 3600 * 24 * 7,\n      resolution: '1h',\n      taskName: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['taskList', '/internal/queue/tasks/']];\n  }\n\n  changeWindow(timeWindow: TimeWindow) {\n    let seconds: number;\n    if (timeWindow === '1h') {\n      seconds = 3600;\n    } else if (timeWindow === '1d') {\n      seconds = 3600 * 24;\n    } else if (timeWindow === '1w') {\n      seconds = 3600 * 24 * 7;\n    } else {\n      throw new Error('Invalid time window');\n    }\n    this.setState({\n      since: new Date().getTime() / 1000 - seconds,\n      timeWindow,\n    });\n  }\n\n  changeTask(value: string) {\n    this.setState({activeTask: value});\n  }\n\n  renderBody() {\n    const {activeTask, taskList} = this.state;\n\n    return (\n      <div>\n        <Header>\n          <h3 className=\"no-border\">Queue Overview</h3>\n\n          <ButtonBar merged active={this.state.timeWindow}>\n            {TIME_WINDOWS.map(r => (\n              <Button size=\"small\" barId={r} onClick={() => this.changeWindow(r)} key={r}>\n                {r}\n              </Button>\n            ))}\n          </ButtonBar>\n        </Header>\n\n        <Panel>\n          <PanelHeader>Global Throughput</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"jobs.all.started\"\n              label=\"jobs started\"\n            />\n          </PanelBody>\n        </Panel>\n\n        <h3 className=\"no-border\">Task Details</h3>\n\n        <div>\n          <div className=\"m-b-1\">\n            <label>Show details for task:</label>\n            <SelectField\n              name=\"task\"\n              onChange={value => this.changeTask(value as string)}\n              value={activeTask}\n              clearable\n              choices={taskList.map(t => [t, t])}\n            />\n          </div>\n          {activeTask ? (\n            <div>\n              <Panel key={`jobs.started.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Started <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.started.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n              <Panel key={`jobs.finished.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Finished <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.finished.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Header = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n"],"sourceRoot":""}