{"version":3,"sources":["webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/utils.tsx","webpack:///./app/components/commitLink.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx","webpack:///./app/components/commitRow.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/withReleaseRepos.tsx","webpack:///./app/views/releases/detail/commits.tsx"],"names":["Reflux","createActions","EmptyState","children","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","repoName","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","name","t","push","getQuery","location","perPage","activeRepository","query","pick","Object","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","getReleaseEventView","selection","version","organization","projects","environments","datetime","start","end","period","discoverQuery","id","undefined","fields","apdexThreshold","stringifyQueryObject","QueryResults","range","environment","getUtcDateString","EventView","fromSavedQuery","SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","shortId","getShortCommitHash","providerData","find","provider","includes","url","className","href","external","RepositoryStoreConfig","listenables","RepoActions","state","orgSlug","repositories","repositoriesLoading","repositoriesError","init","this","resetRepositories","trigger","loadRepositories","loadRepositoriesError","err","loadRepositoriesSuccess","data","get","RepositoryStore","createStore","INITIAL_STATE","withRepositories","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","listenTo","getInitialState","props","slug","repoData","RepositoryActions","componentDidMount","fetchRepositories","api","params","path","requestPromise","method","then","res","Sentry","scope","setLevel","Warning","setFingerprint","getRepositories","onStoreUpdate","setState","render","CommitRow","message","split","EmailWarning","tct","actorEmail","accountSettings","StyledLink","to","inviteUser","onClick","openInviteMembersModal","initialData","emails","source","customAvatar","dateCreated","nonMemberEmail","key","AvatarWrapper","body","renderHovercardBody","user","EmailWarningIcon","CommitMessage","Message","renderMessage","Meta","timeago","date","React","Component","space","p","theme","fontSizeSmall","Link","textColor","white","yellow200","TextOverflow","subText","RepositorySwitcher","dropdownButton","createRef","handleRepoFilterChange","activeRepo","router","cursor","setButtonDropDownWidth","dropdownButtonWidth","current","offsetWidth","StyledDropdownControl","minMenuWidth","label","Fragment","FilterText","buttonProps","forwardRef","map","repo","onSelect","eventKey","isActive","RepoLabel","PureComponent","DropdownControl","borderRadius","button","border","gray300","overflowEllipsis","withReleaseRepos","withApi","withOrganization","releaseRepos","isLoading","fetchReleaseRepos","nextProps","setActiveReleaseRepo","prevProps","prevState","length","activeReleaseRepo","activeCommitRepo","matchedRepository","commitRepo","addErrorMessage","release","orgId","project","context","encodeURIComponent","fullWidth","dashedBorder","title","description","action","priority","projectSlug","contextType","ReleaseContext","Commits","routeTitleGen","formatVersion","commits","commitsPageLinks","reposToRender","keys","pageLinks","renderContent","AsyncView"],"mappings":"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","file":"ReleasesDetailCommits.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning>\n        <p>{children}</p>\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  GlobalSelection,\n  LightWeightOrganization,\n  Repository,\n} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {QueryResults, stringifyQueryObject} from 'app/utils/tokenizeSearch';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\n/**\n * Get high level transaction information for this release\n */\nexport function getReleaseEventView(\n  selection: GlobalSelection,\n  version: string,\n  organization: LightWeightOrganization\n): EventView {\n  const {projects, environments, datetime} = selection;\n  const {start, end, period} = datetime;\n\n  const discoverQuery = {\n    id: undefined,\n    version: 2,\n    name: `${t('Release Apdex')}`,\n    fields: [`apdex(${organization.apdexThreshold})`],\n    query: stringifyQueryObject(\n      new QueryResults([`release:${version}`, 'event.type:transaction', 'count():>0'])\n    ),\n    range: period,\n    environment: environments,\n    projects,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n  } as const;\n\n  return EventView.fromSavedQuery(discoverQuery);\n}\n","import React from 'react';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport {getShortCommitHash} from 'app/utils';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n\nexport default RepositoryStore;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nconst withRepositories = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRepositories(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(RepositoryStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      return repoData.orgSlug === orgSlug\n        ? {...INITIAL_STATE, ...repoData}\n        : {...INITIAL_STATE};\n    },\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    },\n\n    fetchRepositories() {\n      const {api, organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    },\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    },\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    },\n  });\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport CommitLink from 'app/components/commitLink';\nimport Hovercard from 'app/components/hovercard';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Commit} from 'app/types';\n\ntype Props = {\n  commit: Commit;\n  customAvatar?: React.ReactNode;\n};\n\nclass CommitRow extends React.Component<Props> {\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n\n    return firstLine;\n  }\n\n  renderHovercardBody(author) {\n    return (\n      <EmailWarning>\n        {tct(\n          'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',\n          {\n            actorEmail: <strong>{author.email}</strong>,\n            accountSettings: <StyledLink to=\"/settings/account/emails/\" />,\n            inviteUser: (\n              <StyledLink\n                to=\"\"\n                onClick={() =>\n                  openInviteMembersModal({\n                    initialData: [\n                      {\n                        emails: new Set([author.email]),\n                      },\n                    ],\n                    source: 'suspect_commit',\n                  })\n                }\n              />\n            ),\n          }\n        )}\n      </EmailWarning>\n    );\n  }\n\n  render() {\n    const {commit, customAvatar, ...props} = this.props;\n    const {id, dateCreated, message, author, repository} = commit;\n    const nonMemberEmail = author && author.id === undefined;\n\n    return (\n      <PanelItem key={id} {...props}>\n        {customAvatar ? (\n          customAvatar\n        ) : nonMemberEmail ? (\n          <AvatarWrapper>\n            <Hovercard body={this.renderHovercardBody(author)}>\n              <UserAvatar size={36} user={author} />\n              <EmailWarningIcon>\n                <IconWarning size=\"xs\" />\n              </EmailWarningIcon>\n            </Hovercard>\n          </AvatarWrapper>\n        ) : (\n          <AvatarWrapper>\n            <UserAvatar size={36} user={author} />\n          </AvatarWrapper>\n        )}\n\n        <CommitMessage>\n          <Message>{this.renderMessage(message)}</Message>\n          <Meta>\n            {tct('[author] committed [timeago]', {\n              author: <strong>{(author && author.name) || t('Unknown author')}</strong>,\n              timeago: <TimeSince date={dateCreated} />,\n            })}\n          </Meta>\n        </CommitMessage>\n\n        <div>\n          <CommitLink commitId={id} repository={repository} />\n        </div>\n      </PanelItem>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  align-self: flex-start;\n  margin-right: ${space(2)};\n`;\n\nconst EmailWarning = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1.4;\n  margin: -4px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.textColor};\n  border-bottom: 1px dotted ${p => p.theme.textColor};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst EmailWarningIcon = styled('span')`\n  position: relative;\n  top: 15px;\n  left: -11px;\n  display: inline-block;\n  line-height: 12px;\n  border-radius: 50%;\n  border: 1px solid ${p => p.theme.white};\n  background: ${p => p.theme.yellow200};\n  padding: 1px 2px 3px 2px;\n`;\n\nconst CommitMessage = styled('div')`\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  margin-right: ${space(2)};\n`;\n\nconst Message = styled(TextOverflow)`\n  font-size: 15px;\n  line-height: 1.1;\n  font-weight: bold;\n`;\n\nconst Meta = styled(TextOverflow)`\n  font-size: 13px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${p => p.theme.subText};\n`;\n\nexport default styled(CommitRow)`\n  align-items: center;\n`;\n","import React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends React.PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = React.createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <React.Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </React.Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel} from 'app/components/panels';\nimport {IconCommit} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withRepositories from 'app/utils/withRepositories';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {ReleaseContext} from '.';\n\n// These props are required when using this HoC\ntype DependentProps = RouteComponentProps<{orgId: string; release: string}, {}>;\n\ntype HoCsProps = {\n  api: Client;\n  organization: Organization;\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  releaseRepos: Repository[];\n  isLoading: boolean;\n  activeReleaseRepo?: Repository;\n};\n\nconst withReleaseRepos = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  withApi(\n    withOrganization(\n      withRepositories(\n        class extends React.Component<P & HoCsProps, State> {\n          static displayName = `withReleaseRepos(${getDisplayName(WrappedComponent)})`;\n\n          state: State = {\n            releaseRepos: [],\n            isLoading: true,\n          };\n\n          componentDidMount() {\n            this.fetchReleaseRepos();\n          }\n\n          UNSAFE_componentWillReceiveProps(nextProps: P & HoCsProps) {\n            this.setActiveReleaseRepo(nextProps);\n          }\n\n          componentDidUpdate(prevProps: P & HoCsProps, prevState: State) {\n            if (!!prevProps.repositoriesLoading && !this.props.repositoriesLoading) {\n              this.fetchReleaseRepos();\n              return;\n            }\n\n            if (prevState.releaseRepos.length !== this.state.releaseRepos.length) {\n              this.setActiveReleaseRepo(this.props);\n            }\n          }\n\n          static contextType = ReleaseContext;\n\n          setActiveReleaseRepo(props: P & HoCsProps) {\n            const {releaseRepos, activeReleaseRepo} = this.state;\n\n            if (!releaseRepos.length) {\n              return;\n            }\n\n            const activeCommitRepo = props.location.query?.activeRepo;\n\n            if (!activeCommitRepo) {\n              this.setState({\n                activeReleaseRepo: releaseRepos[0] ?? null,\n              });\n              return;\n            }\n\n            if (activeCommitRepo === activeReleaseRepo?.name) {\n              return;\n            }\n\n            const matchedRepository = releaseRepos.find(\n              commitRepo => commitRepo.name === activeCommitRepo\n            );\n\n            if (matchedRepository) {\n              this.setState({\n                activeReleaseRepo: matchedRepository,\n              });\n              return;\n            }\n\n            addErrorMessage(t('The repository you were looking for was not found.'));\n          }\n\n          async fetchReleaseRepos() {\n            const {params, api, repositories, repositoriesLoading} = this.props;\n\n            if (repositoriesLoading === undefined || repositoriesLoading === true) {\n              return;\n            }\n\n            if (!repositories?.length) {\n              this.setState({isLoading: false});\n              return;\n            }\n\n            const {release, orgId} = params;\n            const {project} = this.context;\n\n            this.setState({isLoading: true});\n\n            try {\n              const releaseRepos = await api.requestPromise(\n                `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n                  release\n                )}/repositories/`\n              );\n              this.setState({releaseRepos, isLoading: false});\n            } catch (error) {\n              Sentry.captureException(error);\n              addErrorMessage(\n                t(\n                  'An error occured while trying to fetch the repositories of the release: %s',\n                  release\n                )\n              );\n            }\n          }\n\n          render() {\n            const {isLoading, activeReleaseRepo, releaseRepos} = this.state;\n            const {\n              repositoriesLoading,\n              repositories,\n              params,\n              router,\n              location,\n              organization,\n            } = this.props;\n\n            if (isLoading || repositoriesLoading) {\n              return <LoadingIndicator />;\n            }\n\n            const noRepositoryOrgRelatedFound = !repositories?.length;\n\n            if (noRepositoryOrgRelatedFound) {\n              const {orgId} = params;\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n                        )}\n                        action={\n                          <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n                            {t('Connect a repository')}\n                          </Button>\n                        }\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            const noReleaseReposFound = !releaseRepos.length;\n\n            if (noReleaseReposFound) {\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'No commits associated with this release have been found.'\n                        )}\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            if (activeReleaseRepo === undefined) {\n              return <LoadingIndicator />;\n            }\n\n            const {release} = params;\n            const orgSlug = organization.slug;\n\n            return (\n              <WrappedComponent\n                {...(this.props as P)} // this is just to satisfy the compiler\n                orgSlug={orgSlug}\n                projectSlug={this.context.project.slug}\n                release={release}\n                router={router}\n                location={location}\n                releaseRepos={releaseRepos}\n                activeReleaseRepo={activeReleaseRepo}\n              />\n            );\n          }\n        }\n      )\n    )\n  );\n\nexport default withReleaseRepos;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport CommitRow from 'app/components/commitRow';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Commit, Organization, Project, Repository} from 'app/types';\nimport {formatVersion} from 'app/utils/formatters';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\n\nimport EmptyState from './emptyState';\nimport RepositorySwitcher from './repositorySwitcher';\nimport {getCommitsByRepository, getQuery, getReposToRender} from './utils';\nimport withReleaseRepos from './withReleaseRepos';\n\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  location: Location;\n  projectSlug: Project['slug'];\n  orgSlug: Organization['slug'];\n  release: string;\n  releaseRepos: Repository[];\n  activeReleaseRepo?: Repository;\n} & AsyncView['props'];\n\ntype State = {\n  commits: Commit[];\n} & AsyncView['state'];\n\nclass Commits extends AsyncView<Props, State> {\n  getTitle() {\n    const {params, projectSlug} = this.props;\n    const {orgId} = params;\n\n    return routeTitleGen(\n      t('Commits - Release %s', formatVersion(params.release)),\n      orgId,\n      false,\n      projectSlug\n    );\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      commits: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      projectSlug,\n      activeReleaseRepo: activeRepository,\n      location,\n      orgSlug,\n      release,\n    } = this.props;\n\n    const query = getQuery({location, activeRepository});\n\n    return [\n      [\n        'commits',\n        `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n          release\n        )}/commits/`,\n        {query},\n      ],\n    ];\n  }\n\n  renderContent() {\n    const {commits, commitsPageLinks} = this.state;\n    const {activeReleaseRepo} = this.props;\n\n    if (!commits.length) {\n      return (\n        <EmptyState>\n          {!activeReleaseRepo\n            ? t('There are no commits associated with this release.')\n            : t(\n                'There are no commits associated with this release in the %s repository.',\n                activeReleaseRepo.name\n              )}\n        </EmptyState>\n      );\n    }\n\n    const commitsByRepository = getCommitsByRepository(commits);\n    const reposToRender = getReposToRender(Object.keys(commitsByRepository));\n\n    return (\n      <React.Fragment>\n        {reposToRender.map(repoName => (\n          <Panel key={repoName}>\n            <PanelHeader>{repoName}</PanelHeader>\n            <PanelBody>\n              {commitsByRepository[repoName]?.map(commit => (\n                <CommitRow key={commit.id} commit={commit} />\n              ))}\n            </PanelBody>\n          </Panel>\n        ))}\n        <Pagination pageLinks={commitsPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {location, router, activeReleaseRepo, releaseRepos} = this.props;\n\n    return (\n      <React.Fragment>\n        {releaseRepos.length > 1 && (\n          <RepositorySwitcher\n            repositories={releaseRepos}\n            activeRepository={activeReleaseRepo}\n            location={location}\n            router={router}\n          />\n        )}\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n\n  renderComponent() {\n    return (\n      <Body>\n        <Main fullWidth>{super.renderComponent()}</Main>\n      </Body>\n    );\n  }\n}\n\nexport default withReleaseRepos(Commits);\n"],"sourceRoot":""}