{"version":3,"sources":["webpack:///./app/components/modals/recoveryOptionsModal.tsx"],"names":["RecoveryOptionsModal","handleSkipSms","setState","skipSms","this","props","authenticatorName","closeModal","Body","Header","Footer","state","authenticators","reduce","obj","item","id","recovery","sms","recoveryEnrolled","isEnrolled","displaySmsPrompt","Fragment","closeButton","onHide","t","type","onClick","name","autoFocus","priority","to","css","marginLeft","space","authId","AsyncComponent"],"mappings":"0xCAqBMA,E,kLASJC,cAAgB,WACd,EAAKC,SAAS,CAACC,SAAS,K,wDARxB,2EAAoCA,SAAS,M,qCAI7C,MAAO,CAAC,CAAC,iBAAkB,gC,mCAOhB,MACmDC,KAAKC,MAA5DC,EADI,EACJA,kBAAmBC,EADf,EACeA,WAAYC,EAD3B,EAC2BA,KAAMC,EADjC,EACiCA,OAAQC,EADzC,EACyCA,OADzC,EAEuBN,KAAKO,MAAhCC,EAFI,EAEJA,eAAgBT,EAFZ,EAEYA,QAFZ,EAIaS,EAAgBC,QACtC,SAACC,EAAKC,GAEJ,OADAD,EAAIC,EAAKC,IAAMD,EACRD,IAET,IALKG,EAJI,EAIJA,SAAUC,EAJN,EAIMA,IAOXC,EAAmBF,GAAYA,EAASG,WACxCC,EAAmBH,IAAQA,EAAIE,aAAejB,EAEpD,OACE,YAAC,IAAMmB,SAAP,KACE,YAACb,EAAD,CAAQc,aAAW,EAACC,OAAQjB,GACzBkB,YAAE,sCAGL,YAACjB,EAAD,KACE,YAAC,IAAD,KACGiB,YAAE,qDAAsDnB,IAE3D,YAAC,IAAD,KACGmB,YAAE,mEAGJJ,EAEC,YAAC,IAAD,CAAOK,KAAK,WACTD,YAAE,+DAIL,YAAC,IAAD,CAAOC,KAAK,WACTD,YAAE,2JAQRJ,EAEC,YAACX,EAAD,KACE,YAAC,IAAD,CAAQiB,QAASvB,KAAKH,cAAe2B,KAAK,WAAWC,WAAS,GAC3DJ,YAAE,mBAEL,YAAC,IAAD,CACEK,SAAS,UACTH,QAASpB,EACTwB,GAAE,yCAAoCb,EAAIF,GAAxC,YACFY,KAAK,WACLI,IAAG,YAAE,CAACC,WAAYC,YAAM,IAArB,gCACHL,WAAS,GAERJ,YAAE,wBAKP,YAACf,EAAD,KACE,YAAC,IAAD,CACEoB,SAAS,UACTH,QAASpB,EACTwB,GACEZ,EAAgB,yCACsBF,EAASkB,OAD/B,KAEZ,8BAENP,KAAK,WACLC,WAAS,GAERJ,YAAE,6B,GAxFkBW,KAiGpBpC","file":"RecoveryOptionsModal.js","sourcesContent":["import React from 'react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator} from 'app/types';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'] &\n  ModalRenderProps & {\n    authenticatorName: string;\n  };\n\ntype State = AsyncComponent['state'] & {\n  authenticators: Authenticator[] | null;\n  skipSms: boolean;\n};\n\nclass RecoveryOptionsModal extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {...super.getDefaultState(), skipSms: false};\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['authenticators', '/users/me/authenticators/']];\n  }\n\n  handleSkipSms = () => {\n    this.setState({skipSms: true});\n  };\n\n  renderBody() {\n    const {authenticatorName, closeModal, Body, Header, Footer} = this.props;\n    const {authenticators, skipSms} = this.state;\n\n    const {recovery, sms} = authenticators!.reduce<{[key: string]: Authenticator}>(\n      (obj, item) => {\n        obj[item.id] = item;\n        return obj;\n      },\n      {}\n    );\n    const recoveryEnrolled = recovery && recovery.isEnrolled;\n    const displaySmsPrompt = sms && !sms.isEnrolled && !skipSms;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Two-Factor Authentication Enabled')}\n        </Header>\n\n        <Body>\n          <TextBlock>\n            {t('Two-factor authentication via %s has been enabled.', authenticatorName)}\n          </TextBlock>\n          <TextBlock>\n            {t('You should now set up recovery options to secure your account.')}\n          </TextBlock>\n\n          {displaySmsPrompt ? (\n            // set up backup phone number\n            <Alert type=\"warning\">\n              {t('We recommend adding a phone number as a backup 2FA method.')}\n            </Alert>\n          ) : (\n            // get recovery codes\n            <Alert type=\"warning\">\n              {t(\n                `Recovery codes are the only way to access your account if you lose\n                  your device and cannot receive two-factor authentication codes.`\n              )}\n            </Alert>\n          )}\n        </Body>\n\n        {displaySmsPrompt ? (\n          // set up backup phone number\n          <Footer>\n            <Button onClick={this.handleSkipSms} name=\"skipStep\" autoFocus>\n              {t('Skip this step')}\n            </Button>\n            <Button\n              priority=\"primary\"\n              onClick={closeModal}\n              to={`/settings/account/security/mfa/${sms.id}/enroll/`}\n              name=\"addPhone\"\n              css={{marginLeft: space(1)}}\n              autoFocus\n            >\n              {t('Add a Phone Number')}\n            </Button>\n          </Footer>\n        ) : (\n          // get recovery codes\n          <Footer>\n            <Button\n              priority=\"primary\"\n              onClick={closeModal}\n              to={\n                recoveryEnrolled\n                  ? `/settings/account/security/mfa/${recovery.authId}/`\n                  : '/settings/account/security/'\n              }\n              name=\"getCodes\"\n              autoFocus\n            >\n              {t('Get Recovery Codes')}\n            </Button>\n          </Footer>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RecoveryOptionsModal;\n"],"sourceRoot":""}