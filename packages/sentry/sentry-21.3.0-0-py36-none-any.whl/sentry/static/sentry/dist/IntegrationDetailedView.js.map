{"version":3,"sources":["webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/organizationIntegrations/integrationIcon.tsx","webpack:///./app/views/organizationIntegrations/integrationItem.tsx","webpack:///./app/views/organizationIntegrations/addIntegrationButton.tsx","webpack:///./app/views/organizationIntegrations/installedIntegration.tsx","webpack:///./app/views/organizationIntegrations/integrationDetailedView.tsx"],"names":["AddIntegration","dialog","openDialog","urlParams","trackIntegrationEvent","integration","props","provider","key","integration_type","analyticsParams","organization","setupDialog","url","width","height","computeCenteredWindow","left","top","query","account","modalParams","installUrl","queryString","opts","window","open","focus","didReceiveMessage","message","origin","document","location","source","data","success","addSuccessMessage","t","name","onInstall","addErrorMessage","error","addEventListener","this","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","React","Component","StyledIcon","p","size","Icon","state","imgSrc","icon","src","onError","setState","ICON_PATHS","DEFAULT_ICON","IntegrationIcon","pluginId","IntegrationItem","compact","Flex","Labels","IntegrationName","data-test-id","DomainName","domainName","defaultProps","space","theme","gray200","gray400","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","disabled","canAdd","title","onClick","InstalledIntegration","handleUninstallClick","aspects","removal_dialog","body","actionText","onRemove","className","removeConfirmProps","status","canDisable","disableConfirmProps","access","hasAccess","IntegrationFlex","id","IntegrationItemBox","position","StyledButton","borderless","to","slug","priority","onConfirming","StyledIntegrationStatus","getRemovalBodyAndText","Fragment","type","confirmText","onConfirm","handleRemove","disable_dialog","onDisable","Button","gray300","IntegrationStatus","withTheme","color","titleText","IntegrationStatusText","IntegrationDetailedView","orgId","params","router","push","origIntegrations","configurations","integrations","filter","i","options","method","api","request","split","orgName","accountType","handleExternalInstall","integrationSlug","disabledFromFeatures","userHasAccess","style","marginBottom","view","already_installed","installationStatus","externalInstall","href","external","renderRequestIntegrationButton","length","map","InstallWrapper","renderEmptyConfigurations","information","providers","description","author","alerts","item","text","noticeText","source_url","issue_url","isEnabled","features","AbstractIntegrationDetailedView","border","background","withOrganization"],"mappings":"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","file":"IntegrationDetailedView.js","sourcesContent":["import React from 'react';\nimport * as queryString from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  account?: string;\n  organization?: Organization; //for analytics\n  analyticsParams?: {\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n    already_installed: boolean;\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    //Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    trackIntegrationEvent(\n      'integrations.installation_start',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = this.props.provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (this.props.account) {\n      query.account = this.props.account;\n    }\n\n    if (this.props.modalParams) {\n      query = {...query, ...this.props.modalParams};\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationEvent(\n      'integrations.installation_complete',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    addSuccessMessage(t('%s added', this.props.provider.name));\n    this.props.onInstall(data);\n  };\n\n  render() {\n    return this.props.children(this.openDialog);\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport PluginIcon, {DEFAULT_ICON, ICON_PATHS} from 'app/plugins/components/pluginIcon';\nimport {Integration} from 'app/types';\n\ntype Props = {\n  integration: Integration;\n  size?: number;\n};\n\ntype IconProps = Pick<Props, 'size'>;\n\nconst StyledIcon = styled('img')<IconProps>`\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n  border-radius: 2px;\n  display: block;\n`;\n\nclass Icon extends React.Component<Props> {\n  state = {\n    imgSrc: this.props.integration.icon,\n  };\n\n  render() {\n    const {integration, size} = this.props;\n\n    return (\n      <StyledIcon\n        size={size}\n        src={this.state.imgSrc}\n        onError={() => {\n          this.setState({imgSrc: ICON_PATHS[integration.provider.key] || DEFAULT_ICON});\n        }}\n      />\n    );\n  }\n}\n\nconst IntegrationIcon = ({integration, size = 32}: Props) =>\n  integration.icon ? (\n    <Icon size={size} integration={integration} />\n  ) : (\n    <PluginIcon size={size} pluginId={integration.provider.key} />\n  );\n\nexport default IntegrationIcon;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {Integration} from 'app/types';\nimport IntegrationIcon from 'app/views/organizationIntegrations/integrationIcon';\n\ntype DefaultProps = {\n  compact: boolean;\n};\n\ntype Props = DefaultProps & {\n  integration: Integration;\n};\nexport default class IntegrationItem extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    compact: false,\n  };\n\n  render() {\n    const {integration, compact} = this.props;\n    return (\n      <Flex>\n        <div>\n          <IntegrationIcon size={compact ? 22 : 32} integration={integration} />\n        </div>\n        <Labels compact={compact}>\n          <IntegrationName data-test-id=\"integration-name\">\n            {integration.name}\n          </IntegrationName>\n          <DomainName compact={compact}>{integration.domainName}</DomainName>\n        </Labels>\n      </Flex>\n    );\n  }\n}\n\nconst Flex = styled('div')`\n  display: flex;\n`;\ntype StyledProps = Pick<Props, 'compact'>;\nconst Labels = styled('div')<StyledProps>`\n  box-sizing: border-box;\n  display: flex;\n  ${p => (p.compact ? 'align-items: center;' : '')};\n  flex-direction: ${p => (p.compact ? 'row' : 'column')};\n  padding-left: ${space(1)};\n  min-width: 0;\n  justify-content: center;\n`;\n\nconst IntegrationName = styled('div')`\n  font-size: 1.6rem;\n`;\n\n// Not using the overflowEllipsis style import here\n// as it sets width 100% which causes layout issues in the\n// integration list.\nconst DomainName = styled('div')<StyledProps>`\n  color: ${p => (p.compact ? p.theme.gray200 : p.theme.gray400)};\n  margin-left: ${p => (p.compact ? space(1) : 'inherit')};\n  margin-top: ${p => (!p.compact ? space(0.25) : 'inherit')};\n  font-size: 1.4rem;\n  line-height: 1.2;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","import React from 'react';\n\nimport Button from 'app/components/button';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport {IntegrationWithConfig} from 'app/types';\n\nimport AddIntegration from './addIntegration';\n\ntype Props = {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n} & React.ComponentProps<typeof Button> &\n  Pick<\n    React.ComponentProps<typeof AddIntegration>,\n    'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n  >;\n\nexport default class AddIntegrationButton extends React.Component<Props> {\n  render() {\n    const {\n      provider,\n      buttonText,\n      onAddIntegration,\n      organization,\n      reinstall,\n      analyticsParams,\n      modalParams,\n      ...buttonProps\n    } = this.props;\n\n    const label =\n      buttonText || t(reinstall ? 'Enable' : 'Add %s', provider.metadata.noun);\n\n    return (\n      <Tooltip\n        disabled={provider.canAdd}\n        title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n      >\n        <AddIntegration\n          provider={provider}\n          onInstall={onAddIntegration}\n          organization={organization}\n          analyticsParams={analyticsParams}\n          modalParams={modalParams}\n        >\n          {onClick => (\n            <Button\n              disabled={!provider.canAdd}\n              {...buttonProps}\n              onClick={() => onClick()}\n            >\n              {label}\n            </Button>\n          )}\n        </AddIntegration>\n      </Tooltip>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {withTheme} from 'emotion-theming';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport Confirm from 'app/components/confirm';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete, IconFlag, IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Integration, IntegrationProvider, ObjectStatus, Organization} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/integrationEvents';\nimport {Theme} from 'app/utils/theme';\n\nimport IntegrationItem from './integrationItem';\n\nexport type Props = {\n  organization: Organization;\n  provider: IntegrationProvider;\n  integration: Integration;\n  onRemove: (integration: Integration) => void;\n  onDisable: (integration: Integration) => void;\n  trackIntegrationEvent: (eventKey: IntegrationAnalyticsKey) => void; //analytics callback\n  className?: string;\n};\n\nexport default class InstalledIntegration extends React.Component<Props> {\n  handleUninstallClick = () => {\n    this.props.trackIntegrationEvent('integrations.uninstall_clicked');\n  };\n\n  getRemovalBodyAndText(aspects: Integration['provider']['aspects']) {\n    if (aspects && aspects.removal_dialog) {\n      return {\n        body: aspects.removal_dialog.body,\n        actionText: aspects.removal_dialog.actionText,\n      };\n    } else {\n      return {\n        body: t(\n          'Deleting this integration will remove any project associated data. This action cannot be undone. Are you sure you want to delete this integration?'\n        ),\n        actionText: t('Delete'),\n      };\n    }\n  }\n\n  handleRemove(integration: Integration) {\n    this.props.onRemove(integration);\n    this.props.trackIntegrationEvent('integrations.uninstall_completed');\n  }\n\n  get removeConfirmProps() {\n    const {integration} = this.props;\n    const {body, actionText} = this.getRemovalBodyAndText(integration.provider.aspects);\n\n    const message = (\n      <React.Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t('Deleting this integration has consequences!')}\n        </Alert>\n        {body}\n      </React.Fragment>\n    );\n    return {\n      message,\n      confirmText: actionText,\n      onConfirm: () => this.handleRemove(integration),\n    };\n  }\n\n  get disableConfirmProps() {\n    const {integration} = this.props;\n    const {body, actionText} = integration.provider.aspects.disable_dialog || {};\n    const message = (\n      <React.Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t('This integration cannot be removed in Sentry')}\n        </Alert>\n        {body}\n      </React.Fragment>\n    );\n\n    return {\n      message,\n      confirmText: actionText,\n      onConfirm: () => this.props.onDisable(integration),\n    };\n  }\n\n  render() {\n    const {className, integration, provider, organization} = this.props;\n\n    const removeConfirmProps =\n      integration.status === 'active' && integration.provider.canDisable\n        ? this.disableConfirmProps\n        : this.removeConfirmProps;\n\n    return (\n      <Access access={['org:integrations']}>\n        {({hasAccess}) => (\n          <IntegrationFlex key={integration.id} className={className}>\n            <IntegrationItemBox>\n              <IntegrationItem integration={integration} />\n            </IntegrationItemBox>\n            <div>\n              <Tooltip\n                disabled={hasAccess}\n                position=\"left\"\n                title={t(\n                  'You must be an organization owner, manager or admin to configure'\n                )}\n              >\n                <StyledButton\n                  borderless\n                  icon={<IconSettings />}\n                  disabled={!hasAccess || integration.status !== 'active'}\n                  to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}\n                  data-test-id=\"integration-configure-button\"\n                >\n                  {t('Configure')}\n                </StyledButton>\n              </Tooltip>\n            </div>\n            <div>\n              <Tooltip\n                disabled={hasAccess}\n                title={t(\n                  'You must be an organization owner, manager or admin to uninstall'\n                )}\n              >\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  {...removeConfirmProps}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </Tooltip>\n            </div>\n\n            <StyledIntegrationStatus status={integration.status} />\n          </IntegrationFlex>\n        )}\n      </Access>\n    );\n  }\n}\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n`;\n\nconst IntegrationStatus = withTheme(\n  (props: React.HTMLAttributes<HTMLElement> & {theme: Theme; status: ObjectStatus}) => {\n    const {theme, status, ...p} = props;\n    const color = status === 'active' ? theme.success : theme.gray300;\n    const titleText =\n      status === 'active'\n        ? t('This Integration can be disabled by clicking the Uninstall button')\n        : t('This Integration has been disconnected from the external provider');\n    return (\n      <Tooltip title={titleText}>\n        <div {...p}>\n          <CircleIndicator size={6} color={color} />\n          <IntegrationStatusText>{`${\n            status === 'active' ? t('enabled') : t('disabled')\n          }`}</IntegrationStatusText>\n        </div>\n      </Tooltip>\n    );\n  }\n);\n\nconst StyledIntegrationStatus = styled(IntegrationStatus)`\n  display: flex;\n  align-items: center;\n  color: ${p => p.theme.gray300};\n  font-weight: light;\n  text-transform: capitalize;\n  &:before {\n    content: '|';\n    color: ${p => p.theme.gray200};\n    margin-right: ${space(1)};\n    font-weight: normal;\n  }\n`;\n\nconst IntegrationStatusText = styled('div')`\n  margin: 0 ${space(0.75)} 0 ${space(0.5)};\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {RequestOptions} from 'app/api';\nimport Button from 'app/components/button';\nimport {IconFlag, IconOpen, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Integration, IntegrationProvider} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport AddIntegrationButton from './addIntegrationButton';\nimport InstalledIntegration from './installedIntegration';\n\ntype State = {\n  configurations: Integration[];\n  information: {providers: IntegrationProvider[]};\n};\n\nclass IntegrationDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ([string, string, any] | [string, string])[] {\n    const {orgId, integrationSlug} = this.props.params;\n    const baseEndpoints: ([string, string, any] | [string, string])[] = [\n      [\n        'information',\n        `/organizations/${orgId}/config/integrations/?provider_key=${integrationSlug}`,\n      ],\n      [\n        'configurations',\n        `/organizations/${orgId}/integrations/?provider_key=${integrationSlug}&includeConfig=0`,\n      ],\n    ];\n\n    return baseEndpoints;\n  }\n\n  get integrationType() {\n    return 'first_party' as const;\n  }\n\n  get provider() {\n    return this.state.information.providers[0];\n  }\n\n  get description() {\n    return this.metadata.description;\n  }\n\n  get author() {\n    return this.metadata.author;\n  }\n\n  get alerts() {\n    const provider = this.provider;\n    const metadata = this.metadata;\n    // The server response for integration installations includes old icon CSS classes\n    // We map those to the currently in use values to their react equivalents\n    // and fallback to IconFlag just in case.\n    const alerts = (metadata.aspects.alerts || []).map(item => {\n      switch (item.icon) {\n        case 'icon-warning':\n        case 'icon-warning-sm':\n          return {...item, icon: <IconWarning />};\n        default:\n          return {...item, icon: <IconFlag />};\n      }\n    });\n\n    if (!provider.canAdd && metadata.aspects.externalInstall) {\n      alerts.push({\n        type: 'warning',\n        icon: <IconOpen />,\n        text: metadata.aspects.externalInstall.noticeText,\n      });\n    }\n    return alerts;\n  }\n\n  get resourceLinks() {\n    const metadata = this.metadata;\n    return [\n      {url: metadata.source_url, title: 'View Source'},\n      {url: metadata.issue_url, title: 'Report Issue'},\n    ];\n  }\n\n  get metadata() {\n    return this.provider.metadata;\n  }\n\n  get isEnabled() {\n    return this.state.configurations.length > 0;\n  }\n\n  get installationStatus() {\n    return this.isEnabled ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return this.provider.name;\n  }\n\n  get featureData() {\n    return this.metadata.features;\n  }\n\n  onInstall = (integration: Integration) => {\n    // send the user to the configure integration view for that integration\n    const {orgId} = this.props.params;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${integration.provider.key}/${integration.id}/`\n    );\n  };\n\n  onRemove = (integration: Integration) => {\n    const {orgId} = this.props.params;\n\n    const origIntegrations = [...this.state.configurations];\n\n    const integrations = this.state.configurations.filter(i => i.id !== integration.id);\n    this.setState({configurations: integrations});\n\n    const options: RequestOptions = {\n      method: 'DELETE',\n      error: () => {\n        this.setState({configurations: origIntegrations});\n        addErrorMessage(t('Failed to remove Integration'));\n      },\n    };\n\n    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);\n  };\n\n  onDisable = (integration: Integration) => {\n    let url: string;\n\n    const [domainName, orgName] = integration.domainName.split('/');\n    if (integration.accountType === 'User') {\n      url = `https://${domainName}/settings/installations/`;\n    } else {\n      url = `https://${domainName}/organizations/${orgName}/settings/installations/`;\n    }\n\n    window.open(url, '_blank');\n  };\n\n  handleExternalInstall = () => {\n    this.trackIntegrationEvent('integrations.installation_start');\n  };\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    const {organization} = this.props;\n    const provider = this.provider;\n    const {metadata} = provider;\n\n    const size = 'small' as const;\n    const priority = 'primary' as const;\n\n    const buttonProps = {\n      style: {marginBottom: space(1)},\n      size,\n      priority,\n      'data-test-id': 'install-button',\n      disabled: disabledFromFeatures,\n      organization,\n    };\n\n    if (!userHasAccess) {\n      return this.renderRequestIntegrationButton();\n    }\n\n    if (provider.canAdd) {\n      return (\n        <AddIntegrationButton\n          provider={provider}\n          onAddIntegration={this.onInstall}\n          analyticsParams={{\n            view: 'integrations_directory_integration_detail',\n            already_installed: this.installationStatus !== 'Not Installed',\n          }}\n          {...buttonProps}\n        />\n      );\n    }\n    if (metadata.aspects.externalInstall) {\n      return (\n        <Button\n          icon={<IconOpen />}\n          href={metadata.aspects.externalInstall.url}\n          onClick={this.handleExternalInstall}\n          external\n          {...buttonProps}\n        >\n          {metadata.aspects.externalInstall.buttonText}\n        </Button>\n      );\n    }\n\n    // This should never happen but we can't return undefined without some refactoring.\n    return <React.Fragment />;\n  }\n\n  renderConfigurations() {\n    const {configurations} = this.state;\n    const {organization} = this.props;\n    const provider = this.provider;\n\n    if (configurations.length) {\n      return configurations.map(integration => {\n        return (\n          <InstallWrapper key={integration.id}>\n            <InstalledIntegration\n              organization={organization}\n              provider={provider}\n              integration={integration}\n              onRemove={this.onRemove}\n              onDisable={this.onDisable}\n              data-test-id={integration.id}\n              trackIntegrationEvent={this.trackIntegrationEvent}\n            />\n          </InstallWrapper>\n        );\n      });\n    }\n\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst InstallWrapper = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nexport default withOrganization(IntegrationDetailedView);\n"],"sourceRoot":""}