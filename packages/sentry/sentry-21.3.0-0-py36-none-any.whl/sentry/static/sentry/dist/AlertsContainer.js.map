{"version":3,"sources":["webpack:///./app/views/alerts/index.tsx"],"names":["AlertsContainer","this","props","children","organization","features","hasMetricAlerts","hasFeature","Fragment","React","isValidElement","cloneElement","Component","withOrganization"],"mappings":"8oBAUMA,E,qIACK,MAC0BC,KAAKC,MAA/BC,EADA,EACAA,SAAUC,EADV,EACUA,aACjB,OACE,YAAC,IAAD,CAASA,aAAcA,EAAcC,SAAU,CAAC,eAC7C,gBAAcC,EAAd,EAAEC,WAAF,OACC,YAAC,IAAMC,SAAP,KACGL,GAAYM,IAAMC,eAAeP,GAC9BM,IAAME,aAAaR,EAAU,CAC3BC,eACAE,oBAEFH,U,GAZcM,IAAMG,WAA9BZ,E,8BAoBSa,sBAAiBb","file":"AlertsContainer.js","sourcesContent":["import React from 'react';\n\nimport Feature from 'app/components/acl/feature';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n};\n\nclass AlertsContainer extends React.Component<Props> {\n  render() {\n    const {children, organization} = this.props;\n    return (\n      <Feature organization={organization} features={['incidents']}>\n        {({hasFeature: hasMetricAlerts}) => (\n          <React.Fragment>\n            {children && React.isValidElement(children)\n              ? React.cloneElement(children, {\n                  organization,\n                  hasMetricAlerts,\n                })\n              : children}\n          </React.Fragment>\n        )}\n      </Feature>\n    );\n  }\n}\n\nexport default withOrganization(AlertsContainer);\n"],"sourceRoot":""}