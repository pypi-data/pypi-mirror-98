{"version":3,"sources":["webpack:///./app/components/resultGrid.tsx","webpack:///./app/views/admin/adminOrganizations.tsx"],"names":["Filter","getSelector","title","getCurrentLabel","getDefaultItem","props","options","map","value","label","filterQuery","queryKey","query","location","key","isActive","to","pathname","path","selected","this","find","item","name","cursor","className","length","React","Component","SortBy","getCurrentSortLabel","sortBy","getSortBySelector","ResultGrid","state","defaultState","onSearch","e","targetQueryParams","preventDefault","browserHistory","push","onQueryChange","evt","setState","target","fetchData","queryParams","defaultSort","filters","pageLinks","loading","error","defaultParams","api","request","endpoint","method","data","success","_","jqXHR","rows","getResponseHeader","colSpan","columns","row","keyForRow","columnsForRow","hasSearch","onSubmit","type","placeholder","style","width","autoComplete","onChange","size","sortOptions","Object","keys","filterKey","renderLoading","renderError","renderNoResults","renderResults","hasPagination","defaultProps","id","per_page","withApi","getRow","slug","AdminOrganizations","t"],"mappings":"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","file":"AdminOrganizations.js","sourcesContent":["import React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Client, RequestOptions} from 'app/api';\nimport DropdownLink from 'app/components/dropdownLink';\nimport MenuItem from 'app/components/menuItem';\nimport Pagination from 'app/components/pagination';\nimport {IconSearch} from 'app/icons';\nimport withApi from 'app/utils/withApi';\n\ntype Option = [value: string, label: string];\n\ntype FilterProps = {\n  name: string;\n  queryKey: string;\n  options: Option[];\n  path: string;\n  value: string;\n  location: Location;\n};\n\nclass Filter extends React.Component<FilterProps> {\n  getCurrentLabel() {\n    const selected = this.props.options.find(\n      item => item[0] === (this.props.value ?? '')\n    );\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  }\n\n  getDefaultItem() {\n    const query = {...this.props.location.query, cursor: ''};\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  }\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(([value, label]) => {\n        const filterQuery = {\n          [this.props.queryKey]: value,\n          cursor: '',\n        };\n\n        const query = {...this.props.location.query, ...filterQuery};\n        return (\n          <MenuItem\n            key={value}\n            isActive={this.props.value === value}\n            to={{pathname: this.props.path, query}}\n          >\n            {label}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype SortByProps = {\n  options: Option[];\n  path: string;\n  location: Location;\n  value: string;\n};\n\nclass SortBy extends React.Component<SortByProps> {\n  getCurrentSortLabel() {\n    return this.props.options.find(([value]) => value === this.props.value)?.[1];\n  }\n\n  getSortBySelector() {\n    return (\n      <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n        {this.props.options.map(([value, label]) => {\n          const query = {...this.props.location.query, sortBy: value, cursor: ''};\n          return (\n            <MenuItem\n              isActive={this.props.value === value}\n              key={value}\n              to={{pathname: this.props.path, query}}\n            >\n              {label}\n            </MenuItem>\n          );\n        })}\n      </DropdownLink>\n    );\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype FilterConfig = {\n  name: string;\n  options: Option[];\n};\n\n// XXX(ts): Using Partial here on the DefaultProps is not really correct, since\n// defaultProps guarantees they'll be set. But because this component is\n// wrapped with a HoC, we lose the defaultProps, and users of the component\ntype Props = {\n  api: Client;\n  location: Location;\n} & Partial<DefaultProps>;\n\ntype DefaultProps = {\n  columns: React.ReactNode[];\n  columnsForRow: (row: any) => React.ReactNode[];\n  defaultSort: string;\n  defaultParams: Record<string, any>;\n  filters: Record<string, FilterConfig>;\n  endpoint: string;\n  hasPagination: boolean;\n  hasSearch: boolean;\n  keyForRow: (row: any) => string;\n  method: RequestOptions['method'];\n  path: string;\n  sortOptions: Option[];\n};\n\ntype State = {\n  rows: any[];\n  loading: boolean;\n  error: string | boolean;\n  pageLinks: null | string;\n  query: string;\n  sortBy: string;\n  filters: Record<string, string>;\n};\n\nclass ResultGrid extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    path: '',\n    endpoint: '',\n    method: 'GET',\n    columns: [],\n    sortOptions: [],\n    filters: {},\n    defaultSort: '',\n    keyForRow: row => row.id,\n    columnsForRow: () => [],\n    defaultParams: {\n      per_page: 50,\n    },\n    hasPagination: true,\n    hasSearch: false,\n  };\n\n  state: State = this.defaultState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps() {\n    const queryParams = this.query;\n    this.setState(\n      {\n        query: queryParams.query ?? '',\n        sortBy: queryParams.sortBy ?? this.props.defaultSort,\n        filters: {...queryParams},\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  }\n\n  get defaultState() {\n    const queryParams = this.query;\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query ?? '',\n      sortBy: queryParams.sortBy ?? this.props.defaultSort,\n      filters: {...queryParams},\n    } as State;\n  }\n\n  get query() {\n    return ((this.props.location ?? {}).query ?? {}) as {[k: string]: string};\n  }\n\n  remountComponent() {\n    this.setState(this.defaultState, this.fetchData);\n  }\n\n  refresh() {\n    this.setState({loading: true}, this.fetchData);\n  }\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = {\n      ...this.props.defaultParams,\n      sortBy: this.state.sortBy,\n      ...this.query,\n    };\n\n    this.props.api.request(this.props.endpoint!, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  }\n\n  onSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    const location = this.props.location ?? {};\n    const {query} = this.state;\n    const targetQueryParams = {...(location.query ?? {}), query, cursor: ''};\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({query: evt.target.value});\n  };\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>No results found.</td>\n      </tr>\n    );\n  }\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow?.(row)}>{this.props.columnsForRow?.(row)}</tr>\n    ));\n  }\n\n  render() {\n    const {filters} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={this.props.sortOptions ?? []}\n            value={this.state.sortBy}\n            path={this.props.path ?? ''}\n            location={this.props.location}\n          />\n          {Object.keys(filters ?? {}).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={this.props.path ?? ''}\n              location={this.props.location}\n              {...(filters?.[filterKey] as FilterConfig)}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","import React from 'react';\nimport {Link, RouteComponentProps} from 'react-router';\n\nimport ResultGrid from 'app/components/resultGrid';\nimport {t} from 'app/locale';\n\ntype Props = RouteComponentProps<{}, {}>;\n\nconst getRow = (row: any) => [\n  <td key={row.id}>\n    <strong>\n      <Link to={`/${row.slug}/`}>{row.name}</Link>\n    </strong>\n    <br />\n    <small>{row.slug}</small>\n  </td>,\n];\n\nconst AdminOrganizations = (props: Props) => (\n  <div>\n    <h3>{t('Organizations')}</h3>\n    <ResultGrid\n      path=\"/manage/organizations/\"\n      endpoint=\"/organizations/?show=all\"\n      method=\"GET\"\n      columns={[<th key=\"column-org\">Organization</th>]}\n      columnsForRow={getRow}\n      hasSearch\n      sortOptions={[\n        ['date', 'Date Joined'],\n        ['members', 'Members'],\n        ['events', 'Events'],\n        ['projects', 'Projects'],\n        ['employees', 'Employees'],\n      ]}\n      defaultSort=\"date\"\n      {...props}\n    />\n  </div>\n);\n\nexport default AdminOrganizations;\n"],"sourceRoot":""}