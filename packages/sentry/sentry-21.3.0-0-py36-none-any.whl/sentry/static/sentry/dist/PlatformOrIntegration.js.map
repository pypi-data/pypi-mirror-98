{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/projectInstall/platform.tsx","webpack:///./app/views/projectInstall/components/platformHeaderButtonBar.tsx","webpack:///./app/views/projectInstall/platformIntegrationSetup.tsx","webpack:///./app/views/projectInstall/platformOrIntegration.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","ProjectInstallPlatform","state","loading","error","html","fetchData","a","props","api","params","orgId","projectId","platform","setState","loadDocs","this","window","scrollTo","redirectToNeutralDocs","url","browserHistory","push","platforms","find","p","id","issueStreamLink","performanceOverviewLink","gettingStartedLink","platformLink","link","undefined","Fragment","StyledPageHeader","t","name","gap","size","to","href","external","type","icon","tct","docLink","onRetry","DocumentationWrapper","dangerouslySetInnerHTML","__html","isGettingStarted","key","slugs","passthroughPlaceholderProject","projects","initiallyLoaded","fetching","fetchError","projectsLoading","projectFilter","length","project","showPerformancePrompt","performancePlatforms","includes","features","hookName","hasFeature","StyledAlert","StyledButtonBar","priority","busy","pathname","query","hash","location","indexOf","React","Component","space","theme","borderRadius","ButtonBar","breakpoints","PageHeader","Alert","withApi","withOrganization","PlatformHeaderButtonBar","docsLink","PlatformIntegrationSetup","handleAddIntegration","installed","trackSwitchToManual","organization","integrationSlug","trackIntegrationEvent","integration_type","integration","view","integrations","providers","slug","provider","platformIntegration","OuterWrapper","StyledTitle","InnerWrapper","onAddIntegration","analyticsParams","already_installed","modalParams","manual","onClick","AsyncComponent","PlatformOrIntegration","parsed","qs","search","platfromToIntegrationMap"],"mappings":"6FAAA,kCAWA,SAASA,EAAT,GAA6E,IAA/CC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,SAiBzD,IAAMC,EAfCH,GAAYC,EAIbD,GAAWC,EACb,UAAUF,EAAV,cAAqBC,EAArB,cAAkCC,GAGhCD,EACF,UAAUD,EAAV,cAAqBC,GAGvB,UAAUD,EAAV,cAAqBE,GAXZF,EAgBX,OAAO,YAAC,IAAD,CAAeA,MAAK,UAAKI,EAAL,cAA2BD,GAnB/CJ,E,kCAsBMA,O,uzBCQTM,E,kLACJC,MAAe,CACbC,SAAS,EACTC,OAAO,EACPC,KAAM,I,EAmBRC,U,cAAY,0CAAAC,EAAA,+DACY,EAAKC,MAApBC,EADG,EACHA,IAAKC,EADF,EACEA,OACLC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,UAAWC,EAAYH,EAAZG,SAEzB,EAAKC,SAAS,CAACX,SAAS,IAJd,kBAOaY,YAASN,EAAKE,EAAOC,EAAWC,GAP7C,gBAODR,EAPC,EAODA,KACP,EAAKS,SAAS,CAACT,SARP,kDAUR,EAAKS,SAAS,CAACV,MAAK,OAVZ,QAaV,EAAKU,SAAS,CAACX,SAAS,IAbd,0D,0DAfVa,KAAKV,YACLW,OAAOC,SAAS,EAAG,GAFD,IAIXL,EAAYG,KAAKR,MAAME,OAAvBG,SAGFA,GAAyB,UAAbA,GACfG,KAAKG,0B,8CAwBe,MACKH,KAAKR,MAAME,OAA/BC,EADe,EACfA,MAAOC,EADQ,EACRA,UAERQ,EAAM,kBAAH,OAAqBT,EAArB,qBAAuCC,EAAvC,qBAETS,iBAAeC,KAAKF,K,+BAGb,MACAV,EAAUM,KAAKR,MAAfE,OACAC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,UAERC,EAAWU,IAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOhB,EAAOG,YAErD,IAAKA,EACH,OAAO,YAAC,IAAD,MAGT,IAAMc,EAAkB,kBAAH,OAAqBhB,EAArB,YACfiB,EAA0B,kBAAH,OAAqBjB,EAArB,iBACvBkB,EAAqB,kBAAH,OAAqBlB,EAArB,qBAAuCC,EAAvC,qBAClBkB,EAAY,UAAGjB,EAASkB,YAAZ,aAAoBC,EAEtC,OACE,YAAC,IAAMC,SAAP,KACE,YAACC,EAAD,KACE,sBAAKC,YAAE,yBAA0B,CAACtB,SAAUA,EAASuB,QACrD,YAAC,IAAD,CAAWC,IAAK,GACd,YAAC,IAAD,CAAQC,KAAK,QAAQC,GAAIV,GACtBM,YAAE,WAEL,YAAC,IAAD,CAAQG,KAAK,QAAQE,KAAMV,EAAcW,UAAQ,GAC9CN,YAAE,yBAKT,uBACE,YAAC,IAAD,CAAOO,KAAK,OAAOC,KAAM,YAAC,IAAD,OACtBC,YAAI,gMAKH,CACE/B,SAAUA,EAASuB,KACnBS,QAAS,iBAAGL,KAAMV,OAKvBd,KAAKd,MAAMC,QACV,YAAC,UAAD,MACEa,KAAKd,MAAME,MACb,YAAC,IAAD,CAAc0C,QAAS9B,KAAKV,YAE5B,YAAC,IAAM2B,SAAP,KACE,YAAC,IAAD,CACErC,MAAK,UAAKuC,YAAE,aAAP,YAAuBtB,EAASuB,MACrCtC,YAAac,IAEf,YAACmC,EAAD,CAAsBC,wBAAyB,CAACC,OAAQjC,KAAKd,MAAMG,SAItEW,KAAKkC,kBACJ,YAAC,IAAD,CACEC,IAAG,UAAKxC,EAAL,YAAcC,GACjBD,MAAOA,EACPyC,MAAO,CAACxC,GACRyC,+BAA+B,IAE9B,YAAuD,IAArDC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,gBAAiBC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAChCC,GAAmBH,GAAmBC,EACtCG,EACHD,GAAoBD,IAAcH,EAASM,OAIxC,GAHA,CACEC,QAAUP,EAAS,GAAe5B,IAGpCoC,EAAwBC,IAAqBC,SACjDnD,EAASa,IAGX,OACE,YAAC,IAAMO,SAAP,KACG6B,GACC,YAAC,IAAD,CACEG,SAAU,CAAC,oBACXC,SAAS,6CAER,YACC,OADiB,EAAhBC,WAEQ,KAGP,YAACC,EAAD,CAAa1B,KAAK,OAAOC,KAAM,YAAC,IAAD,OAC5BR,YAAE,6GASb,YAACkC,EAAD,CAAiBhC,IAAK,GACpB,YAAC,IAAD,CACEiC,SAAS,UACTC,KAAMb,EACNnB,GAAI,CACFiC,SAAU7C,EACV8C,MAAOd,EACPe,KAAM,aAGPvC,YAAE,sBAEL,YAAC,IAAD,CACEoC,KAAMb,EACNnB,GAAI,CACFiC,SAAU5C,EACV6C,MAAOd,IAGRxB,YAAE,oC,uCAhJvB,OAAOlB,OAAO0D,SAASnC,KAAKoC,QAAQ,mBAAqB,M,GApBxBC,IAAMC,WAArC7E,E,qCAkLN,IAAM8C,EAAuB,YAAO,MAAP,mDAAH,mCAELgC,YAAM,GAFD,wDAULA,YAAM,GAVD,mBAWL,SAAAtD,GAAC,OAAIA,EAAEuD,MAAMC,eAXR,wEAuBpBZ,EAAkB,YAAOa,IAAP,8CAAH,cACLH,YAAM,GADD,yCAIE,SAAAtD,GAAC,OAAIA,EAAEuD,MAAMG,YAAY,KAJ3B,6BAMDJ,YAAM,GANL,yBAWf7C,EAAmB,YAAOkD,IAAP,+CAAH,iBACHL,YAAM,GADH,oCAOC,SAAAtD,GAAC,OAAIA,EAAEuD,MAAMG,YAAY,KAP1B,mEAYCJ,YAAM,GAZP,OAiBhBX,EAAc,YAAOiB,IAAP,0CAAH,cACDN,YAAM,GADL,KAKFO,cAAQC,YAAiBtF,I,yFCzQzB,SAASuF,GAAT,GAAwE,IAAtC3D,EAAsC,EAAtCA,mBAAoB4D,EAAkB,EAAlBA,SACnE,OACE,YAAC,IAAD,CAAWpD,IAAK,GACd,YAAC,IAAD,CAAQC,KAAK,QAAQC,GAAIV,GACtBM,YAAE,WAEL,YAAC,IAAD,CAAQG,KAAK,QAAQE,KAAMiD,EAAUhD,UAAQ,GAC1CN,YAAE,wB,8+BAPaqD,G,0CCyBlBE,G,mLAkDJC,qBAAuB,WACrB,EAAK7E,SAAS,CAAC8E,WAAW,K,EAG5BC,oBAAsB,WAAM,MACc,EAAKrF,MAAtCsF,EADmB,EACnBA,aAAcC,EADK,EACLA,gBACrBC,YACE,uCACA,CACEC,iBAAkB,cAClBC,YAAaH,EACbI,KAAM,oBAERL,I,wDA7DF,8EAEEF,WAAW,EACXQ,aAAc,CAACC,UAAW,IAC1BxC,QAAS,S,0CAKX5C,OAAOC,SAAS,EAAG,GADD,IAGXL,EAAYG,KAAKR,MAAME,OAAvBG,SAGFA,GAAyB,UAAbA,GACfG,KAAKG,0B,qCASkD,MACTH,KAAKR,MAA9CsF,EADkD,EAClDA,aAAcC,EADoC,EACpCA,gBAAiBrF,EADmB,EACnBA,OAEtC,OAAKqF,EAIE,CACL,CACE,eADF,yBAEoBD,EAAaQ,KAFjC,8CAE2EP,IAE3E,CAAC,UAAD,oBAAyBD,EAAaQ,KAAtC,YAA8C5F,EAAOE,UAArD,OARO,K,8CAYa,MACKI,KAAKR,MAAME,OAA/BC,EADe,EACfA,MAAOC,EADQ,EACRA,UAERQ,EAAM,kBAAH,OAAqBT,EAArB,qBAAuCC,EAAvC,qBAETS,iBAAeC,KAAKF,K,+BAoBb,MACwBJ,KAAKR,MAA7BsF,EADA,EACAA,aAAcpF,EADd,EACcA,OADd,EAEsBM,KAAKd,MAA3B0F,EAFA,EAEAA,UAAW/B,EAFX,EAEWA,QACXjD,EAA8BF,EAA9BE,UAAWD,EAAmBD,EAAnBC,MAAOE,EAAYH,EAAZG,SACnB0F,EAAWvF,KAAKuF,SAEhBC,EAAsBjF,IAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOb,KACzD,IAAK0F,IAAaC,IAAwB3C,EACxC,OAAO,KAET,IAAMhC,EAAqB,kBAAH,OAAqBlB,EAArB,qBAAuCC,EAAvC,qBAGlB6E,EAAW,0DAEjB,OACE,YAACgB,GAAD,KACE,YAAC,GAAD,KACE,YAACC,GAAD,KACGvE,YAAE,8BAA+BqE,EAAoBpE,OAExD,YAACoD,GAAD,CACE3D,mBAAoBA,EACpB4D,SAAUA,KAGd,YAACkB,GAAD,KACIf,EA0BA,YAAC,IAAM3D,SAAP,KACE,YAAC,KAAD,CAAwBsE,SAAUA,IAClC,YAAC,KAAD,CACE1C,QAASA,EACTiC,aAAcA,EACdL,SAAUA,KA9Bd,YAAC,IAAMxD,SAAP,KACE,YAAC,KAAD,MACA,YAAC,GAAD,CAAiBI,IAAK,GACpB,YAAC,KAAD,CACEkE,SAAUA,EACVK,iBAAkB5F,KAAK2E,qBACvBG,aAAcA,EACdxB,SAAS,UACThC,KAAK,QACLuE,gBAAiB,CAACV,KAAM,mBAAoBW,mBAAmB,GAC/DC,YAAa,CAACnG,UAAWiD,EAAQnC,MAEnC,YAAC,IAAD,CACEY,KAAK,QACLC,GAAI,CACFiC,SAAUvD,OAAO0D,SAASH,SAC1BC,MAAO,CAACuC,OAAQ,MAElBC,QAASjG,KAAK6E,qBAEb1D,YAAE,uB,+BA9FJ,IACNkE,EAAarF,KAAKd,MAAMkG,aAAxBC,UACP,OAAOA,EAAUzC,OAASyC,EAAU,GAAK,S,GAvBNa,MAAjCxB,G,uCAuIN,IAAMrB,GAAkB,YAAOa,IAAP,8CAAH,cACLH,YAAM,GADD,yCAIE,SAAAtD,GAAC,OAAIA,EAAEuD,MAAMG,YAAY,KAJ3B,6BAMDJ,YAAM,GANL,yBAWf4B,GAAe,YAAO,MAAP,2CAAH,uCAIZF,GAAe,YAAO,MAAP,2CAAH,iGAOZvE,GAAmB,YAAOkD,IAAP,+CAAH,iBACHL,YAAM,GADH,KAIhB2B,GAAc,YAAO,KAAP,0CAAH,YACH3B,YAAM,GADH,SAIFQ,eAAiBG,IC7L1ByB,GAAwB,SAAC3G,GAC7B,IAAM4G,EAASC,QAASpG,OAAO0D,SAAS2C,QACjCzG,EAAYL,EAAME,OAAlBG,SACDkF,EAAkBlF,GAAY0G,IAAyB1G,GAE7D,OAAIkF,GAAqC,MAAlBqB,EAAOJ,OACrB,YAAC,GAAD,KAA0BjB,gBAAiBA,GAAqBvF,IAElE,YAAC,EAAaA,IARjB2G,G,oCAWSA","file":"PlatformOrIntegration.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return <DocumentTitle title={`${docTitle} - Sentry`}>{children}</DocumentTitle>;\n}\n\nexport default SentryDocumentTitle;\n","import 'prism-sentry/index.css';\n\nimport React from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {loadDocs} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {\n  performance as performancePlatforms,\n  PlatformKey,\n} from 'app/data/platformCategories';\nimport platforms from 'app/data/platforms';\nimport {IconInfo} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport Projects from 'app/utils/projects';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & WithRouterProps<{orgId: string; projectId: string; platform: string}, {}>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  html: string;\n};\n\nclass ProjectInstallPlatform extends React.Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    html: '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    //redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n    const {orgId, projectId, platform} = params;\n\n    this.setState({loading: true});\n\n    try {\n      const {html} = await loadDocs(api, orgId, projectId, platform as PlatformKey);\n      this.setState({html});\n    } catch (error) {\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  };\n\n  redirectToNeutralDocs() {\n    const {orgId, projectId} = this.props.params;\n\n    const url = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(url);\n  }\n\n  render() {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n\n    const platform = platforms.find(p => p.id === params.platform);\n\n    if (!platform) {\n      return <NotFound />;\n    }\n\n    const issueStreamLink = `/organizations/${orgId}/issues/`;\n    const performanceOverviewLink = `/organizations/${orgId}/performance/`;\n    const gettingStartedLink = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n    const platformLink = platform.link ?? undefined;\n\n    return (\n      <React.Fragment>\n        <StyledPageHeader>\n          <h2>{t('Configure %(platform)s', {platform: platform.name})}</h2>\n          <ButtonBar gap={1}>\n            <Button size=\"small\" to={gettingStartedLink}>\n              {t('< Back')}\n            </Button>\n            <Button size=\"small\" href={platformLink} external>\n              {t('Full Documentation')}\n            </Button>\n          </ButtonBar>\n        </StyledPageHeader>\n\n        <div>\n          <Alert type=\"info\" icon={<IconInfo />}>\n            {tct(\n              `\n             This is a quick getting started guide. For in-depth instructions\n             on integrating Sentry with [platform], view\n             [docLink:our complete documentation].`,\n              {\n                platform: platform.name,\n                docLink: <a href={platformLink} />,\n              }\n            )}\n          </Alert>\n\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : this.state.error ? (\n            <LoadingError onRetry={this.fetchData} />\n          ) : (\n            <React.Fragment>\n              <SentryDocumentTitle\n                title={`${t('Configure')} ${platform.name}`}\n                projectSlug={projectId}\n              />\n              <DocumentationWrapper dangerouslySetInnerHTML={{__html: this.state.html}} />\n            </React.Fragment>\n          )}\n\n          {this.isGettingStarted && (\n            <Projects\n              key={`${orgId}-${projectId}`}\n              orgId={orgId}\n              slugs={[projectId]}\n              passthroughPlaceholderProject={false}\n            >\n              {({projects, initiallyLoaded, fetching, fetchError}) => {\n                const projectsLoading = !initiallyLoaded && fetching;\n                const projectFilter =\n                  !projectsLoading && !fetchError && projects.length\n                    ? {\n                        project: (projects[0] as Project).id,\n                      }\n                    : {};\n                const showPerformancePrompt = performancePlatforms.includes(\n                  platform.id as PlatformKey\n                );\n\n                return (\n                  <React.Fragment>\n                    {showPerformancePrompt && (\n                      <Feature\n                        features={['performance-view']}\n                        hookName=\"feature-disabled:performance-new-project\"\n                      >\n                        {({hasFeature}) => {\n                          if (hasFeature) {\n                            return null;\n                          }\n                          return (\n                            <StyledAlert type=\"info\" icon={<IconInfo />}>\n                              {t(\n                                `Your selected platform supports performance, but your organization does not have performance enabled.`\n                              )}\n                            </StyledAlert>\n                          );\n                        }}\n                      </Feature>\n                    )}\n\n                    <StyledButtonBar gap={1}>\n                      <Button\n                        priority=\"primary\"\n                        busy={projectsLoading}\n                        to={{\n                          pathname: issueStreamLink,\n                          query: projectFilter,\n                          hash: '#welcome',\n                        }}\n                      >\n                        {t('Take me to Issues')}\n                      </Button>\n                      <Button\n                        busy={projectsLoading}\n                        to={{\n                          pathname: performanceOverviewLink,\n                          query: projectFilter,\n                        }}\n                      >\n                        {t('Take me to Performance')}\n                      </Button>\n                    </StyledButtonBar>\n                  </React.Fragment>\n                );\n              }}\n            </Projects>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst DocumentationWrapper = styled('div')`\n  .gatsby-highlight {\n    margin-bottom: ${space(3)};\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  .alert {\n    margin-bottom: ${space(3)};\n    border-radius: ${p => p.theme.borderRadius};\n  }\n\n  p {\n    line-height: 1.5;\n  }\n  pre {\n    word-break: break-all;\n    white-space: pre-wrap;\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(3)};\n\n  h2 {\n    margin: 0;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    flex-direction: column;\n    align-items: flex-start;\n\n    h2 {\n      margin-bottom: ${space(2)};\n    }\n  }\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-top: ${space(2)};\n`;\n\nexport {ProjectInstallPlatform};\nexport default withApi(withOrganization(ProjectInstallPlatform));\n","import React from 'react';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {t} from 'app/locale';\n\ntype Props = {\n  gettingStartedLink: string;\n  docsLink: string;\n};\nexport default function PlatformHeaderButtonBar({gettingStartedLink, docsLink}: Props) {\n  return (\n    <ButtonBar gap={1}>\n      <Button size=\"small\" to={gettingStartedLink}>\n        {t('< Back')}\n      </Button>\n      <Button size=\"small\" href={docsLink} external>\n        {t('Full Documentation')}\n      </Button>\n    </ButtonBar>\n  );\n}\n","import 'prism-sentry/index.css';\n\nimport React from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport platforms from 'app/data/platforms';\nimport {t} from 'app/locale';\nimport {PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {IntegrationProvider, Organization, Project} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\nimport withOrganization from 'app/utils/withOrganization';\nimport FirstEventFooter from 'app/views/onboarding/components/firstEventFooter';\nimport AddInstallationInstructions from 'app/views/onboarding/components/integrations/addInstallationInstructions';\nimport PostInstallCodeSnippet from 'app/views/onboarding/components/integrations/postInstallCodeSnippet';\nimport AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';\n\nimport PlatformHeaderButtonBar from './components/platformHeaderButtonBar';\n\ntype Props = {\n  organization: Organization;\n  integrationSlug: string;\n} & WithRouterProps<{orgId: string; projectId: string; platform: string}, {}> &\n  AsyncComponent['props'];\n\ntype State = {\n  installed: boolean;\n  integrations: {providers: IntegrationProvider[]};\n  project: Project | null;\n} & AsyncComponent['state'];\n\nclass PlatformIntegrationSetup extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      installed: false,\n      integrations: {providers: []},\n      project: null,\n    };\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    //redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get provider() {\n    const {providers} = this.state.integrations;\n    return providers.length ? providers[0] : null;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, integrationSlug, params} = this.props;\n\n    if (!integrationSlug) {\n      return [];\n    }\n\n    return [\n      [\n        'integrations',\n        `/organizations/${organization.slug}/config/integrations/?provider_key=${integrationSlug}`,\n      ],\n      ['project', `/projects/${organization.slug}/${params.projectId}/`],\n    ];\n  }\n\n  redirectToNeutralDocs() {\n    const {orgId, projectId} = this.props.params;\n\n    const url = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(url);\n  }\n\n  handleAddIntegration = () => {\n    this.setState({installed: true});\n  };\n\n  trackSwitchToManual = () => {\n    const {organization, integrationSlug} = this.props;\n    trackIntegrationEvent(\n      'integrations.switch_manual_sdk_setup',\n      {\n        integration_type: 'first_party',\n        integration: integrationSlug,\n        view: 'project_creation',\n      },\n      organization\n    );\n  };\n\n  render() {\n    const {organization, params} = this.props;\n    const {installed, project} = this.state;\n    const {projectId, orgId, platform} = params;\n    const provider = this.provider;\n\n    const platformIntegration = platforms.find(p => p.id === platform);\n    if (!provider || !platformIntegration || !project) {\n      return null;\n    }\n    const gettingStartedLink = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    //TODO: make dynamic when adding more integrations\n    const docsLink = 'https://docs.sentry.io/product/integrations/aws-lambda/';\n\n    return (\n      <OuterWrapper>\n        <StyledPageHeader>\n          <StyledTitle>\n            {t('Automatically instrument %s', platformIntegration.name)}\n          </StyledTitle>\n          <PlatformHeaderButtonBar\n            gettingStartedLink={gettingStartedLink}\n            docsLink={docsLink}\n          />\n        </StyledPageHeader>\n        <InnerWrapper>\n          {!installed ? (\n            <React.Fragment>\n              <AddInstallationInstructions />\n              <StyledButtonBar gap={1}>\n                <AddIntegrationButton\n                  provider={provider}\n                  onAddIntegration={this.handleAddIntegration}\n                  organization={organization}\n                  priority=\"primary\"\n                  size=\"small\"\n                  analyticsParams={{view: 'project_creation', already_installed: false}}\n                  modalParams={{projectId: project.id}}\n                />\n                <Button\n                  size=\"small\"\n                  to={{\n                    pathname: window.location.pathname,\n                    query: {manual: '1'},\n                  }}\n                  onClick={this.trackSwitchToManual}\n                >\n                  {t('Manual Setup')}\n                </Button>\n              </StyledButtonBar>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <PostInstallCodeSnippet provider={provider} />\n              <FirstEventFooter\n                project={project}\n                organization={organization}\n                docsLink={docsLink}\n              />\n            </React.Fragment>\n          )}\n        </InnerWrapper>\n      </OuterWrapper>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst InnerWrapper = styled('div')`\n  width: 850px;\n`;\n\nconst OuterWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 50px;\n`;\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledTitle = styled('h2')`\n  margin: 0 ${space(3)} 0 0;\n`;\n\nexport default withOrganization(PlatformIntegrationSetup);\n","import React from 'react';\nimport * as qs from 'query-string';\n\nimport {platfromToIntegrationMap} from 'app/utils/integrationUtil';\n\nimport Platform from './platform';\nimport PlatformIntegrationSetup from './platformIntegrationSetup';\n\ntype Props = React.ComponentProps<typeof Platform> &\n  Omit<React.ComponentProps<typeof PlatformIntegrationSetup>, 'integrationSlug'>;\n\nconst PlatformOrIntegration = (props: Props) => {\n  const parsed = qs.parse(window.location.search);\n  const {platform} = props.params;\n  const integrationSlug = platform && platfromToIntegrationMap[platform];\n  // check for manual override query param\n  if (integrationSlug && parsed.manual !== '1') {\n    return <PlatformIntegrationSetup integrationSlug={integrationSlug} {...props} />;\n  }\n  return <Platform {...props} />;\n};\n\nexport default PlatformOrIntegration;\n"],"sourceRoot":""}