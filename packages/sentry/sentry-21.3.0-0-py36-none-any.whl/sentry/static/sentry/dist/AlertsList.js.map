{"version":3,"sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./images/spot/alerts-empty-state.svg","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/index.tsx"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","module","exports","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","ButtonBar","DOCS_URL","getQueryStatus","status","includes","IncidentsList","this","props","params","query","location","orgId","incidentList","state","length","setState","hasAlertRule","firstVisitShown","loading","organization","api","requestPromise","method","alertRules","promptsCheck","organizationId","id","feature","prompt","dismissedTime","promptsUpdate","Fragment","size","external","href","iconProps","priority","referrer","icon","isCircled","title","description","tct","link","renderBody","incidentListPageLinks","allProjectsFromIncidents","Set","flatten","map","projects","checkingForAlertRules","undefined","showLoadingIndicator","tryRenderOnboarding","StyledPanelHeader","PaddedTitleAndSparkLine","tryRenderEmpty","slugs","Array","from","initiallyLoaded","incident","key","projectsLoaded","filteredStatus","pageLinks","router","pathname","openIncidentsQuery","omit","closedIncidentsQuery","orgSlug","showDateSelector","activeTab","fullWidth","StyledButtonBar","merged","active","to","barId","renderList","AsyncComponent","IncidentsListContainer","trackView","nextProps","trackAnalyticsEvent","eventKey","eventName","organization_id","type","features","hookName","renderDisabled","renderNoAccess","React","Component","TitleAndSparkLine","PanelHeader","withOrganization"],"mappings":"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","file":"AlertsList.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","module.exports = __webpack_public_path__ + \"alerts-empty-state.9078ef.svg\";","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'app/components/buttonBar';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\nimport omit from 'lodash/omit';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconCheckmark} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {Incident} from '../types';\n\nimport AlertHeader from './header';\nimport Onboarding from './onboarding';\nimport AlertListRow from './row';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\nconst DEFAULT_QUERY_STATUS = 'open';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\nfunction getQueryStatus(status: any): 'open' | 'closed' {\n  return ['open', 'closed'].includes(status) ? status : DEFAULT_QUERY_STATUS;\n}\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${params && params.orgId}/incidents/`,\n        {query: {...query, status}},\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <React.Fragment>\n        <Button size=\"small\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"small\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert Rule')}\n        </CreateAlertButton>\n      </React.Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  tryRenderEmpty() {\n    const {hasAlertRule, incidentList} = this.state;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    if (!incidentList || incidentList.length > 0) {\n      return null;\n    }\n\n    return (\n      <EmptyMessage\n        size=\"medium\"\n        icon={<IconCheckmark isCircled size=\"48\" />}\n        title={\n          !hasAlertRule\n            ? t('No metric alert rules exist for the selected projects.')\n            : status === 'open'\n            ? t('No unresolved metric alerts in the selected projects.')\n            : t('No resolved metric alerts in the selected projects.')\n        }\n        description={tct('Learn more about [link:Metric Alerts]', {\n          link: <ExternalLink href={DOCS_URL} />,\n        })}\n      />\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(incidentList?.map(({projects}) => projects))\n    );\n    const checkingForAlertRules =\n      incidentList && incidentList.length === 0 && hasAlertRule === undefined\n        ? true\n        : false;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    return (\n      <React.Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <Panel>\n            {!loading && (\n              <StyledPanelHeader>\n                <TableLayout status={status}>\n                  <PaddedTitleAndSparkLine status={status}>\n                    <div>{t('Alert')}</div>\n                    {status === 'open' && <div>{t('Graph')}</div>}\n                  </PaddedTitleAndSparkLine>\n                  <div>{t('Project')}</div>\n                  <div>{t('Triggered')}</div>\n                  {status === 'closed' && <div>{t('Duration')}</div>}\n                  {status === 'closed' && <div>{t('Resolved')}</div>}\n                </TableLayout>\n              </StyledPanelHeader>\n            )}\n            {showLoadingIndicator ? (\n              <LoadingIndicator />\n            ) : (\n              this.tryRenderEmpty() ?? (\n                <PanelBody>\n                  <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n                    {({initiallyLoaded, projects}) =>\n                      incidentList.map(incident => (\n                        <AlertListRow\n                          key={incident.id}\n                          projectsLoaded={initiallyLoaded}\n                          projects={projects as Project[]}\n                          incident={incident}\n                          orgId={orgId}\n                          filteredStatus={status}\n                          organization={organization}\n                        />\n                      ))\n                    }\n                  </Projects>\n                </PanelBody>\n              )\n            )}\n          </Panel>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, location, organization, router} = this.props;\n    const {pathname, query} = location;\n    const {orgId} = params;\n\n    const openIncidentsQuery = omit({...query, status: 'open'}, 'cursor');\n    const closedIncidentsQuery = omit({...query, status: 'closed'}, 'cursor');\n\n    const status = getQueryStatus(query.status);\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <GlobalSelectionHeader organization={organization} showDateSelector={false}>\n          <AlertHeader organization={organization} router={router} activeTab=\"stream\" />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <StyledButtonBar merged active={status}>\n                  <Button\n                    to={{pathname, query: openIncidentsQuery}}\n                    barId=\"open\"\n                    size=\"small\"\n                  >\n                    {t('Unresolved')}\n                  </Button>\n                  <Button\n                    to={{pathname, query: closedIncidentsQuery}}\n                    barId=\"closed\"\n                    size=\"small\"\n                  >\n                    {t('Resolved')}\n                  </Button>\n                </StyledButtonBar>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass IncidentsListContainer extends React.Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.location.query?.status !== this.props.location.query?.status) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {location, organization} = this.props;\n    const status = getQueryStatus(location.query.status);\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_stream.viewed',\n      eventName: 'Alert Stream: Viewed',\n      organization_id: organization.id,\n      status,\n    });\n  }\n\n  renderNoAccess() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Feature\n        features={['organizations:incidents']}\n        organization={organization}\n        hookName=\"feature-disabled:alerts-page\"\n        renderDisabled={this.renderNoAccess}\n      >\n        <IncidentsList {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  width: 100px;\n  margin-bottom: ${space(1)};\n`;\n\nconst PaddedTitleAndSparkLine = styled(TitleAndSparkLine)`\n  padding-left: ${space(2)};\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  /* Match table row padding for the grid to align */\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default withOrganization(IncidentsListContainer);\n"],"sourceRoot":""}