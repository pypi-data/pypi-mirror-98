{"version":3,"sources":["webpack:///./app/views/settings/settingsIndex.tsx"],"names":["LINKS","flexCenter","SettingsIndex","prevProps","organization","this","props","access","fetchOrganizationDetails","slug","setActive","loadProjects","user","ConfigStore","get","isOnPremise","organizationSettingsUrl","supportLinkProps","href","to","supportText","t","title","GridLayout","GridPanel","HomePanelHeader","HomeLinkIcon","AvatarContainer","size","HomePanelBody","HomeLink","overlay","hideSpinner","HomeIcon","color","OrganizationName","ExternalHomeLink","isCentered","SupportLinkComponent","React","Component","withLatestContext","PanelHeader","p","theme","background","PanelBody","gray200","white","Link","purple300","omit","overflowEllipsis","Panel"],"mappings":"02BAuBA,IAAMA,EACW,0BADXA,EAEqB,kCAFrBA,EAGsB,mDAHtBA,EAIe,sCAJfA,EAKe,8BALfA,EAMC,yBANDA,EAQG,2BARHA,EASW,6CATXA,EAUY,4BAKZC,EAAa,CAAH,6GAUVC,E,+IACeC,GAAkB,IAC5BC,EAAgBC,KAAKC,MAArBF,aACHD,EAAUC,eAAiBA,GAO3BA,QAA+C,IAAxBA,EAAaG,QACtCC,YAAyBJ,EAAaK,KAAM,CAC1CC,WAAW,EACXC,cAAc,M,+BAKX,IACAP,EAAgBC,KAAKC,MAArBF,aACDQ,EAAOC,UAAYC,IAAI,QACvBC,EAAcF,UAAYC,IAAI,eAE9BE,EACHZ,GAAgB,aAAJ,OAAiBA,EAAaK,KAA9B,MAA0C,GAEnDQ,EAAmB,CACvBF,cACAG,KAAMlB,EACNmB,GAAI,GAAF,OAAKH,EAAL,YAEEI,EAAcL,EAAcM,YAAE,oBAAsBA,YAAE,mBAE5D,OACE,YAAC,IAAD,CAAeC,MAAOlB,EAAe,GAAH,OAAMA,EAAaK,KAAnB,aAAqC,YACrE,YAAC,IAAmBJ,KAAKC,MACvB,YAACiB,GAAD,KACE,YAAC,IAAD,KACE,YAACC,GAAD,KACE,YAACC,EAAD,KACE,YAACC,GAAD,CAAcP,GAAG,sBACf,YAACQ,GAAD,KACE,YAAC,IAAD,CAAYf,KAAMA,EAAMgB,KAtDvB,MAwDFP,YAAE,gBAIP,YAACQ,EAAD,KACE,sBAAKR,YAAE,eAAP,KACA,sBACE,sBACE,YAACS,GAAD,CAAUX,GAAG,+BACVE,YAAE,wBAGP,sBACE,YAACS,GAAD,CAAUX,GAAG,oCACVE,YAAE,8BAGP,sBACE,YAACS,GAAD,CAAUX,GAAG,sBAAsBE,YAAE,0BAQ/C,YAACG,GAAD,MACIpB,GAAgB,YAAC,UAAD,CAAkB2B,SAAO,EAACC,aAAW,IACvD,YAACP,EAAD,KACE,YAACC,GAAD,CAAcP,GAAIH,GACfZ,EACC,YAACuB,GAAD,KACE,YAAC,IAAD,CACEvB,aAAcA,EACdwB,KA1FD,MA8FH,YAACK,EAAD,CAAUC,MAAM,YACd,YAAC,KAAD,CAAWN,KAAK,QAGpB,YAACO,GAAD,KACG/B,EAAeA,EAAaK,KAAOY,YAAE,sBAI5C,YAACQ,EAAD,KACE,sBAAKR,YAAE,eAAP,KACA,sBACE,sBACE,YAACS,GAAD,CAAUX,GAAE,UAAKH,EAAL,cACTK,YAAE,cAGP,sBACE,YAACS,GAAD,CAAUX,GAAE,UAAKH,EAAL,WACTK,YAAE,WAGP,sBACE,YAACS,GAAD,CAAUX,GAAE,UAAKH,EAAL,aACTK,YAAE,gBAOb,YAACG,GAAD,KACE,YAACC,EAAD,KACE,YAACW,GAAD,CAAkBC,YAAU,EAACnB,KAAMlB,GACjC,YAACiC,EAAD,CAAUC,MAAM,aACd,YAAC,IAAD,CAAUN,KAAK,SAGnB,YAACQ,GAAD,CAAkBlB,KAAMlB,GACrBqB,YAAE,mBAIP,YAACQ,EAAD,KACE,sBAAKR,YAAE,eAAP,KACA,sBACE,sBACE,YAACe,GAAD,CAAkBlB,KAAMlB,GACrBqB,YAAE,sBAGP,sBACE,YAACe,GAAD,CAAkBlB,KAAMlB,GACrBqB,YAAE,4BAGP,sBACE,YAACe,GAAD,CAAkBlB,KAAMlB,GACrBqB,YAAE,mBAOb,YAACG,GAAD,KACE,YAACC,EAAD,KACE,YAACa,GAAD,KAAsBD,YAAU,GAAKpB,GACnC,YAACgB,EAAD,CAAUC,MAAM,aACd,YAAC,KAAD,CAAaN,KAAK,QAEnBP,YAAE,aAIP,YAACQ,EAAD,KACE,sBAAKR,YAAE,eAAP,KACA,sBACE,sBACE,YAACiB,GAAyBrB,EACvBG,IAGL,sBACE,YAACgB,GAAD,CAAkBlB,KAAMlB,GACrBqB,YAAE,sBAGP,sBACE,YAACe,GAAD,CAAkBlB,KAAMlB,GACrBqB,YAAE,uBAOb,YAAC,IAAD,KACE,YAACG,GAAD,KACE,YAACC,EAAD,KACE,YAACC,GAAD,CAAcP,GAAInB,GAChB,YAACiC,EAAD,KACE,YAAC,IAAD,CAAUL,KAAK,QAEhBP,YAAE,cAIP,YAACQ,EAAD,KACE,sBAAKR,YAAE,eAAP,KACA,sBACE,sBACE,YAACS,GAAD,CAAUX,GAAInB,GAAYqB,YAAE,iBAE9B,sBACE,YAACS,GAAD,CAAUX,GAAE,UAAKH,EAAL,wBACTK,YAAE,uBAGP,sBACE,YAACe,GAAD,CAAkBlB,KAAMlB,GACrBqB,YAAE,8B,GA3MCkB,IAAMC,WAA5BtC,E,4BA0NSuC,sBAAkBvC,GAEjC,IAAMuB,EAAkB,YAAOiB,IAAP,6CAAH,eACL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,aADR,0HAUfhB,EAAgB,YAAOiB,IAAP,2CAAH,yEAYJ,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,UAZT,OAiBbd,EAAW,YAAO,MAAP,sCAAH,eACE,SAAAU,GAAC,OAAIA,EAAEC,MAAMD,EAAET,OAAS,aAD1B,WAEH,SAAAS,GAAC,OAAIA,EAAEC,MAAMI,QAFV,UAnQS,GAmQT,aAnQS,GAmQT,oBAnQS,GAmQT,iFAgBRlB,GAAW,YAAOmB,IAAP,sCAAH,UACH,SAAAN,GAAC,OAAIA,EAAEC,MAAMM,YADV,mBAID,SAAAP,GAAC,OAAIA,EAAEC,MAAMM,YAJZ,MAQRxB,GAAe,YAAOI,GAAP,0CAAH,8BAGd7B,EAHc,KAMZmC,GAAmB,aACvB,SAAC9B,GAAD,OACE,YAAC,IAAiB6C,IAAK7C,EAAO,iBAFT,8CAAH,UAKX,SAAAqC,GAAC,OAAIA,EAAEC,MAAMM,YALF,mBAQT,SAAAP,GAAC,OAAIA,EAAEC,MAAMM,YARJ,MAWlB,SAAAP,GAAC,OAAIA,EAAEN,YAAcpC,IAXH,KAqBhBqC,GAAuB,YAMF,IALzBD,EAKyB,EALzBA,WACAtB,EAIyB,EAJzBA,YACAG,EAGyB,EAHzBA,KACAC,EAEyB,EAFzBA,GACGb,EACsB,gDACzB,OAAIS,EACK,YAACqB,GAAD,KAAkBC,WAAYA,EAAYnB,KAAMA,GAAUZ,IAE5D,YAACwB,GAAD,KAAUX,GAAIA,GAAQb,KAVzBgC,G,mCAaN,IAAMX,GAAkB,YAAO,MAAP,6CAAH,8CAIfQ,GAAmB,YAAO,MAAP,8CAAH,qBAGlBiB,IAHkB,KAMhB7B,GAAa,YAAO,MAAP,wCAAH,yFAMVC,GAAY,YAAO6B,IAAP,uCAAH","file":"SettingsIndex.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/core';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport {fetchOrganizationDetails} from 'app/actionCreators/organizations';\nimport DemoModeGate from 'app/components/acl/demoModeGate';\nimport OrganizationAvatar from 'app/components/avatar/organizationAvatar';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconDocs, IconLock, IconStack, IconSupport} from 'app/icons';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Organization} from 'app/types';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\n\nconst LINKS = {\n  DOCUMENTATION: 'https://docs.sentry.io/',\n  DOCUMENTATION_PLATFORMS: 'https://docs.sentry.io/clients/',\n  DOCUMENTATION_QUICKSTART: 'https://docs.sentry.io/platform-redirect/?next=/',\n  DOCUMENTATION_CLI: 'https://docs.sentry.io/product/cli/',\n  DOCUMENTATION_API: 'https://docs.sentry.io/api/',\n  API: '/settings/account/api/',\n  MANAGE: '/manage/',\n  FORUM: 'https://forum.sentry.io/',\n  GITHUB_ISSUES: 'https://github.com/getsentry/sentry/issues',\n  SERVICE_STATUS: 'https://status.sentry.io/',\n};\n\nconst HOME_ICON_SIZE = 56;\n\nconst flexCenter = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{}, {}>;\n\nclass SettingsIndex extends React.Component<Props> {\n  componentDidUpdate(prevProps: Props) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n    const user = ConfigStore.get('user');\n    const isOnPremise = ConfigStore.get('isOnPremise');\n\n    const organizationSettingsUrl =\n      (organization && `/settings/${organization.slug}/`) || '';\n\n    const supportLinkProps = {\n      isOnPremise,\n      href: LINKS.FORUM,\n      to: `${organizationSettingsUrl}support`,\n    };\n    const supportText = isOnPremise ? t('Community Forums') : t('Contact Support');\n\n    return (\n      <DocumentTitle title={organization ? `${organization.slug} Settings` : 'Settings'}>\n        <SettingsLayout {...this.props}>\n          <GridLayout>\n            <DemoModeGate>\n              <GridPanel>\n                <HomePanelHeader>\n                  <HomeLinkIcon to=\"/settings/account/\">\n                    <AvatarContainer>\n                      <UserAvatar user={user} size={HOME_ICON_SIZE} />\n                    </AvatarContainer>\n                    {t('My Account')}\n                  </HomeLinkIcon>\n                </HomePanelHeader>\n\n                <HomePanelBody>\n                  <h3>{t('Quick links')}:</h3>\n                  <ul>\n                    <li>\n                      <HomeLink to=\"/settings/account/security/\">\n                        {t('Change my password')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to=\"/settings/account/notifications/\">\n                        {t('Notification Preferences')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to=\"/settings/account/\">{t('Change my avatar')}</HomeLink>\n                    </li>\n                  </ul>\n                </HomePanelBody>\n              </GridPanel>\n            </DemoModeGate>\n\n            {/* if admin */}\n            <GridPanel>\n              {!organization && <LoadingIndicator overlay hideSpinner />}\n              <HomePanelHeader>\n                <HomeLinkIcon to={organizationSettingsUrl}>\n                  {organization ? (\n                    <AvatarContainer>\n                      <OrganizationAvatar\n                        organization={organization}\n                        size={HOME_ICON_SIZE}\n                      />\n                    </AvatarContainer>\n                  ) : (\n                    <HomeIcon color=\"green300\">\n                      <IconStack size=\"lg\" />\n                    </HomeIcon>\n                  )}\n                  <OrganizationName>\n                    {organization ? organization.slug : t('No Organization')}\n                  </OrganizationName>\n                </HomeLinkIcon>\n              </HomePanelHeader>\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}projects/`}>\n                      {t('Projects')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}teams/`}>\n                      {t('Teams')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}members/`}>\n                      {t('Members')}\n                    </HomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <ExternalHomeLink isCentered href={LINKS.DOCUMENTATION}>\n                  <HomeIcon color=\"orange400\">\n                    <IconDocs size=\"lg\" />\n                  </HomeIcon>\n                </ExternalHomeLink>\n                <ExternalHomeLink href={LINKS.DOCUMENTATION}>\n                  {t('Documentation')}\n                </ExternalHomeLink>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_QUICKSTART}>\n                      {t('Quickstart Guide')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_PLATFORMS}>\n                      {t('Platforms & Frameworks')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_CLI}>\n                      {t('Sentry CLI')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <SupportLinkComponent isCentered {...supportLinkProps}>\n                  <HomeIcon color=\"purple300\">\n                    <IconSupport size=\"lg\" />\n                  </HomeIcon>\n                  {t('Support')}\n                </SupportLinkComponent>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <SupportLinkComponent {...supportLinkProps}>\n                      {supportText}\n                    </SupportLinkComponent>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.GITHUB_ISSUES}>\n                      {t('Sentry on GitHub')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.SERVICE_STATUS}>\n                      {t('Service Status')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <DemoModeGate>\n              <GridPanel>\n                <HomePanelHeader>\n                  <HomeLinkIcon to={LINKS.API}>\n                    <HomeIcon>\n                      <IconLock size=\"lg\" />\n                    </HomeIcon>\n                    {t('API Keys')}\n                  </HomeLinkIcon>\n                </HomePanelHeader>\n\n                <HomePanelBody>\n                  <h3>{t('Quick links')}:</h3>\n                  <ul>\n                    <li>\n                      <HomeLink to={LINKS.API}>{t('Auth Tokens')}</HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to={`${organizationSettingsUrl}developer-settings/`}>\n                        {t('Your Integrations')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <ExternalHomeLink href={LINKS.DOCUMENTATION_API}>\n                        {t('Documentation')}\n                      </ExternalHomeLink>\n                    </li>\n                  </ul>\n                </HomePanelBody>\n              </GridPanel>\n            </DemoModeGate>\n          </GridLayout>\n        </SettingsLayout>\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {SettingsIndex};\nexport default withLatestContext(SettingsIndex);\n\nconst HomePanelHeader = styled(PanelHeader)`\n  background: ${p => p.theme.background};\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  font-size: 18px;\n  text-transform: unset;\n  padding: 35px 30px;\n`;\n\nconst HomePanelBody = styled(PanelBody)`\n  padding: 30px;\n\n  h3 {\n    font-size: 14px;\n  }\n\n  ul {\n    margin: 0;\n    li {\n      line-height: 1.6;\n      /* Bullet color */\n      color: ${p => p.theme.gray200};\n    }\n  }\n`;\n\nconst HomeIcon = styled('div')<{color?: string}>`\n  background: ${p => p.theme[p.color || 'gray300']};\n  color: ${p => p.theme.white};\n  width: ${HOME_ICON_SIZE}px;\n  height: ${HOME_ICON_SIZE}px;\n  border-radius: ${HOME_ICON_SIZE}px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\ntype CenterableProps = {\n  isCentered?: boolean;\n};\n\nconst HomeLink = styled(Link)`\n  color: ${p => p.theme.purple300};\n\n  &:hover {\n    color: ${p => p.theme.purple300};\n  }\n`;\n\nconst HomeLinkIcon = styled(HomeLink)`\n  overflow: hidden;\n  width: 100%;\n  ${flexCenter};\n`;\n\nconst ExternalHomeLink = styled(\n  (props: CenterableProps & React.ComponentPropsWithRef<typeof ExternalLink>) => (\n    <ExternalLink {...omit(props, 'isCentered')} />\n  )\n)<CenterableProps>`\n  color: ${p => p.theme.purple300};\n\n  &:hover {\n    color: ${p => p.theme.purple300};\n  }\n\n  ${p => p.isCentered && flexCenter};\n`;\n\ntype SupportLinkProps<T extends boolean> = {\n  isOnPremise: T;\n  href: string;\n  to: string;\n  isCentered?: boolean;\n} & React.ComponentPropsWithRef<T extends true ? typeof ExternalLink : typeof HomeLink>;\n\nconst SupportLinkComponent = <T extends boolean>({\n  isCentered,\n  isOnPremise,\n  href,\n  to,\n  ...props\n}: SupportLinkProps<T>) => {\n  if (isOnPremise) {\n    return <ExternalHomeLink isCentered={isCentered} href={href} {...props} />;\n  }\n  return <HomeLink to={to} {...props} />;\n};\n\nconst AvatarContainer = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst OrganizationName = styled('div')`\n  line-height: 1.1em;\n\n  ${overflowEllipsis};\n`;\n\nconst GridLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 16px;\n`;\n\nconst GridPanel = styled(Panel)`\n  margin-bottom: 0;\n`;\n"],"sourceRoot":""}