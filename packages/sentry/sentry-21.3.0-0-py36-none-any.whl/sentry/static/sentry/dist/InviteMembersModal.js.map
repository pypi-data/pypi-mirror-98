{"version":3,"sources":["webpack:///./app/components/modals/inviteMembersModal/renderEmailValue.tsx","webpack:///./app/components/modals/inviteMembersModal/inviteRowControl.tsx","webpack:///./app/components/modals/inviteMembersModal/index.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/components/roleSelectControl.tsx"],"names":["renderEmailValue","status","valueProps","children","props","error","emailLabel","undefined","disabled","title","EmailLabel","sent","SendingIndicator","size","color","MultiValue","space","LoadingIndicator","defaultProps","hideMessage","mapToOptions","values","map","value","label","InviteRowControl","state","inputValue","handleInputChange","setState","handleKeyDown","event","onChangeEmails","emails","key","preventDefault","this","className","role","teams","roleOptions","roleDisabledUnallowed","teamOptions","inviteStatus","onRemove","onChangeRole","onChangeTeams","disableRemove","theme","data-test-id","placeholder","t","components","data","ValueComponent","DropdownIndicator","options","onBlur","e","target","styles","getStyles","onInputChange","onKeyDown","onBlurResetsInput","onCloseResetsInput","onChange","multiple","creatable","clearable","menuIsOpen","roles","disableUnallowed","slug","borderless","icon","onClick","React","Component","multiValue","provided","red300","border","backgroundColor","red100","multiValueLabel","pointerEvents","multiValueRemove","borderLeft","withTheme","InviteModalHook","HookOrDefault","hookName","defaultComponent","onSendInvites","sendInvites","canSend","InviteMembersModal","sessionId","reset","pendingInvites","inviteTemplate","complete","sendingInvites","trackAnalyticsEvent","eventKey","eventName","organization_id","organization","id","modal_session","sendInvite","invite","a","email","endpoint","willInvite","api","requestPromise","method","errorResponse","responseJSON","emailError","Array","isArray","Promise","all","invites","addInviteRow","uniqueId","source","can_invite","orgId","initialData","initial","index","Set","splice","Footer","closeModal","allTeams","member","disableInputs","headerInfo","Fragment","Heading","position","Subtext","InviteeHeadings","i","StyledInviteRow","MEMBER_ROLES","removeInviteRow","opts","setEmails","v","setRole","setTeams","length","AddButton","priority","isCircled","FooterContent","statusMessage","isValidInvites","inviteButtonLabel","reduce","acc","row","inv","hasDuplicateEmails","StatusMessage","mini","relative","statuses","Object","sentCount","filter","errorCount","tctComponents","tn","failed","tct","access","includes","numberInvites","inviteText","requestText","AsyncComponent","p","headerFontSize","subText","inviteRowGrid","css","fontSizeSmall","Button","fontSizeMedium","gray400","green300","modalCss","withLatestContext","withTeams","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TeamStore","getInitialState","getAll","onTeamUpdate","render","RoleSelectControl","r","name","allowed","description","desc","Option","optionProps","RoleItem","control","borderBottomLeftRadius","borderRadius","borderBottomRightRadius","menu","marginTop","width","overflow"],"mappings":"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","file":"InviteMembersModal.js","sourcesContent":["import React from 'react';\nimport {components as selectComponents, MultiValueProps} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Tooltip from 'app/components/tooltip';\nimport {IconCheckmark, IconWarning} from 'app/icons';\nimport space from 'app/styles/space';\n\nimport {InviteStatus} from './types';\n\nfunction renderEmailValue<Option>(\n  status: InviteStatus[string],\n  valueProps: MultiValueProps<Option>\n) {\n  const {children, ...props} = valueProps;\n  const error = status && status.error;\n\n  const emailLabel =\n    status === undefined ? (\n      children\n    ) : (\n      <Tooltip disabled={!error} title={error}>\n        <EmailLabel>\n          {children}\n          {!status.sent && !status.error && <SendingIndicator />}\n          {status.error && <IconWarning size=\"10px\" />}\n          {status.sent && <IconCheckmark size=\"10px\" color=\"success\" />}\n        </EmailLabel>\n      </Tooltip>\n    );\n\n  return (\n    <selectComponents.MultiValue {...props}>{emailLabel}</selectComponents.MultiValue>\n  );\n}\n\nconst EmailLabel = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst SendingIndicator = styled(LoadingIndicator)`\n  margin: 0;\n  .loading-indicator {\n    border-width: 2px;\n  }\n`;\n\nSendingIndicator.defaultProps = {\n  hideMessage: true,\n  size: 14,\n};\n\nexport default renderEmailValue;\n","import React from 'react';\nimport {MultiValueProps} from 'react-select';\nimport {withTheme} from 'emotion-theming';\n\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport RoleSelectControl from 'app/components/roleSelectControl';\nimport {IconClose} from 'app/icons/iconClose';\nimport {t} from 'app/locale';\nimport {MemberRole, SelectValue, Team} from 'app/types';\nimport {Theme} from 'app/utils/theme';\n\nimport renderEmailValue from './renderEmailValue';\nimport {InviteStatus} from './types';\n\ntype SelectOption = SelectValue<string>;\n\ntype Props = {\n  className?: string;\n  disabled: boolean;\n  disableRemove: boolean;\n  emails: string[];\n  role: string;\n  teams: string[];\n  roleOptions: MemberRole[];\n  roleDisabledUnallowed: boolean;\n  teamOptions: Team[];\n  inviteStatus: InviteStatus;\n  onRemove: () => void;\n  theme: Theme;\n\n  onChangeEmails: (emails: null | SelectOption[]) => void;\n  onChangeRole: (role: SelectOption) => void;\n  onChangeTeams: (teams?: SelectOption[] | null) => void;\n};\n\ntype State = {\n  inputValue: string;\n};\n\nfunction ValueComponent(\n  props: MultiValueProps<SelectOption>,\n  inviteStatus: Props['inviteStatus']\n) {\n  return renderEmailValue(inviteStatus[props.data.value], props);\n}\n\nfunction mapToOptions(values: string[]): SelectOption[] {\n  return values.map(value => ({value, label: value}));\n}\n\nclass InviteRowControl extends React.Component<Props, State> {\n  state: State = {inputValue: ''};\n\n  handleInputChange = (inputValue: string) => {\n    this.setState({inputValue});\n  };\n\n  handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    const {onChangeEmails, emails} = this.props;\n    const {inputValue} = this.state;\n    switch (event.key) {\n      case 'Enter':\n      case 'Tab':\n      case ',':\n      case ' ':\n        onChangeEmails([...mapToOptions(emails), {label: inputValue, value: inputValue}]);\n        this.setState({inputValue: ''});\n        event.preventDefault();\n        break;\n      default:\n      // do nothing.\n    }\n  };\n\n  render() {\n    const {\n      className,\n      disabled,\n      emails,\n      role,\n      teams,\n      roleOptions,\n      roleDisabledUnallowed,\n      teamOptions,\n      inviteStatus,\n      onRemove,\n      onChangeEmails,\n      onChangeRole,\n      onChangeTeams,\n      disableRemove,\n      theme,\n    } = this.props;\n\n    return (\n      <div className={className}>\n        <SelectControl\n          data-test-id=\"select-emails\"\n          disabled={disabled}\n          placeholder={t('Enter one or more emails')}\n          inputValue={this.state.inputValue}\n          value={emails}\n          components={{\n            MultiValue: (props: MultiValueProps<SelectOption>) =>\n              ValueComponent(props, inviteStatus),\n            DropdownIndicator: () => null,\n          }}\n          options={mapToOptions(emails)}\n          onBlur={(e: React.ChangeEvent<HTMLInputElement>) =>\n            e.target.value &&\n            onChangeEmails([\n              ...mapToOptions(emails),\n              {label: e.target.value, value: e.target.value},\n            ])\n          }\n          styles={getStyles(theme, inviteStatus)}\n          onInputChange={this.handleInputChange}\n          onKeyDown={this.handleKeyDown}\n          onBlurResetsInput={false}\n          onCloseResetsInput={false}\n          onChange={onChangeEmails}\n          multiple\n          creatable\n          clearable\n          menuIsOpen={false}\n        />\n        <RoleSelectControl\n          data-test-id=\"select-role\"\n          disabled={disabled}\n          value={role}\n          roles={roleOptions}\n          disableUnallowed={roleDisabledUnallowed}\n          onChange={onChangeRole}\n        />\n        <SelectControl\n          data-test-id=\"select-teams\"\n          disabled={disabled}\n          placeholder={t('Add to teams\\u2026')}\n          value={teams}\n          options={teamOptions.map(({slug}) => ({\n            value: slug,\n            label: `#${slug}`,\n          }))}\n          onChange={onChangeTeams}\n          multiple\n          clearable\n        />\n        <Button\n          borderless\n          icon={<IconClose />}\n          size=\"zero\"\n          onClick={onRemove}\n          disabled={disableRemove}\n        />\n      </div>\n    );\n  }\n}\n\n/**\n * The email select control has custom selected item states as items\n * show their delivery status after the form is submitted.\n */\nfunction getStyles(theme: Theme, inviteStatus: Props['inviteStatus']) {\n  return {\n    multiValue: (\n      provided: React.CSSProperties,\n      {data}: MultiValueProps<SelectOption>\n    ) => {\n      const status = inviteStatus[data.value];\n      return {\n        ...provided,\n        ...(status?.error\n          ? {\n              color: theme.red300,\n              border: `1px solid ${theme.red300}`,\n              backgroundColor: theme.red100,\n            }\n          : {}),\n      };\n    },\n    multiValueLabel: (\n      provided: React.CSSProperties,\n      {data}: MultiValueProps<SelectOption>\n    ) => {\n      const status = inviteStatus[data.value];\n      return {\n        ...provided,\n        pointerEvents: 'all',\n        ...(status?.error ? {color: theme.red300} : {}),\n      };\n    },\n    multiValueRemove: (\n      provided: React.CSSProperties,\n      {data}: MultiValueProps<SelectOption>\n    ) => {\n      const status = inviteStatus[data.value];\n      return {\n        ...provided,\n        ...(status?.error\n          ? {\n              borderLeft: `1px solid ${theme.red300}`,\n              ':hover': {backgroundColor: theme.red100, color: theme.red300},\n            }\n          : {}),\n      };\n    },\n  };\n}\n\nexport default withTheme(InviteRowControl);\n","import React from 'react';\nimport {css} from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport {MEMBER_ROLES} from 'app/constants';\nimport {IconAdd, IconCheckmark, IconWarning} from 'app/icons';\nimport {t, tct, tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport {uniqueId} from 'app/utils/guid';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport withTeams from 'app/utils/withTeams';\n\nimport InviteRowControl from './inviteRowControl';\nimport {InviteRow, InviteStatus, NormalizedInvite} from './types';\n\ntype Props = AsyncComponent['props'] &\n  ModalRenderProps & {\n    organization: Organization;\n    teams: Team[];\n    source?: string;\n    initialData?: Partial<InviteRow>[];\n  };\n\ntype State = AsyncComponent['state'] & {\n  pendingInvites: InviteRow[];\n  sendingInvites: boolean;\n  complete: boolean;\n  inviteStatus: InviteStatus;\n};\n\nconst DEFAULT_ROLE = 'member';\n\nconst InviteModalHook = HookOrDefault({\n  hookName: 'member-invite-modal:customization',\n  defaultComponent: ({onSendInvites, children}) =>\n    children({sendInvites: onSendInvites, canSend: true}),\n});\n\ntype InviteModalRenderFunc = React.ComponentProps<typeof InviteModalHook>['children'];\n\nclass InviteMembersModal extends AsyncComponent<Props, State> {\n  get inviteTemplate(): InviteRow {\n    return {\n      emails: new Set(),\n      teams: new Set(),\n      role: DEFAULT_ROLE,\n    };\n  }\n\n  /**\n   * Used for analytics tracking of the modals usage.\n   */\n  sessionId = '';\n\n  componentDidMount() {\n    this.sessionId = uniqueId();\n\n    const {organization, source} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'invite_modal.opened',\n      eventName: 'Invite Modal: Opened',\n      organization_id: organization.id,\n      modal_session: this.sessionId,\n      can_invite: this.willInvite,\n      source,\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const orgId = this.props.organization.slug;\n\n    return [['member', `/organizations/${orgId}/members/me/`]];\n  }\n\n  getDefaultState() {\n    const state = super.getDefaultState();\n    const {initialData} = this.props;\n\n    const pendingInvites = initialData\n      ? initialData.map(initial => ({\n          ...this.inviteTemplate,\n          ...initial,\n        }))\n      : [this.inviteTemplate];\n\n    return {\n      ...state,\n      pendingInvites,\n      inviteStatus: {},\n      complete: false,\n      sendingInvites: false,\n    };\n  }\n\n  reset = () => {\n    this.setState({\n      pendingInvites: [this.inviteTemplate],\n      inviteStatus: {},\n      complete: false,\n      sendingInvites: false,\n    });\n\n    trackAnalyticsEvent({\n      eventKey: 'invite_modal.add_more',\n      eventName: 'Invite Modal: Add More',\n      organization_id: this.props.organization.id,\n      modal_session: this.sessionId,\n    });\n  };\n\n  sendInvite = async (invite: NormalizedInvite) => {\n    const {slug} = this.props.organization;\n    const data = {\n      email: invite.email,\n      teams: [...invite.teams],\n      role: invite.role,\n    };\n\n    this.setState(state => ({\n      inviteStatus: {...state.inviteStatus, [invite.email]: {sent: false}},\n    }));\n\n    const endpoint = this.willInvite\n      ? `/organizations/${slug}/members/`\n      : `/organizations/${slug}/invite-requests/`;\n\n    try {\n      await this.api.requestPromise(endpoint, {method: 'POST', data});\n    } catch (err) {\n      const errorResponse = err.responseJSON;\n\n      // Use the email error message if available. This inconsistently is\n      // returned as either a list of errors for the field, or a single error.\n      const emailError =\n        !errorResponse || !errorResponse.email\n          ? false\n          : Array.isArray(errorResponse.email)\n          ? errorResponse.email[0]\n          : errorResponse.email;\n\n      const error = emailError || t('Could not invite user');\n\n      this.setState(state => ({\n        inviteStatus: {...state.inviteStatus, [invite.email]: {sent: false, error}},\n      }));\n      return;\n    }\n\n    this.setState(state => ({\n      inviteStatus: {...state.inviteStatus, [invite.email]: {sent: true}},\n    }));\n  };\n\n  sendInvites = async () => {\n    this.setState({sendingInvites: true});\n    await Promise.all(this.invites.map(this.sendInvite));\n    this.setState({sendingInvites: false, complete: true});\n\n    trackAnalyticsEvent({\n      eventKey: this.willInvite\n        ? 'invite_modal.invites_sent'\n        : 'invite_modal.requests_sent',\n      eventName: this.willInvite\n        ? 'Invite Modal: Invites Sent'\n        : 'Invite Modal: Requests Sent',\n      organization_id: this.props.organization.id,\n      modal_session: this.sessionId,\n    });\n  };\n\n  addInviteRow = () =>\n    this.setState(state => ({\n      pendingInvites: [...state.pendingInvites, this.inviteTemplate],\n    }));\n\n  setEmails(emails: string[], index: number) {\n    this.setState(state => {\n      const pendingInvites = [...state.pendingInvites];\n      pendingInvites[index] = {...pendingInvites[index], emails: new Set(emails)};\n\n      return {pendingInvites};\n    });\n  }\n\n  setTeams(teams: string[], index: number) {\n    this.setState(state => {\n      const pendingInvites = [...state.pendingInvites];\n      pendingInvites[index] = {...pendingInvites[index], teams: new Set(teams)};\n\n      return {pendingInvites};\n    });\n  }\n\n  setRole(role: string, index: number) {\n    this.setState(state => {\n      const pendingInvites = [...state.pendingInvites];\n      pendingInvites[index] = {...pendingInvites[index], role};\n\n      return {pendingInvites};\n    });\n  }\n\n  removeInviteRow(index: number) {\n    this.setState(state => {\n      const pendingInvites = [...state.pendingInvites];\n      pendingInvites.splice(index, 1);\n      return {pendingInvites};\n    });\n  }\n\n  get invites(): NormalizedInvite[] {\n    return this.state.pendingInvites.reduce<NormalizedInvite[]>(\n      (acc, row) => [\n        ...acc,\n        ...[...row.emails].map(email => ({email, teams: row.teams, role: row.role})),\n      ],\n      []\n    );\n  }\n\n  get hasDuplicateEmails() {\n    const emails = this.invites.map(inv => inv.email);\n    return emails.length !== new Set(emails).size;\n  }\n\n  get isValidInvites() {\n    return this.invites.length > 0 && !this.hasDuplicateEmails;\n  }\n\n  get statusMessage() {\n    const {sendingInvites, complete, inviteStatus} = this.state;\n\n    if (sendingInvites) {\n      return (\n        <StatusMessage>\n          <LoadingIndicator mini relative hideMessage size={16} />\n          {this.willInvite\n            ? t('Sending organization invitations...')\n            : t('Sending invite requests...')}\n        </StatusMessage>\n      );\n    }\n\n    if (complete) {\n      const statuses = Object.values(inviteStatus);\n      const sentCount = statuses.filter(i => i.sent).length;\n      const errorCount = statuses.filter(i => i.error).length;\n\n      const invites = <strong>{tn('%s invite', '%s invites', sentCount)}</strong>;\n      const tctComponents = {\n        invites,\n        failed: errorCount,\n      };\n\n      return (\n        <StatusMessage status=\"success\">\n          <IconCheckmark size=\"sm\" />\n          {errorCount > 0\n            ? tct('Sent [invites], [failed] failed to send.', tctComponents)\n            : tct('Sent [invites]', tctComponents)}\n        </StatusMessage>\n      );\n    }\n\n    if (this.hasDuplicateEmails) {\n      return (\n        <StatusMessage status=\"error\">\n          <IconWarning size=\"sm\" />\n          {t('Duplicate emails between invite rows.')}\n        </StatusMessage>\n      );\n    }\n\n    return null;\n  }\n\n  get willInvite() {\n    return this.props.organization.access?.includes('member:write');\n  }\n\n  get inviteButtonLabel() {\n    if (this.invites.length > 0) {\n      const numberInvites = this.invites.length;\n\n      // Note we use `t()` here because `tn()` expects the same # of string formatters\n      const inviteText =\n        numberInvites === 1 ? t('Send invite') : t('Send invites (%s)', numberInvites);\n      const requestText =\n        numberInvites === 1\n          ? t('Send invite request')\n          : t('Send invite requests (%s)', numberInvites);\n\n      return this.willInvite ? inviteText : requestText;\n    }\n\n    return this.willInvite ? t('Send invite') : t('Send invite request');\n  }\n\n  render() {\n    const {Footer, closeModal, organization, teams: allTeams} = this.props;\n    const {pendingInvites, sendingInvites, complete, inviteStatus, member} = this.state;\n\n    const disableInputs = sendingInvites || complete;\n\n    // eslint-disable-next-line react/prop-types\n    const hookRenderer: InviteModalRenderFunc = ({sendInvites, canSend, headerInfo}) => (\n      <React.Fragment>\n        <Heading>\n          {t('Invite New Members')}\n          {!this.willInvite && (\n            <QuestionTooltip\n              title={t(\n                `You do not have permission to directly invite members. Email\n                 addresses entered here will be forwarded to organization\n                 managers and owners; they will be prompted to approve the\n                 invitation.`\n              )}\n              size=\"sm\"\n              position=\"bottom\"\n            />\n          )}\n        </Heading>\n        <Subtext>\n          {this.willInvite\n            ? t('Invite new members by email to join your organization.')\n            : t(\n                `You don’t have permission to directly invite users, but we’ll\n                 send a request on your behalf.`\n              )}\n        </Subtext>\n\n        {headerInfo}\n\n        <InviteeHeadings>\n          <div>{t('Email addresses')}</div>\n          <div>{t('Role')}</div>\n          <div>{t('Add to team')}</div>\n        </InviteeHeadings>\n\n        {pendingInvites.map(({emails, role, teams}, i) => (\n          <StyledInviteRow\n            key={i}\n            disabled={disableInputs}\n            emails={[...emails]}\n            role={role}\n            teams={[...teams]}\n            roleOptions={member ? member.roles : MEMBER_ROLES}\n            roleDisabledUnallowed={this.willInvite}\n            teamOptions={allTeams}\n            inviteStatus={inviteStatus}\n            onRemove={() => this.removeInviteRow(i)}\n            onChangeEmails={opts => this.setEmails(opts?.map(v => v.value) ?? [], i)}\n            onChangeRole={value => this.setRole(value?.value, i)}\n            onChangeTeams={opts => this.setTeams(opts ? opts.map(v => v.value) : [], i)}\n            disableRemove={disableInputs || pendingInvites.length === 1}\n          />\n        ))}\n\n        <AddButton\n          disabled={disableInputs}\n          priority=\"link\"\n          onClick={this.addInviteRow}\n          icon={<IconAdd size=\"xs\" isCircled />}\n        >\n          {t('Add another')}\n        </AddButton>\n\n        <Footer>\n          <FooterContent>\n            <div>{this.statusMessage}</div>\n\n            {complete ? (\n              <React.Fragment>\n                <Button data-test-id=\"send-more\" size=\"small\" onClick={this.reset}>\n                  {t('Send more invites')}\n                </Button>\n                <Button\n                  data-test-id=\"close\"\n                  priority=\"primary\"\n                  size=\"small\"\n                  onClick={() => {\n                    trackAnalyticsEvent({\n                      eventKey: 'invite_modal.closed',\n                      eventName: 'Invite Modal: Closed',\n                      organization_id: this.props.organization.id,\n                      modal_session: this.sessionId,\n                    });\n                    closeModal();\n                  }}\n                >\n                  {t('Close')}\n                </Button>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <Button\n                  data-test-id=\"cancel\"\n                  size=\"small\"\n                  onClick={closeModal}\n                  disabled={disableInputs}\n                >\n                  {t('Cancel')}\n                </Button>\n                <Button\n                  size=\"small\"\n                  data-test-id=\"send-invites\"\n                  priority=\"primary\"\n                  disabled={!canSend || !this.isValidInvites || disableInputs}\n                  onClick={sendInvites}\n                >\n                  {this.inviteButtonLabel}\n                </Button>\n              </React.Fragment>\n            )}\n          </FooterContent>\n        </Footer>\n      </React.Fragment>\n    );\n\n    return (\n      <InviteModalHook\n        organization={organization}\n        willInvite={this.willInvite}\n        onSendInvites={this.sendInvites}\n      >\n        {hookRenderer}\n      </InviteModalHook>\n    );\n  }\n}\n\nconst Heading = styled('h1')`\n  display: inline-grid;\n  grid-gap: ${space(1.5)};\n  grid-auto-flow: column;\n  align-items: center;\n  font-weight: 400;\n  font-size: ${p => p.theme.headerFontSize};\n  margin-top: 0;\n  margin-bottom: ${space(0.75)};\n`;\n\nconst Subtext = styled('p')`\n  color: ${p => p.theme.subText};\n  margin-bottom: ${space(3)};\n`;\n\nconst inviteRowGrid = css`\n  display: grid;\n  grid-gap: ${space(1.5)};\n  grid-template-columns: 3fr 180px 2fr max-content;\n`;\n\nconst InviteeHeadings = styled('div')`\n  ${inviteRowGrid};\n\n  margin-bottom: ${space(1)};\n  font-weight: 600;\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst StyledInviteRow = styled(InviteRowControl)`\n  ${inviteRowGrid};\n  margin-bottom: ${space(1.5)};\n`;\n\nconst AddButton = styled(Button)`\n  margin-top: ${space(3)};\n`;\n\nconst FooterContent = styled('div')`\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr max-content max-content;\n  grid-gap: ${space(1)};\n`;\n\nconst StatusMessage = styled('div')<{status?: 'success' | 'error'}>`\n  display: grid;\n  grid-template-columns: max-content max-content;\n  grid-gap: ${space(1)};\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => (p.status === 'error' ? p.theme.red300 : p.theme.gray400)};\n\n  > :first-child {\n    ${p => p.status === 'success' && `color: ${p.theme.green300}`};\n  }\n`;\n\nexport const modalCss = css`\n  padding: 50px;\n\n  .modal-dialog {\n    position: unset;\n    width: 100%;\n    max-width: 800px;\n    margin: 50px auto;\n  }\n`;\n\nexport default withLatestContext(withTeams(InviteMembersModal));\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import React from 'react';\nimport {components, OptionProps} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport SelectControl, {ControlProps} from 'app/components/forms/selectControl';\nimport space from 'app/styles/space';\nimport {MemberRole} from 'app/types';\nimport theme from 'app/utils/theme';\n\ntype OptionType = {\n  label: string;\n  value: string;\n  disabled: boolean;\n  description: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  roles: MemberRole[];\n  disableUnallowed: boolean;\n  value?: string;\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: disableUnallowed && !r.allowed,\n            description: r.desc,\n          } as OptionType)\n      )}\n      components={{\n        Option: ({label, data, ...optionProps}: OptionProps<OptionType>) => (\n          <components.Option label={label} {...(optionProps as any)}>\n            <RoleItem>\n              <h1>{label}</h1>\n              <div>{data.description}</div>\n            </RoleItem>\n          </components.Option>\n        ),\n      }}\n      styles={{\n        control: provided => ({\n          ...provided,\n          borderBottomLeftRadius: theme.borderRadius,\n          borderBottomRightRadius: theme.borderRadius,\n        }),\n        menu: provided => ({\n          ...provided,\n          borderRadius: theme.borderRadius,\n          marginTop: space(0.5),\n          width: '350px',\n          overflow: 'hidden',\n        }),\n      }}\n      {...props}\n    />\n  );\n}\n\nconst RoleItem = styled('div')`\n  display: grid;\n  grid-template-columns: 80px 1fr;\n  grid-gap: ${space(1)};\n\n  h1,\n  div {\n    font-size: ${p => p.theme.fontSizeSmall};\n    line-height: 1.4;\n    margin: ${space(0.25)} 0;\n  }\n`;\n\nexport default RoleSelectControl;\n"],"sourceRoot":""}