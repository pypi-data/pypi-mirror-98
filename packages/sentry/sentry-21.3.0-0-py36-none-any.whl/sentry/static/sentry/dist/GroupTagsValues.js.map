{"version":3,"sources":["webpack:///./app/components/deviceName.tsx","webpack:///./app/components/dataExport.tsx","webpack:///./app/views/organizationGroupDetails/groupTagValues.tsx"],"names":["deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","a","DeviceName","props","_isMounted","state","this","then","setState","value","children","deviceName","data-test-id","React","Component","ExportQueryType","DataExport","initialState","resetState","startDataExport","api","slug","organization","payload","queryType","queryInfo","inProgress","requestPromise","includeAllArgs","method","data","query_type","query_info","response","addSuccessMessage","status","t","err","message","responseJSON","detail","addErrorMessage","prevPayload","isEqual","disabled","icon","features","size","priority","title","onClick","debounce","withApi","withOrganization","GroupTagValues","environment","environments","params","groupId","tagKey","query","group","orgId","tag","tagValueList","tagValueListPageLinks","sortedTagValueList","sortBy","property","reverse","length","heading","issuesPath","map","tagValue","tagValueIdx","pct","totalValues","percent","count","toFixed","key","className","ValueWrapper","to","pathname","user","id","identifier","avatarSize","hideEmail","name","email","StyledExternalLink","href","color","isUrl","date","lastSeen","Fragment","Header","HeaderTitle","HeaderButtons","gap","BrowserExportButton","project","IssuesByTag","StyledTable","TableHeader","width","pageLinks","AsyncComponent","p","theme","bodyBackground","ButtonBar","space","Button","ExternalLink"],"mappings":"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","file":"GroupTagsValues.js","sourcesContent":["import React from 'react';\n\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import(/* webpackChunkName: \"iOSDeviceList\" */ 'ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import React from 'react';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\n//! Coordinate with other ExportQueryType (src/sentry/data_export/base.py)\nexport enum ExportQueryType {\n  IssuesByTag = 'Issues-by-Tag',\n  Discover = 'Discover',\n}\n\ntype DataExportPayload = {\n  queryType: ExportQueryType;\n  queryInfo: any; // TODO(ts): Formalize different possible payloads\n};\n\ntype Props = {\n  api: Client;\n  disabled?: boolean;\n  organization: Organization;\n  payload: DataExportPayload;\n  icon?: React.ReactNode;\n};\n\ntype State = {\n  inProgress: boolean;\n};\n\nclass DataExport extends React.Component<Props, State> {\n  state = this.initialState;\n\n  componentDidUpdate({payload: prevPayload}) {\n    const {payload} = this.props;\n    if (!isEqual(prevPayload, payload)) this.resetState();\n  }\n\n  get initialState() {\n    return {\n      inProgress: false,\n    };\n  }\n\n  resetState = () => {\n    this.setState(this.initialState);\n  };\n\n  startDataExport = () => {\n    const {\n      api,\n      organization: {slug},\n      payload: {queryType, queryInfo},\n    } = this.props;\n\n    this.setState({inProgress: true});\n\n    api\n      .requestPromise(`/organizations/${slug}/data-export/`, {\n        includeAllArgs: true,\n        method: 'POST',\n        data: {\n          query_type: queryType,\n          query_info: queryInfo,\n        },\n      })\n      .then(([_data, _, response]) => {\n        addSuccessMessage(\n          response?.status === 201\n            ? t(\n                \"Sit tight. We'll shoot you an email when your data is ready for download.\"\n              )\n            : t(\"It looks like we're already working on it. Sit tight, we'll email you.\")\n        );\n      })\n      .catch(err => {\n        const message =\n          err?.responseJSON?.detail ??\n          \"We tried our hardest, but we couldn't export your data. Give it another go.\";\n        addErrorMessage(t(message));\n        this.setState({inProgress: false});\n      });\n  };\n\n  render() {\n    const {inProgress} = this.state;\n    const {children, disabled, icon} = this.props;\n    return (\n      <Feature features={['organizations:discover-query']}>\n        {inProgress ? (\n          <Button\n            size=\"small\"\n            priority=\"default\"\n            title=\"You can get on with your life. We'll email you when your data's ready.\"\n            {...this.props}\n            disabled\n            icon={icon}\n          >\n            {t(\"We're working on it...\")}\n          </Button>\n        ) : (\n          <Button\n            onClick={debounce(this.startDataExport, 500)}\n            disabled={disabled || false}\n            size=\"small\"\n            priority=\"default\"\n            title=\"Put your data to work. Start your export and we'll email you when it's finished.\"\n            icon={icon}\n            {...this.props}\n          >\n            {children ? children : t('Export All to CSV')}\n          </Button>\n        )}\n      </Feature>\n    );\n  }\n}\n\nexport {DataExport};\nexport default withApi(withOrganization(DataExport));\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport property from 'lodash/property';\nimport sortBy from 'lodash/sortBy';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport DataExport, {ExportQueryType} from 'app/components/dataExport';\nimport DeviceName from 'app/components/deviceName';\nimport DetailedError from 'app/components/errors/detailedError';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport UserBadge from 'app/components/idBadge/userBadge';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Pagination from 'app/components/pagination';\nimport TimeSince from 'app/components/timeSince';\nimport {IconMail, IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Environment, Group, Tag, TagValue} from 'app/types';\nimport {isUrl, percent} from 'app/utils';\n\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n  tagKey: string;\n};\n\ntype Props = {\n  group: Group;\n  environments: Environment[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  tag: Tag;\n  tagValueList: TagValue[];\n  tagValueListPageLinks: string;\n};\n\nclass GroupTagValues extends AsyncComponent<\n  Props & AsyncComponent['props'],\n  State & AsyncComponent['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {environments: environment} = this.props;\n    const {groupId, tagKey} = this.props.params;\n    return [\n      ['tag', `/issues/${groupId}/tags/${tagKey}/`],\n      [\n        'tagValueList',\n        `/issues/${groupId}/tags/${tagKey}/values/`,\n        {query: {environment}},\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {\n      group,\n      params: {orgId, tagKey},\n      environments,\n    } = this.props;\n    const {tag, tagValueList, tagValueListPageLinks} = this.state;\n    const sortedTagValueList: TagValue[] = sortBy(\n      tagValueList,\n      property('count')\n    ).reverse();\n\n    if (sortedTagValueList.length === 0 && environments.length > 0) {\n      return (\n        <DetailedError\n          heading={t('Sorry, the tags for this issue could not be found.')}\n          message={t('No tags were found for the currently selected environments')}\n        />\n      );\n    }\n\n    const issuesPath = `/organizations/${orgId}/issues/`;\n\n    const children = sortedTagValueList.map((tagValue, tagValueIdx) => {\n      const pct = tag.totalValues\n        ? `${percent(tagValue.count, tag.totalValues).toFixed(2)}%`\n        : '--';\n      const query = tagValue.query || `${tag.key}:\"${tagValue.value}\"`;\n      return (\n        <tr key={tagValueIdx}>\n          <td className=\"bar-cell\">\n            <span className=\"label\">{pct}</span>\n          </td>\n          <td>\n            <ValueWrapper>\n              <GlobalSelectionLink\n                to={{\n                  pathname: issuesPath,\n                  query: {query},\n                }}\n              >\n                {tag.key === 'user' ? (\n                  <UserBadge\n                    user={{...tagValue, id: tagValue.identifier ?? ''}}\n                    avatarSize={20}\n                    hideEmail\n                  />\n                ) : (\n                  <DeviceName value={tagValue.name} />\n                )}\n              </GlobalSelectionLink>\n              {tagValue.email && (\n                <StyledExternalLink href={`mailto:${tagValue.email}`}>\n                  <IconMail size=\"xs\" color=\"gray300\" />\n                </StyledExternalLink>\n              )}\n              {isUrl(tagValue.value) && (\n                <StyledExternalLink href={tagValue.value}>\n                  <IconOpen size=\"xs\" color=\"gray300\" />\n                </StyledExternalLink>\n              )}\n            </ValueWrapper>\n          </td>\n          <td>\n            <TimeSince date={tagValue.lastSeen} />\n          </td>\n        </tr>\n      );\n    });\n\n    return (\n      <React.Fragment>\n        <Header>\n          <HeaderTitle>{tag.key === 'user' ? t('Affected Users') : tag.name}</HeaderTitle>\n          <HeaderButtons gap={1}>\n            <BrowserExportButton\n              size=\"small\"\n              priority=\"default\"\n              href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${tagKey}/export/`}\n            >\n              {t('Export Page to CSV')}\n            </BrowserExportButton>\n            <DataExport\n              payload={{\n                queryType: ExportQueryType.IssuesByTag,\n                queryInfo: {\n                  project: group.project.id,\n                  group: group.id,\n                  key: tagKey,\n                },\n              }}\n            />\n          </HeaderButtons>\n        </Header>\n        <StyledTable className=\"table\">\n          <thead>\n            <tr>\n              <TableHeader width={20}>%</TableHeader>\n              <th />\n              <TableHeader width={300}>{t('Last Seen')}</TableHeader>\n            </tr>\n          </thead>\n          <tbody>{children}</tbody>\n        </StyledTable>\n        <Pagination pageLinks={tagValueListPageLinks} />\n        <p>\n          <small>\n            {t('Note: Percentage of issue is based on events seen in the last 7 days.')}\n          </small>\n        </p>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledTable = styled('table')`\n  > tbody > tr:nth-of-type(odd) {\n    background-color: ${p => p.theme.bodyBackground};\n  }\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px;\n`;\n\nconst HeaderTitle = styled('h3')`\n  margin: 0;\n`;\n\nconst HeaderButtons = styled(ButtonBar)`\n  align-items: stretch;\n  margin: 0px ${space(1.5)};\n`;\n\nconst BrowserExportButton = styled(Button)`\n  display: flex;\n  align-items: center;\n`;\n\nconst TableHeader = styled('th')<{width: number}>`\n  width: ${p => p.width}px;\n`;\nconst ValueWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst StyledExternalLink = styled(ExternalLink)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {GroupTagValues};\nexport default GroupTagValues;\n"],"sourceRoot":""}