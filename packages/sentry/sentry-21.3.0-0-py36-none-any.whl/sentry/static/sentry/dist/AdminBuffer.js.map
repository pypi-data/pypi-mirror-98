{"version":3,"sources":["webpack:///./app/components/internalStatChart.tsx","webpack:///./app/views/admin/adminBuffer.tsx"],"names":["InternalStatChart","state","error","loading","data","this","fetchData","_nextProps","nextState","prevProps","since","props","stat","resolution","setState","api","request","method","key","success","label","height","onRetry","series","seriesName","map","name","value","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","React","Component","withApi","AdminBuffer","Date","getTime","className"],"mappings":"yqBAuBMA,E,kLACJC,MAAe,CACbC,OAAO,EACPC,SAAS,EACTC,KAAM,M,0DAINC,KAAKC,c,4CAGeC,EAAmBC,GACvC,OAAOH,KAAKJ,MAAME,UAAYK,EAAUL,U,yCAGvBM,GAEfA,EAAUC,QAAUL,KAAKM,MAAMD,OAC/BD,EAAUG,OAASP,KAAKM,MAAMC,MAC9BH,EAAUI,aAAeR,KAAKM,MAAME,YAEpCR,KAAKC,c,kCAIG,WACVD,KAAKS,SAAS,CAACX,SAAS,IACxBE,KAAKM,MAAMI,IAAIC,QAAQ,mBAAoB,CACzCC,OAAQ,MACRb,KAAM,CACJM,MAAOL,KAAKM,MAAMD,MAClBG,WAAYR,KAAKM,MAAME,WACvBK,IAAKb,KAAKM,MAAMC,MAElBO,QAAS,SAAAf,GAAI,OACX,EAAKU,SAAS,CACZV,OACAD,SAAS,EACTD,OAAO,KAEXA,MAAO,kBAAM,EAAKY,SAAS,CAACZ,OAAO,S,+BAI9B,QACwBG,KAAKJ,MAA7BE,EADA,EACAA,QAASD,EADT,EACSA,MAAOE,EADhB,EACgBA,KADhB,EAEiBC,KAAKM,MAAtBS,EAFA,EAEAA,MAAOC,EAFP,EAEOA,OACd,GAAIlB,EACF,OAAO,YAAC,UAAD,MACF,GAAID,EACT,OAAO,YAAC,IAAD,CAAcoB,QAASjB,KAAKC,YAGrC,IAAMiB,EAAS,CACbC,WAAYJ,EACZhB,KAAI,UACFA,aADE,EACFA,EAAMqB,KAAI,iCAAyB,CACjCC,KAAkB,IADV,KAERC,MAFQ,gBADR,QAIK,IAEX,OACE,YAAC,IAAD,CACEN,OAAQA,UAAU,IAClBE,OAAQ,CAACA,GACTK,iBAAe,EACfC,mBAAiB,EACjBC,mBAAiB,Q,GAnEOC,IAAMC,WAAhChC,E,gCAyESiC,gBAAQjC,I,kCChGvB,iCAIMkC,EAAc,WAClB,IAAMxB,GAAQ,IAAIyB,MAAOC,UAAY,IAAO,OAE5C,OACE,uBACE,iCAEA,mBAAKC,UAAU,OACb,mBAAKA,UAAU,cACb,gCAGF,mBAAKA,UAAU,4BACb,uKAEsE,IACpE,mCAHF,kGASJ,mBAAKA,UAAU,OACb,mBAAKA,UAAU,cACb,4CAEF,YAAC,IAAD,CACE3B,MAAOA,EACPG,WAAW,KACXD,KAAK,yDACLQ,MAAM,UAIV,mBAAKiB,UAAU,OACb,mBAAKA,UAAU,cACb,0CAEF,YAAC,IAAD,CACE3B,MAAOA,EACPG,WAAW,KACXD,KAAK,iBACLQ,MAAM,YA1CVc,E,0BAiDSA","file":"AdminBuffer.js","sourcesContent":["import React from 'react';\n\nimport {Client} from 'app/api';\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  since: number;\n  resolution: string;\n  stat: string;\n  label: string;\n  height?: number;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  data: [number, number][] | null;\n};\n\nclass InternalStatChart extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps: Props, nextState: State) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true}),\n    });\n  }\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    } else if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data:\n        data?.map(([timestamp, value]) => ({\n          name: timestamp * 1000,\n          value,\n        })) ?? [],\n    };\n    return (\n      <MiniBarChart\n        height={height ?? 150}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import React from 'react';\n\nimport InternalStatChart from 'app/components/internalStatChart';\n\nconst AdminBuffer = () => {\n  const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n\n  return (\n    <div>\n      <h3>Buffers</h3>\n\n      <div className=\"box\">\n        <div className=\"box-header\">\n          <h4>About</h4>\n        </div>\n\n        <div className=\"box-content with-padding\">\n          <p>\n            Sentry buffers are responsible for making changes to cardinality counters —\n            such as an issues event count — as well as updating attributes like{' '}\n            <em>last seen</em>. These are flushed on a regularly interval, and are\n            directly affected by the queue backlog.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"box\">\n        <div className=\"box-header\">\n          <h4>Updates Processed</h4>\n        </div>\n        <InternalStatChart\n          since={since}\n          resolution=\"1h\"\n          stat=\"jobs.finished.sentry.tasks.process_buffer.process_incr\"\n          label=\"Jobs\"\n        />\n      </div>\n\n      <div className=\"box\">\n        <div className=\"box-header\">\n          <h4>Revoked Updates</h4>\n        </div>\n        <InternalStatChart\n          since={since}\n          resolution=\"1h\"\n          stat=\"buffer.revoked\"\n          label=\"Jobs\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AdminBuffer;\n"],"sourceRoot":""}