{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/utils.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/sessionRow.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","tableLayout","SessionRow","ipAddress","lastSeen","firstSeen","countryCode","regionCode","SessionPanelItem","IpAndLocation","IpAddress","CountryCode","StyledTimeSince","date","fontSizeRelativeSmall","TimeSince","PanelItem","SessionHistory","t","ipList","state","recreateRouteProps","Fragment","underlined","index","SessionPanelHeader","id","ipObj","key","PanelHeader"],"mappings":"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","file":"SessionHistory.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import space from 'app/styles/space';\n\nexport const tableLayout = `\n  display: grid;\n  grid-template-columns: auto 140px 140px;\n  grid-gap ${space(1)};\n  align-items: center;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport {InternetProtocol} from 'app/types';\n\nimport {tableLayout} from './utils';\n\nfunction SessionRow({\n  ipAddress,\n  lastSeen,\n  firstSeen,\n  countryCode,\n  regionCode,\n}: Omit<InternetProtocol, 'id'>) {\n  return (\n    <SessionPanelItem>\n      <IpAndLocation>\n        <IpAddress>{ipAddress}</IpAddress>\n        {countryCode && regionCode && (\n          <CountryCode>{`${countryCode} (${regionCode})`}</CountryCode>\n        )}\n      </IpAndLocation>\n      <StyledTimeSince date={firstSeen} />\n      <StyledTimeSince date={lastSeen} />\n    </SessionPanelItem>\n  );\n}\n\nexport default SessionRow;\n\nconst IpAddress = styled('div')`\n  margin-bottom: ${space(0.5)};\n  font-weight: bold;\n`;\nconst CountryCode = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst IpAndLocation = styled('div')`\n  flex: 1;\n`;\n\nconst SessionPanelItem = styled(PanelItem)`\n  ${tableLayout};\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {InternetProtocol} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport SessionRow from './sessionRow';\nimport {tableLayout} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  ipList: Array<InternetProtocol> | null;\n} & AsyncView['state'];\n\nclass SessionHistory extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Session History');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['ipList', '/users/me/ips/']];\n  }\n\n  renderBody() {\n    const {ipList} = this.state;\n\n    if (!ipList) {\n      return null;\n    }\n\n    const {routes, params, location} = this.props;\n    const recreateRouteProps = {routes, params, location};\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink\n                to={recreateRoute('', {...recreateRouteProps, stepBack: -1})}\n                index\n              >\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('', recreateRouteProps)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        <Panel>\n          <SessionPanelHeader>\n            <div>{t('Sessions')}</div>\n            <div>{t('First Seen')}</div>\n            <div>{t('Last Seen')}</div>\n          </SessionPanelHeader>\n\n          <PanelBody>\n            {ipList.map(({id, ...ipObj}) => (\n              <SessionRow key={id} {...ipObj} />\n            ))}\n          </PanelBody>\n        </Panel>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SessionHistory;\n\nconst SessionPanelHeader = styled(PanelHeader)`\n  ${tableLayout}\n  justify-content: initial;\n`;\n"],"sourceRoot":""}