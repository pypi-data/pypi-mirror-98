{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectOwnership/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","PermissionAlert","access","hasAccess","type","size","t","ProjectOwnership","project","slug","organization","ownership","state","disabled","includes","Fragment","to","pathname","query","id","tct","link","href","withPadding","Block","CodeBlock","initialText","raw","apiEndpoint","apiMethod","saveOnBlur","initialData","fallthrough","hideFooter","forms","fields","name","label","help","autoAssignment","TextBlock"],"mappings":"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","file":"ProjectOwnership.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport OwnerInput from 'app/views/settings/project/projectOwnership/ownerInput';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  ownership: null | any;\n} & AsyncView['state'];\n\nclass ProjectOwnership extends AsyncView<Props, State> {\n  getTitle() {\n    const {project} = this.props;\n    return routeTitleGen(t('Issue Owners'), project.slug, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, project} = this.props;\n    return [['ownership', `/projects/${organization.slug}/${project.slug}/ownership/`]];\n  }\n\n  renderBody() {\n    const {project, organization} = this.props;\n    const {ownership} = this.state;\n\n    const disabled = !organization.access.includes('project:write');\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Issue Owners')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${organization.slug}/issues/`,\n                query: {project: project.id},\n              }}\n              size=\"small\"\n            >\n              {t('View Issues')}\n            </Button>\n          }\n        />\n        <TextBlock>\n          {tct(\n            `Automatically assign issues and send alerts to the right people based on issue properties. To learn more about Issue Owners, [link:view the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/error-monitoring/issue-owners/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n        <PermissionAlert />\n        <Panel>\n          <PanelHeader>{t('Ownership Rules')}</PanelHeader>\n          <PanelBody withPadding>\n            <Block>\n              {t('An owner for an issue can be a team such as ')}{' '}\n              <code>#infrastructure</code>\n              {t('or a member’s email like ')} <code>tom@sentry.io</code>\n              {'. Here are some examples: '}\n            </Block>\n            <Block>\n              <CodeBlock>\n                path:src/example/pipeline/* person@sentry.io #infrastructure\n                {'\\n'}\n                url:http://example.com/settings/* #product\n                {'\\n'}\n                tags.sku_class:enterprise #enterprise\n                {'\\n'}\n                module:example.api.base tom@sentry.io\n              </CodeBlock>\n            </Block>\n            <Block>\n              {t('These rules follow the pattern: ')}\n              <code>matcher:pattern owner1 owner2 ...</code>{' '}\n              {t('and the globbing syntax works like this:')}\n            </Block>\n            <Block>\n              <CodeBlock>\n                {`* matches everything\n? matches any single character`}\n              </CodeBlock>\n            </Block>\n            <OwnerInput\n              {...this.props}\n              disabled={disabled}\n              initialText={ownership.raw || ''}\n            />\n          </PanelBody>\n        </Panel>\n\n        <Form\n          apiEndpoint={`/projects/${organization.slug}/${project.slug}/ownership/`}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          initialData={{fallthrough: ownership.fallthrough}}\n          hideFooter\n        >\n          <JsonForm\n            forms={[\n              {\n                title: t('If ownership cannot be determined for an issue...'),\n                fields: [\n                  {\n                    name: 'fallthrough',\n                    type: 'boolean',\n                    label: t('All users with access to this project are issue owners'),\n                    help: t(\n                      'Issue owners will receive notifications for issues they are responsible for.'\n                    ),\n                    disabled,\n                  },\n                ],\n              },\n            ]}\n          />\n        </Form>\n\n        <Form\n          apiEndpoint={`/projects/${organization.slug}/${project.slug}/ownership/`}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          initialData={{autoAssignment: ownership.autoAssignment}}\n          hideFooter\n        >\n          <JsonForm\n            forms={[\n              {\n                title: t('If a new event matches any of the ownership rules...'),\n                fields: [\n                  {\n                    name: 'autoAssignment',\n                    type: 'boolean',\n                    label: t('The issue is assigned to the team or user'),\n                    help: t('Issue owners will be automatically assigned.'),\n                    disabled,\n                  },\n                ],\n              },\n            ]}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectOwnership;\n\nconst Block = styled(TextBlock)`\n  margin-bottom: 16px;\n`;\n\nconst CodeBlock = styled('pre')`\n  word-break: break-all;\n  white-space: pre-wrap;\n`;\n"],"sourceRoot":""}