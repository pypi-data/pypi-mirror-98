{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx","webpack:///./app/components/projects/missingProjectMembership.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","err","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","SettingsNavItem","badge","label","index","props","LabelHook","HookOrDefault","hookName","defaultComponent","children","Fragment","renderedBadge","type","text","StyledNavItem","onlyActiveOnIndex","activeClassName","Link","p","theme","gray300","textColor","active","backgroundSecondary","SettingsNavigationGroup","project","items","NavSection","data-test-id","SettingsHeading","map","path","title","show","recordAnalytics","badgeResult","to","replaceRouterParams","projectId","key","onClick","window","location","pathname","trackAnalyticsEvent","organization_id","project_id","eventName","eventKey","sidebar_item_id","dest","subText","SettingsNavigation","errorInfo","Sentry","scope","Object","keys","forEach","setExtra","href","this","navigationObjects","hooks","hookConfigs","stickyTop","otherProps","navWithHooks","concat","PositionStickyWrapper","config","Hook","i","React","cloneElement","Component","defaultProps","space","breakpoints","MissingProjectMembership","handleChangeTeam","teamObj","value","setState","getPendingTeamOption","DisabledLabel","t","projectSlug","projects","find","state","loading","teamSlug","features","TeamStore","getBySlug","has","busy","isPending","disabled","priority","bind","pending","teams","push","Set","teamAccess","getTeamsForAccess","StyledPanel","length","icon","size","description","action","Field","StyledSelectControl","placeholder","onChange","renderJoinTeam","Panel","SelectControl","withApi","ErrorTypes","ProjectContext","createReactClass","displayName","childContextTypes","SentryTypes","Project","mixins","Reflux","connect","MemberListStore","listenTo","ProjectsStore","getInitialState","errorType","memberList","getChildContext","componentWillMount","fetchData","componentWillReceiveProps","nextProps","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","docTitle","docTitleRef","forceUpdate","getTitle","onProjectChange","projectIds","getById","identifyProject","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","MISSING_MEMBERSHIP","PROJECT_NOT_FOUND","renderBody","className","style","margin","ErrorWrapper","onRetry","render","ref","withOrganization","withProjects","ProjectSettingsNavigation","getConfiguration","access","withProject","ProjectSettingsLayout","renderNavigation","isValidElement"],"mappings":"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","file":"ProjectSettingsLayout.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import React from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Badge from 'app/components/badge';\nimport FeatureBadge from 'app/components/featureBadge';\nimport HookOrDefault from 'app/components/hookOrDefault';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? <FeatureBadge type=\"new\" /> : <Badge text={badge} />;\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray300};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.textColor};\n\n    &:before {\n      background: ${p => p.theme.active};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: ${p => p.theme.backgroundSecondary};\n    padding-left: 15px;\n    margin-left: -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport {NavigationGroupProps} from 'app/views/settings/types';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id, recordAnalytics}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        const handleClick = () => {\n          //only call the analytics event if the URL is changing\n          if (recordAnalytics && to !== window.location.pathname) {\n            trackAnalyticsEvent({\n              organization_id: organization && organization.id,\n              project_id: project && project.id,\n              eventName: 'Sidebar Item Clicked',\n              eventKey: 'sidebar.item_clicked',\n              sidebar_item_id: id,\n              dest: path,\n            });\n          }\n        };\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n            onClick={handleClick}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport space from 'app/styles/space';\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationProps, NavigationSection} from 'app/views/settings/types';\n\nconst FOOTER_HEIGHT = 93;\n\ntype DefaultProps = {\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n  /**\n   * How far from the top of the page should the navigation be when stickied.\n   */\n  stickyTop: string;\n};\n\ntype Props = DefaultProps &\n  NavigationProps & {\n    /**\n     * The configuration for this navigation panel\n     */\n    navigationObjects: NavigationSection[];\n  };\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    hooks: [],\n    hookConfigs: [],\n    stickyTop: '69px',\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, stickyTop, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <PositionStickyWrapper stickyTop={stickyTop}>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </PositionStickyWrapper>\n    );\n  }\n}\n\nconst PositionStickyWrapper = styled('div')<{stickyTop: string}>`\n  padding: ${space(4)};\n  padding-right: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    position: sticky;\n    top: ${p => p.stickyTop};\n    overflow: scroll;\n    height: calc(100vh - ${p => p.stickyTop} - ${FOOTER_HEIGHT}px);\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n`;\n\nexport default SettingsNavigation;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {joinTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport {Panel} from 'app/components/panels';\nimport {IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport TeamStore from 'app/stores/teamStore';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype SelectOption = Record<'value' | 'label', string>;\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  projectSlug?: string;\n};\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  project?: Project;\n  team: string | null;\n};\n\nclass MissingProjectMembership extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const {organization, projectSlug} = this.props;\n    const project = organization.projects?.find(p => p.slug === projectSlug);\n\n    this.state = {\n      loading: false,\n      error: false,\n      project,\n      team: '',\n    };\n  }\n\n  joinTeam(teamSlug: string) {\n    this.setState({\n      loading: true,\n    });\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        teamId: teamSlug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(t('Request to join team sent.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(t('There was an error while trying to request access.'));\n        },\n      }\n    );\n  }\n\n  renderJoinTeam(teamSlug: string, features: Set<string>) {\n    const team = TeamStore.getBySlug(teamSlug);\n\n    if (!team) {\n      return null;\n    }\n    if (this.state.loading) {\n      if (features.has('open-membership')) {\n        return <Button busy>{t('Join Team')}</Button>;\n      }\n      return <Button busy>{t('Request Access')}</Button>;\n    } else if (team?.isPending) {\n      return <Button disabled>{t('Request Pending')}</Button>;\n    } else if (features.has('open-membership')) {\n      return (\n        <Button\n          priority=\"primary\"\n          type=\"button\"\n          onClick={this.joinTeam.bind(this, teamSlug)}\n        >\n          {t('Join Team')}\n        </Button>\n      );\n    }\n    return (\n      <Button\n        priority=\"primary\"\n        type=\"button\"\n        onClick={this.joinTeam.bind(this, teamSlug)}\n      >\n        {t('Request Access')}\n      </Button>\n    );\n  }\n\n  getTeamsForAccess() {\n    const request: string[] = [];\n    const pending: string[] = [];\n    const teams = this.state.project?.teams ?? [];\n    teams.forEach(({slug}) => {\n      const team = TeamStore.getBySlug(slug);\n      if (!team) {\n        return;\n      }\n      team.isPending ? pending.push(team.slug) : request.push(team.slug);\n    });\n\n    return [request, pending];\n  }\n\n  handleChangeTeam = (teamObj: SelectOption | null) => {\n    const team = teamObj ? teamObj.value : null;\n    this.setState({team});\n  };\n\n  getPendingTeamOption = (team: string) => {\n    return {\n      value: team,\n      label: <DisabledLabel>{t(`#${team}`)}</DisabledLabel>,\n    };\n  };\n\n  render() {\n    const {organization} = this.props;\n    const teamSlug = this.state.team;\n    const teams = this.state.project?.teams ?? [];\n    const features = new Set(organization.features);\n\n    const teamAccess = [\n      {\n        label: t('Request Access'),\n        options: this.getTeamsForAccess()[0].map(request => ({\n          value: request,\n          label: t(`#${request}`),\n        })),\n      },\n      {\n        label: t('Pending Requests'),\n        options: this.getTeamsForAccess()[1].map(pending =>\n          this.getPendingTeamOption(pending)\n        ),\n      },\n    ];\n\n    return (\n      <StyledPanel>\n        {!teams.length ? (\n          <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n            {t(\n              'No teams have access to this project yet. Ask an admin to add your team to this project.'\n            )}\n          </EmptyMessage>\n        ) : (\n          <EmptyMessage\n            icon={<IconFlag size=\"xl\" />}\n            title={t(\"You're not a member of this project.\")}\n            description={t(\n              `You'll need to join a team with access before you can view this data.`\n            )}\n            action={\n              <Field>\n                <StyledSelectControl\n                  name=\"select\"\n                  placeholder={t('Select a Team')}\n                  options={teamAccess}\n                  onChange={this.handleChangeTeam}\n                />\n                {teamSlug ? (\n                  this.renderJoinTeam(teamSlug, features)\n                ) : (\n                  <Button disabled>{t('Select a Team')}</Button>\n                )}\n              </Field>\n            }\n          />\n        )}\n      </StyledPanel>\n    );\n  }\n}\n\nconst StyledPanel = styled(Panel)`\n  margin: ${space(2)} 0;\n`;\n\nconst Field = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n  text-align: left;\n`;\n\nconst StyledSelectControl = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst DisabledLabel = styled('div')`\n  display: flex;\n  opacity: 0.5;\n  overflow: hidden;\n`;\n\nexport {MissingProjectMembership};\n\nexport default withApi(MissingProjectMembership);\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {setActiveProject} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport MemberListStore from 'app/stores/memberListStore';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport space from 'app/styles/space';\nimport {Member, Organization, Project} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype Props = {\n  api: Client;\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n  organization: Organization;\n  projects: Project[];\n  projectId: string;\n  orgId: string;\n};\n\ntype State = {\n  memberList: Member[];\n  project: Project | null;\n  loading: boolean;\n  error: boolean;\n  errorType: ErrorTypes | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nconst ProjectContext = createReactClass<Props, State>({\n  displayName: 'ProjectContext',\n\n  childContextTypes: {\n    project: SentryTypes.Project,\n  },\n\n  mixins: [\n    Reflux.connect(MemberListStore, 'memberList') as any,\n    Reflux.listenTo(ProjectsStore, 'onProjectChange') as any,\n  ],\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  },\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  },\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      if (!this.docTitle) {\n        return;\n      }\n      const docTitle = this.docTitleRef.docTitle;\n      if (docTitle) {\n        docTitle.forceUpdate();\n      }\n    }\n  },\n\n  remountComponent() {\n    this.setState(this.getInitialState!());\n  },\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  },\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)},\n    });\n  },\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  },\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, activeProject.id);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  },\n\n  renderBody() {\n    if (this.state.loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!this.state.error) {\n      return this.props.children;\n    }\n\n    switch (this.state.errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <div className=\"container\">\n            <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n              {t('The project you were looking for was not found.')}\n            </div>\n          </div>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership\n              organization={this.props.organization}\n              projectSlug={this.state.project.slug}\n            />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  },\n\n  render() {\n    return (\n      <DocumentTitle ref={ref => (this.docTitleRef = ref)} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  },\n});\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import React from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport withProject from 'app/utils/withProject';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => (\n  <SettingsNavigation\n    navigationObjects={getConfiguration({project, organization})}\n    access={new Set(organization.access)}\n    features={new Set(organization.features)}\n    organization={organization}\n    project={project}\n  />\n);\n\nexport default withProject(ProjectSettingsNavigation);\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport ProjectContext from 'app/views/projects/projectContext';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectSettingsLayout({params, organization, children, ...props}: Props) {\n  const {orgId, projectId} = params;\n\n  return (\n    <ProjectContext orgId={orgId} projectId={projectId}>\n      <SettingsLayout\n        params={params}\n        {...props}\n        renderNavigation={() => <ProjectSettingsNavigation organization={organization} />}\n      >\n        {children && React.isValidElement(children)\n          ? React.cloneElement(children, {\n              organization,\n            })\n          : children}\n      </SettingsLayout>\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"sourceRoot":""}