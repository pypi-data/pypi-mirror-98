{"version":3,"sources":["webpack:///./app/components/modals/debugFileSourceModal.tsx","webpack:///./app/data/debugFileSources.tsx"],"names":["objectToChoices","obj","Object","entries","map","key","value","t","commonFields","id","name","type","required","defaultValue","Math","random","toString","substring","label","placeholder","help","layoutType","choices","DEBUG_SOURCE_LAYOUTS","layoutCasing","DEBUG_SOURCE_CASINGS","prefix","separator","httpFields","url","username","password","s3Fields","bucket","region","AWS_REGIONS","k","v","accessKey","tct","link","href","secretKey","gcsFields","clientEmail","privateKey","multiline","autosize","maxRows","rows","DebugFileSourceModal","handleSave","data","props","sourceType","onSave","closeModal","this","sourceConfig","fields","getFormFields","allowUndo","requireChanges","initialData","onSubmit","footerClass","field","i","inline","stacked","Header","headerText","Fragment","closeButton","onHide","getDebugSourceName","renderForm","React","Component","native","symstore","symstore_index2","ssqp","unified","debuginfod","default","uppercase","lowercase","DEBUG_SOURCE_TYPES","gcs","http","s3"],"mappings":"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","file":"DebugFileSourceModal.js","sourcesContent":["import React from 'react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {\n  AWS_REGIONS,\n  DEBUG_SOURCE_CASINGS,\n  DEBUG_SOURCE_LAYOUTS,\n  getDebugSourceName,\n} from 'app/data/debugFileSources';\nimport {t, tct} from 'app/locale';\nimport {DebugFileSource} from 'app/types';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\nimport Form from 'app/views/settings/components/forms/form';\nimport {Field} from 'app/views/settings/components/forms/type';\n\nfunction objectToChoices(obj: Record<string, string>): [key: string, value: string][] {\n  return Object.entries(obj).map(([key, value]) => [key, t(value)]);\n}\n\ntype FieldMap = Record<string, Field>;\n\nconst commonFields: FieldMap = {\n  id: {\n    name: 'id',\n    type: 'hidden',\n    required: true,\n    defaultValue: () => Math.random().toString(36).substring(2),\n  },\n  name: {\n    name: 'name',\n    type: 'string',\n    required: true,\n    label: t('Name'),\n    placeholder: t('New Repository'),\n    help: t('A display name for this repository'),\n  },\n  // filters are explicitly not exposed to the UI\n  layoutType: {\n    name: 'layout.type',\n    type: 'select',\n    label: t('Directory Layout'),\n    help: t('The layout of the folder structure.'),\n    defaultValue: 'native',\n    choices: objectToChoices(DEBUG_SOURCE_LAYOUTS),\n  },\n  layoutCasing: {\n    name: 'layout.casing',\n    type: 'select',\n    label: t('Path Casing'),\n    help: t('The case of files and folders.'),\n    defaultValue: 'default',\n    choices: objectToChoices(DEBUG_SOURCE_CASINGS),\n  },\n  prefix: {\n    name: 'prefix',\n    type: 'string',\n    label: 'Root Path',\n    placeholder: '/',\n    help: t('The path at which files are located within this repository.'),\n  },\n  separator: {\n    name: '',\n    type: 'separator',\n  },\n};\n\nconst httpFields: FieldMap = {\n  url: {\n    name: 'url',\n    type: 'url',\n    required: true,\n    label: t('Download Url'),\n    placeholder: 'https://msdl.microsoft.com/download/symbols/',\n    help: t('Full URL to the symbol server'),\n  },\n  username: {\n    name: 'username',\n    type: 'string',\n    required: false,\n    label: t('User'),\n    placeholder: 'admin',\n    help: t('User for HTTP basic auth'),\n  },\n  password: {\n    name: 'password',\n    type: 'string',\n    required: false,\n    label: t('Password'),\n    placeholder: 'open-sesame',\n    help: t('Password for HTTP basic auth'),\n  },\n};\n\nconst s3Fields: FieldMap = {\n  bucket: {\n    name: 'bucket',\n    type: 'string',\n    required: true,\n    label: t('Bucket'),\n    placeholder: 's3-bucket-name',\n    help: t('Name of the S3 bucket. Read permissions are required to download symbols.'),\n  },\n  region: {\n    name: 'region',\n    type: 'select',\n    required: true,\n    label: t('Region'),\n    help: t('The AWS region and availability zone of the bucket.'),\n    choices: AWS_REGIONS.map(([k, v]) => [\n      k,\n      <span key={k}>\n        <code>{k}</code> {v}\n      </span>,\n    ]),\n  },\n  accessKey: {\n    name: 'access_key',\n    type: 'string',\n    required: true,\n    label: t('Access Key ID'),\n    placeholder: 'AKIAIOSFODNN7EXAMPLE',\n    help: tct(\n      'Access key to the AWS account. Credentials can be managed in the [link].',\n      {\n        link: (\n          <ExternalLink href=\"https://console.aws.amazon.com/iam/\">\n            IAM console\n          </ExternalLink>\n        ),\n      }\n    ),\n  },\n  secretKey: {\n    name: 'secret_key',\n    type: 'string',\n    required: true,\n    label: t('Secret Access Key'),\n    placeholder: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',\n  },\n};\n\nconst gcsFields: FieldMap = {\n  bucket: {\n    name: 'bucket',\n    type: 'string',\n    required: true,\n    label: t('Bucket'),\n    placeholder: 'gcs-bucket-name',\n    help: t('Name of the GCS bucket. Read permissions are required to download symbols.'),\n  },\n  clientEmail: {\n    name: 'client_email',\n    type: 'email',\n    required: true,\n    label: t('Client Email'),\n    placeholder: 'user@project.iam.gserviceaccount.com',\n    help: t('Email address of the GCS service account.'),\n  },\n  privateKey: {\n    name: 'private_key',\n    type: 'string',\n    required: true,\n    multiline: true,\n    autosize: true,\n    maxRows: 5,\n    rows: 3,\n    label: t('Private Key'),\n    placeholder: '-----BEGIN PRIVATE KEY-----\\n[PRIVATE-KEY]\\n-----END PRIVATE KEY-----',\n    help: tct('The service account key. Credentials can be managed on the [link].', {\n      link: (\n        <ExternalLink href=\"https://console.cloud.google.com/project/_/iam-admin\">\n          IAM &amp; Admin Page\n        </ExternalLink>\n      ),\n    }),\n  },\n};\n\nfunction getFormFields(type: DebugFileSource) {\n  switch (type) {\n    case 'http':\n      return [\n        commonFields.id,\n        commonFields.name,\n        commonFields.separator,\n        httpFields.url,\n        httpFields.username,\n        httpFields.password,\n        commonFields.separator,\n        commonFields.layoutType,\n        commonFields.layoutCasing,\n      ];\n    case 's3':\n      return [\n        commonFields.id,\n        commonFields.name,\n        commonFields.separator,\n        s3Fields.bucket,\n        s3Fields.region,\n        s3Fields.accessKey,\n        s3Fields.secretKey,\n        commonFields.separator,\n        commonFields.prefix,\n        commonFields.layoutType,\n        commonFields.layoutCasing,\n      ];\n    case 'gcs':\n      return [\n        commonFields.id,\n        commonFields.name,\n        commonFields.separator,\n        gcsFields.bucket,\n        gcsFields.clientEmail,\n        gcsFields.privateKey,\n        commonFields.separator,\n        commonFields.prefix,\n        commonFields.layoutType,\n        commonFields.layoutCasing,\n      ];\n    default:\n      return null;\n  }\n}\n\ntype Props = {\n  /**\n   * Callback invoked with the updated config value.\n   */\n  onSave: (config: Record<string, string>) => void;\n  /**\n   * Type of this source.\n   */\n  sourceType: DebugFileSource;\n  /**\n   * The sourceConfig. May be empty to create a new one.\n   */\n  sourceConfig?: Record<string, string>;\n} & Pick<ModalRenderProps, 'closeModal' | 'Header'>;\n\nclass DebugFileSourceModal extends React.Component<Props> {\n  handleSave = (data: Record<string, string>) => {\n    const {sourceType, onSave, closeModal} = this.props;\n    onSave({...data, type: sourceType});\n    closeModal();\n  };\n\n  renderForm() {\n    const {sourceConfig, sourceType} = this.props;\n    const fields = getFormFields(sourceType);\n\n    if (!fields) {\n      return null;\n    }\n\n    return (\n      <Form\n        allowUndo\n        requireChanges\n        initialData={sourceConfig}\n        onSubmit={this.handleSave}\n        footerClass=\"modal-footer\"\n      >\n        {fields.map((field, i) => (\n          <FieldFromConfig key={field.name || i} field={field} inline={false} stacked />\n        ))}\n      </Form>\n    );\n  }\n\n  render() {\n    const {closeModal, sourceType, sourceConfig, Header} = this.props;\n\n    const headerText = sourceConfig\n      ? 'Update [name] Repository'\n      : 'Add [name] Repository';\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {tct(headerText, {name: getDebugSourceName(sourceType)})}\n        </Header>\n\n        {this.renderForm()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DebugFileSourceModal;\n","export const DEBUG_SOURCE_LAYOUTS = {\n  native: 'Platform-Specific (SymStore / GDB / LLVM)',\n  symstore: 'Microsoft SymStore',\n  symstore_index2: 'Microsoft SymStore (with index2.txt)',\n  ssqp: 'Microsoft SSQP',\n  unified: 'Unified Symbol Server Layout',\n  debuginfod: 'debuginfod',\n} as const;\n\nexport const DEBUG_SOURCE_CASINGS = {\n  default: 'Default (mixed case)',\n  uppercase: 'Uppercase',\n  lowercase: 'Lowercase',\n} as const;\n\nexport const AWS_REGIONS = [\n  ['us-east-2', 'US East (Ohio)'],\n  ['us-east-1', 'US East (N. Virginia)'],\n  ['us-west-1', 'US West (N. California)'],\n  ['us-west-2', 'US West (Oregon)'],\n  ['ap-east-1', 'Asia Pacific (Hong Kong)'],\n  ['ap-south-1', 'Asia Pacific (Mumbai)'],\n  // ['ap-northeast-3', 'Asia Pacific (Osaka-Local)'],\n  ['ap-northeast-2', 'Asia Pacific (Seoul)'],\n  ['ap-southeast-1', 'Asia Pacific (Singapore)'],\n  ['ap-southeast-2', 'Asia Pacific (Sydney)'],\n  ['ap-northeast-1', 'Asia Pacific (Tokyo)'],\n  ['ca-central-1', 'Canada (Central)'],\n  ['cn-north-1', 'China (Beijing)'],\n  ['cn-northwest-1', 'China (Ningxia)'],\n  ['eu-central-1', 'EU (Frankfurt)'],\n  ['eu-west-1', 'EU (Ireland)'],\n  ['eu-west-2', 'EU (London)'],\n  ['eu-west-3', 'EU (Paris)'],\n  ['eu-north-1', 'EU (Stockholm)'],\n  ['sa-east-1', 'South America (São Paulo)'],\n  ['us-gov-east-1', 'AWS GovCloud (US-East)'],\n  ['us-gov-west-1', 'AWS GovCloud (US)'],\n] as const;\n\nexport const DEBUG_SOURCE_TYPES = {\n  gcs: 'Google Cloud Storage',\n  http: 'SymbolServer (HTTP)',\n  s3: 'Amazon S3',\n} as const;\n\nexport function getDebugSourceName(type: keyof typeof DEBUG_SOURCE_TYPES) {\n  return DEBUG_SOURCE_TYPES[type] ?? 'Unknown';\n}\n"],"sourceRoot":""}