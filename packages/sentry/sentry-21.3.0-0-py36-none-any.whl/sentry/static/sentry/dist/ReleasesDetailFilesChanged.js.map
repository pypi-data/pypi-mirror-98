{"version":3,"sources":["webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/utils.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/withReleaseRepos.tsx","webpack:///./app/components/fileIcon.tsx","webpack:///./app/components/listGroup.tsx","webpack:///./app/components/fileChange.tsx","webpack:///./app/views/releases/detail/filesChanged.tsx"],"names":["Reflux","createActions","EmptyState","children","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","repoName","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","name","t","push","getQuery","location","perPage","activeRepository","query","pick","Object","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","getReleaseEventView","selection","version","organization","projects","environments","datetime","start","end","period","discoverQuery","id","undefined","fields","apdexThreshold","stringifyQueryObject","QueryResults","range","environment","getUtcDateString","EventView","fromSavedQuery","RepositoryStoreConfig","listenables","RepoActions","state","orgSlug","repositories","repositoriesLoading","repositoriesError","init","this","resetRepositories","trigger","loadRepositories","loadRepositoriesError","err","loadRepositoriesSuccess","data","get","RepositoryStore","createStore","INITIAL_STATE","withRepositories","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","listenTo","getInitialState","props","slug","repoData","RepositoryActions","componentDidMount","fetchRepositories","api","params","path","requestPromise","method","then","res","Sentry","scope","setLevel","Warning","setFingerprint","getRepositories","onStoreUpdate","setState","render","RepositorySwitcher","dropdownButton","React","createRef","handleRepoFilterChange","activeRepo","router","cursor","setButtonDropDownWidth","dropdownButtonWidth","current","offsetWidth","StyledDropdownControl","minMenuWidth","label","Fragment","FilterText","buttonProps","forwardRef","map","repo","key","onSelect","eventKey","isActive","RepoLabel","PureComponent","DropdownControl","space","p","theme","borderRadius","button","border","gray300","overflowEllipsis","withReleaseRepos","withApi","withOrganization","releaseRepos","isLoading","fetchReleaseRepos","nextProps","setActiveReleaseRepo","prevProps","prevState","length","activeReleaseRepo","activeCommitRepo","matchedRepository","find","commitRepo","addErrorMessage","release","orgId","project","context","encodeURIComponent","fullWidth","dashedBorder","icon","size","title","description","action","priority","to","projectSlug","Component","contextType","ReleaseContext","FileIcon","fileName","providedSize","className","fileExtension","getFileExtension","iconName","fileExtensionToPlatform","iconSizes","src","require","width","height","ListGroupItem","centered","FileChange","FileItem","Filename","StyledFileIcon","users","avatarSize","typeMembers","fontSizeMedium","gray200","FilesChanged","routeTitleGen","formatVersion","fileListPageLinks","reposToRender","keys","files","fileCount","tn","StyledFileChange","pageLinks","renderContent","AsyncView"],"mappings":"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","file":"ReleasesDetailFilesChanged.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning>\n        <p>{children}</p>\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  GlobalSelection,\n  LightWeightOrganization,\n  Repository,\n} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {QueryResults, stringifyQueryObject} from 'app/utils/tokenizeSearch';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\n/**\n * Get high level transaction information for this release\n */\nexport function getReleaseEventView(\n  selection: GlobalSelection,\n  version: string,\n  organization: LightWeightOrganization\n): EventView {\n  const {projects, environments, datetime} = selection;\n  const {start, end, period} = datetime;\n\n  const discoverQuery = {\n    id: undefined,\n    version: 2,\n    name: `${t('Release Apdex')}`,\n    fields: [`apdex(${organization.apdexThreshold})`],\n    query: stringifyQueryObject(\n      new QueryResults([`release:${version}`, 'event.type:transaction', 'count():>0'])\n    ),\n    range: period,\n    environment: environments,\n    projects,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n  } as const;\n\n  return EventView.fromSavedQuery(discoverQuery);\n}\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n\nexport default RepositoryStore;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nconst withRepositories = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRepositories(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(RepositoryStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      return repoData.orgSlug === orgSlug\n        ? {...INITIAL_STATE, ...repoData}\n        : {...INITIAL_STATE};\n    },\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    },\n\n    fetchRepositories() {\n      const {api, organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    },\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    },\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    },\n  });\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n","import React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends React.PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = React.createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <React.Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </React.Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel} from 'app/components/panels';\nimport {IconCommit} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withRepositories from 'app/utils/withRepositories';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {ReleaseContext} from '.';\n\n// These props are required when using this HoC\ntype DependentProps = RouteComponentProps<{orgId: string; release: string}, {}>;\n\ntype HoCsProps = {\n  api: Client;\n  organization: Organization;\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  releaseRepos: Repository[];\n  isLoading: boolean;\n  activeReleaseRepo?: Repository;\n};\n\nconst withReleaseRepos = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  withApi(\n    withOrganization(\n      withRepositories(\n        class extends React.Component<P & HoCsProps, State> {\n          static displayName = `withReleaseRepos(${getDisplayName(WrappedComponent)})`;\n\n          state: State = {\n            releaseRepos: [],\n            isLoading: true,\n          };\n\n          componentDidMount() {\n            this.fetchReleaseRepos();\n          }\n\n          UNSAFE_componentWillReceiveProps(nextProps: P & HoCsProps) {\n            this.setActiveReleaseRepo(nextProps);\n          }\n\n          componentDidUpdate(prevProps: P & HoCsProps, prevState: State) {\n            if (!!prevProps.repositoriesLoading && !this.props.repositoriesLoading) {\n              this.fetchReleaseRepos();\n              return;\n            }\n\n            if (prevState.releaseRepos.length !== this.state.releaseRepos.length) {\n              this.setActiveReleaseRepo(this.props);\n            }\n          }\n\n          static contextType = ReleaseContext;\n\n          setActiveReleaseRepo(props: P & HoCsProps) {\n            const {releaseRepos, activeReleaseRepo} = this.state;\n\n            if (!releaseRepos.length) {\n              return;\n            }\n\n            const activeCommitRepo = props.location.query?.activeRepo;\n\n            if (!activeCommitRepo) {\n              this.setState({\n                activeReleaseRepo: releaseRepos[0] ?? null,\n              });\n              return;\n            }\n\n            if (activeCommitRepo === activeReleaseRepo?.name) {\n              return;\n            }\n\n            const matchedRepository = releaseRepos.find(\n              commitRepo => commitRepo.name === activeCommitRepo\n            );\n\n            if (matchedRepository) {\n              this.setState({\n                activeReleaseRepo: matchedRepository,\n              });\n              return;\n            }\n\n            addErrorMessage(t('The repository you were looking for was not found.'));\n          }\n\n          async fetchReleaseRepos() {\n            const {params, api, repositories, repositoriesLoading} = this.props;\n\n            if (repositoriesLoading === undefined || repositoriesLoading === true) {\n              return;\n            }\n\n            if (!repositories?.length) {\n              this.setState({isLoading: false});\n              return;\n            }\n\n            const {release, orgId} = params;\n            const {project} = this.context;\n\n            this.setState({isLoading: true});\n\n            try {\n              const releaseRepos = await api.requestPromise(\n                `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n                  release\n                )}/repositories/`\n              );\n              this.setState({releaseRepos, isLoading: false});\n            } catch (error) {\n              Sentry.captureException(error);\n              addErrorMessage(\n                t(\n                  'An error occured while trying to fetch the repositories of the release: %s',\n                  release\n                )\n              );\n            }\n          }\n\n          render() {\n            const {isLoading, activeReleaseRepo, releaseRepos} = this.state;\n            const {\n              repositoriesLoading,\n              repositories,\n              params,\n              router,\n              location,\n              organization,\n            } = this.props;\n\n            if (isLoading || repositoriesLoading) {\n              return <LoadingIndicator />;\n            }\n\n            const noRepositoryOrgRelatedFound = !repositories?.length;\n\n            if (noRepositoryOrgRelatedFound) {\n              const {orgId} = params;\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n                        )}\n                        action={\n                          <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n                            {t('Connect a repository')}\n                          </Button>\n                        }\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            const noReleaseReposFound = !releaseRepos.length;\n\n            if (noReleaseReposFound) {\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'No commits associated with this release have been found.'\n                        )}\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            if (activeReleaseRepo === undefined) {\n              return <LoadingIndicator />;\n            }\n\n            const {release} = params;\n            const orgSlug = organization.slug;\n\n            return (\n              <WrappedComponent\n                {...(this.props as P)} // this is just to satisfy the compiler\n                orgSlug={orgSlug}\n                projectSlug={this.context.project.slug}\n                release={release}\n                router={router}\n                location={location}\n                releaseRepos={releaseRepos}\n                activeReleaseRepo={activeReleaseRepo}\n              />\n            );\n          }\n        }\n      )\n    )\n  );\n\nexport default withReleaseRepos;\n","import React from 'react';\n\nimport {IconFile} from 'app/icons';\nimport {fileExtensionToPlatform, getFileExtension} from 'app/utils/fileExtension';\nimport theme from 'app/utils/theme';\n\ntype Props = {\n  fileName: string;\n  size?: string;\n  className?: string;\n};\n\nconst FileIcon = ({fileName, size: providedSize = 'sm', className}: Props) => {\n  const fileExtension = getFileExtension(fileName);\n  const iconName = fileExtension ? fileExtensionToPlatform(fileExtension) : null;\n  const size = theme.iconSizes[providedSize] ?? providedSize;\n\n  if (!iconName) {\n    return <IconFile size={size} className={className} />;\n  }\n\n  return (\n    <img\n      src={require(`platformicons/svg/${iconName}.svg`)}\n      width={size}\n      height={size}\n      className={className}\n    />\n  );\n};\n\nexport default FileIcon;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\ntype ListGroupProps = {\n  striped?: boolean;\n};\n\ntype ListGroupItemProps = {\n  centered?: boolean;\n};\n\nconst ListGroupItem = styled('li')<ListGroupItemProps>`\n  position: relative;\n  display: block;\n  min-height: 36px;\n  border: 1px solid ${p => p.theme.border};\n\n  padding: ${space(0.5)} ${space(1.5)};\n\n  margin-bottom: -1px;\n  ${p => (p.centered ? 'text-align: center;' : '')}\n\n  &:first-child {\n    border-top-left-radius: ${p => p.theme.borderRadius};\n    border-top-right-radius: ${p => p.theme.borderRadius};\n  }\n  &:last-child {\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ListGroup = styled('ul')<ListGroupProps>`\n  box-shadow: 0 1px 0px rgba(0, 0, 0, 0.03);\n  background: ${p => p.theme.background};\n  padding: 0;\n  margin: 0;\n\n  ${p =>\n    p.striped\n      ? `\n    & > li:nth-child(odd) {\n      background: ${p.theme.backgroundSecondary};\n    }\n  `\n      : ''}\n`;\n\nexport {ListGroup, ListGroupItem};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AvatarList from 'app/components/avatar/avatarList';\nimport FileIcon from 'app/components/fileIcon';\nimport {ListGroupItem} from 'app/components/listGroup';\nimport TextOverflow from 'app/components/textOverflow';\nimport space from 'app/styles/space';\nimport {AvatarUser, CommitAuthor} from 'app/types';\n\ntype Props = {\n  filename: string;\n  authors: CommitAuthor[];\n  className?: string;\n};\n\nconst FileChange = ({filename, authors, className}: Props) => (\n  <FileItem className={className}>\n    <Filename>\n      <StyledFileIcon fileName={filename} />\n      <TextOverflow>{filename}</TextOverflow>\n    </Filename>\n    <div>\n      <AvatarList users={authors as AvatarUser[]} avatarSize={25} typeMembers=\"authors\" />\n    </div>\n  </FileItem>\n);\n\nconst FileItem = styled(ListGroupItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Filename = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  display: grid;\n  grid-gap: ${space(1)};\n  margin-right: ${space(3)};\n  align-items: center;\n  grid-template-columns: max-content 1fr;\n`;\n\nconst StyledFileIcon = styled(FileIcon)`\n  color: ${p => p.theme.gray200};\n  border-radius: 3px;\n`;\n\nexport default FileChange;\n","import React from 'react';\nimport {InjectedRouter, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport FileChange from 'app/components/fileChange';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tn} from 'app/locale';\nimport {CommitFile, Organization, Project, Repository} from 'app/types';\nimport {formatVersion} from 'app/utils/formatters';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\n\nimport EmptyState from './emptyState';\nimport RepositorySwitcher from './repositorySwitcher';\nimport {getFilesByRepository, getQuery, getReposToRender} from './utils';\nimport withReleaseRepos from './withReleaseRepos';\n\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  location: Location;\n  router: InjectedRouter;\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n  release: string;\n  releaseRepos: Repository[];\n  activeReleaseRepo?: Repository;\n} & AsyncView['props'];\n\ntype State = {\n  fileList: CommitFile[];\n} & AsyncView['state'];\n\nclass FilesChanged extends AsyncView<Props, State> {\n  getTitle() {\n    const {params, projectSlug} = this.props;\n    const {orgId} = params;\n\n    return routeTitleGen(\n      t('Files Changed - Release %s', formatVersion(params.release)),\n      orgId,\n      false,\n      projectSlug\n    );\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      fileList: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {activeReleaseRepo: activeRepository, location, release, orgSlug} = this.props;\n\n    const query = getQuery({location, activeRepository});\n\n    return [\n      [\n        'fileList',\n        `/organizations/${orgSlug}/releases/${encodeURIComponent(release)}/commitfiles/`,\n        {query},\n      ],\n    ];\n  }\n\n  renderContent() {\n    const {fileList, fileListPageLinks} = this.state;\n    const {activeReleaseRepo} = this.props;\n\n    if (!fileList.length) {\n      return (\n        <EmptyState>\n          {!activeReleaseRepo\n            ? t('There are no changed files associated with this release.')\n            : t(\n                'There are no changed files associated with this release in the %s repository.',\n                activeReleaseRepo.name\n              )}\n        </EmptyState>\n      );\n    }\n\n    const filesByRepository = getFilesByRepository(fileList);\n    const reposToRender = getReposToRender(Object.keys(filesByRepository));\n\n    return (\n      <React.Fragment>\n        {reposToRender.map(repoName => {\n          const repoData = filesByRepository[repoName];\n          const files = Object.keys(repoData);\n          const fileCount = files.length;\n          return (\n            <Panel key={repoName}>\n              <PanelHeader>\n                <span>{repoName}</span>\n                <span>{tn('%s file changed', '%s files changed', fileCount)}</span>\n              </PanelHeader>\n              <PanelBody>\n                {files.map(filename => {\n                  const {authors} = repoData[filename];\n                  return (\n                    <StyledFileChange\n                      key={filename}\n                      filename={filename}\n                      authors={Object.values(authors)}\n                    />\n                  );\n                })}\n              </PanelBody>\n            </Panel>\n          );\n        })}\n        <Pagination pageLinks={fileListPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {activeReleaseRepo, releaseRepos, router, location} = this.props;\n    return (\n      <React.Fragment>\n        {releaseRepos.length > 1 && (\n          <RepositorySwitcher\n            repositories={releaseRepos}\n            activeRepository={activeReleaseRepo}\n            location={location}\n            router={router}\n          />\n        )}\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n\n  renderComponent() {\n    return (\n      <Body>\n        <Main fullWidth>{super.renderComponent()}</Main>\n      </Body>\n    );\n  }\n}\n\nexport default withReleaseRepos(FilesChanged);\n\nconst StyledFileChange = styled(FileChange)`\n  border-radius: 0;\n  border-left: none;\n  border-right: none;\n  border-top: none;\n  :last-child {\n    border: none;\n    border-radius: 0;\n  }\n`;\n"],"sourceRoot":""}