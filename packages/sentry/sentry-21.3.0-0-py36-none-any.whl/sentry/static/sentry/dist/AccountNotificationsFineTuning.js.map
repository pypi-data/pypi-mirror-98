{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","route","fields","subscribeByDefault","name","type","label","t","help","workflowNotifications","choices","weeklyReports","disabled","deployNotifications","personalActivityNotifications","selfAssignOnResolve","formGroups","ACCOUNT_NOTIFICATION_FIELDS","alerts","description","defaultValue","defaultFieldName","workflow","deploy","reports","email","PanelBodyLineItem","PanelBody","innerBorder","isGroupedByProject","indexOf","AccountNotificationsByProject","projects","field","projectsByOrg","reduce","acc","project","orgSlug","organization","slug","hasOwnProperty","push","groupByOrganization","fieldConfig","data","Object","values","map","org","id","Fragment","projectFields","key","f","AccountNotificationsByOrganization","organizations","AccountNotificationsByOrganizationContainer","withOrganizations","AccountNotificationFineTuning","fineTuneType","params","endpoints","state","notifications","fineTuneData","projectsPageLinks","isProject","getEndpoints","stateKey","url","hasProjects","length","emailChoices","saveOnBlur","apiMethod","apiEndpoint","initialData","hasButtons","Heading","renderSearchInput","placeholder","pageLinks","emails","filter","isVerified","sort","a","b","isPrimary"],"mappings":"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","file":"AccountNotificationsFineTuning.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import {t} from 'app/locale';\nimport {Field, JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: t(\n      'Enable this to receive notifications for Alerts sent to your teams. You will always receive alerts configured to be sent directly to you.'\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n\nconst formGroups: JsonFormObject[] = [\n  {\n    title: t('Alerts'),\n    fields: [fields.subscribeByDefault],\n  },\n\n  {\n    title: t('Workflow Notifications'),\n    fields: [fields.workflowNotifications],\n  },\n\n  {\n    title: t('Email Routing'),\n    fields: [],\n  },\n\n  {\n    title: t('Weekly Reports'),\n    fields: [],\n  },\n\n  {\n    title: t('Deploy Notifications'),\n    fields: [fields.deployNotifications],\n  },\n\n  {\n    title: t('My Activity'),\n    fields: [fields.personalActivityNotifications, fields.selfAssignOnResolve],\n  },\n];\n\nexport default formGroups;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport {Organization, Project, UserEmail} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype FineTuneField = {\n  title: string;\n  description: string;\n  type: 'select';\n  choices?: any;\n  defaultValue?: number;\n  defaultFieldName?: string;\n};\n\nconst ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t('Control alerts that you receive per project.'),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [0, t('Always')],\n      [1, t('Only on issues I subscribe to')],\n      [2, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [2, t('Always')],\n      [3, t('Only on deploys with my commits')],\n      [4, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: 1,\n    choices: [\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\n// Which fine tuning parts are grouped by project\nconst isGroupedByProject = (type: string) =>\n  ['alerts', 'workflow', 'email'].indexOf(type) > -1;\n\nfunction groupByOrganization(projects: Project[]) {\n  return projects.reduce<\n    Record<string, {organization: Organization; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n}\n\ntype ANBPProps = {\n  projects: Project[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <React.Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                choices={f.choices}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </React.Fragment>\n  );\n};\n\ntype ANBOProps = {\n  organizations: Organization[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <React.Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            choices={f.choices}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] & RouteComponentProps<{fineTuneType: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  projects: Project[] | null;\n  notifications: Record<string, any> | null;\n  fineTuneData: Record<string, any> | null;\n};\n\nexport default class AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          } else if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {fineTuneType} = this.props.params;\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.emailChoices.map(({email}) => [email, email]);\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n"],"sourceRoot":""}