{"version":3,"sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/reprocessedBox.tsx","webpack:///./app/components/pullRequestLink.tsx","webpack:///./app/views/organizationGroupDetails/groupActivityItem.tsx","webpack:///./app/views/organizationGroupDetails/groupActivity.tsx"],"names":["SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","ReprocessedBox","state","isBannerHidden","localStorage","getItem","getBannerUniqueId","handleBannerDismiss","setItem","setState","this","props","reprocessActivity","orgSlug","groupCount","groupId","data","eventCount","oldGroupId","newGroupId","reprocessedEventsRoute","tct","link","to","tn","Number","priority","StyledBannerSummary","color","isCircled","renderMessage","StyledIconClose","aria-label","onClick","React","Component","BannerSummary","space","IconClose","PullRequestLink","pullRequest","displayId","name","title","externalUrl","repo","split","pop","renderIcon","GroupActivityItem","activity","projectId","author","issuesLink","Fragment","type","GroupActivityType","NOTE","SET_RESOLVED","SET_RESOLVED_BY_AGE","SET_RESOLVED_IN_RELEASE","version","tooltipRawVersion","SET_RESOLVED_IN_COMMIT","commit","SET_RESOLVED_IN_PULL_REQUEST","SET_UNRESOLVED","SET_IGNORED","ignoreDuration","duration","seconds","ignoreCount","ignoreWindow","count","ignoreUserCount","ignoreUserWindow","getIgnoredMessage","SET_PUBLIC","SET_PRIVATE","SET_REGRESSION","CREATE_ISSUE","location","UNMERGE_SOURCE","destination","fingerprints","length","UNMERGE_DESTINATION","source","FIRST_SEEN","ASSIGNED","assignee","assigneeType","team","TeamStore","getById","slug","user","MemberListStore","email","getAssignedMessage","UNASSIGNED","MERGE","issues","REPROCESS","MARK_REVIEWED","renderContent","GroupActivity","createBusy","error","errorJSON","inputId","uniqueId","handleNoteDelete","a","modelId","oldText","text","api","group","addLoadingMessage","deleteNote","clearIndicators","addErrorMessage","handleNoteCreate","note","createNote","responseJSON","DEFAULT_ERROR_JSON","handleNoteUpdate","updateNote","organization","activities","mostRecentActivity","getGroupMostRecentActivity","reprocessingStatus","getGroupReprocessingStatus","me","ConfigStore","get","projectSlugs","project","noteProps","minHeight","placeholder","ReprocessingStatus","REPROCESSED_AND_HASNT_EVENT","REPROCESSED_AND_HAS_EVENT","StyledReprocessedBox","key","storageKey","itemKey","onCreate","busy","map","item","authorName","mini","showTime","dateCreated","onDelete","onUpdate","features","date","header","params","orgId","withApi","withOrganization"],"mappings":"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","file":"GroupActivity.js","sourcesContent":["import React from 'react';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport {getShortCommitHash} from 'app/utils';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {BannerContainer, BannerSummary} from 'app/components/events/styles';\nimport Link from 'app/components/links/link';\nimport {IconCheckmark, IconClose} from 'app/icons';\nimport {t, tct, tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GroupActivityReprocess, Organization} from 'app/types';\nimport localStorage from 'app/utils/localStorage';\n\ntype Props = {\n  reprocessActivity: GroupActivityReprocess;\n  groupCount: number;\n  groupId: string;\n  orgSlug: Organization['slug'];\n  className?: string;\n};\n\ntype State = {\n  isBannerHidden: boolean;\n};\n\nclass ReprocessedBox extends React.Component<Props, State> {\n  state: State = {\n    isBannerHidden: localStorage.getItem(this.getBannerUniqueId()) === 'true',\n  };\n\n  getBannerUniqueId() {\n    const {reprocessActivity} = this.props;\n    const {id} = reprocessActivity;\n\n    return `reprocessed-activity-${id}-banner-dismissed`;\n  }\n\n  handleBannerDismiss = () => {\n    localStorage.setItem(this.getBannerUniqueId(), 'true');\n    this.setState({isBannerHidden: true});\n  };\n\n  renderMessage() {\n    const {orgSlug, reprocessActivity, groupCount, groupId} = this.props;\n    const {data} = reprocessActivity;\n    const {eventCount, oldGroupId, newGroupId} = data;\n\n    const reprocessedEventsRoute = `/organizations/${orgSlug}/issues/?query=reprocessing.original_issue_id:${oldGroupId}`;\n\n    if (groupCount === 0) {\n      return tct('All events in this issue were moved during reprocessing. [link]', {\n        link: (\n          <Link to={reprocessedEventsRoute}>\n            {tn('See %s new event', 'See %s new events', eventCount)}\n          </Link>\n        ),\n      });\n    }\n\n    return tct('Events in this issue were successfully reprocessed. [link]', {\n      link: (\n        <Link to={reprocessedEventsRoute}>\n          {newGroupId === Number(groupId)\n            ? tn('See %s reprocessed event', 'See %s reprocessed events', eventCount)\n            : tn('See %s new event', 'See %s new events', eventCount)}\n        </Link>\n      ),\n    });\n  }\n\n  render() {\n    const {isBannerHidden} = this.state;\n\n    if (isBannerHidden) {\n      return null;\n    }\n\n    const {className} = this.props;\n\n    return (\n      <BannerContainer priority=\"success\" className={className}>\n        <StyledBannerSummary>\n          <IconCheckmark color=\"green300\" isCircled />\n          <span>{this.renderMessage()}</span>\n          <StyledIconClose\n            color=\"green300\"\n            aria-label={t('Dismiss')}\n            isCircled\n            onClick={this.handleBannerDismiss}\n          />\n        </StyledBannerSummary>\n      </BannerContainer>\n    );\n  }\n}\n\nexport default ReprocessedBox;\n\nconst StyledBannerSummary = styled(BannerSummary)`\n  & > svg:last-child {\n    margin-right: 0;\n    margin-left: ${space(1)};\n  }\n`;\n\nconst StyledIconClose = styled(IconClose)`\n  cursor: pointer;\n`;\n","import React from 'react';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab} from 'app/icons';\nimport {PullRequest, Repository} from 'app/types';\n\nfunction renderIcon(repo: Repository) {\n  if (!repo.provider) {\n    return null;\n  }\n\n  const {id} = repo.provider;\n  const providerId = id.includes(':') ? id.split(':').pop() : id;\n\n  switch (providerId) {\n    case 'github':\n      return <IconGithub size=\"xs\" />;\n    case 'gitlab':\n      return <IconGitlab size=\"xs\" />;\n    case 'bitbucket':\n      return <IconBitbucket size=\"xs\" />;\n    default:\n      return null;\n  }\n}\n\ntype Props = {\n  pullRequest: PullRequest;\n  repository: Repository;\n  inline?: boolean;\n};\n\nconst PullRequestLink = ({pullRequest, repository, inline}: Props) => {\n  const displayId = `${repository.name} #${pullRequest.id}: ${pullRequest.title}`;\n\n  return pullRequest.externalUrl ? (\n    <ExternalLink\n      className={inline ? 'inline-commit' : 'btn btn-default btn-sm'}\n      href={pullRequest.externalUrl}\n    >\n      {renderIcon(repository)}\n      {inline ? '' : ' '}\n      {displayId}\n    </ExternalLink>\n  ) : (\n    <span>{displayId}</span>\n  );\n};\n\nexport default PullRequestLink;\n","import React from 'react';\n\nimport CommitLink from 'app/components/commitLink';\nimport Duration from 'app/components/duration';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport PullRequestLink from 'app/components/pullRequestLink';\nimport Version from 'app/components/version';\nimport {t, tct, tn} from 'app/locale';\nimport MemberListStore from 'app/stores/memberListStore';\nimport TeamStore from 'app/stores/teamStore';\nimport {\n  GroupActivity,\n  GroupActivityAssigned,\n  GroupActivitySetIgnored,\n  GroupActivityType,\n  Organization,\n  Project,\n  User,\n} from 'app/types';\n\ntype Props = {\n  author: React.ReactNode;\n  activity: GroupActivity;\n  orgSlug: Organization['slug'];\n  projectId: Project['id'];\n};\n\nfunction GroupActivityItem({activity, orgSlug, projectId, author}: Props) {\n  const issuesLink = `/organizations/${orgSlug}/issues/`;\n\n  function getIgnoredMessage(data: GroupActivitySetIgnored['data']) {\n    if (data.ignoreDuration) {\n      return tct('[author] ignored this issue for [duration]', {\n        author,\n        duration: <Duration seconds={data.ignoreDuration * 60} />,\n      });\n    }\n\n    if (data.ignoreCount && data.ignoreWindow) {\n      return tct(\n        '[author] ignored this issue until it happens [count] time(s) in [duration]',\n        {\n          author,\n          count: data.ignoreCount,\n          duration: <Duration seconds={data.ignoreWindow * 60} />,\n        }\n      );\n    }\n\n    if (data.ignoreCount) {\n      return tct('[author] ignored this issue until it happens [count] time(s)', {\n        author,\n        count: data.ignoreCount,\n      });\n    }\n\n    if (data.ignoreUserCount && data.ignoreUserWindow) {\n      return tct(\n        '[author] ignored this issue until it affects [count] user(s) in [duration]',\n        {\n          author,\n          count: data.ignoreUserCount,\n          duration: <Duration seconds={data.ignoreUserWindow * 60} />,\n        }\n      );\n    }\n\n    if (data.ignoreUserCount) {\n      return tct('[author] ignored this issue until it affects [count] user(s)', {\n        author,\n        count: data.ignoreUserCount,\n      });\n    }\n\n    return tct('[author] ignored this issue', {author});\n  }\n\n  function getAssignedMessage(data: GroupActivityAssigned['data']) {\n    let assignee: string | User | undefined = undefined;\n\n    if (data.assigneeType === 'team') {\n      const team = TeamStore.getById(data.assignee);\n      assignee = team ? team.slug : '<unknown-team>';\n\n      return tct('[author] assigned this issue to #[assignee]', {\n        author,\n        assignee,\n      });\n    }\n\n    if (activity.user && activity.assignee === activity.user.id) {\n      return tct('[author] assigned this issue to themselves', {author});\n    }\n\n    assignee = MemberListStore.getById(data.assignee);\n\n    if (typeof assignee === 'object' && assignee?.email) {\n      return tct('[author] assigned this issue to [assignee]', {\n        author,\n        assignee: assignee.email,\n      });\n    }\n\n    return tct('[author] assigned this issue to an unknown user', {author});\n  }\n\n  function renderContent() {\n    switch (activity.type) {\n      case GroupActivityType.NOTE:\n        return tct('[author] left a comment', {author});\n      case GroupActivityType.SET_RESOLVED:\n        return tct('[author] marked this issue as resolved', {author});\n      case GroupActivityType.SET_RESOLVED_BY_AGE:\n        return tct('[author] marked this issue as resolved due to inactivity', {\n          author,\n        });\n      case GroupActivityType.SET_RESOLVED_IN_RELEASE:\n        return activity.data.version\n          ? tct('[author] marked this issue as resolved in [version]', {\n              author,\n              version: (\n                <Version\n                  version={activity.data.version}\n                  projectId={projectId}\n                  tooltipRawVersion\n                />\n              ),\n            })\n          : tct('[author] marked this issue as resolved in the upcoming release', {\n              author,\n            });\n      case GroupActivityType.SET_RESOLVED_IN_COMMIT:\n        return tct('[author] marked this issue as resolved in [version]', {\n          author,\n          version: (\n            <CommitLink\n              inline\n              commitId={activity.data.commit.id}\n              repository={activity.data.commit.repository}\n            />\n          ),\n        });\n      case GroupActivityType.SET_RESOLVED_IN_PULL_REQUEST: {\n        const {data} = activity;\n        const {pullRequest} = data;\n        return tct('[author] marked this issue as resolved in [version]', {\n          author,\n          version: (\n            <PullRequestLink\n              inline\n              pullRequest={pullRequest}\n              repository={pullRequest.repository}\n            />\n          ),\n        });\n      }\n      case GroupActivityType.SET_UNRESOLVED:\n        return tct('[author] marked this issue as unresolved', {author});\n      case GroupActivityType.SET_IGNORED: {\n        const {data} = activity;\n        return getIgnoredMessage(data);\n      }\n      case GroupActivityType.SET_PUBLIC:\n        return tct('[author] made this issue public', {author});\n      case GroupActivityType.SET_PRIVATE:\n        return tct('[author] made this issue private', {author});\n      case GroupActivityType.SET_REGRESSION: {\n        const {data} = activity;\n        return data.version\n          ? tct('[author] marked this issue as a regression in [version]', {\n              author,\n              version: (\n                <Version version={data.version} projectId={projectId} tooltipRawVersion />\n              ),\n            })\n          : tct('[author] marked this issue as a regression', {author});\n      }\n      case GroupActivityType.CREATE_ISSUE: {\n        const {data} = activity;\n        return tct('[author] created an issue on [provider] titled [title]', {\n          author,\n          provider: data.provider,\n          title: <ExternalLink href={data.location}>{data.title}</ExternalLink>,\n        });\n      }\n      case GroupActivityType.UNMERGE_SOURCE: {\n        const {data} = activity;\n        const {destination, fingerprints} = data;\n        return tn(\n          '%2$s migrated %1$s fingerprint to %3$s',\n          '%2$s migrated %1$s fingerprints to %3$s',\n          fingerprints.length,\n          author,\n          destination ? (\n            <Link to={`${issuesLink}${destination.id}`}>{destination.shortId}</Link>\n          ) : (\n            t('a group')\n          )\n        );\n      }\n      case GroupActivityType.UNMERGE_DESTINATION: {\n        const {data} = activity;\n        const {source, fingerprints} = data;\n        return tn(\n          '%2$s migrated %1$s fingerprint from %3$s',\n          '%2$s migrated %1$s fingerprints from %3$s',\n          fingerprints.length,\n          author,\n          source ? (\n            <Link to={`${issuesLink}${source.id}`}>{source.shortId}</Link>\n          ) : (\n            t('a group')\n          )\n        );\n      }\n      case GroupActivityType.FIRST_SEEN:\n        return tct('[author] first saw this issue', {author});\n      case GroupActivityType.ASSIGNED: {\n        const {data} = activity;\n        return getAssignedMessage(data);\n      }\n      case GroupActivityType.UNASSIGNED:\n        return tct('[author] unassigned this issue', {author});\n      case GroupActivityType.MERGE:\n        return tn(\n          '%2$s merged %1$s issue into this issue',\n          '%2$s merged %1$s issues into this issue',\n          activity.data.issues.length,\n          author\n        );\n      case GroupActivityType.REPROCESS: {\n        const {data} = activity;\n        const {oldGroupId, eventCount} = data;\n\n        return tct('[author] reprocessed the events in this issue. [new-events]', {\n          author,\n          ['new-events']: (\n            <Link\n              to={`/organizations/${orgSlug}/issues/?query=reprocessing.original_issue_id:${oldGroupId}`}\n            >\n              {tn('See %s new event', 'See %s new events', eventCount)}\n            </Link>\n          ),\n        });\n      }\n      case GroupActivityType.MARK_REVIEWED: {\n        return tct('[author] marked this issue as reviewed', {\n          author,\n        });\n      }\n      default:\n        return ''; // should never hit (?)\n    }\n  }\n\n  return <React.Fragment>{renderContent()}</React.Fragment>;\n}\n\nexport default GroupActivityItem;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {createNote, deleteNote, updateNote} from 'app/actionCreators/group';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport ActivityAuthor from 'app/components/activity/author';\nimport ActivityItem from 'app/components/activity/item';\nimport Note from 'app/components/activity/note';\nimport NoteInputWithStorage from 'app/components/activity/note/inputWithStorage';\nimport {CreateError} from 'app/components/activity/note/types';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport ReprocessedBox from 'app/components/reprocessedBox';\nimport {DEFAULT_ERROR_JSON} from 'app/constants';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport {\n  Group,\n  GroupActivityReprocess,\n  GroupActivityType,\n  Organization,\n  User,\n} from 'app/types';\nimport {uniqueId} from 'app/utils/guid';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupActivityItem from './groupActivityItem';\nimport {\n  getGroupMostRecentActivity,\n  getGroupReprocessingStatus,\n  ReprocessingStatus,\n} from './utils';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  group: Group;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = {\n  createBusy: boolean;\n  error: boolean;\n  errorJSON: CreateError | null;\n  inputId: string;\n};\n\nclass GroupActivity extends React.Component<Props, State> {\n  // TODO(dcramer): only re-render on group/activity change\n  state: State = {\n    createBusy: false,\n    error: false,\n    errorJSON: null,\n    inputId: uniqueId(),\n  };\n\n  handleNoteDelete = async ({modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Removing comment...'));\n\n    try {\n      await deleteNote(api, group, modelId, oldText);\n      clearIndicators();\n    } catch (_err) {\n      addErrorMessage(t('Failed to delete comment'));\n    }\n  };\n\n  /**\n   * Note: This is nearly the same logic as `app/views/alerts/details/activity`\n   * This can be abstracted a bit if we create more objects that can have activities\n   */\n  handleNoteCreate = async note => {\n    const {api, group} = this.props;\n\n    this.setState({\n      createBusy: true,\n    });\n\n    addLoadingMessage(t('Posting comment...'));\n\n    try {\n      await createNote(api, group, note);\n\n      this.setState({\n        createBusy: false,\n\n        // This is used as a `key` to Note Input so that after successful post\n        // we reset the value of the input\n        inputId: uniqueId(),\n      });\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        createBusy: false,\n        error: true,\n        errorJSON: error.responseJSON || DEFAULT_ERROR_JSON,\n      });\n      addErrorMessage(t('Unable to post comment'));\n    }\n  };\n\n  handleNoteUpdate = async (note, {modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Updating comment...'));\n\n    try {\n      await updateNote(api, group, note, modelId, oldText);\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        error: true,\n        errorJSON: error.responseJSON || DEFAULT_ERROR_JSON,\n      });\n      addErrorMessage(t('Unable to update comment'));\n    }\n  };\n\n  render() {\n    const {group, organization} = this.props;\n    const {activity: activities, count, id: groupId} = group;\n    const groupCount = Number(count);\n    const mostRecentActivity = getGroupMostRecentActivity(activities);\n    const reprocessingStatus = getGroupReprocessingStatus(group, mostRecentActivity);\n\n    const me = ConfigStore.get('user');\n    const projectSlugs = group && group.project ? [group.project.slug] : [];\n    const noteProps = {\n      minHeight: 140,\n      group,\n      projectSlugs,\n      placeholder: t(\n        'Add details or updates to this event. \\nTag users with @, or teams with #'\n      ),\n    };\n\n    return (\n      <React.Fragment>\n        {(reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT ||\n          reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HAS_EVENT) && (\n          <StyledReprocessedBox\n            reprocessActivity={mostRecentActivity as GroupActivityReprocess}\n            groupCount={groupCount}\n            orgSlug={organization.slug}\n            groupId={groupId}\n          />\n        )}\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <div>\n              <ActivityItem author={{type: 'user', user: me}}>\n                {() => (\n                  <NoteInputWithStorage\n                    key={this.state.inputId}\n                    storageKey=\"groupinput:latest\"\n                    itemKey={group.id}\n                    onCreate={this.handleNoteCreate}\n                    busy={this.state.createBusy}\n                    error={this.state.error}\n                    errorJSON={this.state.errorJSON}\n                    {...noteProps}\n                  />\n                )}\n              </ActivityItem>\n\n              {group.activity.map(item => {\n                const authorName = item.user ? item.user.name : 'Sentry';\n\n                if (item.type === GroupActivityType.NOTE) {\n                  return (\n                    <ErrorBoundary mini key={`note-${item.id}`}>\n                      <Note\n                        showTime={false}\n                        text={item.data.text}\n                        modelId={item.id}\n                        user={item.user as User}\n                        dateCreated={item.dateCreated}\n                        authorName={authorName}\n                        onDelete={this.handleNoteDelete}\n                        onUpdate={this.handleNoteUpdate}\n                        {...noteProps}\n                      />\n                    </ErrorBoundary>\n                  );\n                }\n\n                if (\n                  item.type === GroupActivityType.MARK_REVIEWED &&\n                  !organization?.features?.includes('inbox')\n                ) {\n                  return null;\n                }\n\n                return (\n                  <ErrorBoundary mini key={`item-${item.id}`}>\n                    <ActivityItem\n                      author={{\n                        type: item.user ? 'user' : 'system',\n                        user: item.user ?? undefined,\n                      }}\n                      date={item.dateCreated}\n                      header={\n                        <GroupActivityItem\n                          author={<ActivityAuthor>{authorName}</ActivityAuthor>}\n                          activity={item}\n                          orgSlug={this.props.params.orgId}\n                          projectId={group.project.id}\n                        />\n                      }\n                    />\n                  </ErrorBoundary>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport {GroupActivity};\nexport default withApi(withOrganization(GroupActivity));\n\nconst StyledReprocessedBox = styled(ReprocessedBox)`\n  margin: -${space(3)} -${space(4)} ${space(4)} -${space(4)};\n  z-index: 1;\n`;\n"],"sourceRoot":""}