"""
This module contains helper functions to create dictionaries with
specific keys.

It is auto-generated by the ``generate_types.py`` script.
Do not edit it directly.
Instead add new types to ``generate_types.json``.
"""
# AUTO-GENERATED FILE! DO NOT EDIT!!!
# EDIT generate_types.json INSTEAD!!!


def ADE20kData(
        key,
        image,
        label,
        label_image,
        parts_images
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label': label,
        'label_image': label_image,
        'parts_images': parts_images
    }
    """
    return {
        'key': key,
        'image': image,
        'label': label,
        'label_image': label_image,
        'parts_images': parts_images
    }


def ANP460Data(
        key,
        image,
        experiments,
        anp,
        type
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'experiments': experiments,
        'anp': anp,
        'type': type
    }
    """
    return {
        'key': key,
        'image': image,
        'experiments': experiments,
        'anp': anp,
        'type': type
    }


def ANP460Experiment(
        locations,
        map,
        answer,
        duration
):
    """
Returns a dictionary::

    {
        'locations': locations,
        'map': map,
        'answer': answer,
        'duration': duration
    }
    """
    return {
        'locations': locations,
        'map': map,
        'answer': answer,
        'duration': duration
    }


def ImageClassificationData(
        key,
        image,
        label
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label': label
    }
    """
    return {
        'key': key,
        'image': image,
        'label': label
    }


def ImageCoarseClassificationData(
        key,
        image,
        label,
        coarse_label
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label': label,
        'coarse_label': coarse_label
    }
    """
    return {
        'key': key,
        'image': image,
        'label': label,
        'coarse_label': coarse_label
    }


def ImageData(
        key,
        image
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image
    }
    """
    return {
        'key': key,
        'image': image
    }


def ImageDisparitySegmentationData(
        key,
        image,
        label_image,
        disparity_image
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label_image': label_image,
        'disparity_image': disparity_image
    }
    """
    return {
        'key': key,
        'image': image,
        'label_image': label_image,
        'disparity_image': disparity_image
    }


def ImageInstanceSegmentationData(
        key,
        image,
        label_image,
        instance_image
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label_image': label_image,
        'instance_image': instance_image
    }
    """
    return {
        'key': key,
        'image': image,
        'label_image': label_image,
        'instance_image': instance_image
    }


def ImageSegmentationData(
        key,
        image,
        label_image
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label_image': label_image
    }
    """
    return {
        'key': key,
        'image': image,
        'label_image': label_image
    }


def MaskedImageSegmentationData(
        key,
        image,
        label_image,
        mask
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label_image': label_image,
        'mask': mask
    }
    """
    return {
        'key': key,
        'image': image,
        'label_image': label_image,
        'mask': mask
    }


def Places2017Data(
        key,
        image,
        label,
        label_image,
        instance_image,
        boundary
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'label': label,
        'label_image': label_image,
        'instance_image': instance_image,
        'boundary': boundary
    }
    """
    return {
        'key': key,
        'image': image,
        'label': label,
        'label_image': label_image,
        'instance_image': instance_image,
        'boundary': boundary
    }


def SaliencyData(
        key,
        image,
        experiments
):
    """
Returns a dictionary::

    {
        'key': key,
        'image': image,
        'experiments': experiments
    }
    """
    return {
        'key': key,
        'image': image,
        'experiments': experiments
    }


def SaliencyExperiment(
        locations,
        map
):
    """
Returns a dictionary::

    {
        'locations': locations,
        'map': map
    }
    """
    return {
        'locations': locations,
        'map': map
    }


def SaliencyTimeseriesExperiment(
        locations,
        map,
        timestamps,
        fixations
):
    """
Returns a dictionary::

    {
        'locations': locations,
        'map': map,
        'timestamps': timestamps,
        'fixations': fixations
    }
    """
    return {
        'locations': locations,
        'map': map,
        'timestamps': timestamps,
        'fixations': fixations
    }
