#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.tty',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20210316',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  description =
    'Functions related to terminals.',
  long_description =
    ('Functions related to terminals.\n'    
 '\n'    
 '*Latest release 20210316*:\n'    
 '* ttysize: discard the Popen object earlier.\n'    
 '* ttysize: close Popen.stdout after use. seems to leak.\n'    
 '\n'    
 '## Function `modify_termios(fd=0, set_modes=None, clear_modes=None, '    
 'strict=False)`\n'    
 '\n'    
 'Apply mode changes to a tty.\n'    
 'Return the previous tty modes as from `termios.tcgetattr`\n'    
 'or `None` if the changes could not be applied.\n'    
 'If `strict`, raise an exception instead of returning `None`.\n'    
 '\n'    
 'Parameters:\n'    
 '* `fd`: optional tty file descriptor, default `0`.\n'    
 '* `set_modes`: an optional  mapping of attribute name to new value\n'    
 '  for values to set\n'    
 '* `clear_modes`: an optional  mapping of attribute name to new value\n'    
 '  for values to clear\n'    
 '* `strict`: optional flag, default `False`;\n'    
 '  if true, raise exceptions from failed `tcgetattr` and `tcsetattr` calls\n'    
 '  otherwise issue a warning if the errno is not `ENOTTY` and proceed.\n'    
 '  This aims to provide ease of use in batch mode by default\n'    
 '  while providing a mode to fail overtly if required.\n'    
 '\n'    
 'The attribute names are from\n'    
 '`iflag`, `oflag`, `cflag`, `lflag`, `ispeed`, `ospeed`, `cc`,\n'    
 'corresponding to the list entries defined by the `termios.tcgetattr`\n'    
 'call.\n'    
 '\n'    
 'For `set_modes`, the attributes `ispeed`, `ospeed` and `cc`\n'    
 'are applied directly;\n'    
 'the other attributes are binary ORed into the existing modes.\n'    
 '\n'    
 'For `clear_modes`, the attributes `ispeed`, `ospeed` and `cc`\n'    
 'cannot be cleared;\n'    
 'the other attributes are binary removed from the existing modes.\n'    
 '\n'    
 'For example, to turn off the terminal echo during some operation:\n'    
 '\n'    
 "    old_modes = apply_termios(clear_modes={'lflag': termios.ECHO}):\n"    
 '        ... do something with tty echo disabled ...\n'    
 '    if old_modes:\n'    
 '        termios.tcsetattr(fd, termios.TCSANOW, old_modes)\n'    
 '\n'    
 '## Function `setupterm(*args)`\n'    
 '\n'    
 'Run curses.setupterm, needed to be able to use the status line.\n'    
 'Uses a global flag to avoid doing this twice.\n'    
 '\n'    
 '## Function `stack_termios(fd=0, set_modes=None, clear_modes=None, '    
 'strict=False)`\n'    
 '\n'    
 'Context manager to apply and restore changes to a tty.\n'    
 'Yield the previous tty modes as from `termios.tcgetattr`\n'    
 'or `None` if the changes could not be applied.\n'    
 'If `strict`, raise an exception instead of yielding `None`.\n'    
 '\n'    
 'Parameters:\n'    
 '* `fd`: optional tty file descriptor, default `0`.\n'    
 '* `set_modes`: an optional  mapping of attribute name to new value\n'    
 '  for values to set\n'    
 '* `clear_modes`: an optional  mapping of attribute name to new value\n'    
 '  for values to clear\n'    
 '* `strict`: optional flag, default `False`;\n'    
 '  if true, raise exceptions from failed `tcgetattr` and `tcsetattr` calls\n'    
 '  otherwise issue a warning if the errno is not `ENOTTY` and proceed.\n'    
 '  This aims to provide ease of use in batch mode by default\n'    
 '  while providing a mode to fail overtly if required.\n'    
 '\n'    
 'The attribute names are from\n'    
 '`iflag`, `oflag`, `cflag`, `lflag`, `ispeed`, `ospeed`, `cc`,\n'    
 'corresponding to the list entries defined by the `termios.tcgetattr`\n'    
 'call.\n'    
 '\n'    
 'For `set_modes`, the attributes `ispeed`, `ospeed` and `cc`\n'    
 'are applied directly;\n'    
 'the other attributes are binary ORed into the existing modes.\n'    
 '\n'    
 'For `clear_modes`, the attributes `ispeed`, `ospeed` and `cc`\n'    
 'cannot be cleared;\n'    
 'the other attributes are binary removed from the existing modes.\n'    
 '\n'    
 'For example, to turn off the terminal echo during some operation:\n'    
 '\n'    
 "    with stack_termios(clear_modes={'lflag': termios.ECHO}):\n"    
 '        ... do something with tty echo disabled ...\n'    
 '\n'    
 '## Function `status(msg, *args, **kwargs)`\n'    
 '\n'    
 "Write a message to the terminal's status line.\n"    
 '\n'    
 'Parameters:\n'    
 '* `msg`: message string\n'    
 '* `args`: if not empty, the message is %-formatted with `args`\n'    
 '* `file`: optional keyword argument specifying the output file.\n'    
 '  Default: `sys.stderr`.\n'    
 '\n'    
 'Hack: if there is no status line use the xterm title bar sequence :-(\n'    
 '\n'    
 '## Function `statusline(text, fd=None, reverse=False, xpos=None, '    
 'ypos=None)`\n'    
 '\n'    
 'Update the status line.\n'    
 '\n'    
 '## Function `statusline_bs(text, reverse=False, xpos=None, ypos=None)`\n'    
 '\n'    
 'Return a byte string to update the status line.\n'    
 '\n'    
 '## Function `ttysize(fd)`\n'    
 '\n'    
 'Return a (rows, columns) tuple for the specified file descriptor.\n'    
 '\n'    
 'If the window size cannot be determined, None will be returned\n'    
 'for either or both of rows and columns.\n'    
 '\n'    
 'This function relies on the UNIX `stty` command.\n'    
 '\n'    
 '## Class `WinSize(builtins.tuple)`\n'    
 '\n'    
 'WinSize(rows, columns)\n'    
 '\n'    
 '### Property `WinSize.columns`\n'    
 '\n'    
 'Alias for field number 1\n'    
 '\n'    
 '### Property `WinSize.rows`\n'    
 '\n'    
 'Alias for field number 0\n'    
 '\n'    
 '# Release Log\n'    
 '\n'    
 '\n'    
 '\n'    
 '*Release 20210316*:\n'    
 '* ttysize: discard the Popen object earlier.\n'    
 '* ttysize: close Popen.stdout after use. seems to leak.\n'    
 '\n'    
 '*Release 20201102*:\n'    
 'New modify_termios and stack_termios to apply (and restore) termios modes.\n'    
 '\n'    
 '*Release 20200521*:\n'    
 '* New status() function dragged in from cs.logutils, which uses cs.upd for '    
 'status() -- needs some refactoring to match with the other functions in '    
 'cs.tty -- text vs bytes, stdout vs stderr, etc.\n'    
 '* Get warning() from cs.gimmicks.\n'    
 '\n'    
 '*Release 20190101*:\n'    
 'Small bugfix for setupterm.\n'    
 '\n'    
 '*Release 20170903*:\n'    
 'add statusline and statusline_s functions; ttysize: support BSD stty output '    
 'format\n'    
 '\n'    
 '*Release 20160828*:\n'    
 'Use "install_requires" instead of "requires" in DISTINFO, add PyPI '    
 'category.\n'    
 '\n'    
 '*Release 20150116*:\n'    
 'Initial PyPI release.'),
  classifiers = ['Environment :: Console', 'Operating System :: POSIX', 'Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Topic :: Terminals', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  install_requires = ['cs.gimmicks'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.tty'],
)
