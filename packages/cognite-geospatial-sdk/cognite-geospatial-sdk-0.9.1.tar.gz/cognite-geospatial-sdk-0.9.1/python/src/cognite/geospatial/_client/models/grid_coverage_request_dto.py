# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial._client.configuration import Configuration


class GridCoverageRequestDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'spatial_id': 'EitherIdDTO',
        'geometry': 'TextBasedGeometryDTO',
        'distance': 'float'
    }

    attribute_map = {
        'spatial_id': 'spatialId',
        'geometry': 'geometry',
        'distance': 'distance'
    }

    def __init__(self, spatial_id=None, geometry=None, distance=None, local_vars_configuration=None):  # noqa: E501
        """GridCoverageRequestDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._spatial_id = None
        self._geometry = None
        self._distance = None
        self.discriminator = None

        self.spatial_id = spatial_id
        self.geometry = geometry
        if distance is not None:
            self.distance = distance

    @property
    def spatial_id(self):
        """Gets the spatial_id of this GridCoverageRequestDTO.  # noqa: E501


        :return: The spatial_id of this GridCoverageRequestDTO.  # noqa: E501
        :rtype: EitherIdDTO
        """
        return self._spatial_id

    @spatial_id.setter
    def spatial_id(self, spatial_id):
        """Sets the spatial_id of this GridCoverageRequestDTO.


        :param spatial_id: The spatial_id of this GridCoverageRequestDTO.  # noqa: E501
        :type spatial_id: EitherIdDTO
        """
        if self.local_vars_configuration.client_side_validation and spatial_id is None:  # noqa: E501
            raise ValueError("Invalid value for `spatial_id`, must not be `None`")  # noqa: E501

        self._spatial_id = spatial_id

    @property
    def geometry(self):
        """Gets the geometry of this GridCoverageRequestDTO.  # noqa: E501


        :return: The geometry of this GridCoverageRequestDTO.  # noqa: E501
        :rtype: TextBasedGeometryDTO
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this GridCoverageRequestDTO.


        :param geometry: The geometry of this GridCoverageRequestDTO.  # noqa: E501
        :type geometry: TextBasedGeometryDTO
        """
        if self.local_vars_configuration.client_side_validation and geometry is None:  # noqa: E501
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def distance(self):
        """Gets the distance of this GridCoverageRequestDTO.  # noqa: E501

        if provided, and greater than zero, grid points at most this distance (in the units of the spatialId's CRS) outside the query geometry will also be included in the response.  # noqa: E501

        :return: The distance of this GridCoverageRequestDTO.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GridCoverageRequestDTO.

        if provided, and greater than zero, grid points at most this distance (in the units of the spatialId's CRS) outside the query geometry will also be included in the response.  # noqa: E501

        :param distance: The distance of this GridCoverageRequestDTO.  # noqa: E501
        :type distance: float
        """

        self._distance = distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridCoverageRequestDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GridCoverageRequestDTO):
            return True

        return self.to_dict() != other.to_dict()
