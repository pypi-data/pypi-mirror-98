# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial._client.configuration import Configuration


class IntersectionQueryDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'geometries': 'list[EitherIdDTO]',
        'geometry': 'EitherIdDTO',
        'output_crs': 'str'
    }

    attribute_map = {
        'geometries': 'geometries',
        'geometry': 'geometry',
        'output_crs': 'outputCRS'
    }

    def __init__(self, geometries=None, geometry=None, output_crs=None, local_vars_configuration=None):  # noqa: E501
        """IntersectionQueryDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._geometries = None
        self._geometry = None
        self._output_crs = None
        self.discriminator = None

        self.geometries = geometries
        self.geometry = geometry
        self.output_crs = output_crs

    @property
    def geometries(self):
        """Gets the geometries of this IntersectionQueryDTO.  # noqa: E501


        :return: The geometries of this IntersectionQueryDTO.  # noqa: E501
        :rtype: list[EitherIdDTO]
        """
        return self._geometries

    @geometries.setter
    def geometries(self, geometries):
        """Sets the geometries of this IntersectionQueryDTO.


        :param geometries: The geometries of this IntersectionQueryDTO.  # noqa: E501
        :type geometries: list[EitherIdDTO]
        """
        if self.local_vars_configuration.client_side_validation and geometries is None:  # noqa: E501
            raise ValueError("Invalid value for `geometries`, must not be `None`")  # noqa: E501

        self._geometries = geometries

    @property
    def geometry(self):
        """Gets the geometry of this IntersectionQueryDTO.  # noqa: E501


        :return: The geometry of this IntersectionQueryDTO.  # noqa: E501
        :rtype: EitherIdDTO
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this IntersectionQueryDTO.


        :param geometry: The geometry of this IntersectionQueryDTO.  # noqa: E501
        :type geometry: EitherIdDTO
        """
        if self.local_vars_configuration.client_side_validation and geometry is None:  # noqa: E501
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def output_crs(self):
        """Gets the output_crs of this IntersectionQueryDTO.  # noqa: E501


        :return: The output_crs of this IntersectionQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._output_crs

    @output_crs.setter
    def output_crs(self, output_crs):
        """Sets the output_crs of this IntersectionQueryDTO.


        :param output_crs: The output_crs of this IntersectionQueryDTO.  # noqa: E501
        :type output_crs: str
        """
        if self.local_vars_configuration.client_side_validation and output_crs is None:  # noqa: E501
            raise ValueError("Invalid value for `output_crs`, must not be `None`")  # noqa: E501

        self._output_crs = output_crs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntersectionQueryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IntersectionQueryDTO):
            return True

        return self.to_dict() != other.to_dict()
