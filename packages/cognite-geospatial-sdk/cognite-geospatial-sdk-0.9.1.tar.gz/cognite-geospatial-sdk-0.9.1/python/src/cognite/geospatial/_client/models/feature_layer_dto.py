# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial._client.configuration import Configuration


class FeatureLayerDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'metadata': 'dict(str, str)',
        'has_z': 'bool',
        'native_crs': 'str',
        'projected_crs': 'str',
        'attributes': 'list[FeatureAttributeDTO]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'metadata': 'metadata',
        'has_z': 'hasZ',
        'native_crs': 'nativeCRS',
        'projected_crs': 'projectedCRS',
        'attributes': 'attributes'
    }

    def __init__(self, name=None, description=None, metadata=None, has_z=None, native_crs=None, projected_crs=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """FeatureLayerDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._metadata = None
        self._has_z = None
        self._native_crs = None
        self._projected_crs = None
        self._attributes = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if has_z is not None:
            self.has_z = has_z
        if native_crs is not None:
            self.native_crs = native_crs
        if projected_crs is not None:
            self.projected_crs = projected_crs
        if attributes is not None:
            self.attributes = attributes

    @property
    def name(self):
        """Gets the name of this FeatureLayerDTO.  # noqa: E501


        :return: The name of this FeatureLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeatureLayerDTO.


        :param name: The name of this FeatureLayerDTO.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this FeatureLayerDTO.  # noqa: E501


        :return: The description of this FeatureLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeatureLayerDTO.


        :param description: The description of this FeatureLayerDTO.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this FeatureLayerDTO.  # noqa: E501

        Custom, application specific metadata. String key -> String value.  # noqa: E501

        :return: The metadata of this FeatureLayerDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FeatureLayerDTO.

        Custom, application specific metadata. String key -> String value.  # noqa: E501

        :param metadata: The metadata of this FeatureLayerDTO.  # noqa: E501
        :type metadata: dict(str, str)
        """

        self._metadata = metadata

    @property
    def has_z(self):
        """Gets the has_z of this FeatureLayerDTO.  # noqa: E501

        whether or not this layer has z-value  # noqa: E501

        :return: The has_z of this FeatureLayerDTO.  # noqa: E501
        :rtype: bool
        """
        return self._has_z

    @has_z.setter
    def has_z(self, has_z):
        """Sets the has_z of this FeatureLayerDTO.

        whether or not this layer has z-value  # noqa: E501

        :param has_z: The has_z of this FeatureLayerDTO.  # noqa: E501
        :type has_z: bool
        """

        self._has_z = has_z

    @property
    def native_crs(self):
        """Gets the native_crs of this FeatureLayerDTO.  # noqa: E501

        the default original CRS of items in this layer if it is not specified in item's information  # noqa: E501

        :return: The native_crs of this FeatureLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._native_crs

    @native_crs.setter
    def native_crs(self, native_crs):
        """Sets the native_crs of this FeatureLayerDTO.

        the default original CRS of items in this layer if it is not specified in item's information  # noqa: E501

        :param native_crs: The native_crs of this FeatureLayerDTO.  # noqa: E501
        :type native_crs: str
        """

        self._native_crs = native_crs

    @property
    def projected_crs(self):
        """Gets the projected_crs of this FeatureLayerDTO.  # noqa: E501

        the CRS which geometry data will be transformed to and indexed  # noqa: E501

        :return: The projected_crs of this FeatureLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._projected_crs

    @projected_crs.setter
    def projected_crs(self, projected_crs):
        """Sets the projected_crs of this FeatureLayerDTO.

        the CRS which geometry data will be transformed to and indexed  # noqa: E501

        :param projected_crs: The projected_crs of this FeatureLayerDTO.  # noqa: E501
        :type projected_crs: str
        """

        self._projected_crs = projected_crs

    @property
    def attributes(self):
        """Gets the attributes of this FeatureLayerDTO.  # noqa: E501


        :return: The attributes of this FeatureLayerDTO.  # noqa: E501
        :rtype: list[FeatureAttributeDTO]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this FeatureLayerDTO.


        :param attributes: The attributes of this FeatureLayerDTO.  # noqa: E501
        :type attributes: list[FeatureAttributeDTO]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureLayerDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureLayerDTO):
            return True

        return self.to_dict() != other.to_dict()
