# coding: utf-8

"""
    Cognite API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501
    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cognite.geospatial._client.api_client import ApiClient
from cognite.geospatial._client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SpatialApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_spatial_item_attributes(self, project, item_attributes_dto, **kwargs):  # noqa: E501
        """Add/Update spatial object's attributes  # noqa: E501
        This will add or update attributes of the specified spatial object. The data must be according to the format matching the type that was specified in the layer the object belongs to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_spatial_item_attributes(project, item_attributes_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param item_attributes_dto: (required)
        :type item_attributes_dto: ItemAttributesDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.add_spatial_item_attributes_with_http_info(project, item_attributes_dto, **kwargs)  # noqa: E501

    def add_spatial_item_attributes_with_http_info(self, project, item_attributes_dto, **kwargs):  # noqa: E501
        """Add/Update spatial object's attributes  # noqa: E501
        This will add or update attributes of the specified spatial object. The data must be according to the format matching the type that was specified in the layer the object belongs to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_spatial_item_attributes_with_http_info(project, item_attributes_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param item_attributes_dto: (required)
        :type item_attributes_dto: ItemAttributesDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'item_attributes_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_spatial_item_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `add_spatial_item_attributes`")  # noqa: E501
        # verify the required parameter 'item_attributes_dto' is set
        if self.api_client.client_side_validation and ('item_attributes_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_attributes_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_attributes_dto` when calling `add_spatial_item_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item_attributes_dto' in local_var_params:
            body_params = local_var_params['item_attributes_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def by_ids_spatial_items(self, project, spatial_ids_dto, **kwargs):  # noqa: E501
        """Retrieve spatial items  # noqa: E501
        Retrieves spatial items by internal ids or external ids. It is possible to retrieve up to 1000 items per request. Notice that this endpoint only returns simple item's attributes which are either of type string or are not of type array.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.by_ids_spatial_items(project, spatial_ids_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_ids_dto: (required)
        :type spatial_ids_dto: SpatialIdsDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FullSpatialItemsDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.by_ids_spatial_items_with_http_info(project, spatial_ids_dto, **kwargs)  # noqa: E501

    def by_ids_spatial_items_with_http_info(self, project, spatial_ids_dto, **kwargs):  # noqa: E501
        """Retrieve spatial items  # noqa: E501
        Retrieves spatial items by internal ids or external ids. It is possible to retrieve up to 1000 items per request. Notice that this endpoint only returns simple item's attributes which are either of type string or are not of type array.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.by_ids_spatial_items_with_http_info(project, spatial_ids_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_ids_dto: (required)
        :type spatial_ids_dto: SpatialIdsDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FullSpatialItemsDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'spatial_ids_dto',
            'geometry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method by_ids_spatial_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `by_ids_spatial_items`")  # noqa: E501
        # verify the required parameter 'spatial_ids_dto' is set
        if self.api_client.client_side_validation and ('spatial_ids_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['spatial_ids_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `spatial_ids_dto` when calling `by_ids_spatial_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'geometry' in local_var_params and local_var_params['geometry'] is not None:  # noqa: E501
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'spatial_ids_dto' in local_var_params:
            body_params = local_var_params['spatial_ids_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/byids', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullSpatialItemsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_spatial(self, project, create_spatial_items_dto, **kwargs):  # noqa: E501
        """Create spatial items  # noqa: E501
        Creates spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spatial(project, create_spatial_items_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param create_spatial_items_dto: List of spatial items to be created. It is possible to post a maximum of 1000 spatial items per request. (required)
        :type create_spatial_items_dto: CreateSpatialItemsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FullSpatialItemsDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.create_spatial_with_http_info(project, create_spatial_items_dto, **kwargs)  # noqa: E501

    def create_spatial_with_http_info(self, project, create_spatial_items_dto, **kwargs):  # noqa: E501
        """Create spatial items  # noqa: E501
        Creates spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spatial_with_http_info(project, create_spatial_items_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param create_spatial_items_dto: List of spatial items to be created. It is possible to post a maximum of 1000 spatial items per request. (required)
        :type create_spatial_items_dto: CreateSpatialItemsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FullSpatialItemsDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'create_spatial_items_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spatial" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `create_spatial`")  # noqa: E501
        # verify the required parameter 'create_spatial_items_dto' is set
        if self.api_client.client_side_validation and ('create_spatial_items_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_spatial_items_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_spatial_items_dto` when calling `create_spatial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_spatial_items_dto' in local_var_params:
            body_params = local_var_params['create_spatial_items_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullSpatialItemsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def crs_lookup(self, project, crs_string_dto, **kwargs):  # noqa: E501
        """Get EPSG code from CRS string  # noqa: E501
        Given CRS as string (epgs, wkt, petrel, other), get EPSG code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crs_lookup(project, crs_string_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param crs_string_dto: CRS string (required)
        :type crs_string_dto: CrsStringDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EpsCodeDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.crs_lookup_with_http_info(project, crs_string_dto, **kwargs)  # noqa: E501

    def crs_lookup_with_http_info(self, project, crs_string_dto, **kwargs):  # noqa: E501
        """Get EPSG code from CRS string  # noqa: E501
        Given CRS as string (epgs, wkt, petrel, other), get EPSG code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crs_lookup_with_http_info(project, crs_string_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param crs_string_dto: CRS string (required)
        :type crs_string_dto: CrsStringDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EpsCodeDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'crs_string_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crs_lookup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `crs_lookup`")  # noqa: E501
        # verify the required parameter 'crs_string_dto' is set
        if self.api_client.client_side_validation and ('crs_string_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['crs_string_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `crs_string_dto` when calling `crs_lookup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crs_string_dto' in local_var_params:
            body_params = local_var_params['crs_string_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/crs/lookup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EpsCodeDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_layer(self, project, feature_layer_name_dto, **kwargs):  # noqa: E501
        """Delete feature layer and all related spatial objects  # noqa: E501
        Delete feature layer and all related spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer(project, feature_layer_name_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param feature_layer_name_dto: (required)
        :type feature_layer_name_dto: FeatureLayerNameDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_layer_with_http_info(project, feature_layer_name_dto, **kwargs)  # noqa: E501

    def delete_layer_with_http_info(self, project, feature_layer_name_dto, **kwargs):  # noqa: E501
        """Delete feature layer and all related spatial objects  # noqa: E501
        Delete feature layer and all related spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer_with_http_info(project, feature_layer_name_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param feature_layer_name_dto: (required)
        :type feature_layer_name_dto: FeatureLayerNameDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'project',
            'feature_layer_name_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_layer" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `delete_layer`")  # noqa: E501
        # verify the required parameter 'feature_layer_name_dto' is set
        if self.api_client.client_side_validation and ('feature_layer_name_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['feature_layer_name_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_layer_name_dto` when calling `delete_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_layer_name_dto' in local_var_params:
            body_params = local_var_params['feature_layer_name_dto']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/featurelayer/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_spatial(self, project, spatial_ids_dto, **kwargs):  # noqa: E501
        """Delete spatial items  # noqa: E501
        Delete spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spatial(project, spatial_ids_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_ids_dto: List of spatial items to be deleted. It is possible to post a maximum of 1000 spatial items per request. (required)
        :type spatial_ids_dto: SpatialIdsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FullSpatialItemsDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_spatial_with_http_info(project, spatial_ids_dto, **kwargs)  # noqa: E501

    def delete_spatial_with_http_info(self, project, spatial_ids_dto, **kwargs):  # noqa: E501
        """Delete spatial items  # noqa: E501
        Delete spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spatial_with_http_info(project, spatial_ids_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_ids_dto: List of spatial items to be deleted. It is possible to post a maximum of 1000 spatial items per request. (required)
        :type spatial_ids_dto: SpatialIdsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FullSpatialItemsDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'spatial_ids_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_spatial" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `delete_spatial`")  # noqa: E501
        # verify the required parameter 'spatial_ids_dto' is set
        if self.api_client.client_side_validation and ('spatial_ids_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['spatial_ids_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `spatial_ids_dto` when calling `delete_spatial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'spatial_ids_dto' in local_var_params:
            body_params = local_var_params['spatial_ids_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullSpatialItemsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def file_save(self, project, file_type, file, **kwargs):  # noqa: E501
        """Save spatial file  # noqa: E501
        Extract spatial objects from spatial file and store. Formats: shape file, parque.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_save(project, file_type, file, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param file_type: (required)
        :type file_type: FileTypeNameDTO
        :param file: the stream content of the file (required)
        :type file: file
        :param id:
        :type id: str
        :param external_id:
        :type external_id: str
        :param layer: the name of the layer which extracted spatial objects belong to
        :type layer: str
        :param create_layer: if true, create the layer if there are no layers matching the name specified in 'layer'
        :type create_layer: bool
        :param cleanup_old_data: Default false, clean up all data in the existing layer before ingesting data from shape file
        :type cleanup_old_data: bool
        :param id_field: The field contains the unique ID of the row. The externalId will be created as <layer_name>_<id>
        :type id_field: str
        :param attributes: a comma separated list of attributes to extract. If not specified, extract all possible attributes
        :type attributes: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.file_save_with_http_info(project, file_type, file, **kwargs)  # noqa: E501

    def file_save_with_http_info(self, project, file_type, file, **kwargs):  # noqa: E501
        """Save spatial file  # noqa: E501
        Extract spatial objects from spatial file and store. Formats: shape file, parque.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_save_with_http_info(project, file_type, file, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param file_type: (required)
        :type file_type: FileTypeNameDTO
        :param file: the stream content of the file (required)
        :type file: file
        :param id:
        :type id: str
        :param external_id:
        :type external_id: str
        :param layer: the name of the layer which extracted spatial objects belong to
        :type layer: str
        :param create_layer: if true, create the layer if there are no layers matching the name specified in 'layer'
        :type create_layer: bool
        :param cleanup_old_data: Default false, clean up all data in the existing layer before ingesting data from shape file
        :type cleanup_old_data: bool
        :param id_field: The field contains the unique ID of the row. The externalId will be created as <layer_name>_<id>
        :type id_field: str
        :param attributes: a comma separated list of attributes to extract. If not specified, extract all possible attributes
        :type attributes: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'file_type',
            'file',
            'id',
            'external_id',
            'layer',
            'create_layer',
            'cleanup_old_data',
            'id_field',
            'attributes'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_save" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `file_save`")  # noqa: E501
        # verify the required parameter 'file_type' is set
        if self.api_client.client_side_validation and ('file_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['file_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `file_type` when calling `file_save`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in local_var_params or  # noqa: E501
                                                        local_var_params['file'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `file` when calling `file_save`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in local_var_params:
            form_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'external_id' in local_var_params:
            form_params.append(('externalId', local_var_params['external_id']))  # noqa: E501
        if 'layer' in local_var_params:
            form_params.append(('layer', local_var_params['layer']))  # noqa: E501
        if 'create_layer' in local_var_params:
            form_params.append(('createLayer', local_var_params['create_layer']))  # noqa: E501
        if 'cleanup_old_data' in local_var_params:
            form_params.append(('cleanupOldData', local_var_params['cleanup_old_data']))  # noqa: E501
        if 'id_field' in local_var_params:
            form_params.append(('idField', local_var_params['id_field']))  # noqa: E501
        if 'attributes' in local_var_params:
            form_params.append(('attributes', local_var_params['attributes']))  # noqa: E501
        if 'file_type' in local_var_params:
            form_params.append(('fileType', local_var_params['file_type']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/file/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def find_feature_layer(self, project, feature_layers_filter_dto, **kwargs):  # noqa: E501
        """Find feature layers  # noqa: E501
        Find feature layers that represent a real-world geographic entity on earth. Feature layers are composed of both a geometry (point, linestring, polygon) and a set of attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_feature_layer(project, feature_layers_filter_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param feature_layers_filter_dto: (required)
        :type feature_layers_filter_dto: FeatureLayersFilterDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FeatureLayersDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.find_feature_layer_with_http_info(project, feature_layers_filter_dto, **kwargs)  # noqa: E501

    def find_feature_layer_with_http_info(self, project, feature_layers_filter_dto, **kwargs):  # noqa: E501
        """Find feature layers  # noqa: E501
        Find feature layers that represent a real-world geographic entity on earth. Feature layers are composed of both a geometry (point, linestring, polygon) and a set of attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_feature_layer_with_http_info(project, feature_layers_filter_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param feature_layers_filter_dto: (required)
        :type feature_layers_filter_dto: FeatureLayersFilterDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FeatureLayersDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'feature_layers_filter_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_feature_layer" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `find_feature_layer`")  # noqa: E501
        # verify the required parameter 'feature_layers_filter_dto' is set
        if self.api_client.client_side_validation and ('feature_layers_filter_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['feature_layers_filter_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_layers_filter_dto` when calling `find_feature_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_layers_filter_dto' in local_var_params:
            body_params = local_var_params['feature_layers_filter_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/featurelayer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureLayersDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def find_intersection(self, project, intersection_query_dto, **kwargs):  # noqa: E501
        """Find intersection between an array of geometries and another geometry  # noqa: E501
        Find intersection between an array of geometries and another geometry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_intersection(project, intersection_query_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param intersection_query_dto: (required)
        :type intersection_query_dto: IntersectionQueryDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IntersectionItemsDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.find_intersection_with_http_info(project, intersection_query_dto, **kwargs)  # noqa: E501

    def find_intersection_with_http_info(self, project, intersection_query_dto, **kwargs):  # noqa: E501
        """Find intersection between an array of geometries and another geometry  # noqa: E501
        Find intersection between an array of geometries and another geometry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_intersection_with_http_info(project, intersection_query_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param intersection_query_dto: (required)
        :type intersection_query_dto: IntersectionQueryDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IntersectionItemsDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'intersection_query_dto',
            'geometry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_intersection" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `find_intersection`")  # noqa: E501
        # verify the required parameter 'intersection_query_dto' is set
        if self.api_client.client_side_validation and ('intersection_query_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['intersection_query_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `intersection_query_dto` when calling `find_intersection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'geometry' in local_var_params and local_var_params['geometry'] is not None:  # noqa: E501
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'intersection_query_dto' in local_var_params:
            body_params = local_var_params['intersection_query_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/intersect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntersectionItemsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_partial_coverage(self, project, partial_coverage_request_dto, **kwargs):  # noqa: E501
        """Convert set of grid points to covering polygons  # noqa: E501
        Calculate the coverage polygon for a subset of the bins in an existing geospatial bin grid object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partial_coverage(project, partial_coverage_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param partial_coverage_request_dto: (required)
        :type partial_coverage_request_dto: PartialCoverageRequestDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SpatialItemCoverageDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.get_partial_coverage_with_http_info(project, partial_coverage_request_dto, **kwargs)  # noqa: E501

    def get_partial_coverage_with_http_info(self, project, partial_coverage_request_dto, **kwargs):  # noqa: E501
        """Convert set of grid points to covering polygons  # noqa: E501
        Calculate the coverage polygon for a subset of the bins in an existing geospatial bin grid object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partial_coverage_with_http_info(project, partial_coverage_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param partial_coverage_request_dto: (required)
        :type partial_coverage_request_dto: PartialCoverageRequestDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SpatialItemCoverageDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'partial_coverage_request_dto',
            'geometry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_partial_coverage" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_partial_coverage`")  # noqa: E501
        # verify the required parameter 'partial_coverage_request_dto' is set
        if self.api_client.client_side_validation and ('partial_coverage_request_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['partial_coverage_request_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `partial_coverage_request_dto` when calling `get_partial_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'geometry' in local_var_params and local_var_params['geometry'] is not None:  # noqa: E501
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partial_coverage_request_dto' in local_var_params:
            body_params = local_var_params['partial_coverage_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/grid/partial-coverage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpatialItemCoverageDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_point_cloud(self, project, point_cloud_request_dto, **kwargs):  # noqa: E501
        """Get pointcloud.  # noqa: E501
        Get point cloud data from a given spatial object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_point_cloud(project, point_cloud_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param point_cloud_request_dto: (required)
        :type point_cloud_request_dto: PointCloudRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PointCloudValuesDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.get_point_cloud_with_http_info(project, point_cloud_request_dto, **kwargs)  # noqa: E501

    def get_point_cloud_with_http_info(self, project, point_cloud_request_dto, **kwargs):  # noqa: E501
        """Get pointcloud.  # noqa: E501
        Get point cloud data from a given spatial object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_point_cloud_with_http_info(project, point_cloud_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param point_cloud_request_dto: (required)
        :type point_cloud_request_dto: PointCloudRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PointCloudValuesDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'point_cloud_request_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_point_cloud" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_point_cloud`")  # noqa: E501
        # verify the required parameter 'point_cloud_request_dto' is set
        if self.api_client.client_side_validation and ('point_cloud_request_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['point_cloud_request_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `point_cloud_request_dto` when calling `get_point_cloud`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'point_cloud_request_dto' in local_var_params:
            body_params = local_var_params['point_cloud_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/point-cloud/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PointCloudValuesDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_spatial_coverage(self, project, spatial_coverage_request_dto, **kwargs):  # noqa: E501
        """Get spatial item coverage  # noqa: E501
        Get the coverage of the items. It is possible to get the coverages of a maximum of 1000 spatial items per request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spatial_coverage(project, spatial_coverage_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_coverage_request_dto: (required)
        :type spatial_coverage_request_dto: SpatialCoverageRequestDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SpatialItemsCoveragesDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.get_spatial_coverage_with_http_info(project, spatial_coverage_request_dto, **kwargs)  # noqa: E501

    def get_spatial_coverage_with_http_info(self, project, spatial_coverage_request_dto, **kwargs):  # noqa: E501
        """Get spatial item coverage  # noqa: E501
        Get the coverage of the items. It is possible to get the coverages of a maximum of 1000 spatial items per request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spatial_coverage_with_http_info(project, spatial_coverage_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_coverage_request_dto: (required)
        :type spatial_coverage_request_dto: SpatialCoverageRequestDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SpatialItemsCoveragesDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'spatial_coverage_request_dto',
            'geometry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spatial_coverage" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_spatial_coverage`")  # noqa: E501
        # verify the required parameter 'spatial_coverage_request_dto' is set
        if self.api_client.client_side_validation and ('spatial_coverage_request_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['spatial_coverage_request_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `spatial_coverage_request_dto` when calling `get_spatial_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'geometry' in local_var_params and local_var_params['geometry'] is not None:  # noqa: E501
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'spatial_coverage_request_dto' in local_var_params:
            body_params = local_var_params['spatial_coverage_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/coverage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpatialItemsCoveragesDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_spatial_item_attributes(self, project, spatial_data_request_dto, **kwargs):  # noqa: E501
        """Retrieve attributes of the specified spatial item  # noqa: E501
        Retrieve attributes of the specified spatial object. For numeric array attributes, it is possible to only retrieve data between a certain range by specifying the extractor on that attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spatial_item_attributes(project, spatial_data_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_data_request_dto: (required)
        :type spatial_data_request_dto: SpatialDataRequestDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: dict(str, object)
        """
        kwargs['_return_http_data_only'] = True
        return self.get_spatial_item_attributes_with_http_info(project, spatial_data_request_dto, **kwargs)  # noqa: E501

    def get_spatial_item_attributes_with_http_info(self, project, spatial_data_request_dto, **kwargs):  # noqa: E501
        """Retrieve attributes of the specified spatial item  # noqa: E501
        Retrieve attributes of the specified spatial object. For numeric array attributes, it is possible to only retrieve data between a certain range by specifying the extractor on that attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spatial_item_attributes_with_http_info(project, spatial_data_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_data_request_dto: (required)
        :type spatial_data_request_dto: SpatialDataRequestDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(dict(str, object), status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'spatial_data_request_dto',
            'geometry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spatial_item_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_spatial_item_attributes`")  # noqa: E501
        # verify the required parameter 'spatial_data_request_dto' is set
        if self.api_client.client_side_validation and ('spatial_data_request_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['spatial_data_request_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `spatial_data_request_dto` when calling `get_spatial_item_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'geometry' in local_var_params and local_var_params['geometry'] is not None:  # noqa: E501
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'spatial_data_request_dto' in local_var_params:
            body_params = local_var_params['spatial_data_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/data/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def grid_coverage(self, project, grid_coverage_request_dto, **kwargs):  # noqa: E501
        """Get grid point coverage for geometry  # noqa: E501
        Given geometry, CRS and seismic volume, get a list of inlines and xlines of the volume contained in the geometry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_coverage(project, grid_coverage_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param grid_coverage_request_dto: Information about seismic volume, geometry and CRS. (required)
        :type grid_coverage_request_dto: GridCoverageRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GridCoverageItemDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.grid_coverage_with_http_info(project, grid_coverage_request_dto, **kwargs)  # noqa: E501

    def grid_coverage_with_http_info(self, project, grid_coverage_request_dto, **kwargs):  # noqa: E501
        """Get grid point coverage for geometry  # noqa: E501
        Given geometry, CRS and seismic volume, get a list of inlines and xlines of the volume contained in the geometry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_coverage_with_http_info(project, grid_coverage_request_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param grid_coverage_request_dto: Information about seismic volume, geometry and CRS. (required)
        :type grid_coverage_request_dto: GridCoverageRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GridCoverageItemDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'grid_coverage_request_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_coverage" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `grid_coverage`")  # noqa: E501
        # verify the required parameter 'grid_coverage_request_dto' is set
        if self.api_client.client_side_validation and ('grid_coverage_request_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['grid_coverage_request_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `grid_coverage_request_dto` when calling `grid_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grid_coverage_request_dto' in local_var_params:
            body_params = local_var_params['grid_coverage_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/grid-coverage/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridCoverageItemDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def interpret(self, project, spatial_ids_dto, **kwargs):  # noqa: E501
        """Interpret attributes from spatial item  # noqa: E501
        Interpret attributes of spatial object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.interpret(project, spatial_ids_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_ids_dto: (required)
        :type spatial_ids_dto: SpatialIdsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.interpret_with_http_info(project, spatial_ids_dto, **kwargs)  # noqa: E501

    def interpret_with_http_info(self, project, spatial_ids_dto, **kwargs):  # noqa: E501
        """Interpret attributes from spatial item  # noqa: E501
        Interpret attributes of spatial object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.interpret_with_http_info(project, spatial_ids_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param spatial_ids_dto: (required)
        :type spatial_ids_dto: SpatialIdsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'spatial_ids_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method interpret" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `interpret`")  # noqa: E501
        # verify the required parameter 'spatial_ids_dto' is set
        if self.api_client.client_side_validation and ('spatial_ids_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['spatial_ids_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `spatial_ids_dto` when calling `interpret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'spatial_ids_dto' in local_var_params:
            body_params = local_var_params['spatial_ids_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/interpret', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def operation_union(self, project, geometry_items_dto, **kwargs):  # noqa: E501
        """Union of the given 2D geometric objects  # noqa: E501
        Returns a representation of the union of the given 2D geometric objects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operation_union(project, geometry_items_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param geometry_items_dto: Information about seismic volume, geometry and CRS. (required)
        :type geometry_items_dto: GeometryItemsDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TextBasedGeometryDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.operation_union_with_http_info(project, geometry_items_dto, **kwargs)  # noqa: E501

    def operation_union_with_http_info(self, project, geometry_items_dto, **kwargs):  # noqa: E501
        """Union of the given 2D geometric objects  # noqa: E501
        Returns a representation of the union of the given 2D geometric objects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operation_union_with_http_info(project, geometry_items_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param geometry_items_dto: Information about seismic volume, geometry and CRS. (required)
        :type geometry_items_dto: GeometryItemsDTO
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TextBasedGeometryDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'geometry_items_dto',
            'geometry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operation_union" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `operation_union`")  # noqa: E501
        # verify the required parameter 'geometry_items_dto' is set
        if self.api_client.client_side_validation and ('geometry_items_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['geometry_items_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `geometry_items_dto` when calling `operation_union`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'geometry' in local_var_params and local_var_params['geometry'] is not None:  # noqa: E501
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'geometry_items_dto' in local_var_params:
            body_params = local_var_params['geometry_items_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/operation/union', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextBasedGeometryDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def search_spatial(self, project, **kwargs):  # noqa: E501
        """Search for spatial items  # noqa: E501
        Searches spatial items based on properties or spatial relationship with a geometry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_spatial(project, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param spatial_search_request_dto:
        :type spatial_search_request_dto: SpatialSearchRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FullSpatialItemsDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.search_spatial_with_http_info(project, **kwargs)  # noqa: E501

    def search_spatial_with_http_info(self, project, **kwargs):  # noqa: E501
        """Search for spatial items  # noqa: E501
        Searches spatial items based on properties or spatial relationship with a geometry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_spatial_with_http_info(project, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param geometry: Optional parameter indicating output geometry format. Defaults to wkt.
        :type geometry: str
        :param spatial_search_request_dto:
        :type spatial_search_request_dto: SpatialSearchRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FullSpatialItemsDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'geometry',
            'spatial_search_request_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_spatial" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `search_spatial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'geometry' in local_var_params and local_var_params['geometry'] is not None:  # noqa: E501
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'spatial_search_request_dto' in local_var_params:
            body_params = local_var_params['spatial_search_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullSpatialItemsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_spatial(self, project, update_spatial_items_dto, **kwargs):  # noqa: E501
        """Update spatial items  # noqa: E501
        Update spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_spatial(project, update_spatial_items_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param update_spatial_items_dto: List of spatial items to update. (required)
        :type update_spatial_items_dto: UpdateSpatialItemsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FullSpatialItemsDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.update_spatial_with_http_info(project, update_spatial_items_dto, **kwargs)  # noqa: E501

    def update_spatial_with_http_info(self, project, update_spatial_items_dto, **kwargs):  # noqa: E501
        """Update spatial items  # noqa: E501
        Update spatial objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_spatial_with_http_info(project, update_spatial_items_dto, async_req=True)
        >>> result = thread.get()
        :param project: The project name. (required)
        :type project: str
        :param update_spatial_items_dto: List of spatial items to update. (required)
        :type update_spatial_items_dto: UpdateSpatialItemsDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FullSpatialItemsDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project',
            'update_spatial_items_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_spatial" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `update_spatial`")  # noqa: E501
        # verify the required parameter 'update_spatial_items_dto' is set
        if self.api_client.client_side_validation and ('update_spatial_items_dto' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_spatial_items_dto'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_spatial_items_dto` when calling `update_spatial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_spatial_items_dto' in local_var_params:
            body_params = local_var_params['update_spatial_items_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key', 'token']  # noqa: E501

        return self.api_client.call_api(
            '/api/playground/projects/{project}/spatial/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullSpatialItemsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
