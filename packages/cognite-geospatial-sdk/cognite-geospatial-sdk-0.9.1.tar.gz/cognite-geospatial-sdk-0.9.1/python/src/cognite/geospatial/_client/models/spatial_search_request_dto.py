# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial._client.configuration import Configuration


class SpatialSearchRequestDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'limit': 'int',
        'offset': 'int',
        'name': 'str',
        'metadata': 'dict(str, str)',
        'asset_ids': 'list[int]',
        'source': 'str',
        'created_time': 'EpochTimestampRangeDTO',
        'last_updated_time': 'EpochTimestampRangeDTO',
        'external_id_prefix': 'str',
        'spatial_filter': 'GeometrySpatialFilterDTO',
        'layer': 'str',
        'attributes': 'list[str]',
        'output_crs': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'name': 'name',
        'metadata': 'metadata',
        'asset_ids': 'assetIds',
        'source': 'source',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'external_id_prefix': 'externalIdPrefix',
        'spatial_filter': 'spatialFilter',
        'layer': 'layer',
        'attributes': 'attributes',
        'output_crs': 'outputCRS'
    }

    def __init__(self, limit=10, offset=0, name=None, metadata=None, asset_ids=None, source=None, created_time=None, last_updated_time=None, external_id_prefix=None, spatial_filter=None, layer=None, attributes=None, output_crs=None, local_vars_configuration=None):  # noqa: E501
        """SpatialSearchRequestDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._limit = None
        self._offset = None
        self._name = None
        self._metadata = None
        self._asset_ids = None
        self._source = None
        self._created_time = None
        self._last_updated_time = None
        self._external_id_prefix = None
        self._spatial_filter = None
        self._layer = None
        self._attributes = None
        self._output_crs = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if name is not None:
            self.name = name
        if metadata is not None:
            self.metadata = metadata
        if asset_ids is not None:
            self.asset_ids = asset_ids
        if source is not None:
            self.source = source
        if created_time is not None:
            self.created_time = created_time
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if external_id_prefix is not None:
            self.external_id_prefix = external_id_prefix
        if spatial_filter is not None:
            self.spatial_filter = spatial_filter
        self.layer = layer
        if attributes is not None:
            self.attributes = attributes
        if output_crs is not None:
            self.output_crs = output_crs

    @property
    def limit(self):
        """Gets the limit of this SpatialSearchRequestDTO.  # noqa: E501

        Limits the maximum number of results to be returned by search.  # noqa: E501

        :return: The limit of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SpatialSearchRequestDTO.

        Limits the maximum number of results to be returned by search.  # noqa: E501

        :param limit: The limit of this SpatialSearchRequestDTO.  # noqa: E501
        :type limit: int
        """
        if (self.local_vars_configuration.client_side_validation and
                limit is not None and limit > 1000):  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                limit is not None and limit < 1):  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this SpatialSearchRequestDTO.  # noqa: E501

        Offset says to skip that many items before begining to return items.  # noqa: E501

        :return: The offset of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SpatialSearchRequestDTO.

        Offset says to skip that many items before begining to return items.  # noqa: E501

        :param offset: The offset of this SpatialSearchRequestDTO.  # noqa: E501
        :type offset: int
        """

        self._offset = offset

    @property
    def name(self):
        """Gets the name of this SpatialSearchRequestDTO.  # noqa: E501

        The name of the spatial item  # noqa: E501

        :return: The name of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpatialSearchRequestDTO.

        The name of the spatial item  # noqa: E501

        :param name: The name of this SpatialSearchRequestDTO.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def metadata(self):
        """Gets the metadata of this SpatialSearchRequestDTO.  # noqa: E501

        Custom, application specific metadata. String key -> String value.  # noqa: E501

        :return: The metadata of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SpatialSearchRequestDTO.

        Custom, application specific metadata. String key -> String value.  # noqa: E501

        :param metadata: The metadata of this SpatialSearchRequestDTO.  # noqa: E501
        :type metadata: dict(str, str)
        """

        self._metadata = metadata

    @property
    def asset_ids(self):
        """Gets the asset_ids of this SpatialSearchRequestDTO.  # noqa: E501

        Asset IDs of related equipment that this event relates to.  # noqa: E501

        :return: The asset_ids of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this SpatialSearchRequestDTO.

        Asset IDs of related equipment that this event relates to.  # noqa: E501

        :param asset_ids: The asset_ids of this SpatialSearchRequestDTO.  # noqa: E501
        :type asset_ids: list[int]
        """

        self._asset_ids = asset_ids

    @property
    def source(self):
        """Gets the source of this SpatialSearchRequestDTO.  # noqa: E501

        The source of this event.  # noqa: E501

        :return: The source of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SpatialSearchRequestDTO.

        The source of this event.  # noqa: E501

        :param source: The source of this SpatialSearchRequestDTO.  # noqa: E501
        :type source: str
        """
        if (self.local_vars_configuration.client_side_validation and
                source is not None and len(source) > 128):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `128`")  # noqa: E501

        self._source = source

    @property
    def created_time(self):
        """Gets the created_time of this SpatialSearchRequestDTO.  # noqa: E501


        :return: The created_time of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: EpochTimestampRangeDTO
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this SpatialSearchRequestDTO.


        :param created_time: The created_time of this SpatialSearchRequestDTO.  # noqa: E501
        :type created_time: EpochTimestampRangeDTO
        """

        self._created_time = created_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this SpatialSearchRequestDTO.  # noqa: E501


        :return: The last_updated_time of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: EpochTimestampRangeDTO
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this SpatialSearchRequestDTO.


        :param last_updated_time: The last_updated_time of this SpatialSearchRequestDTO.  # noqa: E501
        :type last_updated_time: EpochTimestampRangeDTO
        """

        self._last_updated_time = last_updated_time

    @property
    def external_id_prefix(self):
        """Gets the external_id_prefix of this SpatialSearchRequestDTO.  # noqa: E501

        External Id provided by client. Should be unique within a given project/resource combination.  # noqa: E501

        :return: The external_id_prefix of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._external_id_prefix

    @external_id_prefix.setter
    def external_id_prefix(self, external_id_prefix):
        """Sets the external_id_prefix of this SpatialSearchRequestDTO.

        External Id provided by client. Should be unique within a given project/resource combination.  # noqa: E501

        :param external_id_prefix: The external_id_prefix of this SpatialSearchRequestDTO.  # noqa: E501
        :type external_id_prefix: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id_prefix is not None and len(external_id_prefix) > 255):
            raise ValueError("Invalid value for `external_id_prefix`, length must be less than or equal to `255`")  # noqa: E501

        self._external_id_prefix = external_id_prefix

    @property
    def spatial_filter(self):
        """Gets the spatial_filter of this SpatialSearchRequestDTO.  # noqa: E501


        :return: The spatial_filter of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: GeometrySpatialFilterDTO
        """
        return self._spatial_filter

    @spatial_filter.setter
    def spatial_filter(self, spatial_filter):
        """Sets the spatial_filter of this SpatialSearchRequestDTO.


        :param spatial_filter: The spatial_filter of this SpatialSearchRequestDTO.  # noqa: E501
        :type spatial_filter: GeometrySpatialFilterDTO
        """

        self._spatial_filter = spatial_filter

    @property
    def layer(self):
        """Gets the layer of this SpatialSearchRequestDTO.  # noqa: E501

        The feature layer of the spatial item  # noqa: E501

        :return: The layer of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this SpatialSearchRequestDTO.

        The feature layer of the spatial item  # noqa: E501

        :param layer: The layer of this SpatialSearchRequestDTO.  # noqa: E501
        :type layer: str
        """
        if self.local_vars_configuration.client_side_validation and layer is None:  # noqa: E501
            raise ValueError("Invalid value for `layer`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                layer is not None and len(layer) > 128):
            raise ValueError("Invalid value for `layer`, length must be less than or equal to `128`")  # noqa: E501

        self._layer = layer

    @property
    def attributes(self):
        """Gets the attributes of this SpatialSearchRequestDTO.  # noqa: E501

        a list of attribute's names to retrieve. Only non-array attributes are allowed.  # noqa: E501

        :return: The attributes of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SpatialSearchRequestDTO.

        a list of attribute's names to retrieve. Only non-array attributes are allowed.  # noqa: E501

        :param attributes: The attributes of this SpatialSearchRequestDTO.  # noqa: E501
        :type attributes: list[str]
        """

        self._attributes = attributes

    @property
    def output_crs(self):
        """Gets the output_crs of this SpatialSearchRequestDTO.  # noqa: E501

        Desired CRS for results.  # noqa: E501

        :return: The output_crs of this SpatialSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._output_crs

    @output_crs.setter
    def output_crs(self, output_crs):
        """Sets the output_crs of this SpatialSearchRequestDTO.

        Desired CRS for results.  # noqa: E501

        :param output_crs: The output_crs of this SpatialSearchRequestDTO.  # noqa: E501
        :type output_crs: str
        """
        if (self.local_vars_configuration.client_side_validation and
                output_crs is not None and len(output_crs) > 128):
            raise ValueError("Invalid value for `output_crs`, length must be less than or equal to `128`")  # noqa: E501

        self._output_crs = output_crs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpatialSearchRequestDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpatialSearchRequestDTO):
            return True

        return self.to_dict() != other.to_dict()
