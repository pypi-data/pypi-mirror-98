# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial._client.configuration import Configuration


class InternalIdSpatialItemDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'external_id': 'str',
        'description': 'str',
        'metadata': 'dict(str, str)',
        'asset_ids': 'list[int]',
        'source': 'str',
        'layer': 'str',
        'crs': 'str',
        'id': 'int',
        'last_updated_time': 'int',
        'created_time': 'int'
    }

    attribute_map = {
        'name': 'name',
        'external_id': 'externalId',
        'description': 'description',
        'metadata': 'metadata',
        'asset_ids': 'assetIds',
        'source': 'source',
        'layer': 'layer',
        'crs': 'crs',
        'id': 'id',
        'last_updated_time': 'lastUpdatedTime',
        'created_time': 'createdTime'
    }

    def __init__(self, name=None, external_id=None, description=None, metadata=None, asset_ids=None, source=None, layer=None, crs=None, id=None, last_updated_time=None, created_time=None, local_vars_configuration=None):  # noqa: E501
        """InternalIdSpatialItemDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._external_id = None
        self._description = None
        self._metadata = None
        self._asset_ids = None
        self._source = None
        self._layer = None
        self._crs = None
        self._id = None
        self._last_updated_time = None
        self._created_time = None
        self.discriminator = None

        self.name = name
        if external_id is not None:
            self.external_id = external_id
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if asset_ids is not None:
            self.asset_ids = asset_ids
        if source is not None:
            self.source = source
        self.layer = layer
        self.crs = crs
        self.id = id
        self.last_updated_time = last_updated_time
        self.created_time = created_time

    @property
    def name(self):
        """Gets the name of this InternalIdSpatialItemDTO.  # noqa: E501

        The name of the spatial item  # noqa: E501

        :return: The name of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InternalIdSpatialItemDTO.

        The name of the spatial item  # noqa: E501

        :param name: The name of this InternalIdSpatialItemDTO.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def external_id(self):
        """Gets the external_id of this InternalIdSpatialItemDTO.  # noqa: E501

        External Id provided by client. Should be unique within a given project/resource combination.  # noqa: E501

        :return: The external_id of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this InternalIdSpatialItemDTO.

        External Id provided by client. Should be unique within a given project/resource combination.  # noqa: E501

        :param external_id: The external_id of this InternalIdSpatialItemDTO.  # noqa: E501
        :type external_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 255):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `255`")  # noqa: E501

        self._external_id = external_id

    @property
    def description(self):
        """Gets the description of this InternalIdSpatialItemDTO.  # noqa: E501

        Textual description of the spatial item.  # noqa: E501

        :return: The description of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InternalIdSpatialItemDTO.

        Textual description of the spatial item.  # noqa: E501

        :param description: The description of this InternalIdSpatialItemDTO.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 500):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")  # noqa: E501

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this InternalIdSpatialItemDTO.  # noqa: E501

        Custom, application specific metadata. String key -> String value.  # noqa: E501

        :return: The metadata of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InternalIdSpatialItemDTO.

        Custom, application specific metadata. String key -> String value.  # noqa: E501

        :param metadata: The metadata of this InternalIdSpatialItemDTO.  # noqa: E501
        :type metadata: dict(str, str)
        """

        self._metadata = metadata

    @property
    def asset_ids(self):
        """Gets the asset_ids of this InternalIdSpatialItemDTO.  # noqa: E501

        Asset IDs of related asset resource item that this spatial item relates to.  # noqa: E501

        :return: The asset_ids of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this InternalIdSpatialItemDTO.

        Asset IDs of related asset resource item that this spatial item relates to.  # noqa: E501

        :param asset_ids: The asset_ids of this InternalIdSpatialItemDTO.  # noqa: E501
        :type asset_ids: list[int]
        """

        self._asset_ids = asset_ids

    @property
    def source(self):
        """Gets the source of this InternalIdSpatialItemDTO.  # noqa: E501

        The source of this spatial item  # noqa: E501

        :return: The source of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InternalIdSpatialItemDTO.

        The source of this spatial item  # noqa: E501

        :param source: The source of this InternalIdSpatialItemDTO.  # noqa: E501
        :type source: str
        """
        if (self.local_vars_configuration.client_side_validation and
                source is not None and len(source) > 128):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `128`")  # noqa: E501

        self._source = source

    @property
    def layer(self):
        """Gets the layer of this InternalIdSpatialItemDTO.  # noqa: E501

        The feature layer of this spatial item  # noqa: E501

        :return: The layer of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this InternalIdSpatialItemDTO.

        The feature layer of this spatial item  # noqa: E501

        :param layer: The layer of this InternalIdSpatialItemDTO.  # noqa: E501
        :type layer: str
        """
        if self.local_vars_configuration.client_side_validation and layer is None:  # noqa: E501
            raise ValueError("Invalid value for `layer`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                layer is not None and len(layer) > 128):
            raise ValueError("Invalid value for `layer`, length must be less than or equal to `128`")  # noqa: E501

        self._layer = layer

    @property
    def crs(self):
        """Gets the crs of this InternalIdSpatialItemDTO.  # noqa: E501

        CRS specified using epsg:<number>  # noqa: E501

        :return: The crs of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this InternalIdSpatialItemDTO.

        CRS specified using epsg:<number>  # noqa: E501

        :param crs: The crs of this InternalIdSpatialItemDTO.  # noqa: E501
        :type crs: str
        """
        if self.local_vars_configuration.client_side_validation and crs is None:  # noqa: E501
            raise ValueError("Invalid value for `crs`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                crs is not None and len(crs) > 128):
            raise ValueError("Invalid value for `crs`, length must be less than or equal to `128`")  # noqa: E501

        self._crs = crs

    @property
    def id(self):
        """Gets the id of this InternalIdSpatialItemDTO.  # noqa: E501

        A server-generated ID for the object.  # noqa: E501

        :return: The id of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InternalIdSpatialItemDTO.

        A server-generated ID for the object.  # noqa: E501

        :param id: The id of this InternalIdSpatialItemDTO.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id > 9007199254740991):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `9007199254740991`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this InternalIdSpatialItemDTO.  # noqa: E501

        The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.  # noqa: E501

        :return: The last_updated_time of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this InternalIdSpatialItemDTO.

        The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.  # noqa: E501

        :param last_updated_time: The last_updated_time of this InternalIdSpatialItemDTO.  # noqa: E501
        :type last_updated_time: int
        """
        if self.local_vars_configuration.client_side_validation and last_updated_time is None:  # noqa: E501
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                last_updated_time is not None and last_updated_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_updated_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_updated_time = last_updated_time

    @property
    def created_time(self):
        """Gets the created_time of this InternalIdSpatialItemDTO.  # noqa: E501

        The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.  # noqa: E501

        :return: The created_time of this InternalIdSpatialItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this InternalIdSpatialItemDTO.

        The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.  # noqa: E501

        :param created_time: The created_time of this InternalIdSpatialItemDTO.  # noqa: E501
        :type created_time: int
        """
        if self.local_vars_configuration.client_side_validation and created_time is None:  # noqa: E501
            raise ValueError("Invalid value for `created_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                created_time is not None and created_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `created_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._created_time = created_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalIdSpatialItemDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InternalIdSpatialItemDTO):
            return True

        return self.to_dict() != other.to_dict()
