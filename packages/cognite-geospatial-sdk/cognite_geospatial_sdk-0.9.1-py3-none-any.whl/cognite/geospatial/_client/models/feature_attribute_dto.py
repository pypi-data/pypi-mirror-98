# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial._client.configuration import Configuration


class FeatureAttributeDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'nullable': 'bool',
        'indexed': 'bool',
        'is_array': 'bool',
        'type': 'AttributeTypeDTO',
        'min_size': 'int',
        'max_size': 'int'
    }

    attribute_map = {
        'name': 'name',
        'nullable': 'nullable',
        'indexed': 'indexed',
        'is_array': 'isArray',
        'type': 'type',
        'min_size': 'minSize',
        'max_size': 'maxSize'
    }

    def __init__(self, name=None, nullable=None, indexed=None, is_array=None, type=None, min_size=None, max_size=None, local_vars_configuration=None):  # noqa: E501
        """FeatureAttributeDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._nullable = None
        self._indexed = None
        self._is_array = None
        self._type = None
        self._min_size = None
        self._max_size = None
        self.discriminator = None

        self.name = name
        if nullable is not None:
            self.nullable = nullable
        if indexed is not None:
            self.indexed = indexed
        self.is_array = is_array
        self.type = type
        if min_size is not None:
            self.min_size = min_size
        if max_size is not None:
            self.max_size = max_size

    @property
    def name(self):
        """Gets the name of this FeatureAttributeDTO.  # noqa: E501


        :return: The name of this FeatureAttributeDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeatureAttributeDTO.


        :param name: The name of this FeatureAttributeDTO.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nullable(self):
        """Gets the nullable of this FeatureAttributeDTO.  # noqa: E501

        whether or not this attribute could be absent  # noqa: E501

        :return: The nullable of this FeatureAttributeDTO.  # noqa: E501
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this FeatureAttributeDTO.

        whether or not this attribute could be absent  # noqa: E501

        :param nullable: The nullable of this FeatureAttributeDTO.  # noqa: E501
        :type nullable: bool
        """

        self._nullable = nullable

    @property
    def indexed(self):
        """Gets the indexed of this FeatureAttributeDTO.  # noqa: E501

        whether or not this attribute is indexed  # noqa: E501

        :return: The indexed of this FeatureAttributeDTO.  # noqa: E501
        :rtype: bool
        """
        return self._indexed

    @indexed.setter
    def indexed(self, indexed):
        """Sets the indexed of this FeatureAttributeDTO.

        whether or not this attribute is indexed  # noqa: E501

        :param indexed: The indexed of this FeatureAttributeDTO.  # noqa: E501
        :type indexed: bool
        """

        self._indexed = indexed

    @property
    def is_array(self):
        """Gets the is_array of this FeatureAttributeDTO.  # noqa: E501

        whether or not this attribute is an array of data  # noqa: E501

        :return: The is_array of this FeatureAttributeDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_array

    @is_array.setter
    def is_array(self, is_array):
        """Sets the is_array of this FeatureAttributeDTO.

        whether or not this attribute is an array of data  # noqa: E501

        :param is_array: The is_array of this FeatureAttributeDTO.  # noqa: E501
        :type is_array: bool
        """
        if self.local_vars_configuration.client_side_validation and is_array is None:  # noqa: E501
            raise ValueError("Invalid value for `is_array`, must not be `None`")  # noqa: E501

        self._is_array = is_array

    @property
    def type(self):
        """Gets the type of this FeatureAttributeDTO.  # noqa: E501


        :return: The type of this FeatureAttributeDTO.  # noqa: E501
        :rtype: AttributeTypeDTO
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FeatureAttributeDTO.


        :param type: The type of this FeatureAttributeDTO.  # noqa: E501
        :type type: AttributeTypeDTO
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def min_size(self):
        """Gets the min_size of this FeatureAttributeDTO.  # noqa: E501

        the minimum number of elements in this attribute  # noqa: E501

        :return: The min_size of this FeatureAttributeDTO.  # noqa: E501
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this FeatureAttributeDTO.

        the minimum number of elements in this attribute  # noqa: E501

        :param min_size: The min_size of this FeatureAttributeDTO.  # noqa: E501
        :type min_size: int
        """

        self._min_size = min_size

    @property
    def max_size(self):
        """Gets the max_size of this FeatureAttributeDTO.  # noqa: E501

        the maximum number of elements in this attribute  # noqa: E501

        :return: The max_size of this FeatureAttributeDTO.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this FeatureAttributeDTO.

        the maximum number of elements in this attribute  # noqa: E501

        :param max_size: The max_size of this FeatureAttributeDTO.  # noqa: E501
        :type max_size: int
        """

        self._max_size = max_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureAttributeDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureAttributeDTO):
            return True

        return self.to_dict() != other.to_dict()
