# -*- coding: utf-8 -*-


ERROR_NONE = '未知错误'
ERROR_DATA = '数据错误'
ERROR_DATE = '日期错误'
ERROR_FILE = '文件错误'
ERROR_SECURITY = '标的错误'
ERROR_NOT_EXIST = '文件不存在'

ERROR_INPUT_ACCOUNT_LIST = 'run_realtrade 参数 `account_list` 中账户个数至少为1'
ERROR_NOT_SUPPORT_KWARGS = '不支持的关键字参数: {NOTSUPPORTKWARGS}'
ERROR_ATINTERNAL = 'ATCore 返回错误'
TIP_TEST_DAY = 'Test Day: {Date}'
ERROR_DATA_NORIGHT = '数据未购买，请购买后再使用'
ERROR_KDATA_MISS = 'K线数据缺失'
ERROR_KDATA_MULTI = "get_k_data_multi({TARGETS}, '{FREQUENCY}', {FREQNUM}, {BEGINDATE}, {ENDDATE}, {FILLEDUP}, '{FQTYPE}')"
ERROR_INVALID_FILE = '无效文件: {File}'
FAIL_CONNECT_AT = '无法连接 {ATNAME}，请确保其正在运行...'
FAIL_VERIFY_OTHER = '与 {OTHERNAME} 验证失败...'
TEXT_PREPARE_KDATA = '准备K线数据[{BEGINDATE}--{ENDDATE}][{KFREQUENCY}_{KFRENUM}][{PRETARGET}~{LASTTARGET}]...'
TEXT_PREPARE_TICKDATA = '准备Tick数据[{Day}][{Code}.{Market}]...'
ERROR_IN_FRESHBAR = '不在刷新bar范围'
ERROR_PUSHED_OTHER_BAR = '推送了其他bar的数据'
ERROR_NOTSUPPORT_ATVERSION = '版本不兼容, atrader 版本: {ATRADERVERSION}, 支持的 Auto-Trader 版本: {SUPPORTATVERSION}, {ATNAME} 版本: {ATVERSION}, 支持的 atrader 版本: {ATSUPPORTVERSION}'
ERROR_INPUT_IVALUE = '输入值错误'
ERROR_NOT_SUPPORT_NOW = '暂时不支持'
ERROR_INPUT_CONSTTYPE = '输入类型错误'
ERROR_INPUT_START_DATE = '输入开始日期错误'
ERROR_INPUT_END_DATE = '输入结束日期错误'
ERROR_INPUT_FREQUENCY_FREQNUM = '不支持的频率与频数组合'
ERROR_SUPPORT_MULTI_FREQUENCY = '仅支持频率为 `{FREQUENCY}`, 频数为 1 的参数组合'
ERROR_INPUT_NEED_STOCK_OPTION_FUTURE = '仅支持期货/股票/ETF/期权标的'
ERROR_INPUT_NEED_FUTURE = '仅支持期货标的'
ERROT_INPUT_USER_DATA_TIMELINE_DATALEN = '时间序列与数据序列长度不同'
ERROR_EMPTY_TIME_LINE = '时间轴不能为空'
ERROR_INPUT_BEGIN_GT_ENDDATE = '开始日期不能大于结束日期'
ERROR_INPUT_BEGINDATE_REPLAYDATE = '输入错误: BeginDate 必须小于 RepalyDate'
ERROR_INPUT_CONTRACTS = '交易数量输入错误!'
ERROR_INPUT_TARGRTORDERPRICE = '输入参数错, 不可以同时针对报单和价格止盈止损!'
ERROR_INPUT_FACTOR_TOTAL = '期望因子个数大于等于1'
ERROR_INPUT_EMPTY_PARAM = '输入参数 {PARAMNAME} 不能为空!'
ERROR_ACTION_STOPLESS_WHEN_ALGORITHM = '在算法下单的时候不可以使用止损单!'
ERRPR_STOPGAP_FLOAT = '价格变动点数错误!'
ERROR_EMPTY_TARGETLIST = '标的列表为空'
ERROR_EMPTY_HISTORY_DATA = '取到历史行情数据为空!'
ERROR_EMPTY_TIMELINE = '时间轴空缺, 策略运行失败, 请尝试更改时间'
ERROR_EMPTY_ACCOUNTLIST_REALMODE = '实盘请至少添加一个账户'
ERROR_FREQ_TOO_HIGH = '注册K线基础频率不能高于回测基础频率!'
ERROR_FREQ_NEED_GT_DAY = '当前刷新频率下, 注册K线频率只能为 day, week, month, year'
ERROR_NOTSUPPORT_REPLAY_VERSION = '该版本不支持回放功能'
ERROR_NOTSUPPORT_MULTI_ACCOUNT_REPLAYMODE = '回放请使用单账户操作'
ERROR_NOTSUPPORT_MULTI_ACCOUNT_BACKTESTMODE = '回测请使用单账户操作'
ERROR_NOTSUPPORT_WHEN_REALMODE = '系统当前模式不支持此操作! 请关闭正在进行的实时交易程序.'
ERROR_NOTSUPPORT_FREQUENCY = '不支持的频率：`%s`'
ERROR_NOTSUPPORT_ORDER_DIRECT = '不支持的订单类型'
ERROR_NO_LIMIT_ORDER = 'No such limit order'
ERROR_NO_STOP_ORDER = "Can't find stop order with ID{OrderId}"
ERROR_SUPPORT_TICK = 'Only support in tick frequency.'
ERROR_NOTSUPPORT_TICK_MULTI_FREQNUM = 'tick 频率时, 频数只能为1'
ERROR_NOTSUPPORT_DAY_MULTI_FREQNUM = 'day 频率时, 频数只能为 1'
ERROR_NOTSUPPORT_WEEK_MULTI_FREQNUM = 'week 频率时, 频数只能为 1'
ERROR_NOTSUPPORT_MONTH_MULTI_FREQNUM = 'month 频率时, 频数只能为 1'
ERROR_NOTSUPPORT_FREQ = '暂不支持频率: {KFreq}'
ERROR_REALTRADE_BEGINDATE_OVER = '实盘交易开始时间不能超过当前日期'
ERROR_NOTSUPPORT_RUNMODE = '该函数仅支持在非运行模式下使用'
ERROR_ONLY_SUPPORT_BACKTEST = '仅支持回测模式'
ERROR_INDEX_ERROR = 'Index 错误'
ERROR_PARAM_EMPTY = '参数内容为空'
ERROR_PARAM_CONTENT_NEED_STR_TYPE = '参数内容期望为字符串类型'
ERROR_WRONG_FACTOR_SIZE = 'wrong bpfactor size'
ERROR_WRONG_FACTOR_DATA = 'wrong bpfactor data'
ERROR_ORDERID = 'TargetOrderID 为空或小于0请检查'
ERROR_DOWNLOAD_DATA = '下载数据出现异常, 请再次重试!'
ERROR_STRUCT_RECVDATA = '结构体定义错误'
ERROR_INPUT_PARAM = '输入参数错误'
ERROR_PARAM_NOTCALLBACK = '输入参数 {PARAMNAME} 不是可回调类型'
ERROR_GET_DATA = 'Get Data Error...'
ERROR_NOTCOMPLTE_DATA = '获取数据不完整，请检查!'
ERROR_INVALID_HIGHDATA = '无有效的更高频数据!'
ERROR_OPEN_FILE = "不能打开文件: {File}"
ERROR_INPUT_FREQUENCY = '输入注册频率错误!'
ERROR_UNKNOW_OFFSETFLAG = '未知的OffsetFlag参数'
ERROR_NOTMATCH_CODE_MARKET = '订阅的合约与市场出现不匹配的情况, 导致启动失败, 请检查并重试'
ERROR_ACCOUNT_INVALID = '账户不可用, 请检查账户状态'
ERROR_ACCOUNT_BACKTEST = '回测只能使用回测回放账户, 请重新设置账号'
ERROR_ACCOUNT_REALMODE = '回测回放账户不能用于实盘模拟, 请重新设置账号'
ERROR_DATA_TICK_MISS = '基础 tick 数据不足, 策略运行失败'
ERROR_SERIAL_NOTFIAND_FUNC = '序列化函数 {FUNCNAME} 不存在'
ERROR_ATRADERGETKDATA_FILE = 'AtraderGetKData 获取数据错误, 没有 `Time` 字段'
ERROR_RUNMODE_PHASE = '当前函数 {FUNCNAME} 不能运行在 {PHASE} 阶段'
ERROR_RUNMODE_FUNC = '当前函数 {FUNCNAME} 不能运行在 {RUNMODE} 模式'
ERROR_ADJ_MATRIX_NOT_EXIST = '指定的调价矩阵不存在, 请确认初始化有注册'
ERROR_FUNC_IS_NOT_FUNC = '当前对象不是一个函数'
ERROR_FUNC_ERROR_FUNC_NAME = '函数名称错误s'
ERROR_FUNC_ERROR_ARG_COUNT = '函数参数个数错误'
ERROR_FUNC_ERROR_ARG_NAME = '函数参数名称错误'
ERROR_REG_IDX_PARAM = 'reg_idx 参数错误'
ERROR_STRATEGY_FILE_NOT_EXIST = '策略文件不存在,当前路径为{},请确认入口参数file_path是正确的'

ERROR_FACTOR_TIMELINE_VERIFY = 'failed at data protect with bpfactor for time'
ERROR_FACTOR_INDEX_VERIFY = 'failed at data protect with bpfactor for index'
ERROR_KDATA_INDEX_VERIFY = 'failed at data protect with k'
ERROR_TIMELINE_KDATA_FACTOR = 'time line not match for data and bpfactor'
ERROR_TOOMUCH_TARGETLIST = 'TargetList 长度不能超过 10'
LOG_PREPARE_FACTORDATA = '准备bpfactor数据, [{ITEMNAME}][{MARKET}.{CODE}~{MARKET2}.{CODE2}]...'
LOG_ATRADERDATAVALUEFRESHUSERD = 'g_ATraderDataValueFreshUserD[{!r}:{!r}, {!r}]={!r}'
LOG_REALFRESH_BAR = 'FreshNum {FreshNum}, Run strategy timeline at {Pos}'
LOG_BEFORE_REALFRESH_REAL = '{TIMEPOINT} 实盘策略 {STRATEGYNAME} 开始实时刷新'
LOG_BEFORE_LOOP_K_TIMELINE = 'before loop, k_data{!r}_timeline={!r}'
LOG_BEFORE_LOOP_DVF_TIMELINE = 'before loop, dvf_timeline={!r}'
LOG_REAL_TRADE_FRESH_POSITION = 'before loop, cnt.vr.g_ATraderRealTradeSaveFreshPosition={!r}'

LOG_INNERGETTRADINGTIME = 'Strategy Name: {!r}, [moreTime, moreDayPos] = atGetNewTimeLineAndDayPosition({!r},{!r},{!r}, 0), moreTime.size<1 timeline is empty'
LOG_INNERGETTRADINGTIME2 = 'Strategy Name: {!r}, [moreTime, moreDayPos] = atGetNewTimeLineAndDayPosition({!r},{!r},{!r}, 0), filterTime={!r}, moreTime > filterTime is empty'
ERROR_TICKFRESH_KFREQUENCY = 'Tick 刷新 KFrequency 参数必须为 `tick`'
ERROR_RID_NOT_ASCEND_K_DATA = 'ERROR_RID_NOT_ASCEND_K_DATA:Wrong K data,target_idx:{!r},target_time:{!r},wrong_time={!r},time_exist={!r},time_loc={!r}'
ERROR_CALCFILLED_BPEP = 'expand_update_filled_index, error: begin_pos>end_pos'
LOG_MORE_TIMELINE = '获取到扩展时间轴：base0_time_line ={BASE0TIMELINE}, \nfresh_time_line={FRESHTIMELINE}, \n more_time={MORETIME}, \nmore_day_pos={MOREDAYPOS}'
ERROR_PUSHED_RT_DAYK = 'dayk 推送数据{DAYK}含有未来日期!'

LOG_FATAL_TIMELINE = 'Strategy Name：{Strategy}, Fatal time line error again for DataValueFresh last time: {Time}, KTime: {KTime}'
LOG_FATAL_TIMELINE2 = "coming time line doesn't exist or doesn't increase monotonically"
LOG_PUT_REAL_ORDER = '订单信息: {ORDER}, {RESULT}'
LOG_FUNDAMENTAL_RISK_CMD = '基本面/因子命令{FUNCTIONNAME}@@{PARAM}'
LOG_ENTER_REALTRADE_LOOP = '进入实盘循环'
LOG_QUIT_REALTRADE_LOOP = '退出实盘循环'
ERROR_PARAM_LOAD_MAT = '参数 {PARAM} 期望类型: {NEEDTYPE}, 实际类型: {REALTYPE}'
ERROR_COMPILE_STRATEGY = '编译用户策略错误'
ERROR_NOTEXIST_FUNC = '不存在 {FUNCNAME} 函数'
ERROR_NOT_SUPPORT_TAGERTTYPE = '不支持的交易标的: {TARGET}'
WARN_NOTEXIST_ORDERID = '止盈止损单对应的标的单不存在'
WARN_ORDER_TYPE_ERROR = '报单类型错误{!r}'
WARN_NOTLIMIT_ORDER_PRICE = '非限价单, `price` 应该为 0.0'
ERROR_ORDER_POSITION_EFFECT = '回测暂时只支持开平两种模式(enums.ORDERPOSITIONEFFECT_CLOSE, enums.ORDERPOSITIONEFFECT_OPEN)'
WARN_FREQUENCY_GREAT_DAY = 'set_daily_close, 仅当输入频率为 `day` 时有效, 当前频率: `{FREQUANCY}`'
WARN_CALC_FACTOR_RESULT_FORMAT = 'calc_factor 期望返回 numpy.ndarray 数值类型数据且 Shape=({TARGETLEN},{COLUMNLEN}), Shape[0]为context.target_list的长度'
WARN_USER_INDICES_RESULT_FORMAT = 'reg_userindi 期望返回 numpy.ndarray 数值类型数据且 Shape=({TARGETLEN},{COLUMNLEN})'

ERROR_SET_NONTRADING_PERIOD = '输入时间为非交易时间段'
ERROR_DELEGATE_VOLUME = '委托量不正确'
ERROR_NOTENOUGH_POSITION = '可用仓位不足'
ERROR_INVALID_PRICE = '委托价格异常'
ERROR_INVALID_TARGET = '无效标的{!r}'
ERROR_STOP_ORDER_ID_AND_PRICE = '输入参数错, 不可以同时针对报单和价格止盈止损'
ERROR_INVALID_SIDE = '错误下单头寸'
ERROR_ORDERED_OPERATOR = '交易标的：{TARGET}, 类型: {TARGETTYPE}. 不支持的操作方向, 平仓类型: {OFFSETFLAG}, 买卖方向: {ORDERACT}'
WARN_ERROR_REAL_TIMELINE = '请检查数据, FreshBarTimeLine = {BARFRESHTIMELINE}\nKFreshTimeLine = {KFRESHTIMELINE}\nCurFreshBarPos = {CURFRESHBARPOS}\nFirstPos = {FINDPOS}'

ERROR_NOT_SUPPORT_POSITION_DIRECTION = '不支持的仓位方向'
ERROR_PARAM_MISMATCH_5_8 = '参数个数应为5个或8个'
ERROR_EMPTY_BASEBEGINPOS = 'baseBeginPos.size need >0'
ERROR_TICKDATA_INDEX_VERIFY = 'failed at data protect with tick'
ERROR_EMPTY_EXPEND_TICK_TIMELINE = 'expand tick time line with empty data'
ERROR_EMPTY_EXPEND_TICK_PRICE = 'expand tick price with empty data'
ERROR_CODE_REASON = '{Name}, Code: {Code}, Reason: {Reason}'
ERROR_NO_TIMELINE = 'No data for time line'
ERROR_FILE_PROBLEM = 'File problem'
ERROR_FILE_NO_TIMELINE = 'No file for time line'
ERROR_NO_DATA_RIGHT = '没有数据权限'
ERROR_NO_SUCH_ORDER = 'No such order'
ERROR_REAL_GET_SUB_DATA = '消息码: {MSGTYPE}, 获取数据错误: {DATA}'
ERROR_MIXUSE_CONFIGFUNC_TRADERFUNC = 'innerConfigTo配置型函数与traderBuy等交易型函数不能混用'
ERROR_MODE_ONE = '系统当前模式不支持此操作！请关闭正在进行的回测程序'
ERROR_MODE_TWO = '系统当前模式不支持此操作！请关闭正在进行的回放程序'
ERROR_MODE_THREE = '系统当前模式不支持此操作！请关闭正在进行的实时交易程序'
ERROR_MODE_NOTZERO = '未知的AutoTrader系统模式'
ERROR_RECV_SOCKET_DATA = "从套接字接收数据时发生了一个错误"
ERROR_SEND_SOCKET_DATA = "发送套接字发生了一个错误"
ERROR_ACCOUNT_NOTEXIST = '账户: {account} 不存在'
ERROR_TARGETINFO_EMPTY = '不存在相关标的信息'
ERROR_TARGET_NOT_FIND = 'The target not found'
ERROR_NOT3MODE = 'Only support in BackTest, RealTrade and Replay'
ERROR_DATA_CONVERTOR_OPERATOR = '不存在的数据类型转换: {SRCTYPE} => {DSTTYPE}'
ERROR_MAT_FILE_SHAPE = '标的列表与mat文件数据Shape不一致, 获取数据不完整，请检查'
LOG_BACKTEST_OVER = '回测完毕, 正在处理绩效报告, 请稍等...'
LOG_BACKTEST_TIME = '回测总耗时 {USETIME} 秒'
LOG_REALTRADE_TIME = '实盘总耗时 {USETIME} 秒'
LOG_RUNFACTOR_TIME = '因子回测总耗时 {USETIME} 秒'
LOG_CALCFACTOR_OVER = '因子计算完毕, 正在处理因子报告, 请稍等...'

LOG_REG_REG_KDATA = ' 正在注册K线数据...'
LOG_REG_REG_KDATA_END = ' 已完成K线数据注册'
LOG_REG_REG_FACTOR = ' 正在注册因子数据...'
LOG_REG_REG_FACTOR_END = ' 已完成因子数据注册'
LOG_REG_REG_USERDATA = ' 正在注册用户自定义数据...'
LOG_REG_REG_USERDATA_END = ' 已完成用户自定义数据注册'
LOG_REG_REG_USERINDI = ' 正在注册用户自定义因子数据...'
LOG_REG_REG_USERINDI_END = ' 已完成用户自定义因子数据注册'
LOG_REG_HISTORY_INSTRUMENTS_BEGIN = '正在获取日频信息数据...'
LOG_REG_HISTORY_INSTRUMENTS_END = '已完成日频信息获取'
LOG_REG_HISTORY_INSTRUMENTS = '正在准备日频信息数据...'
LOG_SYS_INIT = '初始化系统...'
LOG_SYS_INIT_END = '完成初始化系统'
LOG_SYS_DATA = '准备策略数据...'
LOG_SYS_DATA_END = '完成准备策略数据'
LOG_SYS_CALL_INIT = '执行回调初始化...'
LOG_SYS_CALL_INIT_END = '完成回调初始化'
LOG_SYS_LOOP = '进入系统循环...'
LOG_SYS_LOOP_END = '完成系统循环'
LOG_SYS_CLEAN = '系统退出清理...'
LOG_SYS_CLEAN_END = '完成系统退出清理'

LOG_CLEAN_CACHE = '正在清理缓存...'
LOG_CLEAN_CACHE_END = '完成清理缓存'
LOG_LOAD_FACTOR_CACHE = ' Load bpfactor data from cache...'
LOG_LOAD_DATA_CACHE = 'Load data from cache...'

# 仅适用于3.2.1 需求文档 8.1
DEPRECATED_WARNING_3_2_1_8_1 = '该函数将在未来版本中被移除, 请根据行业成分, 指数成分, 指数权重, 期货合约使用对应的函数'

# 参数检查相关
ARGCHECKER_INVALID_PARAM_ERROR = '函数 {}: 无效 {} 参数, 文件路径 {} 不存在'
ARGCHECKER_INVALID_PARAM_EXPECT_ERROR = '函数 {}: 无效 {} 参数, 期望值类型 {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_CALLABLE_ERROR = '函数 {}: 无效 {} 参数, 期望值类型为可调用类型, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_EMPTY_ERROR = '函数 {}: 无效 {} 参数, 期望参数值长度等于0, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_NONEMPTY_ERROR = '函数 {}: 无效 {} 参数, 期望参数值长度大于0, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_VALID_ERROR = '函数 {}: 无效 {} 参数, 有效值 {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_VALIDDATE_ERROR = '函数 {}: 无效 {} 参数, 期望一个有效日期, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_VALIDDATE_ERROR2 = '函数 {}: 无效 {} 参数, 期望: str, datetime, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_FUNCTYPE_ERROR = '函数 {}: 无效 {} 参数, 希望为可调用类型, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_FUNCTYPE_ERROR2 = '函数 {}: 无效参数, 希望为可调用类型, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_VALIDINT_ERROR = '函数 {}: 无效 {} 参数, 期望 int 类型, 比如: 20180303, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_FUTURE_DATE_ERROR = '日期 {} 属于未来日期'
ARGCHECKER_INVALID_PARAM_SUBSET_ERROR = '函数 {}: 参数 {} 值, 不是集合 {} 的子集'
ARGCHECKER_INVALID_PARAM_EXPECT_GREATER_ERROR = '函数 {}: 无效 {} 参数, 期望值大于 {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_GREATER_EQUAL_ERROR = '函数 {}: 无效 {} 参数, 期望值大于等于 {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_LESS_ERROR = '函数 {}: 无效 {} 参数, 期望值小于 {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_LESS_EQUAL_ERROR = '函数 {}: 无效 {} 参数, 期望值小于等于 {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_FREQUENCY_ERROR = '函数 {}: 无效 {} 参数, 期望频率 {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_FQ_ERROR = '函数 {}: 无效 {} 参数, 期望复权类型: 0,1,2, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECT_ONEOF_ERROR = '函数 {}: 无效 {} 参数, 期望: {}, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_DATERANGE_ERROR = '开始日期 {} 大于结束日期 {}'
ARGCHECKER_INVALID_PARAM_EXPECTDATE_ERROR = '期望日期从1900至今'
ARGCHECKER_INVALID_PARAM_EXPECTNARGS_ERROR = '函数 {}: 无效参数, 期望 {} 个参数, 得到 {} (类型: {})'
ARGCHECKER_INVALID_PARAM_EXPECTSIGN_ERROR = '{}, 期望签名 `{}`'
ARGCHECKER_INVALID_PARAM_NDARRAYIDX_ERROR0 = '函数 {}: 无效 {} 参数, 期望大小值个数至少为1, 得到 0 个'
ARGCHECKER_INVALID_PARAM_NDARRAYIDX_ERROR1 = '函数 {}: 无效 {} 参数, 错误值项小于 {}'
ARGCHECKER_INVALID_PARAM_NDARRAYIDX_ERROR2 = '函数 {}: 无效 {} 参数, 错误值项大于 {}'
ARGCHECKER_INVALID_PARAM_NDARRAYIDX_DTYPE_ERROR = '函数 {}: 无效 {} 参数, 期望 dtype 类型 {} , 得到 dtype 类型 {}'
ARGCHECKER_INVALID_PARAM_NDARRAYIDX_NONE_ERROR = '函数 {}: 无效 {} 参数, 期望值项不包含 None 类型'
ARGCHECKER_INVALID_PARAM_NDARRAYIDX_NAN_ERROR = '函数 {}: 无效 {} 参数, 期望值项不包含 NaN 类型'
ARGCHECKER_INVALID_PARAM_NDARRAYIDX_NDARRAY_ERROR = '函数 {}: 无效 {} 参数, 期望类型 numpy.ndarray 类型, 得到 {} 类型'
