name: Publish Connect Command Line Client

on:
  push:
    tags:
        - '*'

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/test.txt
        pip install pyinstaller
    - name: Linting
      run: |
        flake8
    - name: Testing
      run: |
        pytest
    - name: Build and publish to pypi.org
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
        rm -f dist/*
    - name: Extract tag name
      uses: actions/github-script@v3
      id: tag
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '')
    - name: Build linux distro
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pyinstaller resources/ccli.spec
    - name: Package linux distro
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tar cvfz connect-cli_${{ steps.tag.outputs.result }}_linux_amd64.tar.gz dist
    - name: Upload distro package to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: linux_distro
        path: connect-cli_${{ steps.tag.outputs.result }}_linux_amd64.tar.gz
        retention-days: 5
  windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/test.txt
        pip install pyinstaller
    - name: Extract tag name
      uses: actions/github-script@v3
      id: tag
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '')
    - name: Build windows distro
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pyinstaller resources/ccli.spec
    - name: Package windows distro
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OS_NAME: windows
        CPU_ARCH: amd64
        PKG_TAG: ${{ steps.tag.outputs.result }}
      run: |
        & { compress-archive -path '.\dist' -destinationpath '.\connect-cli_${{ steps.tag.outputs.result }}_windows_amd64.zip' }
    - name: Upload distro package to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows_distro
        path: connect-cli_${{ steps.tag.outputs.result }}_windows_amd64.zip
        retention-days: 5
  osx:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/test.txt
        pip install pyinstaller
    - name: Extract tag name
      uses: actions/github-script@v3
      id: tag
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '')
    - name: Build osx distro
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pyinstaller resources/ccli.spec
    - name: Package osx distro
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tar cvfz connect-cli_${{ steps.tag.outputs.result }}_osx_amd64.tar.gz dist
    - name: Upload distro package to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: osx_distro
        path: connect-cli_${{ steps.tag.outputs.result }}_osx_amd64.tar.gz
        retention-days: 5
  release:
    runs-on: ubuntu-latest
    needs: [linux, windows, osx]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Extract tag name
      uses: actions/github-script@v3
      id: tag
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '')
    - name: Create release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.result }}
        release_name: Release ${{ steps.tag.outputs.result }}
        draft: false
        prerelease: false
    - name: Download linux artifact
      uses: actions/download-artifact@v2
      with:
        name: linux_distro
        path: ./
    - name: Attach linux distro to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./connect-cli_${{ steps.tag.outputs.result }}_linux_amd64.tar.gz
        asset_name: connect-cli_${{ steps.tag.outputs.result }}_linux_amd64.tar.gz
        asset_content_type: application/tar+gzip
    - name: Download windows artifact
      uses: actions/download-artifact@v2
      with:
        name: windows_distro
        path: ./
    - name: Attach windows distro to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./connect-cli_${{ steps.tag.outputs.result }}_windows_amd64.zip
        asset_name: connect-cli_${{ steps.tag.outputs.result }}_windows_amd64.zip
        asset_content_type: application/zip
    - name: Download osx artifact
      uses: actions/download-artifact@v2
      with:
        name: osx_distro
        path: ./
    - name: Attach osx distro to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./connect-cli_${{ steps.tag.outputs.result }}_osx_amd64.tar.gz
        asset_name: connect-cli_${{ steps.tag.outputs.result }}_osx_amd64.tar.gz
        asset_content_type: application/tar+gzip
