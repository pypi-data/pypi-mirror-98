Metadata-Version: 2.1
Name: threedi-raster-edits
Version: 0.1
Summary: Threedi Raster Edits provides python tooling for threedi such as raster-conversion, alignment, fillers, checks and others
Home-page: https://github.com/nens/threedi-raster-edits
Author: Chris Kerklaan
Author-email: chris.kerklaan@nelen-schuurmans.nl
License: MIT
Description: threedi-raster-edits
        ==========================================
        
        Introduction
        
        Usage, etc.
        
        
        Installation
        ------------
        
        We can be installed with::
        
          $ pip install threedi-raster-edits
        
        (TODO: after the first release has been made)
        
        
        Development installation of this project itself
        -----------------------------------------------
        GDAL is not automatically installed, hence not available in the requirement,so please install gdal 3.2.0 yourself or use anaconda::
        
          $ conda create -n threedi_raster_edits python=3 gdal=3.2.0 rtree black pytest
          
        We use python's build-in "virtualenv" to get a nice isolated directory. You
        only need to run this once::
        
          $ python3 -m venv .
        
        A virtualenv puts its commands in the ``bin`` directory. So ``bin/pip``,
        ``bin/pytest``, etc. Set up the dependencies like this::
        
          $ bin/pip install -r requirements.txt
        
        There will be a script you can run like this::
        
          $ bin/run-threedi-raster-edits
        
        It runs the `main()` function in `threedi-raster-edits/scripts.py`,
        adjust that if necessary. The script is configured in `setup.py` (see
        `entry_points`).
        
        In order to get nicely formatted python files without having to spend manual
        work on it, run the following command periodically::
        
          $ bin/black threedi_raster_edits
        
        Run the tests regularly. This also checks with pyflakes, black and it reports
        coverage. Pure luxury::
        
          $ bin/pytest
        
        The tests are also run automatically `on "github actions"
        <https://githug.com/nens/threedi-raster-edits/actions>`_ for
        "master" and for pull requests. So don't just make a branch, but turn it into
        a pull request right away:
        
        - Prepend the title with "[WIP]", work in progress. That way you make clear it
          isn't ready yet to be merged.
        
        - **Important**: it is easy to give feedback on pull requests. Little comments
          on the individual lines, for instance. So use it to get early feedback, if
          you think that's useful.
        
        - On your pull request page, you also automatically get the feedback from the
          automated tests.
        
        There's also
        `coverage reporting <https://coveralls.io/github/nens/threedi-raster-edits>`_
        on coveralls.io (once it has been set up).
        
        If you need a new dependency (like ``requests``), add it in ``setup.py`` in
        ``install_requires``. Local development tools, like "black", can be added to the
        ``requirements.txt`` directoy. In both cases, run install again to actuall
        install your dependency::
        
          $ bin/pip install -r requirements.txt
        
        
        Steps to do after generating with cookiecutter
        ----------------------------------------------
        
        - Add a new project on https://github.com/nens/ with the same name. Set
          visibility to "public" and do not generate a license or readme.
        
          Note: "public" means "don't put customer data or sample data with real
          persons' addresses on github"!
        
        - Follow the steps you then see (from "git init" to "git push origin master")
          and your code will be online.
        
        - Go to
          https://github.com/nens/threedi-raster-edits/settings/collaboration
          and add the teams with write access (you might have to ask someone with
          admin rights to do it).
        
        - Update this readme. Use `.rst
          <http://www.sphinx-doc.org/en/stable/rest.html>`_ as the format.
        
        - Ask Reinout to configure travis and coveralls.
        
        - Remove this section as you've done it all :-)
        
        
        Changelog of threedi-raster-edits
        ===================================================
        
        
        0.1 (2021-03-11)
        ----------------
        
        - Initial project structure created with cookiecutter and
          https://github.com/nens/cookiecutter-python-template
        
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Framework :: Django
Provides-Extra: test
