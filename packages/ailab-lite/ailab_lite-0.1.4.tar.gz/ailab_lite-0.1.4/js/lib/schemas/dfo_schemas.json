[
  {
    "doc": "Take the absolute value of the input",
    "js_name": "DFOAbs",
    "name": "AbsCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the angle of the complex input",
    "js_name": "DFOAngle",
    "name": "AngleCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Elementwise sum, the output data-type will be the same as that of the data entering in the in_uid.",
    "js_name": "DFOAdd",
    "name": "AddCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Estimate the analytic signal using a locally filtered maximum likelihood method",
    "js_name": "DFOAnalyticSignal",
    "name": "AnalyticSignalCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis", "freq", "window_length"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": -1
      },
      "freq": {
        "name": "freq",
        "description": "A frequency in Hz or a wavenumber in 1/m",
        "types": [],
        "is_optional": true,
        "default": 200.0
      },
      "window_length": {
        "name": "window_length",
        "description": "The length of a filter window in samples",
        "types": [],
        "is_optional": true,
        "default": 5
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": -1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        },
        "freq": {
          "type": "string",
          "title": "freq",
          "default": 200.0,
          "description": "A frequency in Hz or a wavenumber in 1/m",
          "is_optional": false
        },
        "window_length": {
          "type": "string",
          "title": "window_length",
          "default": 5,
          "description": "The length of a filter window in samples",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Index of the maximum value in each row or column.",
    "js_name": "DFOArgmax",
    "name": "ArgmaxCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": -1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": -1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "A weighted average focussed on the central trace, equivalent to a very low pass filter. The results approximate the very low frequency response in a robust way.",
    "js_name": "DFOApproxVlf",
    "name": "ApproxVlfCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Return a masks within a pair of bounds on the data (e.g. selecting a cluster from k-means results).",
    "js_name": "DFOBoundedSelect",
    "name": "BoundedSelectCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["min_val", "max_val"],
    "params": {
      "min_val": {
        "name": "min_val",
        "description": "A lower bound",
        "types": [],
        "is_optional": true,
        "default": 0.0
      },
      "max_val": {
        "name": "max_val",
        "description": "An upper bound",
        "types": [],
        "is_optional": true,
        "default": 1.0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "min_val": {
          "type": "string",
          "title": "min_val",
          "default": 0.0,
          "description": "A lower bound",
          "is_optional": false
        },
        "max_val": {
          "type": "string",
          "title": "max_val",
          "default": 1.0,
          "description": "An upper bound",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Broadening of the local maxima, by extending them in time.",
    "js_name": "DFOPeakBroadening",
    "name": "PeakBroadeningCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["window_length"],
    "params": {
      "window_length": {
        "name": "window_length",
        "description": "The length of a filter window in samples",
        "types": [],
        "is_optional": true,
        "default": 5
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "window_length": {
          "type": "string",
          "title": "window_length",
          "default": 5,
          "description": "The length of a filter window in samples",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Setup a Butterworth filter using scipy.signal.butter() and apply it using scipy.signal.filtfilt()",
    "js_name": "DFOButter",
    "name": "ButterCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["order", "type", "padtype", "prf", "freq", "axis"],
    "params": {
      "order": {
        "name": "order",
        "description": "The order for a filter calculation such as the Butterworth filter",
        "types": [],
        "is_optional": true,
        "default": 5
      },
      "type": {
        "name": "type",
        "description": "The type of a filter which can be lowpass, highpass, bandpass, or bandstop",
        "types": [],
        "is_optional": true,
        "default": "lowpass"
      },
      "padtype": {
        "name": "padtype",
        "description": "The type of end-effect control on a filter, see scipy.signal.filtfilt",
        "types": [],
        "is_optional": true,
        "default": "even"
      },
      "prf": {
        "name": "prf",
        "description": "The pulse repetition frequency in Hz (one over the time sample rate)",
        "types": [],
        "is_optional": true,
        "default": 10000
      },
      "freq": {
        "name": "freq",
        "description": "A frequency in Hz or a wavenumber in 1/m",
        "types": [],
        "is_optional": true,
        "default": 200.0
      },
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": -1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "title": "order",
          "default": 5,
          "description": "The order for a filter calculation such as the Butterworth filter",
          "is_optional": false
        },
        "type": {
          "type": "string",
          "title": "type",
          "default": "lowpass",
          "description": "The type of a filter which can be lowpass, highpass, bandpass, or bandstop",
          "is_optional": false
        },
        "padtype": {
          "type": "string",
          "title": "padtype",
          "default": "even",
          "description": "The type of end-effect control on a filter, see scipy.signal.filtfilt",
          "is_optional": false
        },
        "prf": {
          "type": "string",
          "title": "prf",
          "default": 10000,
          "description": "The pulse repetition frequency in Hz (one over the time sample rate)",
          "is_optional": false
        },
        "freq": {
          "type": "string",
          "title": "freq",
          "default": 200.0,
          "description": "A frequency in Hz or a wavenumber in 1/m",
          "is_optional": false
        },
        "axis": {
          "type": "string",
          "title": "axis",
          "default": -1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Clip the data so that all subsequent operations operate on a small window. If directory_out is specified the new axes will also be created in the storage directory",
    "js_name": "DFOClip",
    "name": "ClipCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [
      "xaxis",
      "taxis",
      "xmin",
      "xmax",
      "tmin",
      "tmax",
      "directory_out",
      "double_ended"
    ],
    "params": {
      "xaxis": {
        "name": "xaxis",
        "description": "A numpy vector of distances along the fibre",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "taxis": {
        "name": "taxis",
        "description": "A numpy vector of times associated with columns of data",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "xmin": {
        "name": "xmin",
        "description": "A minimum value on the x-axis",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "xmax": {
        "name": "xmax",
        "description": "A maximum value on the x-axis",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "tmin": {
        "name": "tmin",
        "description": "A minimum value on the time-axis",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "tmax": {
        "name": "tmax",
        "description": "A maximum value on the time-axis",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "directory_out": {
        "name": "directory_out",
        "description": "The subdirectory where results will be written",
        "types": [],
        "is_optional": true,
        "default": "NONE"
      },
      "double_ended": {
        "name": "double_ended",
        "description": "For handling double-ended fibre [-1=single-ended, 0=start-of-fibre half, 1=end-of-fibre half",
        "types": [],
        "is_optional": true,
        "default": -1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "xaxis": {
          "type": "string",
          "title": "xaxis",
          "default": null,
          "description": "A numpy vector of distances along the fibre",
          "is_optional": true
        },
        "taxis": {
          "type": "string",
          "title": "taxis",
          "default": null,
          "description": "A numpy vector of times associated with columns of data",
          "is_optional": true
        },
        "xmin": {
          "type": "string",
          "title": "xmin",
          "default": null,
          "description": "A minimum value on the x-axis",
          "is_optional": true
        },
        "xmax": {
          "type": "string",
          "title": "xmax",
          "default": null,
          "description": "A maximum value on the x-axis",
          "is_optional": true
        },
        "tmin": {
          "type": "string",
          "title": "tmin",
          "default": null,
          "description": "A minimum value on the time-axis",
          "is_optional": true
        },
        "tmax": {
          "type": "string",
          "title": "tmax",
          "default": null,
          "description": "A maximum value on the time-axis",
          "is_optional": true
        },
        "directory_out": {
          "type": "string",
          "title": "directory_out",
          "default": "NONE",
          "description": "The subdirectory where results will be written",
          "is_optional": false
        },
        "double_ended": {
          "type": "string",
          "title": "double_ended",
          "default": -1,
          "description": "For handling double-ended fibre [-1=single-ended, 0=start-of-fibre half, 1=end-of-fibre half",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the complex conjugate value of the input",
    "js_name": "DFOConj",
    "name": "ConjCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Convolves the supplied filter with the data.",
    "js_name": "DFOConvolve",
    "name": "ConvolveCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["coeffs", "mode"],
    "params": {
      "coeffs": {
        "name": "coeffs",
        "description": "Filter coefficients",
        "types": [],
        "is_optional": true,
        "default": [
          [1, 0, -1],
          [2, 0, -2],
          [1, 0, -1]
        ]
      },
      "mode": {
        "name": "mode",
        "description": "Filter edge handling, see the scipy.ndimage documentation.",
        "types": [],
        "is_optional": true,
        "default": "constant"
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "coeffs": {
          "type": "string",
          "title": "coeffs",
          "default": [
            [1, 0, -1],
            [2, 0, -2],
            [1, 0, -1]
          ],
          "description": "Filter coefficients",
          "is_optional": false
        },
        "mode": {
          "type": "string",
          "title": "mode",
          "default": "constant",
          "description": "Filter edge handling, see the scipy.ndimage documentation.",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Correlates the supplied filter with the data.",
    "js_name": "DFOCorrelate",
    "name": "CorrelateCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["coeffs", "mode"],
    "params": {
      "coeffs": {
        "name": "coeffs",
        "description": "Filter coefficients",
        "types": [],
        "is_optional": true,
        "default": [
          [0, 0, 1],
          [0, 1, 0],
          [1, 0, 0],
          [0, 1, 0],
          [0, 0, 1]
        ]
      },
      "mode": {
        "name": "mode",
        "description": "Filter edge handling, see the scipy.ndimage documentation.",
        "types": [],
        "is_optional": true,
        "default": "constant"
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "coeffs": {
          "type": "string",
          "title": "coeffs",
          "default": [
            [0, 0, 1],
            [0, 1, 0],
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
          ],
          "description": "Filter coefficients",
          "is_optional": false
        },
        "mode": {
          "type": "string",
          "title": "mode",
          "default": "constant",
          "description": "Filter edge handling, see the scipy.ndimage documentation.",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Couting peaks in a signal using scipy.signal.find_peaks_cwt().",
    "js_name": "DFOCountPeaks",
    "name": "CountPeaksCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["sta", "lta"],
    "params": {
      "sta": {
        "name": "sta",
        "description": "The short-term average window-length in samples",
        "types": [],
        "is_optional": true,
        "default": 50
      },
      "lta": {
        "name": "lta",
        "description": "The long-term average window-length in samples",
        "types": [],
        "is_optional": true,
        "default": 200
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "sta": {
          "type": "string",
          "title": "sta",
          "default": 50,
          "description": "The short-term average window-length in samples",
          "is_optional": false
        },
        "lta": {
          "type": "string",
          "title": "lta",
          "default": 200,
          "description": "The long-term average window-length in samples",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Load a npy format file.",
    "js_name": "DFOReadNPY",
    "name": "ReadNPYCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["directory_out", "filename"],
    "params": {
      "directory_out": {
        "name": "directory_out",
        "description": "The subdirectory where results will be written",
        "types": [],
        "is_optional": true,
        "default": "NONE"
      },
      "filename": {
        "name": "filename",
        "description": "A filename for read or write operations",
        "types": [],
        "is_optional": true,
        "default": "NONE"
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "directory_out": {
          "type": "string",
          "title": "directory_out",
          "default": "NONE",
          "description": "The subdirectory where results will be written",
          "is_optional": false
        },
        "filename": {
          "type": "string",
          "title": "filename",
          "default": "NONE",
          "description": "A filename for read or write operations",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Remove vertical stripes from the data using extra_numpy.destripe().",
    "js_name": "DFODestripe",
    "name": "DestripeCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Simple differencing using the window_length as the offset.",
    "js_name": "DFODiff",
    "name": "DiffCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["window_length", "axis"],
    "params": {
      "window_length": {
        "name": "window_length",
        "description": "The length of a filter window in samples",
        "types": [],
        "is_optional": true,
        "default": 5
      },
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": -1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "window_length": {
          "type": "string",
          "title": "window_length",
          "default": 5,
          "description": "The length of a filter window in samples",
          "is_optional": false
        },
        "axis": {
          "type": "string",
          "title": "axis",
          "default": -1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Downsampling to reduce the data size.",
    "js_name": "DFODownsample",
    "name": "DownsampleCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["xsample", "tsample"],
    "params": {
      "xsample": {
        "name": "xsample",
        "description": "The level of downsampling in the x-directioin",
        "types": [],
        "is_optional": true,
        "default": 1
      },
      "tsample": {
        "name": "tsample",
        "description": "The level of downsampling in the time-direction",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "xsample": {
          "type": "string",
          "title": "xsample",
          "default": 1,
          "description": "The level of downsampling in the x-directioin",
          "is_optional": false
        },
        "tsample": {
          "type": "string",
          "title": "tsample",
          "default": 1,
          "description": "The level of downsampling in the time-direction",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "time-space domain dip filter.",
    "js_name": "DFOTXDip",
    "name": "TXDipCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["velocity", "bandwidth", "shape"],
    "params": {
      "velocity": {
        "name": "velocity",
        "description": "Phase velocity",
        "types": [],
        "is_optional": true,
        "default": 100
      },
      "bandwidth": {
        "name": "bandwidth",
        "description": "Width of the Gaussian ray in pixels",
        "types": [],
        "is_optional": true,
        "default": 0.1
      },
      "shape": {
        "name": "shape",
        "description": "Shape of the filter in pixels e.g. [9,9], both values must be even",
        "types": [],
        "is_optional": true,
        "default": [9, 9]
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "velocity": {
          "type": "string",
          "title": "velocity",
          "default": 100,
          "description": "Phase velocity",
          "is_optional": false
        },
        "bandwidth": {
          "type": "string",
          "title": "bandwidth",
          "default": 0.1,
          "description": "Width of the Gaussian ray in pixels",
          "is_optional": false
        },
        "shape": {
          "type": "string",
          "title": "shape",
          "default": [9, 9],
          "description": "Shape of the filter in pixels e.g. [9,9], both values must be even",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Calculate the down-going waves using extra_numpy.down_wave(). Note that the data should be 2D FFTd before this command and are returned as complex values.",
    "js_name": "DFODown",
    "name": "DownCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Extracts a single row or column as a separate dataset",
    "js_name": "DFOExtract",
    "name": "ExtractCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["index", "axis"],
    "params": {
      "index": {
        "name": "index",
        "description": "The index of a row or column in sanmples",
        "types": [],
        "is_optional": true,
        "default": 0
      },
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "title": "index",
          "default": 0,
          "description": "The index of a row or column in sanmples",
          "is_optional": false
        },
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Compute the Fast Fourier Transform (FFT) of the data along the requested axis.",
    "js_name": "DFOFFT",
    "name": "FFTCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Put the current result on the CPU and perform subsequent steps there. If no GPU is available, this has no effect.",
    "js_name": "DFOFromGPU",
    "name": "FromGPUCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Gathers the data with all the data provided in the gather_uids to make one big matrix",
    "js_name": "DFOGather",
    "name": "GatherCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Applies a 2D Gaussian blurring filter using signal.ndarray.gaussian_filter().",
    "js_name": "DFOGaussian",
    "name": "GaussianCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["xsigma", "tsigma", "xorder", "torder"],
    "params": {
      "xsigma": {
        "name": "xsigma",
        "description": "A standard deviation in the x-direction",
        "types": [],
        "is_optional": true,
        "default": 1.0
      },
      "tsigma": {
        "name": "tsigma",
        "description": "A standard deviation in the time direction",
        "types": [],
        "is_optional": true,
        "default": 1.0
      },
      "xorder": {
        "name": "xorder",
        "description": "In a 2D filter this is the order in the x-direction",
        "types": [],
        "is_optional": true,
        "default": 5
      },
      "torder": {
        "name": "torder",
        "description": "In a 2D filter, this is the order in the t-direction",
        "types": [],
        "is_optional": true,
        "default": 5
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "xsigma": {
          "type": "string",
          "title": "xsigma",
          "default": 1.0,
          "description": "A standard deviation in the x-direction",
          "is_optional": false
        },
        "tsigma": {
          "type": "string",
          "title": "tsigma",
          "default": 1.0,
          "description": "A standard deviation in the time direction",
          "is_optional": false
        },
        "xorder": {
          "type": "string",
          "title": "xorder",
          "default": 5,
          "description": "In a 2D filter this is the order in the x-direction",
          "is_optional": false
        },
        "torder": {
          "type": "string",
          "title": "torder",
          "default": 5,
          "description": "In a 2D filter, this is the order in the t-direction",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the geometric mean of the input using scipy.stats.gmean().",
    "js_name": "DFOGeometricMean",
    "name": "GeometricMeanCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Numercal gradient of the data via central differencing.",
    "js_name": "DFOGradient",
    "name": "GradientCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["edge_order", "axis"],
    "params": {
      "edge_order": {
        "name": "edge_order",
        "description": "Gradient is calculatd using N-th order accurate differences at the boundaries",
        "types": [],
        "is_optional": true,
        "default": 1
      },
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "edge_order": {
          "type": "string",
          "title": "edge_order",
          "default": 1,
          "description": "Gradient is calculatd using N-th order accurate differences at the boundaries",
          "is_optional": false
        },
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 0,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the harmonic mean of the input using scipy.stats.hmean().",
    "js_name": "DFOHarmonicMean",
    "name": "HarmonicMeanCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 0,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Applies a hard threshold, all values beyond the threshold are replaced with the supplied value.",
    "js_name": "DFOHardThreshold",
    "name": "HardThresholdCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["direction", "threshold", "value"],
    "params": {
      "direction": {
        "name": "direction",
        "description": "The direction for applying the threshold, > or <",
        "types": [],
        "is_optional": true,
        "default": ">"
      },
      "threshold": {
        "name": "threshold",
        "description": "An upper or lower limit",
        "types": [],
        "is_optional": true,
        "default": 0
      },
      "value": {
        "name": "value",
        "description": "A single floating point number",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "title": "direction",
          "default": ">",
          "description": "The direction for applying the threshold, > or <",
          "is_optional": false
        },
        "threshold": {
          "type": "string",
          "title": "threshold",
          "default": 0,
          "description": "An upper or lower limit",
          "is_optional": false
        },
        "value": {
          "type": "string",
          "title": "value",
          "default": 0,
          "description": "A single floating point number",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Compute the Inverse Fast Fourier Transform (IFFT) of the data along the requested axis.",
    "js_name": "DFOIFFT",
    "name": "IFFTCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 0,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Load an existing keras model, and either use it for prediction or train-then-predict.",
    "js_name": "DFOKeras",
    "name": "KerasCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["filename", "train"],
    "params": {
      "filename": {
        "name": "filename",
        "description": "A filename for read or write operations",
        "types": [],
        "is_optional": true,
        "default": "NONE"
      },
      "train": {
        "name": "train",
        "description": "A dictionary containing training parameters for keras, e.g. { 'epochs' : 150, 'batch_size' : 10 }",
        "types": [],
        "is_optional": true,
        "default": ""
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "title": "filename",
          "default": "NONE",
          "description": "A filename for read or write operations",
          "is_optional": false
        },
        "train": {
          "type": "string",
          "title": "train",
          "default": "",
          "description": "A dictionary containing training parameters for keras, e.g. { 'epochs' : 150, 'batch_size' : 10 }",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Perform a KMeans clustering into a fixed number of clusters. Return the cluster number versus depth.",
    "js_name": "DFOKMeans",
    "name": "KMeansCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["n_clusters"],
    "params": {
      "n_clusters": {
        "name": "n_clusters",
        "description": "The number of clusters to use when classifying the data",
        "types": [],
        "is_optional": true,
        "default": 10
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "n_clusters": {
          "type": "string",
          "title": "n_clusters",
          "default": 10,
          "description": "The number of clusters to use when classifying the data",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the kurtosis of the input using scipy.stats.kurtosis(). Use k statistics to eliminate bias and omit any NaNs.",
    "js_name": "DFOKurtosis",
    "name": "KurtosisCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 0,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Provide two scalars m and c, linearly transform the data y = m*data + c",
    "js_name": "DFOLinearTransform",
    "name": "LinearTransformCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["m", "c"],
    "params": {
      "m": {
        "name": "m",
        "description": "The slope of a linear transform (y = m*x + c)",
        "types": [],
        "is_optional": true,
        "default": 1.0
      },
      "c": {
        "name": "c",
        "description": "The intercept of a linear transform (y = m*x + c)",
        "types": [],
        "is_optional": true,
        "default": 0.0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "m": {
          "type": "string",
          "title": "m",
          "default": 1.0,
          "description": "The slope of a linear transform (y = m*x + c)",
          "is_optional": false
        },
        "c": {
          "type": "string",
          "title": "c",
          "default": 0.0,
          "description": "The intercept of a linear transform (y = m*x + c)",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Create a macro containing sub-commands",
    "js_name": "DFOMacro",
    "name": "MacroCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["command_list"],
    "params": {
      "command_list": {
        "name": "command_list",
        "description": "A list of sub-commands collected in a single macro",
        "types": [],
        "is_optional": true,
        "default": ""
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "command_list": {
          "type": "string",
          "title": "command_list",
          "default": "",
          "description": "A list of sub-commands collected in a single macro",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Applies a 2D square median filter using ndimage.median_filter().",
    "js_name": "DFOMedianFilter",
    "name": "MedianFilterCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["distance"],
    "params": {
      "distance": {
        "name": "distance",
        "description": "The number of samples in a median filter",
        "types": [],
        "is_optional": true,
        "default": 3
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "distance": {
          "type": "string",
          "title": "distance",
          "default": 3,
          "description": "The number of samples in a median filter",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the mean of the input using numpy.mean().",
    "js_name": "DFOMean",
    "name": "MeanCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 0,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Elementwise multiply, the output data-type will be the same as that of the data entering in the in_uid. This data is multiplied by data provided in the gather_uids",
    "js_name": "DFOMultiply",
    "name": "MultiplyCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Perform multiple calculations using the extra_numpy.reduced_mem() system.",
    "js_name": "DFOMultipleCalcs",
    "name": "MultipleCalcsCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["low_freq", "high_freq", "func"],
    "params": {
      "low_freq": {
        "name": "low_freq",
        "description": "A list of low frequency values for band-pass windows in Hz",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "high_freq": {
        "name": "high_freq",
        "description": "A list of high frequency values for band-pass windows in Hz",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "func": {
        "name": "func",
        "description": "Either rms_from_fft or te_from_fft",
        "types": [],
        "is_optional": true,
        "default": ""
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "low_freq": {
          "type": "string",
          "title": "low_freq",
          "default": null,
          "description": "A list of low frequency values for band-pass windows in Hz",
          "is_optional": true
        },
        "high_freq": {
          "type": "string",
          "title": "high_freq",
          "default": null,
          "description": "A list of high frequency values for band-pass windows in Hz",
          "is_optional": true
        },
        "func": {
          "type": "string",
          "title": "func",
          "default": "",
          "description": "Either rms_from_fft or te_from_fft",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "The maximum peak-to-peak difference with the maximum and minimum separated by less than the defined window_length. This reduces the data from 2D (x,t) to a trace (x).",
    "js_name": "DFOPeak2Peak",
    "name": "Peak2PeakCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["window_length"],
    "params": {
      "window_length": {
        "name": "window_length",
        "description": "The length of a filter window in samples",
        "types": [],
        "is_optional": true,
        "default": 5
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "window_length": {
          "type": "string",
          "title": "window_length",
          "default": 5,
          "description": "The length of a filter window in samples",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Calculate the RMS energy between two frequencies.",
    "js_name": "DFORMSfromFFT",
    "name": "RMSfromFFTCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["low_freq", "high_freq"],
    "params": {
      "low_freq": {
        "name": "low_freq",
        "description": "A list of low frequency values for band-pass windows in Hz",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "high_freq": {
        "name": "high_freq",
        "description": "A list of high frequency values for band-pass windows in Hz",
        "types": [],
        "is_optional": true,
        "default": null
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "low_freq": {
          "type": "string",
          "title": "low_freq",
          "default": null,
          "description": "A list of low frequency values for band-pass windows in Hz",
          "is_optional": true
        },
        "high_freq": {
          "type": "string",
          "title": "high_freq",
          "default": null,
          "description": "A list of high frequency values for band-pass windows in Hz",
          "is_optional": true
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the real value of the input",
    "js_name": "DFOReal",
    "name": "RealCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Rescale the data from 0 to 1. If an additional data set it suppied, the rescale uses that data for min() and max()",
    "js_name": "DFORescale",
    "name": "RescaleCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Rolls the data along the specified axis, using numpy.roll(). An array can be passed in through gather_uid",
    "js_name": "DFORoll",
    "name": "RollCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis", "window_length"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 1
      },
      "window_length": {
        "name": "window_length",
        "description": "The length of a filter window in samples",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        },
        "window_length": {
          "type": "string",
          "title": "window_length",
          "default": 1,
          "description": "The length of a filter window in samples",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "A 1D running mean averaging filter, using the extra_numpy.running_mean().",
    "js_name": "DFORunningMean",
    "name": "RunningMeanCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["window_length", "axis"],
    "params": {
      "window_length": {
        "name": "window_length",
        "description": "The length of a filter window in samples",
        "types": [],
        "is_optional": true,
        "default": 1
      },
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "window_length": {
          "type": "string",
          "title": "window_length",
          "default": 1,
          "description": "The length of a filter window in samples",
          "is_optional": false
        },
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 0,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Applies a Sobel edge detection filter using signal.ndarray.sobel().",
    "js_name": "DFOSobel",
    "name": "SobelCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis", "mode"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 0
      },
      "mode": {
        "name": "mode",
        "description": "Filter edge handling, see the scipy.ndimage documentation.",
        "types": [],
        "is_optional": true,
        "default": "constant"
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 0,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        },
        "mode": {
          "type": "string",
          "title": "mode",
          "default": "constant",
          "description": "Filter edge handling, see the scipy.ndimage documentation.",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Applies a soft threshold, clipping the values at the given threshold.",
    "js_name": "DFOSoftThreshold",
    "name": "SoftThresholdCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["direction", "threshold"],
    "params": {
      "direction": {
        "name": "direction",
        "description": "The direction for applying the threshold, > or <",
        "types": [],
        "is_optional": true,
        "default": ">"
      },
      "threshold": {
        "name": "threshold",
        "description": "An upper or lower limit",
        "types": [],
        "is_optional": true,
        "default": 0
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "title": "direction",
          "default": ">",
          "description": "The direction for applying the threshold, > or <",
          "is_optional": false
        },
        "threshold": {
          "type": "string",
          "title": "threshold",
          "default": 0,
          "description": "An upper or lower limit",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Sums the data along the specified axis, reducing from 2D to 1D using numpy.sum().",
    "js_name": "DFOSum",
    "name": "SumCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the skewness of the input using scipy.stats.skewn(). Eliminate bias and omit any NaNs.",
    "js_name": "DFOSkewness",
    "name": "SkewnessCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Short-term average (STA) divided by long-term average (LTA). This transform highlights onset and so often forms part of an automated pick or edge-detection.",
    "js_name": "DFOStaLta",
    "name": "StaLtaCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["sta", "lta"],
    "params": {
      "sta": {
        "name": "sta",
        "description": "The short-term average window-length in samples",
        "types": [],
        "is_optional": true,
        "default": 50
      },
      "lta": {
        "name": "lta",
        "description": "The long-term average window-length in samples",
        "types": [],
        "is_optional": true,
        "default": 200
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "sta": {
          "type": "string",
          "title": "sta",
          "default": 50,
          "description": "The short-term average window-length in samples",
          "is_optional": false
        },
        "lta": {
          "type": "string",
          "title": "lta",
          "default": 200,
          "description": "The long-term average window-length in samples",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Take the standard deviation of the input using numpy.std().",
    "js_name": "DFOStdDev",
    "name": "StdDevCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": 1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": 1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Put the current result on the GPU and perform subsequent steps there. If no GPU is available, this has no effect.",
    "js_name": "DFOToGPU",
    "name": "ToGPUCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Unwrap angles in the selected axis direction using numpy.unwrap",
    "js_name": "DFOUnwrap",
    "name": "UnwrapCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["axis"],
    "params": {
      "axis": {
        "name": "axis",
        "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
        "types": [],
        "is_optional": true,
        "default": -1
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "axis",
          "default": -1,
          "description": "The axis to apply an operation to, typically in distpy axis=0 for depth and axis=1 for time",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Calculate the up-going waves using extra_numpy.up_wave(). Note that the data should be 2D FFTd before this command and are returned as complex values.",
    "js_name": "DFOUp",
    "name": "UpCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Calculate the phase velocity at each pixel in a 2D FFT space.",
    "js_name": "DFOVelocityMap",
    "name": "VelocityMapCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [],
    "params": {},
    "json_schema_form": {
      "type": "object",
      "properties": {}
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Construct a phase-velocity filter in 2D space. The input should be from the velocity_map command.",
    "js_name": "DFOVelocityMask",
    "name": "VelocityMaskCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["min_velocity", "max_velocity"],
    "params": {
      "min_velocity": {
        "name": "min_velocity",
        "description": "The minimum phase velocity",
        "types": [],
        "is_optional": true,
        "default": 1400
      },
      "max_velocity": {
        "name": "max_velocity",
        "description": "The maximum phase velocity",
        "types": [],
        "is_optional": true,
        "default": 1600
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "min_velocity": {
          "type": "string",
          "title": "min_velocity",
          "default": 1400,
          "description": "The minimum phase velocity",
          "is_optional": false
        },
        "max_velocity": {
          "type": "string",
          "title": "max_velocity",
          "default": 1600,
          "description": "The maximum phase velocity",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "2D Wiener filter. See scipy.signal.wiener.",
    "js_name": "DFOWiener",
    "name": "WienerCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["xdir", "tdir", "noisePower"],
    "params": {
      "xdir": {
        "name": "xdir",
        "description": "Wiener filter length in the x-direction",
        "types": [],
        "is_optional": true,
        "default": 5
      },
      "tdir": {
        "name": "tdir",
        "description": "Wiener filter length in the t-direction",
        "types": [],
        "is_optional": true,
        "default": 5
      },
      "noisePower": {
        "name": "noisePower",
        "description": "The noise power in the Wiener filter",
        "types": [],
        "is_optional": true,
        "default": null
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "xdir": {
          "type": "string",
          "title": "xdir",
          "default": 5,
          "description": "Wiener filter length in the x-direction",
          "is_optional": false
        },
        "tdir": {
          "type": "string",
          "title": "tdir",
          "default": 5,
          "description": "Wiener filter length in the t-direction",
          "is_optional": false
        },
        "noisePower": {
          "type": "string",
          "title": "noisePower",
          "default": null,
          "description": "The noise power in the Wiener filter",
          "is_optional": true
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Write the current state of the processed data to the npy format.",
    "js_name": "DFOWriteNPY",
    "name": "WriteNPYCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": ["directory_out"],
    "params": {
      "directory_out": {
        "name": "directory_out",
        "description": "The subdirectory where results will be written",
        "types": [],
        "is_optional": true,
        "default": "NONE"
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "directory_out": {
          "type": "string",
          "title": "directory_out",
          "default": "NONE",
          "description": "The subdirectory where results will be written",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  },
  {
    "doc": "Write out to the WITSML/FBE format, suitable for loading into viewers such as Techlog or Petrel.",
    "js_name": "DFOWriteWITSML",
    "name": "WriteWITSMLCommand",
    "module": "distpy.calc.pub_command_set",
    "human_module": "DFO",
    "js_component_prefix": "DFO",
    "params_list": [
      "directory_out",
      "xaxis",
      "data_style",
      "low_freq",
      "high_freq",
      "labels"
    ],
    "params": {
      "directory_out": {
        "name": "directory_out",
        "description": "The subdirectory where results will be written",
        "types": [],
        "is_optional": true,
        "default": "NONE"
      },
      "xaxis": {
        "name": "xaxis",
        "description": "A numpy vector of distances along the fibre",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "data_style": {
        "name": "data_style",
        "description": "A string identifier for the data inside the WITSML file",
        "types": [],
        "is_optional": true,
        "default": "NONE"
      },
      "low_freq": {
        "name": "low_freq",
        "description": "A list of low frequency values for band-pass windows in Hz",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "high_freq": {
        "name": "high_freq",
        "description": "A list of high frequency values for band-pass windows in Hz",
        "types": [],
        "is_optional": true,
        "default": null
      },
      "labels": {
        "name": "labels",
        "description": "A list of column headers",
        "types": [],
        "is_optional": true,
        "default": ""
      }
    },
    "json_schema_form": {
      "type": "object",
      "properties": {
        "directory_out": {
          "type": "string",
          "title": "directory_out",
          "default": "NONE",
          "description": "The subdirectory where results will be written",
          "is_optional": false
        },
        "xaxis": {
          "type": "string",
          "title": "xaxis",
          "default": null,
          "description": "A numpy vector of distances along the fibre",
          "is_optional": true
        },
        "data_style": {
          "type": "string",
          "title": "data_style",
          "default": "NONE",
          "description": "A string identifier for the data inside the WITSML file",
          "is_optional": false
        },
        "low_freq": {
          "type": "string",
          "title": "low_freq",
          "default": null,
          "description": "A list of low frequency values for band-pass windows in Hz",
          "is_optional": true
        },
        "high_freq": {
          "type": "string",
          "title": "high_freq",
          "default": null,
          "description": "A list of high frequency values for band-pass windows in Hz",
          "is_optional": true
        },
        "labels": {
          "type": "string",
          "title": "labels",
          "default": "",
          "description": "A list of column headers",
          "is_optional": false
        }
      }
    },
    "input_list": [
      {
        "key": "input",
        "name": "input",
        "socket": "anySocket",
        "many_connections": false
      }
    ],
    "output_list": [
      {
        "key": "output",
        "name": "output",
        "socket": "anySocket",
        "many_connections": false
      }
    ]
  }
]
