# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cr_api_client']

package_data = \
{'': ['*']}

install_requires = \
['requests>=2.24.0,<3.0.0', 'ruamel.yaml>=0.16.10,<0.17.0']

entry_points = \
{'console_scripts': ['cyber_range = cr_api_client.cyber_range:main']}

setup_kwargs = {
    'name': 'cr-api-client',
    'version': '1.3.5',
    'description': 'AMOSSYS Cyber Range client API',
    'long_description': '# AMOSSYS Cyber Range client API\n\n## Installation\n\nNote: it is recommanded to install the package in a virtualenv in order to avoid conflicts with version dependencies of other packages.\n\n```sh\npython3 setup.py install\n```\n\n## Configuration\n\nAccess to the Cyber Range is possible with either of the following configuration methods.\n\n### Configuration through configuration file (CLI only)\n\nIt is possible to configure access to the Cyber Range through a configuration file, specified with the `--config` command line parameter:\n\n```sh\n$ cyber_range --help\n(...)\n--config CONFIG       Configuration file\n(...)\n```\n\nConfiguration file content should be of the form `--key = value` (without quotes in values), as in the following exemple:\n\n```\n[DEFAULT]\n--core-url = https://[CORE-URL-API]\n--scenario-url = https://[SCENARIO-URL-API]\n--provisioning-url = https://[PROVISIONING-URL-API]\n--redteam-url = https://[REDTEAM-URL-API]\n--cacert = <PATH TO CA CERT>\n--cert = <PATH TO CLIENT CERT>\n--key = <PATH TO CLIENT PRIVATE KEY>\n```\n\n### Configuration through command line arguments (CLI only)\n\nIt is possible to configure access to the Cyber Range through command line arguments. See `cyber_range --help` command line output for available parameters:\n\n```sh\n$ cyber_range --help\n(...)\n  --core-url CORE_API_URL\n                        Set core API URL (default: \'http://127.0.0.1:5000\')\n  --scenario-url SCENARIO_API_URL\n                        Set scenario API URL (default: \'http://127.0.0.1:5002\')\n  --provisioning-url PROVISIONING_API_URL\n                        Set provisioning API URL (default: \'http://127.0.0.1:5003\')\n  --redteam-url REDTEAM_API_URL\n                        Set redteam API URL (default: \'http://127.0.0.1:5004\')\n  --cacert CACERT       Set path to CA certs\n  --cert CERT           Set path to client cert\n  --key KEY             Set path to client key\n```\n\n### Configuration through programmatic means\n\nIt is possible to configure access to the Cyber Range programmatically in Python:\n\n```python\nimport cr_api_client.core_api_client as core_api_client\nimport cr_api_client.core_helper as core_helper\nimport cr_api_client.scenario_helper as scenario_helper\nimport cr_api_client.provisioning_helper as provisioning_helper\nimport cr_api_client.redteam_helper as redteam_helper\n\n# Set URL API\ncore_api_client.CORE_API_URL = "https://[CORE-URL-API]"\nscenario_helper.SCENARIO_API_URL = "https://[SCENARIO-URL-API]"\nprovisioning_helper.PROVISIONING_API_URL = "https://[PROVISIONING-URL-API]"\nredteam_helper.REDTEAM_API_URL = "https://[REDTEAM-URL-API]"\n\n# Set server and client certificates for Core API\ncore_api_client.CA_CERT_PATH = <PATH TO CA CERT>\ncore_api_client.CLIENT_CERT_PATH = <PATH TO CLIENT CERT>\ncore_api_client.CLIENT_KEY_PATH = <PATH TO CLIENT PRIVATE KEY>\n\n# Apply same server and client certificates to other API\nredteam_helper.CA_CERT_PATH = provisioning_helper.CA_CERT_PATH = scenario_helper.CA_CERT_PATH = core_api_client.CA_CERT_PATH\nredteam_helper.CLIENT_CERT_PATH = provisioning_helper.CLIENT_CERT_PATH = scenario_helper.CLIENT_CERT_PATH = core_api_client.CLIENT_CERT_PATH\nredteam_helper.CLIENT_KEY_PATH = provisioning_helper.CLIENT_KEY_PATH = scenario_helper.CLIENT_KEY_PATH = core_api_client.CLIENT_KEY_PATH\n```\n\n## CLI usage\n\nSee `cyber_range --help` command line output for available parameters:\n\n```sh\n$ cyber_range --help\n(...)\n```\n\n## Programmatic usage\n\n### Platform initialization API\n\nBefore starting a new simulation, the platform has to be initialized:\n\n```python\ncore_api_client.virtclient_reset()\ncore_api_client.reset_database()\nredteam_helper.reset_redteam()\n```\n\n### Simulation API\n\n```python\ncore_helper.simu_create(architecture_file: str)  # Process YAML configuration file and request core API to create a new simulation\n\ncore_helper.simu_run(id_simulation: int, use_vm_time: bool)  # Start the simulation, with current time (by default) or time where the VM was created (use_vm_time=True)\n\ncore_helper.simu_pause(id_simulation: int)  # Pause a simulation (calls libvirt suspend API)\n\ncore_helper.simu_unpause(id_simulation: int)  # Pause a simulation (calls libvirt suspend API)\n\ncore_helper.simu_halt(id_simulation: int)  # Properly stop a simulation, by sending a shutdown signal to the operating systems\n\ncore_helper.simu_destroy(id_simulation: int)  # Stop a simulation through a hard reset\n\ncore_helper.simu_clone(id_simulation: int) -> int  # Clone a simulation and create a new simulation, and return the new ID\n\ncore_helper.simu_tap(id_simulation: int, iface: str)  # Mirror all network traffic through a local network interface\n\ncore_helper.simu_untap(id_simulation: int, iface: str)  # Stop mirroring all network traffic\n\ncore_helper.simu_delete(id_simulation: int)  # Delete a simulation in database\n```\n\n### Provisioning API\n\n```python\nprovisioning_helper.provisioning_execute(id_simulation: int, provisioning_configuration_file: str)  # Apply provisioning configuration defined in YAML file on simulation defined in argument ID\n```\n\n### Scenario API\n\n```python\nscenario_helper.scenario_play(id_simulation: int, scenario_path: str,\n                              debug_mode: str = \'off\', speed: str = \'normal\',\n                              scenario_file_results: str = None)\n```\n\nThis method makes it possible to play  scenario defined in ``scenario path`` on simulation defined in ``id_simulation``.\nThese parameters are **mandatory**.\n\nThe following parameters are optional:\n\n* ``debug_mode``: This parameter has to be used for **debug** only. It corresponds to the level of verbosity of the debug traces generated during the execution of user actions:\n  * ``\'off\'``: no debug traces,\n  * ``\'on\'``:  with debug traces,\n  * ``\'full\'``: with maximum debug traces.\n\n  The default is ``\'off\'``. Debug traces are generated **on the server side only**.\n\n* ``speed``: This parameter affects the speed of typing keys on the keyboard and the speed of mouse movement:\n  * ``\'slow\'``: slow speed,\n  * ``\'normal\'``:  normal speed,\n  * ``\'fast\'``: fast speed.\n\n  The default is ``\'normal\'``.\n\n* ``scenario_file_results``: This parameter makes it possible to get the scenario results (of user actions) in a file.\n  Results are stored using a json format. The file name should be absolute (``\'/tmp/results.json\'`` for example).\n\n  Here an example:\n\n  ```json\n  {\n    "success": true,\n    "scenario_results": [\n        {\n            "name": "scenario.py",\n            "success": true,\n            "target": {\n                "name": "CLIENT1",\n                "role": "client",\n                "basebox_id": 70,\n                "ip_address": "localhost",\n                "vnc_port": 5901\n            },\n            "action_packs": {\n                "operating_system": "operating_system/windows7"\n            },\n            "action_list": [\n                {\n                    "name": "open_session",\n                    "parameters": {\n                        "password": "7h7JMc67",\n                        "password_error": "false",\n                        "login": "John"\n                    },\n                    "start_time": "2021-03-01 12:39:25.119",\n                    "end_time": "2021-03-01 12:39:57.325",\n                    "success": true,\n                    "implemented": true\n                },\n                {\n                    "name": "close_session",\n                    "parameters": {},\n                    "start_time": "2021-03-01 12:40:02.330",\n                    "end_time": "2021-03-01 12:40:09.303",\n                    "success": true,\n                    "implemented": true\n                }\n            ]\n        }\n    ]\n  }\n  ```\n\nHere are some examples of calling this method:\n\n```python\nscenario_helper.scenario_play(1, \'./scenarios/my_scenario\') # this is the common way\n\nscenario_helper.scenario_play(1, \'./scenarios/my_scenario\', scenario_file_results=\'/tmp/results.json\')\n\nscenario_helper.scenario_play(1, \'./scenarios/my_scenario\', debug_mode=\'full\', speed=\'fast\')\n```\n\n### Redteam API\n\n*In progress*\n',
    'author': 'AMOSSYS',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
