.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.8.
.TH NUITKA "1" "March 2021" "nuitka 0.6.13" "User Commands"
.SH NAME
nuitka \- the Python compiler
.SH SYNOPSIS
.B nuitka
[\fI\,--module\/\fR] [\fI\,--run\/\fR] [\fI\,options\/\fR] \fI\,main_module.py\/\fR
.SH OPTIONS
.TP
\fB\-\-version\fR
show program's version number and exit
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-\-module\fR
Create an extension module executable instead of a
program. Defaults to off.
.TP
\fB\-\-standalone\fR
Enable standalone mode for output. This allows you to
transfer the created binary to other machines without
it using an existing Python installation. This also
means it will become big. It implies these option:
"\-\-recurse\-all". You may also want to use "\-\-pythonflag=no_site" to avoid the "site.py" module, which can
save a lot of code dependencies. Defaults to off.
.TP
\fB\-\-onefile\fR
In case of standalone mode, enable single file mode.
This means not a folder, but a compressed executable
is created and used. Experimental at this time, and
not supported on all OSes. Defaults to off.
.TP
\fB\-\-python\-debug\fR
Use debug version or not. Default uses what you are
using to run Nuitka, most likely a non\-debug version.
.TP
\fB\-\-python\-flag\fR=\fI\,PYTHON_FLAGS\/\fR
Python flags to use. Default uses what you are using
to run Nuitka, this enforces a specific mode. These
are options that also exist to standard Python
executable. Currently supported: "\-S" (alias
"nosite"), "static_hashes" (do not use hash
randomization), "no_warnings" (do not give Python
runtime warnings), "\-O" (alias "noasserts"). Default
empty.
.TP
\fB\-\-python\-for\-scons\fR=\fI\,PYTHON_SCONS\/\fR
If using Python3.3 or Python3.4, provide the path of a
Python binary to use for Scons. Otherwise Nuitka can
use what you run Nuitka with or a "scons" binary that
is found in PATH, or a Python installation from
Windows registry.
.TP
\fB\-\-warn\-implicit\-exceptions\fR
Enable warnings for implicit exceptions detected at
compile time.
.TP
\fB\-\-warn\-unusual\-code\fR
Enable warnings for unusual code detected at compile
time.
.TP
\fB\-\-assume\-yes\-for\-downloads\fR
Allow Nuitka to download code if necessary, e.g.
dependency walker on Windows.
.SS Control the inclusion of modules and packages in result.:
.BR
.TP
\fB\-\-include\-package\fR=\fI\,PACKAGE\/\fR
Include a whole package. Give as a Python namespace,
e.g. ``some_package.sub_package`` and Nuitka will then
find it and include it and all the modules found below
that disk location in the binary or extension module
it creates, and make it available for import by the
code. Default empty.
.TP
\fB\-\-include\-module\fR=\fI\,MODULE\/\fR
Include a single module. Give as a Python namespace,
e.g. ``some_package.some_module`` and Nuitka will then
find it and include it in the binary or extension
module it creates, and make it available for import by
the code. Default empty.
.TP
\fB\-\-include\-plugin\-directory\fR=\fI\,MODULE\/\fR/PACKAGE
Include the content of that directory, no matter if
it's used by the given main program in a visible form.
Overrides all other recursion options. Can be given
multiple times. Default empty.
.TP
\fB\-\-include\-plugin\-files\fR=\fI\,PATTERN\/\fR
Include into files matching the PATTERN. Overrides all
other follow options. Can be given multiple times.
Default empty.
.TP
\fB\-\-prefer\-source\-code\fR
For already compiled extension modules, where there is
both a source file and an extension module, normally
the extension module is used, but it should be better
to compile the module from available source code for
best performance. If not desired, there is \fB\-\-noprefer\-source\-code\fR to disable warnings about it.
Default off.
.SS Control the following into imported modules:
.BR
.TP
\fB\-\-follow\-stdlib\fR
Also descend into imported modules from standard
library. This will increase the compilation time by a
lot. Defaults to off.
.TP
\fB\-\-nofollow\-imports\fR
When \fB\-\-recurse\-none\fR is used, do not descend into any
imported modules at all, overrides all other recursion
options. Defaults to off.
.TP
\fB\-\-follow\-imports\fR
When \fB\-\-follow\-imports\fR is used, attempt to descend into
all imported modules. Defaults to off.
.TP
\fB\-\-follow\-import\-to\fR=\fI\,MODULE\/\fR/PACKAGE
Follow to that module if used, or if a package, to the
whole package. Can be given multiple times. Default
empty.
.TP
\fB\-\-nofollow\-import\-to\fR=\fI\,MODULE\/\fR/PACKAGE
Do not follow to that module name even if used, or if
a package name, to the whole package in any case,
overrides all other options. Can be given multiple
times. Default empty.
.SS Data files for standalone/onefile mode:
.BR
.TP
\fB\-\-include\-package\-data\fR=\fI\,PACKAGE_DATA\/\fR
Include data files of the given package name. Can use
patterns. By default Nuitka does not unless hard coded
and vital for operation of a package. This will
include all non\-DLL, non\-extension modules in the
distribution. Default empty.
.TP
\fB\-\-include\-data\-file\fR=\fI\,DATA_FILES\/\fR
Include data files by filenames in the distribution.
Could use patterns for use in glob, if specifying a
directory with trailing slash. An example would be
\fB\-\-include\-data\-file=\fR/etc/somefile.txt=etc/somefile.txt
for plain file copy, and you can copy multiple like
\fB\-\-include\-data\-file=\fR/etc/*.txt:etc/ with a trailing
slash required to use the pattern. Default empty.
.SS Immediate execution after compilation:
.BR
.TP
\fB\-\-run\fR
Execute immediately the created binary (or import the
compiled module). Defaults to off.
.TP
\fB\-\-debugger\fR, \fB\-\-gdb\fR
Execute inside "gdb" to automatically get a stack
trace. Defaults to off.
.TP
\fB\-\-execute\-with\-pythonpath\fR
When immediately executing the created binary
(\fB\-\-execute\fR), don't reset PYTHONPATH. When all modules
are successfully included, you ought to not need
PYTHONPATH anymore.
.SS Dump options for internal tree:
.BR
.TP
\fB\-\-xml\fR
Dump the final result of optimization as XML, then
exit.
.SS Code generation choices:
.BR
.TP
\fB\-\-full\-compat\fR
Enforce absolute compatibility with CPython. Do not
even allow minor deviations from CPython behavior,
e.g. not having better tracebacks or exception
messages which are not really incompatible, but only
different. This is intended for tests only and should
not be used for normal use.
.TP
\fB\-\-file\-reference\-choice\fR=\fI\,FILE_REFERENCE_MODE\/\fR
Select what value "__file__" is going to be. With
"runtime" (default for standalone binary mode and
module mode), the created binaries and modules, use
the location of themselves to deduct the value of
"__file__". Included packages pretend to be in
directories below that location. This allows you to
include data files in deployments. If you merely seek
acceleration, it's better for you to use the
"original" value, where the source files location will
be used. With "frozen" a notation "<frozen
module_name>" is used. For compatibility reasons, the
"__file__" value will always have ".py" suffix
independent of what it really is.
.SS Output choices:
.BR
.TP
\fB\-o\fR FILENAME
Specify how the executable should be named. For
extension modules there is no choice, also not for
standalone mode and using it will be an error. This
may include path information that needs to exist
though. Defaults to <program_name> on this platform.
\&.bin
.TP
\fB\-\-output\-dir\fR=\fI\,DIRECTORY\/\fR
Specify where intermediate and final output files
should be put. The DIRECTORY will be populated with C
files, object files, etc. Defaults to current
directory.
.TP
\fB\-\-remove\-output\fR
Removes the build directory after producing the module
or exe file. Defaults to off.
.TP
\fB\-\-no\-pyi\-file\fR
Do not create a ".pyi" file for extension modules
created by Nuitka. This is used to detect implicit
imports. Defaults to off.
.SS Debug features:
.BR
.TP
\fB\-\-debug\fR
Executing all self checks possible to find errors in
Nuitka, do not use for production. Defaults to off.
.TP
\fB\-\-unstripped\fR
Keep debug info in the resulting object file for
better debugger interaction. Defaults to off.
.TP
\fB\-\-profile\fR
Enable vmprof based profiling of time spent. Not
working currently. Defaults to off.
.TP
\fB\-\-graph\fR
Create graph of optimization process. Defaults to off.
.TP
\fB\-\-trace\-execution\fR
Traced execution output, output the line of code
before executing it. Defaults to off.
.TP
\fB\-\-recompile\-c\-only\fR
This is not incremental compilation, but for Nuitka
development only. Takes existing files and simply
compile them as C again. Allows compiling edited C
files for quick debugging changes to the generated
source, e.g. to see if code is passed by, values
output, etc, Defaults to off. Depends on compiling
Python source to determine which files it should look
at.
.TP
\fB\-\-generate\-c\-only\fR
Generate only C source code, and do not compile it to
binary or module. This is for debugging and code
coverage analysis that doesn't waste CPU. Defaults to
off. Do not think you can use this directly.
.TP
\fB\-\-experimental\fR=\fI\,EXPERIMENTAL\/\fR
Use features declared as 'experimental'. May have no
effect if no experimental features are present in the
code. Uses secret tags (check source) per experimented
feature.
.SS Backend C compiler choice:
.BR
.TP
\fB\-\-clang\fR
Enforce the use of clang. On Windows this requires a
working Visual Studio version to piggy back on.
Defaults to off.
.TP
\fB\-j\fR N, \fB\-\-jobs\fR=\fI\,N\/\fR
Specify the allowed number of parallel C compiler
jobs. Defaults to the system CPU count.
.TP
\fB\-\-lto\fR
Use link time optimizations if available and usable
(MSVC or gcc 4.6 and higher). Defaults to off.
.SS Tracing features:
.BR
.TP
\fB\-\-quiet\fR
Disable all information outputs, but show warnings.
Defaults to off.
.TP
\fB\-\-show\-scons\fR
Operate Scons in non\-quiet mode, showing the executed
commands. Defaults to off.
.TP
\fB\-\-show\-progress\fR
Provide progress information and statistics. Defaults
to off.
.TP
\fB\-\-no\-progress\fR
Disable progress bar outputs (if tqdm is installed).
Defaults to off.
.TP
\fB\-\-show\-memory\fR
Provide memory information and statistics. Defaults to
off.
.TP
\fB\-\-show\-modules\fR
Provide information for included modules and DLLs
Defaults to off.
.TP
\fB\-\-show\-modules\-output\fR=\fI\,SHOW_INCLUSION_OUTPUT\/\fR
Where to output \fB\-\-show\-modules\fR, should be a filename.
Default is standard output.
.TP
\fB\-\-verbose\fR
Output details of actions taken, esp. in
optimizations. Can become a lot. Defaults to off.
.TP
\fB\-\-verbose\-output\fR=\fI\,VERBOSE_OUTPUT\/\fR
Where to output \fB\-\-verbose\fR, should be a filename.
Default is standard output.
.SS Windows specific controls:
.BR
.TP
\fB\-\-windows\-disable\-console\fR
When compiling for Windows, disable the console
window. Defaults to off.
.TP
\fB\-\-windows\-icon\-from\-ico\fR=\fI\,ICON_PATH\/\fR
Add executable icon. Can be given multiple times for
different resolutions or files with multiple icons
inside. In the later case, you may also suffix with
#<n> where n is an integer index starting from 1,
specifying a specific icon to be included, and all
others to be ignored.
.TP
\fB\-\-windows\-icon\-from\-exe\fR=\fI\,ICON_EXE_PATH\/\fR
Copy executable icons from this existing executable
(Windows only).
.TP
\fB\-\-windows\-uac\-admin\fR
Request Windows User Control, to grant admin rights on
execution. (Windows only). Defaults to off.
.TP
\fB\-\-windows\-uac\-uiaccess\fR
Request Windows User Control, to enforce running from
a few folders only, remote desktop access. (Windows
only). Defaults to off.
.TP
\fB\-\-windows\-company\-name\fR=\fI\,WINDOWS_COMPANY_NAME\/\fR
Name of the company to use in Windows Version
information.  One of file or product version is
required, when a version resource needs to be added,
e.g. to specify product name, or company name.
Defaults to unused.
.TP
\fB\-\-windows\-product\-name\fR=\fI\,WINDOWS_PRODUCT_NAME\/\fR
Name of the product to use in Windows Version
information. Defaults to base filename of the binary.
.TP
\fB\-\-windows\-file\-version\fR=\fI\,WINDOWS_FILE_VERSION\/\fR
File version to use in Windows Version information.
Must be a sequence of up to 4 numbers, nothing else
allowed. One of file or product version is required,
when a version resource needs to be added, e.g. to
specify product name, or company name. Defaults to
unused.
.TP
\fB\-\-windows\-product\-version\fR=\fI\,WINDOWS_PRODUCT_VERSION\/\fR
Product version to use in Windows Version information.
Must be a sequence of up to 4 numbers, nothing else
allowed. One of file or product version is required,
when a version resource needs to be added, e.g. to
specify product name, or company name. Defaults to
unused.
.TP
\fB\-\-windows\-file\-description\fR=\fI\,WINDOWS_FILE_DESCRIPTION\/\fR
Description of the file use in Windows Version
information.  One of file or product version is
required, when a version resource needs to be added,
e.g. to specify product name, or company name.
Defaults to nonsense.
.TP
\fB\-\-windows\-onefile\-tempdir\fR
Use temporary folder rather than company AppData.
Defaults to off.
.TP
\fB\-\-windows\-onefile\-tempdir\-spec\fR=\fI\,WINDOWS_ONEFILE_TEMPDIR_SPEC\/\fR
Use this as a temporary folder. Defaults to
\&'%TEMP%\eonefile_%PID%_%TIME%', i.e. system temporary
directory.
.TP
\fB\-\-windows\-force\-stdout\-spec\fR=\fI\,WINDOWS_FORCE_STDOUT_SPEC\/\fR
Force standard output of the program to go to this
location. Useful for programs with disabled console
and programs using the Windows Services Plugin of
Nuitka. Defaults to not active, use e.g.
\&'%PROGRAM%.out.txt', i.e. file near your program.
.TP
\fB\-\-windows\-force\-stderr\-spec\fR=\fI\,WINDOWS_FORCE_STDERR_SPEC\/\fR
Force standard error of the program to go to this
location. Useful for programs with disabled console
and programs using the Windows Services Plugin of
Nuitka. Defaults to not active, use e.g.
\&'%PROGRAM%.err.txt', i.e. file near your program.
.SS Linux specific controls:
.BR
.TP
\fB\-\-linux\-onefile\-icon\fR=\fI\,ICON_PATH\/\fR
Add executable icon for onefile binary to use. Can be
given only one time. Defaults to
.SS Plugin control:
.BR
.TP
\fB\-\-plugin\-enable\fR=\fI\,PLUGINS_ENABLED\/\fR, \fB\-\-enable\-plugin\fR=\fI\,PLUGINS_ENABLED\/\fR
Enabled plugins. Must be plug\-in names. Use \fB\-\-pluginlist\fR to query the full list and exit. Default empty.
.TP
\fB\-\-plugin\-disable\fR=\fI\,PLUGINS_DISABLED\/\fR, \fB\-\-disable\-plugin\fR=\fI\,PLUGINS_DISABLED\/\fR
Disabled plugins. Must be plug\-in names. Use \fB\-\-pluginlist\fR to query the full list and exit. Default empty.
.TP
\fB\-\-plugin\-no\-detection\fR
Plugins can detect if they might be used, and the you
can disable the warning via \fB\-\-plugin\-disable\fR=\fI\,pluginthat\-warned\/\fR, or you can use this option to disable the
mechanism entirely, which also speeds up compilation
slightly of course as this detection code is run in
vain once you are certain of which plug\-ins to use.
Defaults to off.
.TP
\fB\-\-plugin\-list\fR
Show list of all available plugins and exit. Defaults
to off.
.TP
\fB\-\-user\-plugin\fR=\fI\,USER_PLUGINS\/\fR
The file name of user plugin. Can be given multiple
times. Default empty.
.PP
Python: 2.7.16 (default, Oct 10 2019, 22:02:15)
Executable: \fI\,/usr/bin/python2\/\fP
OS: Linux
Arch: x86_64
.SH EXAMPLES

Compile a Python file "some_module.py" to a module "some_module.so":
.IP
\f(CW$ nuitka \-\-module some_module.py\fR
.PP
Compile a Python program "some_program.py" to an executable "some_program.exe":
.IP
\f(CW$ nuitka some_program.py\fR
.PP
Compile a Python program "some_program.py" and the package "some_package" it
uses to an executable "some_program.exe":
.IP
\f(CW$ nuitka \-\-recurse\-to=some_package some_program.py\fR
.PP
Compile a Python program "some_program.py" and all the modules it uses to an executable "some_program.exe". Then execute it immediately when ready:
.IP
\f(CW$ nuitka \-\-run \-\-recurse\-all some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses (even standard library) to an executable "some_program.exe":
.IP
\f(CW$ nuitka \-\-recurse\-all \-\-recurse\-stdlib some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses to an executable "some_program.exe". Keep the debug information, so valgrind, gdb, etc. work
nicely.

Note: This will *not* degrade performance:
.IP
\f(CW$ nuitka \-\-unstriped \-\-recurse\-all some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses to an executable "some_program.exe". Perform all kinds of checks about correctness of the generated
C and run\-time checks.

Note: This will degrade performance and should only be used to debug Nuitka:
.IP
\f(CW$ nuitka \-\-debug \-\-recurse\-all some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses to an executable "some_program.exe". Perform all kinds of checks about correctness of the generated
C and run\-time checks. Also use the debug Python library, which does its own checks.

Note: This will degrade performance and should only be used to debug Nuitka:
.IP
\f(CW$ nuitka \-\-debug \-\-python-debug \-\-recurse\-all some_program.py\fR
.PP
Compile a Python program "some_program.py" and the plugins modules it loads at run time to an executable "some_program.exe":
.IP
\f(CW$ nuitka \-\-recurse\-all \-\-recurse\-directory=plugins_dir some_program.py\fR
.PP
