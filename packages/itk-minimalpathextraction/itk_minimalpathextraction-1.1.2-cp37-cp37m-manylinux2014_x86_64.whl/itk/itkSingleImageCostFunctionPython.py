# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _MinimalPathExtractionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSingleImageCostFunctionPython
else:
    import _itkSingleImageCostFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSingleImageCostFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSingleImageCostFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.ITKCostFunctionsPython
import itk.vnl_least_squares_functionPython
import itk.itkArray2DPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkCostFunctionPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkContinuousIndexPython

def itkSingleImageCostFunctionID2_New():
    return itkSingleImageCostFunctionID2.New()

class itkSingleImageCostFunctionID2(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionID2
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionID2

        Create a new object of the class itkSingleImageCostFunctionID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionID2 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_swigregister(itkSingleImageCostFunctionID2)
itkSingleImageCostFunctionID2___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2___New_orig__
itkSingleImageCostFunctionID2_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID2_cast


def itkSingleImageCostFunctionID3_New():
    return itkSingleImageCostFunctionID3.New()

class itkSingleImageCostFunctionID3(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionID3
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionID3

        Create a new object of the class itkSingleImageCostFunctionID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionID3 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_swigregister(itkSingleImageCostFunctionID3)
itkSingleImageCostFunctionID3___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3___New_orig__
itkSingleImageCostFunctionID3_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID3_cast


def itkSingleImageCostFunctionID4_New():
    return itkSingleImageCostFunctionID4.New()

class itkSingleImageCostFunctionID4(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionID4
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionID4

        Create a new object of the class itkSingleImageCostFunctionID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionID4 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_swigregister(itkSingleImageCostFunctionID4)
itkSingleImageCostFunctionID4___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4___New_orig__
itkSingleImageCostFunctionID4_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionID4_cast


def itkSingleImageCostFunctionIF2_New():
    return itkSingleImageCostFunctionIF2.New()

class itkSingleImageCostFunctionIF2(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIF2
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIF2

        Create a new object of the class itkSingleImageCostFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIF2 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_swigregister(itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2___New_orig__
itkSingleImageCostFunctionIF2_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_cast


def itkSingleImageCostFunctionIF3_New():
    return itkSingleImageCostFunctionIF3.New()

class itkSingleImageCostFunctionIF3(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIF3
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIF3

        Create a new object of the class itkSingleImageCostFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIF3 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_swigregister(itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3___New_orig__
itkSingleImageCostFunctionIF3_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_cast


def itkSingleImageCostFunctionIF4_New():
    return itkSingleImageCostFunctionIF4.New()

class itkSingleImageCostFunctionIF4(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIF4
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIF4

        Create a new object of the class itkSingleImageCostFunctionIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIF4 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_swigregister(itkSingleImageCostFunctionIF4)
itkSingleImageCostFunctionIF4___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4___New_orig__
itkSingleImageCostFunctionIF4_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF4_cast


def itkSingleImageCostFunctionISS2_New():
    return itkSingleImageCostFunctionISS2.New()

class itkSingleImageCostFunctionISS2(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionISS2
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionISS2

        Create a new object of the class itkSingleImageCostFunctionISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionISS2 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_swigregister(itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2___New_orig__
itkSingleImageCostFunctionISS2_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_cast


def itkSingleImageCostFunctionISS3_New():
    return itkSingleImageCostFunctionISS3.New()

class itkSingleImageCostFunctionISS3(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionISS3
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionISS3

        Create a new object of the class itkSingleImageCostFunctionISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionISS3 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_swigregister(itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3___New_orig__
itkSingleImageCostFunctionISS3_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_cast


def itkSingleImageCostFunctionISS4_New():
    return itkSingleImageCostFunctionISS4.New()

class itkSingleImageCostFunctionISS4(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionISS4
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionISS4

        Create a new object of the class itkSingleImageCostFunctionISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionISS4 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_swigregister(itkSingleImageCostFunctionISS4)
itkSingleImageCostFunctionISS4___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4___New_orig__
itkSingleImageCostFunctionISS4_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS4_cast


def itkSingleImageCostFunctionIUC2_New():
    return itkSingleImageCostFunctionIUC2.New()

class itkSingleImageCostFunctionIUC2(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUC2
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUC2

        Create a new object of the class itkSingleImageCostFunctionIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIUC2 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_swigregister(itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2___New_orig__
itkSingleImageCostFunctionIUC2_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_cast


def itkSingleImageCostFunctionIUC3_New():
    return itkSingleImageCostFunctionIUC3.New()

class itkSingleImageCostFunctionIUC3(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUC3
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUC3

        Create a new object of the class itkSingleImageCostFunctionIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIUC3 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_swigregister(itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3___New_orig__
itkSingleImageCostFunctionIUC3_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_cast


def itkSingleImageCostFunctionIUC4_New():
    return itkSingleImageCostFunctionIUC4.New()

class itkSingleImageCostFunctionIUC4(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUC4
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUC4

        Create a new object of the class itkSingleImageCostFunctionIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIUC4 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_swigregister(itkSingleImageCostFunctionIUC4)
itkSingleImageCostFunctionIUC4___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4___New_orig__
itkSingleImageCostFunctionIUC4_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC4_cast


def itkSingleImageCostFunctionIUS2_New():
    return itkSingleImageCostFunctionIUS2.New()

class itkSingleImageCostFunctionIUS2(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUS2
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUS2

        Create a new object of the class itkSingleImageCostFunctionIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIUS2 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_swigregister(itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2___New_orig__
itkSingleImageCostFunctionIUS2_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_cast


def itkSingleImageCostFunctionIUS3_New():
    return itkSingleImageCostFunctionIUS3.New()

class itkSingleImageCostFunctionIUS3(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUS3
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUS3

        Create a new object of the class itkSingleImageCostFunctionIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIUS3 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_swigregister(itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3___New_orig__
itkSingleImageCostFunctionIUS3_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_cast


def itkSingleImageCostFunctionIUS4_New():
    return itkSingleImageCostFunctionIUS4.New()

class itkSingleImageCostFunctionIUS4(itk.ITKCostFunctionsPython.itkSingleValuedCostFunction):
    r"""Proxy of C++ itkSingleImageCostFunctionIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_Clone)
    SetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_SetInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_GetInterpolator)
    SetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_SetImage)
    GetImage = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_GetImage)
    SetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_SetDerivativeThreshold)
    GetDerivativeThreshold = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_GetDerivativeThreshold)
    Initialize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_Initialize)
    SetMinimize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_SetMinimize)
    SetMaximize = _swig_new_instance_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_SetMaximize)
    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUS4
    cast = _swig_new_static_method(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUS4

        Create a new object of the class itkSingleImageCostFunctionIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSingleImageCostFunctionIUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSingleImageCostFunctionIUS4 in _itkSingleImageCostFunctionPython:
_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_swigregister(itkSingleImageCostFunctionIUS4)
itkSingleImageCostFunctionIUS4___New_orig__ = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4___New_orig__
itkSingleImageCostFunctionIUS4_cast = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS4_cast



