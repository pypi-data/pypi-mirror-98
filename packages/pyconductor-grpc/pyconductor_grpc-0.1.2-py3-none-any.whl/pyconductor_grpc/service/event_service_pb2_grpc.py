# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyconductor_grpc.model import eventhandler_pb2 as pyconductor__grpc_dot_model_dot_eventhandler__pb2
from pyconductor_grpc.service import event_service_pb2 as pyconductor__grpc_dot_service_dot_event__service__pb2


class EventServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddEventHandler = channel.unary_unary(
                '/conductor.grpc.events.EventService/AddEventHandler',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.AddEventHandlerRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.AddEventHandlerResponse.FromString,
                )
        self.UpdateEventHandler = channel.unary_unary(
                '/conductor.grpc.events.EventService/UpdateEventHandler',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.UpdateEventHandlerRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.UpdateEventHandlerResponse.FromString,
                )
        self.RemoveEventHandler = channel.unary_unary(
                '/conductor.grpc.events.EventService/RemoveEventHandler',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.RemoveEventHandlerRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.RemoveEventHandlerResponse.FromString,
                )
        self.GetEventHandlers = channel.unary_stream(
                '/conductor.grpc.events.EventService/GetEventHandlers',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetEventHandlersRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_model_dot_eventhandler__pb2.EventHandler.FromString,
                )
        self.GetEventHandlersForEvent = channel.unary_stream(
                '/conductor.grpc.events.EventService/GetEventHandlersForEvent',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetEventHandlersForEventRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_model_dot_eventhandler__pb2.EventHandler.FromString,
                )
        self.GetQueues = channel.unary_unary(
                '/conductor.grpc.events.EventService/GetQueues',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueuesRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueuesResponse.FromString,
                )
        self.GetQueueSizes = channel.unary_unary(
                '/conductor.grpc.events.EventService/GetQueueSizes',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueSizesRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueSizesResponse.FromString,
                )
        self.GetQueueProviders = channel.unary_unary(
                '/conductor.grpc.events.EventService/GetQueueProviders',
                request_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueProvidersRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueProvidersResponse.FromString,
                )


class EventServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddEventHandler(self, request, context):
        """POST /
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEventHandler(self, request, context):
        """PUT /
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveEventHandler(self, request, context):
        """DELETE /{name}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventHandlers(self, request, context):
        """GET /
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventHandlersForEvent(self, request, context):
        """GET /{name}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueues(self, request, context):
        """GET /queues
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueueSizes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueueProviders(self, request, context):
        """GET /queues/providers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddEventHandler': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEventHandler,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.AddEventHandlerRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.AddEventHandlerResponse.SerializeToString,
            ),
            'UpdateEventHandler': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEventHandler,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.UpdateEventHandlerRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.UpdateEventHandlerResponse.SerializeToString,
            ),
            'RemoveEventHandler': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveEventHandler,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.RemoveEventHandlerRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.RemoveEventHandlerResponse.SerializeToString,
            ),
            'GetEventHandlers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEventHandlers,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetEventHandlersRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_model_dot_eventhandler__pb2.EventHandler.SerializeToString,
            ),
            'GetEventHandlersForEvent': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEventHandlersForEvent,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetEventHandlersForEventRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_model_dot_eventhandler__pb2.EventHandler.SerializeToString,
            ),
            'GetQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueues,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueuesRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueuesResponse.SerializeToString,
            ),
            'GetQueueSizes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueueSizes,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueSizesRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueSizesResponse.SerializeToString,
            ),
            'GetQueueProviders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueueProviders,
                    request_deserializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueProvidersRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueProvidersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'conductor.grpc.events.EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddEventHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.events.EventService/AddEventHandler',
            pyconductor__grpc_dot_service_dot_event__service__pb2.AddEventHandlerRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_event__service__pb2.AddEventHandlerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEventHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.events.EventService/UpdateEventHandler',
            pyconductor__grpc_dot_service_dot_event__service__pb2.UpdateEventHandlerRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_event__service__pb2.UpdateEventHandlerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveEventHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.events.EventService/RemoveEventHandler',
            pyconductor__grpc_dot_service_dot_event__service__pb2.RemoveEventHandlerRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_event__service__pb2.RemoveEventHandlerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventHandlers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/conductor.grpc.events.EventService/GetEventHandlers',
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetEventHandlersRequest.SerializeToString,
            pyconductor__grpc_dot_model_dot_eventhandler__pb2.EventHandler.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventHandlersForEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/conductor.grpc.events.EventService/GetEventHandlersForEvent',
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetEventHandlersForEventRequest.SerializeToString,
            pyconductor__grpc_dot_model_dot_eventhandler__pb2.EventHandler.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.events.EventService/GetQueues',
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueuesRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueuesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueueSizes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.events.EventService/GetQueueSizes',
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueSizesRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueSizesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueueProviders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.events.EventService/GetQueueProviders',
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueProvidersRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_event__service__pb2.GetQueueProvidersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
