# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyconductor_grpc.model import rerunworkflowrequest_pb2 as pyconductor__grpc_dot_model_dot_rerunworkflowrequest__pb2
from pyconductor_grpc.model import startworkflowrequest_pb2 as pyconductor__grpc_dot_model_dot_startworkflowrequest__pb2
from pyconductor_grpc.model import workflow_pb2 as pyconductor__grpc_dot_model_dot_workflow__pb2
from pyconductor_grpc.service import search_pb2 as pyconductor__grpc_dot_service_dot_search__pb2
from pyconductor_grpc.service import workflow_service_pb2 as pyconductor__grpc_dot_service_dot_workflow__service__pb2


class WorkflowServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/StartWorkflow',
                request_serializer=pyconductor__grpc_dot_model_dot_startworkflowrequest__pb2.StartWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.StartWorkflowResponse.FromString,
                )
        self.GetWorkflows = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/GetWorkflows',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowsRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowsResponse.FromString,
                )
        self.GetWorkflowStatus = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/GetWorkflowStatus',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowStatusRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_model_dot_workflow__pb2.Workflow.FromString,
                )
        self.RemoveWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/RemoveWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RemoveWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RemoveWorkflowResponse.FromString,
                )
        self.GetRunningWorkflows = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/GetRunningWorkflows',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetRunningWorkflowsRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetRunningWorkflowsResponse.FromString,
                )
        self.DecideWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/DecideWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.DecideWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.DecideWorkflowResponse.FromString,
                )
        self.PauseWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/PauseWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.PauseWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.PauseWorkflowResponse.FromString,
                )
        self.ResumeWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/ResumeWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResumeWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResumeWorkflowResponse.FromString,
                )
        self.SkipTaskFromWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/SkipTaskFromWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.SkipTaskRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.SkipTaskResponse.FromString,
                )
        self.RerunWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/RerunWorkflow',
                request_serializer=pyconductor__grpc_dot_model_dot_rerunworkflowrequest__pb2.RerunWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RerunWorkflowResponse.FromString,
                )
        self.RestartWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/RestartWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RestartWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RestartWorkflowResponse.FromString,
                )
        self.RetryWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/RetryWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RetryWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RetryWorkflowResponse.FromString,
                )
        self.ResetWorkflowCallbacks = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/ResetWorkflowCallbacks',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResetWorkflowCallbacksRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResetWorkflowCallbacksResponse.FromString,
                )
        self.TerminateWorkflow = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/TerminateWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.TerminateWorkflowRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.TerminateWorkflowResponse.FromString,
                )
        self.Search = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/Search',
                request_serializer=pyconductor__grpc_dot_service_dot_search__pb2.Request.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.WorkflowSummarySearchResult.FromString,
                )
        self.SearchByTasks = channel.unary_unary(
                '/conductor.grpc.workflows.WorkflowService/SearchByTasks',
                request_serializer=pyconductor__grpc_dot_service_dot_search__pb2.Request.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.WorkflowSummarySearchResult.FromString,
                )


class WorkflowServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartWorkflow(self, request, context):
        """POST /
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflows(self, request, context):
        """GET /{name}/correlated/{correlationId}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowStatus(self, request, context):
        """GET /{workflowId}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveWorkflow(self, request, context):
        """DELETE /{workflodId}/remove
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRunningWorkflows(self, request, context):
        """GET /running/{name}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecideWorkflow(self, request, context):
        """PUT /decide/{workflowId}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseWorkflow(self, request, context):
        """PUT /{workflowId}/pause
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeWorkflow(self, request, context):
        """PUT /{workflowId}/pause
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SkipTaskFromWorkflow(self, request, context):
        """PUT /{workflowId}/skiptask/{taskReferenceName}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RerunWorkflow(self, request, context):
        """POST /{workflowId}/rerun
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartWorkflow(self, request, context):
        """POST /{workflowId}/restart
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetryWorkflow(self, request, context):
        """POST /{workflowId}retry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetWorkflowCallbacks(self, request, context):
        """POST /{workflowId}/resetcallbacks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateWorkflow(self, request, context):
        """DELETE /{workflowId}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """GET /search
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchByTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.StartWorkflow,
                    request_deserializer=pyconductor__grpc_dot_model_dot_startworkflowrequest__pb2.StartWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.StartWorkflowResponse.SerializeToString,
            ),
            'GetWorkflows': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflows,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowsRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowsResponse.SerializeToString,
            ),
            'GetWorkflowStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowStatus,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowStatusRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_model_dot_workflow__pb2.Workflow.SerializeToString,
            ),
            'RemoveWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RemoveWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RemoveWorkflowResponse.SerializeToString,
            ),
            'GetRunningWorkflows': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRunningWorkflows,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetRunningWorkflowsRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetRunningWorkflowsResponse.SerializeToString,
            ),
            'DecideWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DecideWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.DecideWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.DecideWorkflowResponse.SerializeToString,
            ),
            'PauseWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.PauseWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.PauseWorkflowResponse.SerializeToString,
            ),
            'ResumeWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResumeWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResumeWorkflowResponse.SerializeToString,
            ),
            'SkipTaskFromWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.SkipTaskFromWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.SkipTaskRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.SkipTaskResponse.SerializeToString,
            ),
            'RerunWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.RerunWorkflow,
                    request_deserializer=pyconductor__grpc_dot_model_dot_rerunworkflowrequest__pb2.RerunWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RerunWorkflowResponse.SerializeToString,
            ),
            'RestartWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RestartWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RestartWorkflowResponse.SerializeToString,
            ),
            'RetryWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.RetryWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RetryWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.RetryWorkflowResponse.SerializeToString,
            ),
            'ResetWorkflowCallbacks': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetWorkflowCallbacks,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResetWorkflowCallbacksRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResetWorkflowCallbacksResponse.SerializeToString,
            ),
            'TerminateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.TerminateWorkflowRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.TerminateWorkflowResponse.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=pyconductor__grpc_dot_service_dot_search__pb2.Request.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.WorkflowSummarySearchResult.SerializeToString,
            ),
            'SearchByTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchByTasks,
                    request_deserializer=pyconductor__grpc_dot_service_dot_search__pb2.Request.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_workflow__service__pb2.WorkflowSummarySearchResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'conductor.grpc.workflows.WorkflowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkflowService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/StartWorkflow',
            pyconductor__grpc_dot_model_dot_startworkflowrequest__pb2.StartWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.StartWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/GetWorkflows',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowsRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/GetWorkflowStatus',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetWorkflowStatusRequest.SerializeToString,
            pyconductor__grpc_dot_model_dot_workflow__pb2.Workflow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/RemoveWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.RemoveWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.RemoveWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRunningWorkflows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/GetRunningWorkflows',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetRunningWorkflowsRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.GetRunningWorkflowsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecideWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/DecideWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.DecideWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.DecideWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PauseWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/PauseWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.PauseWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.PauseWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResumeWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/ResumeWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResumeWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResumeWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SkipTaskFromWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/SkipTaskFromWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.SkipTaskRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.SkipTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RerunWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/RerunWorkflow',
            pyconductor__grpc_dot_model_dot_rerunworkflowrequest__pb2.RerunWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.RerunWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestartWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/RestartWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.RestartWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.RestartWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetryWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/RetryWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.RetryWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.RetryWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetWorkflowCallbacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/ResetWorkflowCallbacks',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResetWorkflowCallbacksRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.ResetWorkflowCallbacksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/TerminateWorkflow',
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.TerminateWorkflowRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.TerminateWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/Search',
            pyconductor__grpc_dot_service_dot_search__pb2.Request.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.WorkflowSummarySearchResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchByTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.workflows.WorkflowService/SearchByTasks',
            pyconductor__grpc_dot_service_dot_search__pb2.Request.SerializeToString,
            pyconductor__grpc_dot_service_dot_workflow__service__pb2.WorkflowSummarySearchResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
