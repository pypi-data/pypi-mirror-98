# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyconductor_grpc.model import task_pb2 as pyconductor__grpc_dot_model_dot_task__pb2
from pyconductor_grpc.service import task_service_pb2 as pyconductor__grpc_dot_service_dot_task__service__pb2


class TaskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Poll = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/Poll',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PollRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PollResponse.FromString,
                )
        self.BatchPoll = channel.unary_stream(
                '/conductor.grpc.tasks.TaskService/BatchPoll',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.BatchPollRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_model_dot_task__pb2.Task.FromString,
                )
        self.GetTasksInProgress = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/GetTasksInProgress',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.TasksInProgressRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.TasksInProgressResponse.FromString,
                )
        self.GetPendingTaskForWorkflow = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/GetPendingTaskForWorkflow',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PendingTaskRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PendingTaskResponse.FromString,
                )
        self.UpdateTask = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/UpdateTask',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.UpdateTaskRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.UpdateTaskResponse.FromString,
                )
        self.AckTask = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/AckTask',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AckTaskRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AckTaskResponse.FromString,
                )
        self.AddLog = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/AddLog',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AddLogRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AddLogResponse.FromString,
                )
        self.GetTaskLogs = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/GetTaskLogs',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskLogsRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskLogsResponse.FromString,
                )
        self.GetTask = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/GetTask',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskResponse.FromString,
                )
        self.RemoveTaskFromQueue = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/RemoveTaskFromQueue',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.RemoveTaskRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.RemoveTaskResponse.FromString,
                )
        self.GetQueueSizesForTasks = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/GetQueueSizesForTasks',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueSizesRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueSizesResponse.FromString,
                )
        self.GetQueueInfo = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/GetQueueInfo',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueInfoRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueInfoResponse.FromString,
                )
        self.GetQueueAllInfo = channel.unary_unary(
                '/conductor.grpc.tasks.TaskService/GetQueueAllInfo',
                request_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueAllInfoRequest.SerializeToString,
                response_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueAllInfoResponse.FromString,
                )


class TaskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Poll(self, request, context):
        """GET /poll/{tasktype}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPoll(self, request, context):
        """/poll/batch/{tasktype}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTasksInProgress(self, request, context):
        """GET /in_progress/{tasktype}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPendingTaskForWorkflow(self, request, context):
        """GET /in_progress/{workflowId}/{taskRefName}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTask(self, request, context):
        """POST /
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AckTask(self, request, context):
        """POST /{taskId}/ack
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddLog(self, request, context):
        """POST /{taskId}/log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskLogs(self, request, context):
        """GET {taskId}/log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """GET /{taskId}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTaskFromQueue(self, request, context):
        """DELETE /queue/{taskType}/{taskId}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueueSizesForTasks(self, request, context):
        """GET /queue/sizes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueueInfo(self, request, context):
        """GET /queue/all
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueueAllInfo(self, request, context):
        """GET /queue/all/verbose
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Poll': grpc.unary_unary_rpc_method_handler(
                    servicer.Poll,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PollRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PollResponse.SerializeToString,
            ),
            'BatchPoll': grpc.unary_stream_rpc_method_handler(
                    servicer.BatchPoll,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.BatchPollRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_model_dot_task__pb2.Task.SerializeToString,
            ),
            'GetTasksInProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTasksInProgress,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.TasksInProgressRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.TasksInProgressResponse.SerializeToString,
            ),
            'GetPendingTaskForWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPendingTaskForWorkflow,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PendingTaskRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.PendingTaskResponse.SerializeToString,
            ),
            'UpdateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTask,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.UpdateTaskRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.UpdateTaskResponse.SerializeToString,
            ),
            'AckTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AckTask,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AckTaskRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AckTaskResponse.SerializeToString,
            ),
            'AddLog': grpc.unary_unary_rpc_method_handler(
                    servicer.AddLog,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AddLogRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.AddLogResponse.SerializeToString,
            ),
            'GetTaskLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskLogs,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskLogsRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskLogsResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskResponse.SerializeToString,
            ),
            'RemoveTaskFromQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTaskFromQueue,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.RemoveTaskRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.RemoveTaskResponse.SerializeToString,
            ),
            'GetQueueSizesForTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueueSizesForTasks,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueSizesRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueSizesResponse.SerializeToString,
            ),
            'GetQueueInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueueInfo,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueInfoRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueInfoResponse.SerializeToString,
            ),
            'GetQueueAllInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueueAllInfo,
                    request_deserializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueAllInfoRequest.FromString,
                    response_serializer=pyconductor__grpc_dot_service_dot_task__service__pb2.QueueAllInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'conductor.grpc.tasks.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Poll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/Poll',
            pyconductor__grpc_dot_service_dot_task__service__pb2.PollRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.PollResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchPoll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/conductor.grpc.tasks.TaskService/BatchPoll',
            pyconductor__grpc_dot_service_dot_task__service__pb2.BatchPollRequest.SerializeToString,
            pyconductor__grpc_dot_model_dot_task__pb2.Task.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTasksInProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/GetTasksInProgress',
            pyconductor__grpc_dot_service_dot_task__service__pb2.TasksInProgressRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.TasksInProgressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPendingTaskForWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/GetPendingTaskForWorkflow',
            pyconductor__grpc_dot_service_dot_task__service__pb2.PendingTaskRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.PendingTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/UpdateTask',
            pyconductor__grpc_dot_service_dot_task__service__pb2.UpdateTaskRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.UpdateTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AckTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/AckTask',
            pyconductor__grpc_dot_service_dot_task__service__pb2.AckTaskRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.AckTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/AddLog',
            pyconductor__grpc_dot_service_dot_task__service__pb2.AddLogRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.AddLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/GetTaskLogs',
            pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskLogsRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/GetTask',
            pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.GetTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTaskFromQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/RemoveTaskFromQueue',
            pyconductor__grpc_dot_service_dot_task__service__pb2.RemoveTaskRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.RemoveTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueueSizesForTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/GetQueueSizesForTasks',
            pyconductor__grpc_dot_service_dot_task__service__pb2.QueueSizesRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.QueueSizesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueueInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/GetQueueInfo',
            pyconductor__grpc_dot_service_dot_task__service__pb2.QueueInfoRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.QueueInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueueAllInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conductor.grpc.tasks.TaskService/GetQueueAllInfo',
            pyconductor__grpc_dot_service_dot_task__service__pb2.QueueAllInfoRequest.SerializeToString,
            pyconductor__grpc_dot_service_dot_task__service__pb2.QueueAllInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
