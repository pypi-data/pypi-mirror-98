# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import keepsake_pb2 as keepsake__pb2


class DaemonStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateExperiment = channel.unary_unary(
                '/service.Daemon/CreateExperiment',
                request_serializer=keepsake__pb2.CreateExperimentRequest.SerializeToString,
                response_deserializer=keepsake__pb2.CreateExperimentReply.FromString,
                )
        self.CreateCheckpoint = channel.unary_unary(
                '/service.Daemon/CreateCheckpoint',
                request_serializer=keepsake__pb2.CreateCheckpointRequest.SerializeToString,
                response_deserializer=keepsake__pb2.CreateCheckpointReply.FromString,
                )
        self.SaveExperiment = channel.unary_unary(
                '/service.Daemon/SaveExperiment',
                request_serializer=keepsake__pb2.SaveExperimentRequest.SerializeToString,
                response_deserializer=keepsake__pb2.SaveExperimentReply.FromString,
                )
        self.StopExperiment = channel.unary_unary(
                '/service.Daemon/StopExperiment',
                request_serializer=keepsake__pb2.StopExperimentRequest.SerializeToString,
                response_deserializer=keepsake__pb2.StopExperimentReply.FromString,
                )
        self.GetExperiment = channel.unary_unary(
                '/service.Daemon/GetExperiment',
                request_serializer=keepsake__pb2.GetExperimentRequest.SerializeToString,
                response_deserializer=keepsake__pb2.GetExperimentReply.FromString,
                )
        self.ListExperiments = channel.unary_unary(
                '/service.Daemon/ListExperiments',
                request_serializer=keepsake__pb2.ListExperimentsRequest.SerializeToString,
                response_deserializer=keepsake__pb2.ListExperimentsReply.FromString,
                )
        self.DeleteExperiment = channel.unary_unary(
                '/service.Daemon/DeleteExperiment',
                request_serializer=keepsake__pb2.DeleteExperimentRequest.SerializeToString,
                response_deserializer=keepsake__pb2.DeleteExperimentReply.FromString,
                )
        self.CheckoutCheckpoint = channel.unary_unary(
                '/service.Daemon/CheckoutCheckpoint',
                request_serializer=keepsake__pb2.CheckoutCheckpointRequest.SerializeToString,
                response_deserializer=keepsake__pb2.CheckoutCheckpointReply.FromString,
                )
        self.GetExperimentStatus = channel.unary_unary(
                '/service.Daemon/GetExperimentStatus',
                request_serializer=keepsake__pb2.GetExperimentStatusRequest.SerializeToString,
                response_deserializer=keepsake__pb2.GetExperimentStatusReply.FromString,
                )


class DaemonServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCheckpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExperiments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckoutCheckpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DaemonServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExperiment,
                    request_deserializer=keepsake__pb2.CreateExperimentRequest.FromString,
                    response_serializer=keepsake__pb2.CreateExperimentReply.SerializeToString,
            ),
            'CreateCheckpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCheckpoint,
                    request_deserializer=keepsake__pb2.CreateCheckpointRequest.FromString,
                    response_serializer=keepsake__pb2.CreateCheckpointReply.SerializeToString,
            ),
            'SaveExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveExperiment,
                    request_deserializer=keepsake__pb2.SaveExperimentRequest.FromString,
                    response_serializer=keepsake__pb2.SaveExperimentReply.SerializeToString,
            ),
            'StopExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExperiment,
                    request_deserializer=keepsake__pb2.StopExperimentRequest.FromString,
                    response_serializer=keepsake__pb2.StopExperimentReply.SerializeToString,
            ),
            'GetExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperiment,
                    request_deserializer=keepsake__pb2.GetExperimentRequest.FromString,
                    response_serializer=keepsake__pb2.GetExperimentReply.SerializeToString,
            ),
            'ListExperiments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExperiments,
                    request_deserializer=keepsake__pb2.ListExperimentsRequest.FromString,
                    response_serializer=keepsake__pb2.ListExperimentsReply.SerializeToString,
            ),
            'DeleteExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteExperiment,
                    request_deserializer=keepsake__pb2.DeleteExperimentRequest.FromString,
                    response_serializer=keepsake__pb2.DeleteExperimentReply.SerializeToString,
            ),
            'CheckoutCheckpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckoutCheckpoint,
                    request_deserializer=keepsake__pb2.CheckoutCheckpointRequest.FromString,
                    response_serializer=keepsake__pb2.CheckoutCheckpointReply.SerializeToString,
            ),
            'GetExperimentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentStatus,
                    request_deserializer=keepsake__pb2.GetExperimentStatusRequest.FromString,
                    response_serializer=keepsake__pb2.GetExperimentStatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.Daemon', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Daemon(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/CreateExperiment',
            keepsake__pb2.CreateExperimentRequest.SerializeToString,
            keepsake__pb2.CreateExperimentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCheckpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/CreateCheckpoint',
            keepsake__pb2.CreateCheckpointRequest.SerializeToString,
            keepsake__pb2.CreateCheckpointReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/SaveExperiment',
            keepsake__pb2.SaveExperimentRequest.SerializeToString,
            keepsake__pb2.SaveExperimentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/StopExperiment',
            keepsake__pb2.StopExperimentRequest.SerializeToString,
            keepsake__pb2.StopExperimentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/GetExperiment',
            keepsake__pb2.GetExperimentRequest.SerializeToString,
            keepsake__pb2.GetExperimentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListExperiments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/ListExperiments',
            keepsake__pb2.ListExperimentsRequest.SerializeToString,
            keepsake__pb2.ListExperimentsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/DeleteExperiment',
            keepsake__pb2.DeleteExperimentRequest.SerializeToString,
            keepsake__pb2.DeleteExperimentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckoutCheckpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/CheckoutCheckpoint',
            keepsake__pb2.CheckoutCheckpointRequest.SerializeToString,
            keepsake__pb2.CheckoutCheckpointReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.Daemon/GetExperimentStatus',
            keepsake__pb2.GetExperimentStatusRequest.SerializeToString,
            keepsake__pb2.GetExperimentStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
