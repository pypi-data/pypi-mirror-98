# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DevZones')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DevZones')
    _DevZones = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DevZones', [dirname(__file__)])
        except ImportError:
            import _DevZones
            return _DevZones
        try:
            _mod = imp.load_module('_DevZones', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DevZones = swig_import_helper()
    del swig_import_helper
else:
    import _DevZones
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _DevZones.Cell_c_set
    __swig_getmethods__["c"] = _DevZones.Cell_c_get
    if _newclass:
        c = _swig_property(_DevZones.Cell_c_get, _DevZones.Cell_c_set)
    __swig_setmethods__["r"] = _DevZones.Cell_r_set
    __swig_getmethods__["r"] = _DevZones.Cell_r_get
    if _newclass:
        r = _swig_property(_DevZones.Cell_r_get, _DevZones.Cell_r_set)
    __swig_setmethods__["z"] = _DevZones.Cell_z_set
    __swig_getmethods__["z"] = _DevZones.Cell_z_get
    if _newclass:
        z = _swig_property(_DevZones.Cell_z_get, _DevZones.Cell_z_set)

    def __init__(self, col, row, zone):
        this = _DevZones.new_Cell(col, row, zone)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DevZones.delete_Cell
    __del__ = lambda self: None
Cell_swigregister = _DevZones.Cell_swigregister
Cell_swigregister(Cell)
cvar = _DevZones.cvar
NOZONE = cvar.NOZONE

class Zone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Zone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Zone, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _DevZones.Zone_id_set
    __swig_getmethods__["id"] = _DevZones.Zone_id_get
    if _newclass:
        id = _swig_property(_DevZones.Zone_id_get, _DevZones.Zone_id_set)
    __swig_setmethods__["cells"] = _DevZones.Zone_cells_set
    __swig_getmethods__["cells"] = _DevZones.Zone_cells_get
    if _newclass:
        cells = _swig_property(_DevZones.Zone_cells_get, _DevZones.Zone_cells_set)

    def __init__(self, zid):
        this = _DevZones.new_Zone(zid)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DevZones.delete_Zone
    __del__ = lambda self: None
Zone_swigregister = _DevZones.Zone_swigregister
Zone_swigregister(Zone)

class Ward(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ward, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ward, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cells"] = _DevZones.Ward_cells_set
    __swig_getmethods__["cells"] = _DevZones.Ward_cells_get
    if _newclass:
        cells = _swig_property(_DevZones.Ward_cells_get, _DevZones.Ward_cells_set)

    def __init__(self):
        this = _DevZones.new_Ward()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DevZones.delete_Ward
    __del__ = lambda self: None
Ward_swigregister = _DevZones.Ward_swigregister
Ward_swigregister(Ward)


def CreateDevZones(*args):
    return _DevZones.CreateDevZones(*args)
CreateDevZones = _DevZones.CreateDevZones

def DevZoneAVGSuit(useBin, zoneID, zoneData, zoneAVG, rastHdr, pathToBinConfig):
    return _DevZones.DevZoneAVGSuit(useBin, zoneID, zoneData, zoneAVG, rastHdr, pathToBinConfig)
DevZoneAVGSuit = _DevZones.DevZoneAVGSuit
# This file is compatible with both classic and new-style classes.


