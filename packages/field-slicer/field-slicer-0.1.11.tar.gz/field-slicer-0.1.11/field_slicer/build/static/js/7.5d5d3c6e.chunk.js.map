{"version":3,"sources":["python/field_slicer/extensions/pluginInterface/workspaceReducer.ts","python/field_slicer/extensions/mainwindow/MainWindow/HitherJobMonitorControl.tsx","python/field_slicer/extensions/mainwindow/MainWindow/ServerStatusControl.tsx","python/field_slicer/extensions/mainwindow/MainWindow/SettingsControl.tsx","python/field_slicer/extensions/mainwindow/MainWindow/ApplicationBar.tsx","python/field_slicer/extensions/mainwindow/MainWindow/MainWindow.tsx","python/field_slicer/extensions/pluginInterface/index.ts","python/field_slicer/extensions/pluginInterface/misc.ts","python/field_slicer/extensions/mainwindow/mainwindow.tsx"],"names":["workspaceReducer","s","a","type","fieldModels","filter","x","fieldModelId","fieldModel","fieldModelIds","includes","HitherJobMonitorControl","useState","hitherJobs","setHitherJobs","hither","useContext","HitherContext","useEffect","timer1","setInterval","hj","getHitherJobs","clearInterval","pendingJobs","j","status","runningJobs","finishedJobs","erroredJobs","numPending","length","numRunning","numFinished","numErrored","title","errored","style","color","fontFamily","ServerStatusControl","LabboxProviderContext","websocketStatus","onReconnectWebsocket","useMemo","icon","Sync","CheckCircleOutline","SyncProblem","Error","handleClick","useCallback","IconButton","onClick","SettingsControl","onOpenSettings","Settings","ApplicationBar","workspaceRouteDispatch","logo","handleHome","AppBar","position","height","Toolbar","src","className","alt","paddingBottom","cursor","fontWeight","marginLeft","getWindowDimensions","window","width","innerWidth","innerHeight","MainWindow","workspaceUri","workspaceRoute","version","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","H","W","hMargin","workspaceViewPlugin","plugins","usePlugins","p","map","useWorkspaceViewPlugins","name","settingsVisible","setSettingsVisible","useReducer","workspace","workspaceDispatch2","handleWorkspaceSubfeedMessages","messages","console","log","forEach","msg","feedUri","undefined","workspaceName","startsWith","split","feedId","parseWorkspaceUri","subfeedName","appendWorkspaceMessages","useSubfeed","onMessages","appendMessages","workspaceDispatch","handleOpenSettings","handleCloseSettings","margin","top","component","Modal","open","onClose","zIndex","activate","context","registerPlugin","label"],"mappings":"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","file":"static/js/7.5d5d3c6e.chunk.js","sourcesContent":["import FieldModel from \"./FieldModel\"\n\nexport type WorkspaceState = {\n    fieldModels: FieldModel[]\n}\n\ntype AddFieldModelWorkspaceAction = {\n    type: 'addFieldModel'\n    fieldModel: FieldModel\n}\n\ntype DeleteFieldModelsWorkspaceAction = {\n    type: 'deleteFieldModels'\n    fieldModelIds: string[]\n}\n\nexport type WorkspaceAction = AddFieldModelWorkspaceAction | DeleteFieldModelsWorkspaceAction\n\nconst workspaceReducer = (s: WorkspaceState, a: WorkspaceAction): WorkspaceState => {\n    switch (a.type) {\n        case 'addFieldModel': return { ...s, fieldModels: [...s.fieldModels.filter(x => (x.fieldModelId !== a.fieldModel.fieldModelId)), a.fieldModel] }\n        case 'deleteFieldModels': return { ...s, fieldModels: s.fieldModels.filter(x => !a.fieldModelIds.includes(x.fieldModelId)) }\n        default: return s\n    }\n}\n\nexport type WorkspaceDispatch = (a: WorkspaceAction) => void\n\nexport default workspaceReducer","import { HitherContext, HitherJob } from 'labbox';\nimport React, { FunctionComponent, useContext, useEffect, useState } from 'react';\n\ntype Props = {\n}\n\nconst HitherJobMonitorControl: FunctionComponent<Props> = () => {\n    const [hitherJobs, setHitherJobs] = useState<HitherJob[]>([])\n    const hither = useContext(HitherContext)\n    useEffect(() => {\n        // this should only get called once\n        // (hither should not change, but if it does we might have a problem here)\n        const timer1 = setInterval(() => {\n            const hj = hither.getHitherJobs()\n            setHitherJobs(hj)\n        }, 1000)\n        return () => {\n            clearInterval(timer1)\n        }\n    }, [hither])\n\n    const { pendingJobs, runningJobs, finishedJobs, erroredJobs } = {\n        pendingJobs: hitherJobs.filter(j => (j.status === 'pending')),\n        runningJobs: hitherJobs.filter(j => (j.status === 'running')),\n        finishedJobs: hitherJobs.filter(j => (j.status === 'finished')),\n        erroredJobs: hitherJobs.filter(j => (j.status === 'error')),\n    }\n    const numPending = pendingJobs.length;\n    const numRunning = runningJobs.length;\n    const numFinished = finishedJobs.length;\n    const numErrored = erroredJobs.length;\n    const title = `Jobs: ${numPending} pending | ${numRunning} running | ${numFinished} finished | ${numErrored} errored`\n    const errored = numErrored > 0 ? (\n        <span>:<span style={{color: 'pink'}}>{numErrored}</span></span>\n    ) : <span></span>\n    return (\n        <span title={title} style={{ fontFamily: \"courier\" }}>{numPending}:{numRunning}:{numFinished}{errored}</span>\n    );\n}\n\nexport default HitherJobMonitorControl","import { IconButton } from '@material-ui/core';\nimport { CheckCircleOutline, Sync, SyncProblem } from '@material-ui/icons';\nimport { LabboxProviderContext } from 'labbox';\nimport React, { FunctionComponent, useCallback, useContext, useMemo } from 'react';\n\ntype Props = {\n    color: any\n}\n\nconst ServerStatusControl: FunctionComponent<Props> = ({ color }) => {\n    const { websocketStatus, onReconnectWebsocket } = useContext(LabboxProviderContext)\n\n    const { icon, title } = useMemo(() => {\n        switch (websocketStatus) {\n            case 'waiting': {\n                return {icon: <Sync style={{color: 'blue'}} />, title: 'Loading...'}\n            }\n            case 'connected': {\n                return {icon: <CheckCircleOutline style={{color}} />, title: 'Connected'}\n            }\n            case 'disconnected': {\n                return {icon: <SyncProblem style={{color: 'red'}} />, title: `Disconnected from server. Click to attempt reconnect.`}\n            }\n            default: {\n                throw Error('Unexpected.')\n            }\n        }\n    }, [websocketStatus, color])\n\n    const handleClick = useCallback(() => {\n        if (websocketStatus === 'disconnected') {\n            onReconnectWebsocket()\n        }\n    }, [websocketStatus, onReconnectWebsocket])\n\n    return (\n        <IconButton title={title} onClick={handleClick}>{icon}</IconButton>\n    );\n}\n\nexport default ServerStatusControl","import { IconButton } from '@material-ui/core';\nimport { Settings } from '@material-ui/icons';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\ntype Props = {\n    onOpenSettings: () => void\n    color: any\n}\n\nconst SettingsControl: FunctionComponent<Props> = ({ onOpenSettings, color }) => {\n    const { icon, title } = useMemo(() => {\n        return {icon: <Settings />, title: 'Open settings'}\n    }, [])\n\n    const handleClick = useCallback(() => {\n        onOpenSettings()\n    }, [onOpenSettings])\n\n    return (\n        <IconButton style={{color}} title={title} onClick={handleClick}>{icon}</IconButton>\n    );\n}\n\nexport default SettingsControl","import { AppBar, Toolbar } from '@material-ui/core';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { WorkspaceRouteDispatch } from '../../pluginInterface';\nimport HitherJobMonitorControl from './HitherJobMonitorControl';\nimport ServerStatusControl from './ServerStatusControl';\nimport SettingsControl from './SettingsControl';\n\n\nconst appBarHeight = 50\n\ntype Props = {\n    onOpenSettings: () => void\n    workspaceRouteDispatch: WorkspaceRouteDispatch\n    logo?: any\n}\n\nconst ApplicationBar: FunctionComponent<Props> = ({ onOpenSettings, workspaceRouteDispatch, logo }) => {\n    const handleHome = useCallback(() => {\n        workspaceRouteDispatch({type: 'gotoFieldModelsPage'})\n    }, [workspaceRouteDispatch])\n    return (\n        <AppBar position=\"static\" style={{height: appBarHeight, color: 'white'}}>\n            <Toolbar>\n            {\n                logo && (<img src={logo} className=\"App-logo\" alt=\"logo\" height={30} style={{paddingBottom: 5, cursor: 'pointer'}} onClick={handleHome} />)\n            }\n            &nbsp;&nbsp;&nbsp;<span style={{paddingBottom: 0, color: 'white', fontFamily: 'sans-serif', fontWeight: 'bold'}}>Field slicer</span>\n            <span style={{marginLeft: 'auto'}} />\n            <span style={{paddingBottom: 0, color: 'white'}}>\n                <SettingsControl onOpenSettings={onOpenSettings} color={'white'} />\n                <ServerStatusControl color={'white'} />\n                <HitherJobMonitorControl />\n            </span>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default ApplicationBar","import { Modal } from '@material-ui/core';\nimport { useSubfeed } from 'labbox';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { MainWindowProps, useWorkspaceViewPlugins, WorkspaceAction, workspaceReducer } from '../../pluginInterface';\nimport { parseWorkspaceUri } from '../../pluginInterface/misc';\nimport ApplicationBar from './ApplicationBar';\n\n// Thanks: https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\nfunction useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n\nconst MainWindow: FunctionComponent<MainWindowProps> = ({ workspaceUri, workspaceRoute, workspaceRouteDispatch, version }) => {\n    const { width, height } = useWindowDimensions()\n    const appBarHeight = 62 // hard-coded for now - must agree with theme\n    const H = height - appBarHeight - 2\n    const hMargin = 0\n    const W = width - hMargin * 2 - 2\n\n    const workspaceViewPlugin = useWorkspaceViewPlugins().filter(p => (p.name === 'WorkspaceView'))[0]\n    if (!workspaceViewPlugin) throw Error('Unable to find workspace view plugin')\n\n    const [settingsVisible, setSettingsVisible] = useState(false)\n\n    const [workspace, workspaceDispatch2] = useReducer(workspaceReducer, useMemo(() => ({fieldModels: []}), []))\n    const handleWorkspaceSubfeedMessages = useCallback((messages: any[]) => {\n        console.log('--- workspace subfeed messages', messages)\n        messages.forEach(msg => workspaceDispatch2(msg))\n    }, [])\n\n    const {feedUri, workspaceName} = parseWorkspaceUri(workspaceUri)\n\n    const subfeedName = useMemo(() => ({workspaceName}), [workspaceName])\n\n    const {appendMessages: appendWorkspaceMessages} = useSubfeed({feedUri, subfeedName, onMessages: handleWorkspaceSubfeedMessages })\n    const workspaceDispatch = useCallback((a: WorkspaceAction) => {\n        appendWorkspaceMessages([a])\n    }, [appendWorkspaceMessages])\n\n    const handleOpenSettings = useCallback(() => {\n        setSettingsVisible(true)\n    }, [])\n\n    const handleCloseSettings = useCallback(() => {\n        setSettingsVisible(false)\n    }, [])\n\n    return (\n        <div style={{margin: 0}}>\n            <ApplicationBar\n                onOpenSettings={handleOpenSettings}\n                workspaceRouteDispatch={workspaceRouteDispatch}\n            />\n            <div style={{position: 'absolute', top: appBarHeight}}>\n                <workspaceViewPlugin.component width={W} height={H} workspace={workspace} workspaceDispatch={workspaceDispatch} workspaceRoute={workspaceRoute} workspaceRouteDispatch={workspaceRouteDispatch} />\n            </div>\n            <Modal\n                open={settingsVisible}\n                onClose={handleCloseSettings}\n                style={{zIndex: 9999}}\n            >\n                <span>\n                    {/* <SettingsWindow\n                        workspace={workspace}\n                        workspaceUri={workspaceUri}\n                        version={version}\n                    /> */}\n                </span>\n            </Modal>\n        </div>\n    )\n}\n\nexport default MainWindow","import { BasePlugin, ExtensionContext, usePlugins } from 'labbox'\nimport { FunctionComponent, useMemo } from \"react\"\nimport { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute'\nimport { WorkspaceViewPlugin } from './WorkspaceViewPlugin'\nexport type { default as FieldModel } from './FieldModel'\nexport { default as workspaceReducer } from './workspaceReducer'\nexport type { WorkspaceAction } from './workspaceReducer'\nexport type { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute'\n\nexport type MainWindowProps = {\n    workspaceUri: string | undefined\n    workspaceRoute: WorkspaceRoute\n    workspaceRouteDispatch: WorkspaceRouteDispatch\n    version: string\n}\nexport interface MainWindowPlugin extends BasePlugin {\n    type: 'MainWindow'\n    component: FunctionComponent<MainWindowProps>\n}\n\nexport type FSPlugin = MainWindowPlugin | WorkspaceViewPlugin\n\nexport type FSExtensionContext = ExtensionContext<FSPlugin>\n\nexport const useWorkspaceViewPlugins = (): WorkspaceViewPlugin[] => {\n    const plugins = usePlugins<FSPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'WorkspaceView')).map(p => (p as any as WorkspaceViewPlugin))\n    ), [plugins])\n}","export const parseWorkspaceUri = (workspaceUri: string | undefined): {feedUri: string | undefined, workspaceName: string | undefined} => {\n    if (!workspaceUri) return {feedUri: undefined, workspaceName: undefined}\n    if (!workspaceUri.startsWith('workspace://')) {\n        return {feedUri: undefined, workspaceName: undefined}\n    }\n    const a = workspaceUri.split('/')\n    const feedId = a[2] || undefined\n    const workspaceName = a[3] || undefined\n    if ((!feedId) || (!workspaceName)) return {feedUri: undefined, workspaceName: undefined}\n    return {\n        feedUri: `feed://${feedId}`,\n        workspaceName\n    }\n}","import { FSExtensionContext } from \"../pluginInterface\";\nimport MainWindow from \"./MainWindow/MainWindow\";\n\nexport function activate(context: FSExtensionContext) {\n    context.registerPlugin({\n        type: 'MainWindow',\n        name: 'MainWindow',\n        label: 'Main Window',\n        component: MainWindow\n    })\n}"],"sourceRoot":""}