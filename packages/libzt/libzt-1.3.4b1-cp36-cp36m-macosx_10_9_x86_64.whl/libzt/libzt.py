# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libzt
else:
    import _libzt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

ZTS_ENABLE_PYTHON = _libzt.ZTS_ENABLE_PYTHON
ZTS_EVENT_NODE_UP = _libzt.ZTS_EVENT_NODE_UP
ZTS_EVENT_NODE_ONLINE = _libzt.ZTS_EVENT_NODE_ONLINE
ZTS_EVENT_NODE_OFFLINE = _libzt.ZTS_EVENT_NODE_OFFLINE
ZTS_EVENT_NODE_DOWN = _libzt.ZTS_EVENT_NODE_DOWN
ZTS_EVENT_NODE_IDENTITY_COLLISION = _libzt.ZTS_EVENT_NODE_IDENTITY_COLLISION
ZTS_EVENT_NODE_UNRECOVERABLE_ERROR = _libzt.ZTS_EVENT_NODE_UNRECOVERABLE_ERROR
ZTS_EVENT_NODE_NORMAL_TERMINATION = _libzt.ZTS_EVENT_NODE_NORMAL_TERMINATION
ZTS_EVENT_NETWORK_NOT_FOUND = _libzt.ZTS_EVENT_NETWORK_NOT_FOUND
ZTS_EVENT_NETWORK_CLIENT_TOO_OLD = _libzt.ZTS_EVENT_NETWORK_CLIENT_TOO_OLD
ZTS_EVENT_NETWORK_REQ_CONFIG = _libzt.ZTS_EVENT_NETWORK_REQ_CONFIG
ZTS_EVENT_NETWORK_OK = _libzt.ZTS_EVENT_NETWORK_OK
ZTS_EVENT_NETWORK_ACCESS_DENIED = _libzt.ZTS_EVENT_NETWORK_ACCESS_DENIED
ZTS_EVENT_NETWORK_READY_IP4 = _libzt.ZTS_EVENT_NETWORK_READY_IP4
ZTS_EVENT_NETWORK_READY_IP6 = _libzt.ZTS_EVENT_NETWORK_READY_IP6
ZTS_EVENT_NETWORK_READY_IP4_IP6 = _libzt.ZTS_EVENT_NETWORK_READY_IP4_IP6
ZTS_EVENT_NETWORK_DOWN = _libzt.ZTS_EVENT_NETWORK_DOWN
ZTS_EVENT_NETWORK_UPDATE = _libzt.ZTS_EVENT_NETWORK_UPDATE
ZTS_EVENT_STACK_UP = _libzt.ZTS_EVENT_STACK_UP
ZTS_EVENT_STACK_DOWN = _libzt.ZTS_EVENT_STACK_DOWN
ZTS_EVENT_NETIF_UP = _libzt.ZTS_EVENT_NETIF_UP
ZTS_EVENT_NETIF_DOWN = _libzt.ZTS_EVENT_NETIF_DOWN
ZTS_EVENT_NETIF_REMOVED = _libzt.ZTS_EVENT_NETIF_REMOVED
ZTS_EVENT_NETIF_LINK_UP = _libzt.ZTS_EVENT_NETIF_LINK_UP
ZTS_EVENT_NETIF_LINK_DOWN = _libzt.ZTS_EVENT_NETIF_LINK_DOWN
ZTS_EVENT_PEER_DIRECT = _libzt.ZTS_EVENT_PEER_DIRECT
ZTS_EVENT_PEER_RELAY = _libzt.ZTS_EVENT_PEER_RELAY
ZTS_EVENT_PEER_UNREACHABLE = _libzt.ZTS_EVENT_PEER_UNREACHABLE
ZTS_EVENT_PEER_PATH_DISCOVERED = _libzt.ZTS_EVENT_PEER_PATH_DISCOVERED
ZTS_EVENT_PEER_PATH_DEAD = _libzt.ZTS_EVENT_PEER_PATH_DEAD
ZTS_EVENT_ROUTE_ADDED = _libzt.ZTS_EVENT_ROUTE_ADDED
ZTS_EVENT_ROUTE_REMOVED = _libzt.ZTS_EVENT_ROUTE_REMOVED
ZTS_EVENT_ADDR_ADDED_IP4 = _libzt.ZTS_EVENT_ADDR_ADDED_IP4
ZTS_EVENT_ADDR_REMOVED_IP4 = _libzt.ZTS_EVENT_ADDR_REMOVED_IP4
ZTS_EVENT_ADDR_ADDED_IP6 = _libzt.ZTS_EVENT_ADDR_ADDED_IP6
ZTS_EVENT_ADDR_REMOVED_IP6 = _libzt.ZTS_EVENT_ADDR_REMOVED_IP6
ZTS_ERR_OK = _libzt.ZTS_ERR_OK
ZTS_ERR_SOCKET = _libzt.ZTS_ERR_SOCKET
ZTS_ERR_SERVICE = _libzt.ZTS_ERR_SERVICE
ZTS_ERR_ARG = _libzt.ZTS_ERR_ARG
ZTS_ERR_NO_RESULT = _libzt.ZTS_ERR_NO_RESULT
ZTS_ERR_GENERAL = _libzt.ZTS_ERR_GENERAL
ZTS_EPERM = _libzt.ZTS_EPERM
ZTS_ENOENT = _libzt.ZTS_ENOENT
ZTS_ESRCH = _libzt.ZTS_ESRCH
ZTS_EINTR = _libzt.ZTS_EINTR
ZTS_EIO = _libzt.ZTS_EIO
ZTS_ENXIO = _libzt.ZTS_ENXIO
ZTS_E2BIG = _libzt.ZTS_E2BIG
ZTS_ENOEXEC = _libzt.ZTS_ENOEXEC
ZTS_EBADF = _libzt.ZTS_EBADF
ZTS_ECHILD = _libzt.ZTS_ECHILD
ZTS_EAGAIN = _libzt.ZTS_EAGAIN
ZTS_ENOMEM = _libzt.ZTS_ENOMEM
ZTS_EACCES = _libzt.ZTS_EACCES
ZTS_EFAULT = _libzt.ZTS_EFAULT
ZTS_ENOTBLK = _libzt.ZTS_ENOTBLK
ZTS_EBUSY = _libzt.ZTS_EBUSY
ZTS_EEXIST = _libzt.ZTS_EEXIST
ZTS_EXDEV = _libzt.ZTS_EXDEV
ZTS_ENODEV = _libzt.ZTS_ENODEV
ZTS_ENOTDIR = _libzt.ZTS_ENOTDIR
ZTS_EISDIR = _libzt.ZTS_EISDIR
ZTS_EINVAL = _libzt.ZTS_EINVAL
ZTS_ENFILE = _libzt.ZTS_ENFILE
ZTS_EMFILE = _libzt.ZTS_EMFILE
ZTS_ENOTTY = _libzt.ZTS_ENOTTY
ZTS_ETXTBSY = _libzt.ZTS_ETXTBSY
ZTS_EFBIG = _libzt.ZTS_EFBIG
ZTS_ENOSPC = _libzt.ZTS_ENOSPC
ZTS_ESPIPE = _libzt.ZTS_ESPIPE
ZTS_EROFS = _libzt.ZTS_EROFS
ZTS_EMLINK = _libzt.ZTS_EMLINK
ZTS_EPIPE = _libzt.ZTS_EPIPE
ZTS_EDOM = _libzt.ZTS_EDOM
ZTS_ERANGE = _libzt.ZTS_ERANGE
ZTS_EDEADLK = _libzt.ZTS_EDEADLK
ZTS_ENAMETOOLONG = _libzt.ZTS_ENAMETOOLONG
ZTS_ENOLCK = _libzt.ZTS_ENOLCK
ZTS_ENOSYS = _libzt.ZTS_ENOSYS
ZTS_ENOTEMPTY = _libzt.ZTS_ENOTEMPTY
ZTS_ELOOP = _libzt.ZTS_ELOOP
ZTS_EWOULDBLOCK = _libzt.ZTS_EWOULDBLOCK
ZTS_ENOMSG = _libzt.ZTS_ENOMSG
ZTS_EIDRM = _libzt.ZTS_EIDRM
ZTS_ECHRNG = _libzt.ZTS_ECHRNG
ZTS_EL2NSYNC = _libzt.ZTS_EL2NSYNC
ZTS_EL3HLT = _libzt.ZTS_EL3HLT
ZTS_EL3RST = _libzt.ZTS_EL3RST
ZTS_ELNRNG = _libzt.ZTS_ELNRNG
ZTS_EUNATCH = _libzt.ZTS_EUNATCH
ZTS_ENOCSI = _libzt.ZTS_ENOCSI
ZTS_EL2HLT = _libzt.ZTS_EL2HLT
ZTS_EBADE = _libzt.ZTS_EBADE
ZTS_EBADR = _libzt.ZTS_EBADR
ZTS_EXFULL = _libzt.ZTS_EXFULL
ZTS_ENOANO = _libzt.ZTS_ENOANO
ZTS_EBADRQC = _libzt.ZTS_EBADRQC
ZTS_EBADSLT = _libzt.ZTS_EBADSLT
ZTS_EDEADLOCK = _libzt.ZTS_EDEADLOCK
ZTS_EBFONT = _libzt.ZTS_EBFONT
ZTS_ENOSTR = _libzt.ZTS_ENOSTR
ZTS_ENODATA = _libzt.ZTS_ENODATA
ZTS_ETIME = _libzt.ZTS_ETIME
ZTS_ENOSR = _libzt.ZTS_ENOSR
ZTS_ENONET = _libzt.ZTS_ENONET
ZTS_ENOPKG = _libzt.ZTS_ENOPKG
ZTS_EREMOTE = _libzt.ZTS_EREMOTE
ZTS_ENOLINK = _libzt.ZTS_ENOLINK
ZTS_EADV = _libzt.ZTS_EADV
ZTS_ESRMNT = _libzt.ZTS_ESRMNT
ZTS_ECOMM = _libzt.ZTS_ECOMM
ZTS_EPROTO = _libzt.ZTS_EPROTO
ZTS_EMULTIHOP = _libzt.ZTS_EMULTIHOP
ZTS_EDOTDOT = _libzt.ZTS_EDOTDOT
ZTS_EBADMSG = _libzt.ZTS_EBADMSG
ZTS_EOVERFLOW = _libzt.ZTS_EOVERFLOW
ZTS_ENOTUNIQ = _libzt.ZTS_ENOTUNIQ
ZTS_EBADFD = _libzt.ZTS_EBADFD
ZTS_EREMCHG = _libzt.ZTS_EREMCHG
ZTS_ELIBACC = _libzt.ZTS_ELIBACC
ZTS_ELIBBAD = _libzt.ZTS_ELIBBAD
ZTS_ELIBSCN = _libzt.ZTS_ELIBSCN
ZTS_ELIBMAX = _libzt.ZTS_ELIBMAX
ZTS_ELIBEXEC = _libzt.ZTS_ELIBEXEC
ZTS_EILSEQ = _libzt.ZTS_EILSEQ
ZTS_ERESTART = _libzt.ZTS_ERESTART
ZTS_ESTRPIPE = _libzt.ZTS_ESTRPIPE
ZTS_EUSERS = _libzt.ZTS_EUSERS
ZTS_ENOTSOCK = _libzt.ZTS_ENOTSOCK
ZTS_EDESTADDRREQ = _libzt.ZTS_EDESTADDRREQ
ZTS_EMSGSIZE = _libzt.ZTS_EMSGSIZE
ZTS_EPROTOTYPE = _libzt.ZTS_EPROTOTYPE
ZTS_ENOPROTOOPT = _libzt.ZTS_ENOPROTOOPT
ZTS_EPROTONOSUPPORT = _libzt.ZTS_EPROTONOSUPPORT
ZTS_ESOCKTNOSUPPORT = _libzt.ZTS_ESOCKTNOSUPPORT
ZTS_EOPNOTSUPP = _libzt.ZTS_EOPNOTSUPP
ZTS_EPFNOSUPPORT = _libzt.ZTS_EPFNOSUPPORT
ZTS_EAFNOSUPPORT = _libzt.ZTS_EAFNOSUPPORT
ZTS_EADDRINUSE = _libzt.ZTS_EADDRINUSE
ZTS_EADDRNOTAVAIL = _libzt.ZTS_EADDRNOTAVAIL
ZTS_ENETDOWN = _libzt.ZTS_ENETDOWN
ZTS_ENETUNREACH = _libzt.ZTS_ENETUNREACH
ZTS_ENETRESET = _libzt.ZTS_ENETRESET
ZTS_ECONNABORTED = _libzt.ZTS_ECONNABORTED
ZTS_ECONNRESET = _libzt.ZTS_ECONNRESET
ZTS_ENOBUFS = _libzt.ZTS_ENOBUFS
ZTS_EISCONN = _libzt.ZTS_EISCONN
ZTS_ENOTCONN = _libzt.ZTS_ENOTCONN
ZTS_ESHUTDOWN = _libzt.ZTS_ESHUTDOWN
ZTS_ETOOMANYREFS = _libzt.ZTS_ETOOMANYREFS
ZTS_ETIMEDOUT = _libzt.ZTS_ETIMEDOUT
ZTS_ECONNREFUSED = _libzt.ZTS_ECONNREFUSED
ZTS_EHOSTDOWN = _libzt.ZTS_EHOSTDOWN
ZTS_EHOSTUNREACH = _libzt.ZTS_EHOSTUNREACH
ZTS_EALREADY = _libzt.ZTS_EALREADY
ZTS_EINPROGRESS = _libzt.ZTS_EINPROGRESS
ZTS_ESTALE = _libzt.ZTS_ESTALE
ZTS_EUCLEAN = _libzt.ZTS_EUCLEAN
ZTS_ENOTNAM = _libzt.ZTS_ENOTNAM
ZTS_ENAVAIL = _libzt.ZTS_ENAVAIL
ZTS_EISNAM = _libzt.ZTS_EISNAM
ZTS_EREMOTEIO = _libzt.ZTS_EREMOTEIO
ZTS_EDQUOT = _libzt.ZTS_EDQUOT
ZTS_ENOMEDIUM = _libzt.ZTS_ENOMEDIUM
ZTS_EMEDIUMTYPE = _libzt.ZTS_EMEDIUMTYPE
ZTS_MAC_ADDRSTRLEN = _libzt.ZTS_MAC_ADDRSTRLEN
ZTS_INET_ADDRSTRLEN = _libzt.ZTS_INET_ADDRSTRLEN
ZTS_INET6_ADDRSTRLEN = _libzt.ZTS_INET6_ADDRSTRLEN
ZTS_SOCK_STREAM = _libzt.ZTS_SOCK_STREAM
ZTS_SOCK_DGRAM = _libzt.ZTS_SOCK_DGRAM
ZTS_SOCK_RAW = _libzt.ZTS_SOCK_RAW
ZTS_AF_UNSPEC = _libzt.ZTS_AF_UNSPEC
ZTS_AF_INET = _libzt.ZTS_AF_INET
ZTS_AF_INET6 = _libzt.ZTS_AF_INET6
ZTS_PF_INET = _libzt.ZTS_PF_INET
ZTS_PF_INET6 = _libzt.ZTS_PF_INET6
ZTS_PF_UNSPEC = _libzt.ZTS_PF_UNSPEC
ZTS_IPPROTO_IP = _libzt.ZTS_IPPROTO_IP
ZTS_IPPROTO_ICMP = _libzt.ZTS_IPPROTO_ICMP
ZTS_IPPROTO_TCP = _libzt.ZTS_IPPROTO_TCP
ZTS_IPPROTO_UDP = _libzt.ZTS_IPPROTO_UDP
ZTS_IPPROTO_IPV6 = _libzt.ZTS_IPPROTO_IPV6
ZTS_IPPROTO_ICMPV6 = _libzt.ZTS_IPPROTO_ICMPV6
ZTS_IPPROTO_UDPLITE = _libzt.ZTS_IPPROTO_UDPLITE
ZTS_IPPROTO_RAW = _libzt.ZTS_IPPROTO_RAW
ZTS_MSG_PEEK = _libzt.ZTS_MSG_PEEK
ZTS_MSG_WAITALL = _libzt.ZTS_MSG_WAITALL
ZTS_MSG_OOB = _libzt.ZTS_MSG_OOB
ZTS_MSG_DONTWAIT = _libzt.ZTS_MSG_DONTWAIT
ZTS_MSG_MORE = _libzt.ZTS_MSG_MORE
ZTS_IOCPARM_MASK = _libzt.ZTS_IOCPARM_MASK
ZTS_IOC_VOID = _libzt.ZTS_IOC_VOID
ZTS_IOC_OUT = _libzt.ZTS_IOC_OUT
ZTS_IOC_IN = _libzt.ZTS_IOC_IN
ZTS_IOC_INOUT = _libzt.ZTS_IOC_INOUT
ZTS_MAX_ASSIGNED_ADDRESSES = _libzt.ZTS_MAX_ASSIGNED_ADDRESSES
ZTS_MAX_NETWORK_ROUTES = _libzt.ZTS_MAX_NETWORK_ROUTES
ZTS_MAX_PEER_NETWORK_PATHS = _libzt.ZTS_MAX_PEER_NETWORK_PATHS
ZTS_PEER_ROLE_LEAF = _libzt.ZTS_PEER_ROLE_LEAF
ZTS_PEER_ROLE_MOON = _libzt.ZTS_PEER_ROLE_MOON
ZTS_PEER_ROLE_PLANET = _libzt.ZTS_PEER_ROLE_PLANET
class zts_node_details(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_libzt.zts_node_details_address_get, _libzt.zts_node_details_address_set)
    primaryPort = property(_libzt.zts_node_details_primaryPort_get, _libzt.zts_node_details_primaryPort_set)
    secondaryPort = property(_libzt.zts_node_details_secondaryPort_get, _libzt.zts_node_details_secondaryPort_set)
    tertiaryPort = property(_libzt.zts_node_details_tertiaryPort_get, _libzt.zts_node_details_tertiaryPort_set)
    versionMajor = property(_libzt.zts_node_details_versionMajor_get, _libzt.zts_node_details_versionMajor_set)
    versionMinor = property(_libzt.zts_node_details_versionMinor_get, _libzt.zts_node_details_versionMinor_set)
    versionRev = property(_libzt.zts_node_details_versionRev_get, _libzt.zts_node_details_versionRev_set)

    def __init__(self):
        _libzt.zts_node_details_swiginit(self, _libzt.new_zts_node_details())
    __swig_destroy__ = _libzt.delete_zts_node_details

# Register zts_node_details in _libzt:
_libzt.zts_node_details_swigregister(zts_node_details)
cvar = _libzt.cvar

class zts_callback_msg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventCode = property(_libzt.zts_callback_msg_eventCode_get, _libzt.zts_callback_msg_eventCode_set)
    node = property(_libzt.zts_callback_msg_node_get, _libzt.zts_callback_msg_node_set)
    network = property(_libzt.zts_callback_msg_network_get, _libzt.zts_callback_msg_network_set)
    netif = property(_libzt.zts_callback_msg_netif_get, _libzt.zts_callback_msg_netif_set)
    route = property(_libzt.zts_callback_msg_route_get, _libzt.zts_callback_msg_route_set)
    peer = property(_libzt.zts_callback_msg_peer_get, _libzt.zts_callback_msg_peer_set)
    addr = property(_libzt.zts_callback_msg_addr_get, _libzt.zts_callback_msg_addr_set)

    def __init__(self):
        _libzt.zts_callback_msg_swiginit(self, _libzt.new_zts_callback_msg())
    __swig_destroy__ = _libzt.delete_zts_callback_msg

# Register zts_callback_msg in _libzt:
_libzt.zts_callback_msg_swigregister(zts_callback_msg)

class zts_addr_details(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nwid = property(_libzt.zts_addr_details_nwid_get, _libzt.zts_addr_details_nwid_set)
    addr = property(_libzt.zts_addr_details_addr_get, _libzt.zts_addr_details_addr_set)

    def __init__(self):
        _libzt.zts_addr_details_swiginit(self, _libzt.new_zts_addr_details())
    __swig_destroy__ = _libzt.delete_zts_addr_details

# Register zts_addr_details in _libzt:
_libzt.zts_addr_details_swigregister(zts_addr_details)

class zts_netif_details(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nwid = property(_libzt.zts_netif_details_nwid_get, _libzt.zts_netif_details_nwid_set)
    mac = property(_libzt.zts_netif_details_mac_get, _libzt.zts_netif_details_mac_set)
    mtu = property(_libzt.zts_netif_details_mtu_get, _libzt.zts_netif_details_mtu_set)

    def __init__(self):
        _libzt.zts_netif_details_swiginit(self, _libzt.new_zts_netif_details())
    __swig_destroy__ = _libzt.delete_zts_netif_details

# Register zts_netif_details in _libzt:
_libzt.zts_netif_details_swigregister(zts_netif_details)

class zts_virtual_network_route(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    target = property(_libzt.zts_virtual_network_route_target_get, _libzt.zts_virtual_network_route_target_set)
    via = property(_libzt.zts_virtual_network_route_via_get, _libzt.zts_virtual_network_route_via_set)
    flags = property(_libzt.zts_virtual_network_route_flags_get, _libzt.zts_virtual_network_route_flags_set)
    metric = property(_libzt.zts_virtual_network_route_metric_get, _libzt.zts_virtual_network_route_metric_set)

    def __init__(self):
        _libzt.zts_virtual_network_route_swiginit(self, _libzt.new_zts_virtual_network_route())
    __swig_destroy__ = _libzt.delete_zts_virtual_network_route

# Register zts_virtual_network_route in _libzt:
_libzt.zts_virtual_network_route_swigregister(zts_virtual_network_route)

ZTS_MAX_NETWORK_SHORT_NAME_LENGTH = _libzt.ZTS_MAX_NETWORK_SHORT_NAME_LENGTH
ZTS_MAX_ZT_ASSIGNED_ADDRESSES = _libzt.ZTS_MAX_ZT_ASSIGNED_ADDRESSES
ZTS_MAX_MULTICAST_SUBSCRIPTIONS = _libzt.ZTS_MAX_MULTICAST_SUBSCRIPTIONS
ZTS_NETWORK_STATUS_REQUESTING_CONFIGURATION = _libzt.ZTS_NETWORK_STATUS_REQUESTING_CONFIGURATION
ZTS_NETWORK_STATUS_OK = _libzt.ZTS_NETWORK_STATUS_OK
ZTS_NETWORK_STATUS_ACCESS_DENIED = _libzt.ZTS_NETWORK_STATUS_ACCESS_DENIED
ZTS_NETWORK_STATUS_NOT_FOUND = _libzt.ZTS_NETWORK_STATUS_NOT_FOUND
ZTS_NETWORK_STATUS_PORT_ERROR = _libzt.ZTS_NETWORK_STATUS_PORT_ERROR
ZTS_NETWORK_STATUS_CLIENT_TOO_OLD = _libzt.ZTS_NETWORK_STATUS_CLIENT_TOO_OLD
ZTS_NETWORK_TYPE_PRIVATE = _libzt.ZTS_NETWORK_TYPE_PRIVATE
ZTS_NETWORK_TYPE_PUBLIC = _libzt.ZTS_NETWORK_TYPE_PUBLIC
class ZTS_VirtualNetworkRoute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    target = property(_libzt.ZTS_VirtualNetworkRoute_target_get, _libzt.ZTS_VirtualNetworkRoute_target_set)
    via = property(_libzt.ZTS_VirtualNetworkRoute_via_get, _libzt.ZTS_VirtualNetworkRoute_via_set)
    flags = property(_libzt.ZTS_VirtualNetworkRoute_flags_get, _libzt.ZTS_VirtualNetworkRoute_flags_set)
    metric = property(_libzt.ZTS_VirtualNetworkRoute_metric_get, _libzt.ZTS_VirtualNetworkRoute_metric_set)

    def __init__(self):
        _libzt.ZTS_VirtualNetworkRoute_swiginit(self, _libzt.new_ZTS_VirtualNetworkRoute())
    __swig_destroy__ = _libzt.delete_ZTS_VirtualNetworkRoute

# Register ZTS_VirtualNetworkRoute in _libzt:
_libzt.ZTS_VirtualNetworkRoute_swigregister(ZTS_VirtualNetworkRoute)

class zts_network_details(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nwid = property(_libzt.zts_network_details_nwid_get, _libzt.zts_network_details_nwid_set)
    mac = property(_libzt.zts_network_details_mac_get, _libzt.zts_network_details_mac_set)
    name = property(_libzt.zts_network_details_name_get, _libzt.zts_network_details_name_set)
    status = property(_libzt.zts_network_details_status_get, _libzt.zts_network_details_status_set)
    type = property(_libzt.zts_network_details_type_get, _libzt.zts_network_details_type_set)
    mtu = property(_libzt.zts_network_details_mtu_get, _libzt.zts_network_details_mtu_set)
    dhcp = property(_libzt.zts_network_details_dhcp_get, _libzt.zts_network_details_dhcp_set)
    bridge = property(_libzt.zts_network_details_bridge_get, _libzt.zts_network_details_bridge_set)
    broadcastEnabled = property(_libzt.zts_network_details_broadcastEnabled_get, _libzt.zts_network_details_broadcastEnabled_set)
    portError = property(_libzt.zts_network_details_portError_get, _libzt.zts_network_details_portError_set)
    netconfRevision = property(_libzt.zts_network_details_netconfRevision_get, _libzt.zts_network_details_netconfRevision_set)
    assignedAddressCount = property(_libzt.zts_network_details_assignedAddressCount_get, _libzt.zts_network_details_assignedAddressCount_set)
    assignedAddresses = property(_libzt.zts_network_details_assignedAddresses_get, _libzt.zts_network_details_assignedAddresses_set)
    routeCount = property(_libzt.zts_network_details_routeCount_get, _libzt.zts_network_details_routeCount_set)
    routes = property(_libzt.zts_network_details_routes_get, _libzt.zts_network_details_routes_set)
    multicastSubscriptionCount = property(_libzt.zts_network_details_multicastSubscriptionCount_get, _libzt.zts_network_details_multicastSubscriptionCount_set)

    def __init__(self):
        _libzt.zts_network_details_swiginit(self, _libzt.new_zts_network_details())
    __swig_destroy__ = _libzt.delete_zts_network_details

# Register zts_network_details in _libzt:
_libzt.zts_network_details_swigregister(zts_network_details)

class zts_physical_path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_libzt.zts_physical_path_address_get, _libzt.zts_physical_path_address_set)
    lastSend = property(_libzt.zts_physical_path_lastSend_get, _libzt.zts_physical_path_lastSend_set)
    lastReceive = property(_libzt.zts_physical_path_lastReceive_get, _libzt.zts_physical_path_lastReceive_set)
    trustedPathId = property(_libzt.zts_physical_path_trustedPathId_get, _libzt.zts_physical_path_trustedPathId_set)
    expired = property(_libzt.zts_physical_path_expired_get, _libzt.zts_physical_path_expired_set)
    preferred = property(_libzt.zts_physical_path_preferred_get, _libzt.zts_physical_path_preferred_set)

    def __init__(self):
        _libzt.zts_physical_path_swiginit(self, _libzt.new_zts_physical_path())
    __swig_destroy__ = _libzt.delete_zts_physical_path

# Register zts_physical_path in _libzt:
_libzt.zts_physical_path_swigregister(zts_physical_path)

class zts_peer_details(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_libzt.zts_peer_details_address_get, _libzt.zts_peer_details_address_set)
    versionMajor = property(_libzt.zts_peer_details_versionMajor_get, _libzt.zts_peer_details_versionMajor_set)
    versionMinor = property(_libzt.zts_peer_details_versionMinor_get, _libzt.zts_peer_details_versionMinor_set)
    versionRev = property(_libzt.zts_peer_details_versionRev_get, _libzt.zts_peer_details_versionRev_set)
    latency = property(_libzt.zts_peer_details_latency_get, _libzt.zts_peer_details_latency_set)
    role = property(_libzt.zts_peer_details_role_get, _libzt.zts_peer_details_role_set)
    pathCount = property(_libzt.zts_peer_details_pathCount_get, _libzt.zts_peer_details_pathCount_set)
    paths = property(_libzt.zts_peer_details_paths_get, _libzt.zts_peer_details_paths_set)

    def __init__(self):
        _libzt.zts_peer_details_swiginit(self, _libzt.new_zts_peer_details())
    __swig_destroy__ = _libzt.delete_zts_peer_details

# Register zts_peer_details in _libzt:
_libzt.zts_peer_details_swigregister(zts_peer_details)

class zts_peer_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    peers = property(_libzt.zts_peer_list_peers_get, _libzt.zts_peer_list_peers_set)
    peerCount = property(_libzt.zts_peer_list_peerCount_get, _libzt.zts_peer_list_peerCount_set)

    def __init__(self):
        _libzt.zts_peer_list_swiginit(self, _libzt.new_zts_peer_list())
    __swig_destroy__ = _libzt.delete_zts_peer_list

# Register zts_peer_list in _libzt:
_libzt.zts_peer_list_swigregister(zts_peer_list)

class PythonDirectorCallbackClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_zerotier_event(self, msg):
        return _libzt.PythonDirectorCallbackClass_on_zerotier_event(self, msg)
    __swig_destroy__ = _libzt.delete_PythonDirectorCallbackClass

    def __init__(self):
        if self.__class__ == PythonDirectorCallbackClass:
            _self = None
        else:
            _self = self
        _libzt.PythonDirectorCallbackClass_swiginit(self, _libzt.new_PythonDirectorCallbackClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _libzt.disown_PythonDirectorCallbackClass(self)
        return weakref.proxy(self)

# Register PythonDirectorCallbackClass in _libzt:
_libzt.PythonDirectorCallbackClass_swigregister(PythonDirectorCallbackClass)


def zts_py_bind(fd, family, type, addro):
    return _libzt.zts_py_bind(fd, family, type, addro)

def zts_py_connect(fd, family, type, addro):
    return _libzt.zts_py_connect(fd, family, type, addro)

def zts_py_accept(fd):
    return _libzt.zts_py_accept(fd)

def zts_py_listen(fd, backlog):
    return _libzt.zts_py_listen(fd, backlog)

def zts_py_recv(fd, len, flags):
    return _libzt.zts_py_recv(fd, len, flags)

def zts_py_send(fd, buf, flags):
    return _libzt.zts_py_send(fd, buf, flags)

def zts_py_close(fd):
    return _libzt.zts_py_close(fd)

def zts_py_setblocking(fd, flag):
    return _libzt.zts_py_setblocking(fd, flag)

def zts_py_getblocking(fd):
    return _libzt.zts_py_getblocking(fd)

def zts_generate_orphan_identity(key_pair_str, key_buf_len):
    return _libzt.zts_generate_orphan_identity(key_pair_str, key_buf_len)

def zts_verify_identity(key_pair_str):
    return _libzt.zts_verify_identity(key_pair_str)

def zts_get_node_identity(key_pair_str, key_buf_len):
    return _libzt.zts_get_node_identity(key_pair_str, key_buf_len)

def zts_start_with_identity(key_pair_str, key_buf_len, callback, port):
    return _libzt.zts_start_with_identity(key_pair_str, key_buf_len, callback, port)

def zts_allow_network_caching(allowed):
    return _libzt.zts_allow_network_caching(allowed)

def zts_allow_peer_caching(allowed):
    return _libzt.zts_allow_peer_caching(allowed)

def zts_allow_local_conf(allowed):
    return _libzt.zts_allow_local_conf(allowed)

def zts_disable_local_storage(disabled):
    return _libzt.zts_disable_local_storage(disabled)

def zts_start(path, callback, port):
    return _libzt.zts_start(path, callback, port)

def zts_stop():
    return _libzt.zts_stop()

def zts_restart():
    return _libzt.zts_restart()

def zts_free():
    return _libzt.zts_free()

def zts_join(networkId):
    return _libzt.zts_join(networkId)

def zts_leave(networkId):
    return _libzt.zts_leave(networkId)

def zts_orbit(moonWorldId, moonSeed):
    return _libzt.zts_orbit(moonWorldId, moonSeed)

def zts_deorbit(moonWorldId):
    return _libzt.zts_deorbit(moonWorldId)

def zts_get_6plane_addr(addr, networkId, nodeId):
    return _libzt.zts_get_6plane_addr(addr, networkId, nodeId)

def zts_get_rfc4193_addr(addr, networkId, nodeId):
    return _libzt.zts_get_rfc4193_addr(addr, networkId, nodeId)

def zts_generate_adhoc_nwid_from_range(startPortOfRange, endPortOfRange):
    return _libzt.zts_generate_adhoc_nwid_from_range(startPortOfRange, endPortOfRange)

def zts_delay_ms(interval_ms):
    return _libzt.zts_delay_ms(interval_ms)

def zts_socket(socket_family, socket_type, protocol):
    return _libzt.zts_socket(socket_family, socket_type, protocol)

def zts_connect(fd, addr, addrlen):
    return _libzt.zts_connect(fd, addr, addrlen)

def zts_bind(fd, addr, addrlen):
    return _libzt.zts_bind(fd, addr, addrlen)

def zts_listen(fd, backlog):
    return _libzt.zts_listen(fd, backlog)

def zts_accept(fd, addr, addrlen):
    return _libzt.zts_accept(fd, addr, addrlen)
ZTS_SOL_SOCKET = _libzt.ZTS_SOL_SOCKET
ZTS_SO_DEBUG = _libzt.ZTS_SO_DEBUG
ZTS_SO_ACCEPTCONN = _libzt.ZTS_SO_ACCEPTCONN
ZTS_SO_REUSEADDR = _libzt.ZTS_SO_REUSEADDR
ZTS_SO_KEEPALIVE = _libzt.ZTS_SO_KEEPALIVE
ZTS_SO_DONTROUTE = _libzt.ZTS_SO_DONTROUTE
ZTS_SO_BROADCAST = _libzt.ZTS_SO_BROADCAST
ZTS_SO_USELOOPBACK = _libzt.ZTS_SO_USELOOPBACK
ZTS_SO_LINGER = _libzt.ZTS_SO_LINGER
ZTS_SO_OOBINLINE = _libzt.ZTS_SO_OOBINLINE
ZTS_SO_REUSEPORT = _libzt.ZTS_SO_REUSEPORT
ZTS_SO_SNDBUF = _libzt.ZTS_SO_SNDBUF
ZTS_SO_RCVBUF = _libzt.ZTS_SO_RCVBUF
ZTS_SO_SNDLOWAT = _libzt.ZTS_SO_SNDLOWAT
ZTS_SO_RCVLOWAT = _libzt.ZTS_SO_RCVLOWAT
ZTS_SO_SNDTIMEO = _libzt.ZTS_SO_SNDTIMEO
ZTS_SO_RCVTIMEO = _libzt.ZTS_SO_RCVTIMEO
ZTS_SO_ERROR = _libzt.ZTS_SO_ERROR
ZTS_SO_TYPE = _libzt.ZTS_SO_TYPE
ZTS_SO_CONTIMEO = _libzt.ZTS_SO_CONTIMEO
ZTS_SO_NO_CHECK = _libzt.ZTS_SO_NO_CHECK
ZTS_SO_BINDTODEVICE = _libzt.ZTS_SO_BINDTODEVICE
ZTS_IP_TOS = _libzt.ZTS_IP_TOS
ZTS_IP_TTL = _libzt.ZTS_IP_TTL
ZTS_IP_PKTINFO = _libzt.ZTS_IP_PKTINFO
ZTS_TCP_NODELAY = _libzt.ZTS_TCP_NODELAY
ZTS_TCP_KEEPALIVE = _libzt.ZTS_TCP_KEEPALIVE
ZTS_TCP_KEEPIDLE = _libzt.ZTS_TCP_KEEPIDLE
ZTS_TCP_KEEPINTVL = _libzt.ZTS_TCP_KEEPINTVL
ZTS_TCP_KEEPCNT = _libzt.ZTS_TCP_KEEPCNT
ZTS_IPV6_CHECKSUM = _libzt.ZTS_IPV6_CHECKSUM
ZTS_IPV6_V6ONLY = _libzt.ZTS_IPV6_V6ONLY
ZTS_UDPLITE_SEND_CSCOV = _libzt.ZTS_UDPLITE_SEND_CSCOV
ZTS_UDPLITE_RECV_CSCOV = _libzt.ZTS_UDPLITE_RECV_CSCOV
ZTS_IP_MULTICAST_TTL = _libzt.ZTS_IP_MULTICAST_TTL
ZTS_IP_MULTICAST_IF = _libzt.ZTS_IP_MULTICAST_IF
ZTS_IP_MULTICAST_LOOP = _libzt.ZTS_IP_MULTICAST_LOOP
ZTS_IP_ADD_MEMBERSHIP = _libzt.ZTS_IP_ADD_MEMBERSHIP
ZTS_IP_DROP_MEMBERSHIP = _libzt.ZTS_IP_DROP_MEMBERSHIP
ZTS_IPV6_JOIN_GROUP = _libzt.ZTS_IPV6_JOIN_GROUP
ZTS_IPV6_ADD_MEMBERSHIP = _libzt.ZTS_IPV6_ADD_MEMBERSHIP
ZTS_IPV6_LEAVE_GROUP = _libzt.ZTS_IPV6_LEAVE_GROUP
ZTS_IPV6_DROP_MEMBERSHIP = _libzt.ZTS_IPV6_DROP_MEMBERSHIP
ZTS_IPTOS_TOS_MASK = _libzt.ZTS_IPTOS_TOS_MASK
ZTS_IPTOS_LOWDELAY = _libzt.ZTS_IPTOS_LOWDELAY
ZTS_IPTOS_THROUGHPUT = _libzt.ZTS_IPTOS_THROUGHPUT
ZTS_IPTOS_RELIABILITY = _libzt.ZTS_IPTOS_RELIABILITY
ZTS_IPTOS_LOWCOST = _libzt.ZTS_IPTOS_LOWCOST
ZTS_IPTOS_MINCOST = _libzt.ZTS_IPTOS_MINCOST
ZTS_IPTOS_PREC_MASK = _libzt.ZTS_IPTOS_PREC_MASK
ZTS_IPTOS_PREC_NETCONTROL = _libzt.ZTS_IPTOS_PREC_NETCONTROL
ZTS_IPTOS_PREC_INTERNETCONTROL = _libzt.ZTS_IPTOS_PREC_INTERNETCONTROL
ZTS_IPTOS_PREC_CRITIC_ECP = _libzt.ZTS_IPTOS_PREC_CRITIC_ECP
ZTS_IPTOS_PREC_FLASHOVERRIDE = _libzt.ZTS_IPTOS_PREC_FLASHOVERRIDE
ZTS_IPTOS_PREC_FLASH = _libzt.ZTS_IPTOS_PREC_FLASH
ZTS_IPTOS_PREC_IMMEDIATE = _libzt.ZTS_IPTOS_PREC_IMMEDIATE
ZTS_IPTOS_PREC_PRIORITY = _libzt.ZTS_IPTOS_PREC_PRIORITY
ZTS_IPTOS_PREC_ROUTINE = _libzt.ZTS_IPTOS_PREC_ROUTINE

def zts_setsockopt(fd, level, optname, optval, optlen):
    return _libzt.zts_setsockopt(fd, level, optname, optval, optlen)

def zts_getsockopt(fd, level, optname, optval, optlen):
    return _libzt.zts_getsockopt(fd, level, optname, optval, optlen)

def zts_getsockname(fd, addr, addrlen):
    return _libzt.zts_getsockname(fd, addr, addrlen)

def zts_getpeername(fd, addr, addrlen):
    return _libzt.zts_getpeername(fd, addr, addrlen)

def zts_close(fd):
    return _libzt.zts_close(fd)
LWIP_SOCKET_OFFSET = _libzt.LWIP_SOCKET_OFFSET
MEMP_NUM_NETCONN = _libzt.MEMP_NUM_NETCONN
ZTS_FD_SETSIZE = _libzt.ZTS_FD_SETSIZE
class zts_timeval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tv_sec = property(_libzt.zts_timeval_tv_sec_get, _libzt.zts_timeval_tv_sec_set)
    tv_usec = property(_libzt.zts_timeval_tv_usec_get, _libzt.zts_timeval_tv_usec_set)

    def __init__(self):
        _libzt.zts_timeval_swiginit(self, _libzt.new_zts_timeval())
    __swig_destroy__ = _libzt.delete_zts_timeval

# Register zts_timeval in _libzt:
_libzt.zts_timeval_swigregister(zts_timeval)


def zts_select(nfds, readfds, writefds, exceptfds, timeout):
    return _libzt.zts_select(nfds, readfds, writefds, exceptfds, timeout)
ZTS_F_GETFL = _libzt.ZTS_F_GETFL
ZTS_F_SETFL = _libzt.ZTS_F_SETFL
ZTS_O_NONBLOCK = _libzt.ZTS_O_NONBLOCK
ZTS_O_NDELAY = _libzt.ZTS_O_NDELAY
ZTS_O_RDONLY = _libzt.ZTS_O_RDONLY
ZTS_O_WRONLY = _libzt.ZTS_O_WRONLY
ZTS_O_RDWR = _libzt.ZTS_O_RDWR

def zts_fcntl(fd, cmd, flags):
    return _libzt.zts_fcntl(fd, cmd, flags)
ZTS_POLLIN = _libzt.ZTS_POLLIN
ZTS_POLLOUT = _libzt.ZTS_POLLOUT
ZTS_POLLERR = _libzt.ZTS_POLLERR
ZTS_POLLNVAL = _libzt.ZTS_POLLNVAL
ZTS_POLLRDNORM = _libzt.ZTS_POLLRDNORM
ZTS_POLLRDBAND = _libzt.ZTS_POLLRDBAND
ZTS_POLLPRI = _libzt.ZTS_POLLPRI
ZTS_POLLWRNORM = _libzt.ZTS_POLLWRNORM
ZTS_POLLWRBAND = _libzt.ZTS_POLLWRBAND
ZTS_POLLHUP = _libzt.ZTS_POLLHUP

def zts_poll(fds, nfds, timeout):
    return _libzt.zts_poll(fds, nfds, timeout)

def zts_ioctl(fd, request, argp):
    return _libzt.zts_ioctl(fd, request, argp)

def zts_send(fd, buf, len, flags):
    return _libzt.zts_send(fd, buf, len, flags)

def zts_sendto(fd, buf, len, flags, addr, addrlen):
    return _libzt.zts_sendto(fd, buf, len, flags, addr, addrlen)
class zts_iovec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iov_base = property(_libzt.zts_iovec_iov_base_get, _libzt.zts_iovec_iov_base_set)
    iov_len = property(_libzt.zts_iovec_iov_len_get, _libzt.zts_iovec_iov_len_set)

    def __init__(self):
        _libzt.zts_iovec_swiginit(self, _libzt.new_zts_iovec())
    __swig_destroy__ = _libzt.delete_zts_iovec

# Register zts_iovec in _libzt:
_libzt.zts_iovec_swigregister(zts_iovec)

ZTS_MSG_TRUNC = _libzt.ZTS_MSG_TRUNC
ZTS_MSG_CTRUNC = _libzt.ZTS_MSG_CTRUNC

def zts_sendmsg(fd, msg, flags):
    return _libzt.zts_sendmsg(fd, msg, flags)

def zts_recv(fd, buf, len, flags):
    return _libzt.zts_recv(fd, buf, len, flags)

def zts_recvfrom(fd, buf, len, flags, addr, addrlen):
    return _libzt.zts_recvfrom(fd, buf, len, flags, addr, addrlen)

def zts_recvmsg(fd, msg, flags):
    return _libzt.zts_recvmsg(fd, msg, flags)

def zts_read(fd, buf, len):
    return _libzt.zts_read(fd, buf, len)

def zts_readv(fd, iov, iovcnt):
    return _libzt.zts_readv(fd, iov, iovcnt)

def zts_write(fd, buf, len):
    return _libzt.zts_write(fd, buf, len)

def zts_writev(fd, iov, iovcnt):
    return _libzt.zts_writev(fd, iov, iovcnt)
ZTS_SHUT_RD = _libzt.ZTS_SHUT_RD
ZTS_SHUT_WR = _libzt.ZTS_SHUT_WR
ZTS_SHUT_RDWR = _libzt.ZTS_SHUT_RDWR

def zts_shutdown(fd, how):
    return _libzt.zts_shutdown(fd, how)
class zts_hostent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h_name = property(_libzt.zts_hostent_h_name_get, _libzt.zts_hostent_h_name_set)
    h_aliases = property(_libzt.zts_hostent_h_aliases_get, _libzt.zts_hostent_h_aliases_set)
    h_addrtype = property(_libzt.zts_hostent_h_addrtype_get, _libzt.zts_hostent_h_addrtype_set)
    h_length = property(_libzt.zts_hostent_h_length_get, _libzt.zts_hostent_h_length_set)
    h_addr_list = property(_libzt.zts_hostent_h_addr_list_get, _libzt.zts_hostent_h_addr_list_set)

    def __init__(self):
        _libzt.zts_hostent_swiginit(self, _libzt.new_zts_hostent())
    __swig_destroy__ = _libzt.delete_zts_hostent

# Register zts_hostent in _libzt:
_libzt.zts_hostent_swigregister(zts_hostent)


def zts_gethostbyname(name):
    return _libzt.zts_gethostbyname(name)
ZTS_IPADDR_TYPE_V4 = _libzt.ZTS_IPADDR_TYPE_V4
ZTS_IPADDR_TYPE_V6 = _libzt.ZTS_IPADDR_TYPE_V6
ZTS_IPADDR_TYPE_ANY = _libzt.ZTS_IPADDR_TYPE_ANY
class zts_ip4_addr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    addr = property(_libzt.zts_ip4_addr_addr_get, _libzt.zts_ip4_addr_addr_set)

    def __init__(self):
        _libzt.zts_ip4_addr_swiginit(self, _libzt.new_zts_ip4_addr())
    __swig_destroy__ = _libzt.delete_zts_ip4_addr

# Register zts_ip4_addr in _libzt:
_libzt.zts_ip4_addr_swigregister(zts_ip4_addr)

class zts_ip6_addr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    addr = property(_libzt.zts_ip6_addr_addr_get, _libzt.zts_ip6_addr_addr_set)

    def __init__(self):
        _libzt.zts_ip6_addr_swiginit(self, _libzt.new_zts_ip6_addr())
    __swig_destroy__ = _libzt.delete_zts_ip6_addr

# Register zts_ip6_addr in _libzt:
_libzt.zts_ip6_addr_swigregister(zts_ip6_addr)

class zts_ip_addr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_libzt.zts_ip_addr_type_get, _libzt.zts_ip_addr_type_set)

    def __init__(self):
        _libzt.zts_ip_addr_swiginit(self, _libzt.new_zts_ip_addr())
    __swig_destroy__ = _libzt.delete_zts_ip_addr

# Register zts_ip_addr in _libzt:
_libzt.zts_ip_addr_swigregister(zts_ip_addr)


def zts_dns_set_server(index, addr):
    return _libzt.zts_dns_set_server(index, addr)

def zts_dns_get_server(index):
    return _libzt.zts_dns_get_server(index)

def zts_ipaddr_ntoa(addr):
    return _libzt.zts_ipaddr_ntoa(addr)

def zts_ipaddr_aton(cp, addr):
    return _libzt.zts_ipaddr_aton(cp, addr)

def zts_inet_ntop(af, src, dst, size):
    return _libzt.zts_inet_ntop(af, src, dst, size)

def zts_inet_pton(af, src, dst):
    return _libzt.zts_inet_pton(af, src, dst)


