/*  Generated by online_index/0

    Purpose: Index to file online_manual
*/

:- module(help_index,
	[ predicate/5,
	  section/4,
	  function/3
	]).

% Predicate predicate/5

predicate(help,0,'Give help on help',1096,1098).
predicate(help,1,'Give help on predicates and show parts of manual',1100,1124).
predicate(apropos,1,'library(online_help) Search manual',1126,1134).
predicate(explain,1,'library(explain) Explain argument',1136,1142).
predicate(explain,2,'library(explain) 2nd argument is explanation of first',1144,1147).
predicate(current_prolog_flag,2,'Get system configuration parameters',1601,2209).
predicate(set_prolog_flag,2,'Define a system feature',2211,2235).
predicate(create_prolog_flag,3,'Create a new Prolog flag',2237,2254).
predicate(autoload_path,1,'Add directories for autoloading',2379,2391).
predicate(make_library_index,1,'Create autoload file INDEX.pl',2393,2397).
predicate(make_library_index,2,'Create selective autoload file INDEX.pl',2399,2419).
predicate(reload_library_index,0,'Force reloading the autoload index',2421,2432).
predicate(guitracer,0,'Install hooks for the graphical debugger',3668,3674).
predicate(noguitracer,0,'Disable the graphical debugger',3676,3679).
predicate(gtrace,0,'Trace using graphical tracer',3681,3683).
predicate(gdebug,0,'Debug using graphical tracer',3685,3687).
predicate(gspy,1,'Spy using graphical tracer',3689,3691).
predicate(gxref,0,'Cross-reference loaded program',3727,3783).
predicate(prolog_ide,1,'Program access to the development environment',3795,3823).
predicate(load_files,2,'Load source files with options',4026,4157).
predicate(consult,1,'Read (compile) a Prolog source file',4159,4175).
predicate(ensure_loaded,1,'Consult a file if that has not yet been done',4177,4189).
predicate(include,1,'Include a file with declarations',4191,4196).
predicate(require,1,'This file requires these predicates',4198,4213).
predicate(encoding,1,'Define encoding inside a source file',4215,4220).
predicate(make,0,'Reconsult all changed source files',4222,4233).
predicate(library_directory,1,'Hook (user) Directories holding Prolog libraries',4235,4240).
predicate(file_search_path,2,'Define path-aliases for locating files',4242,4276).
predicate(expand_file_search_path,2,'Wildcard expansion of file paths',4278,4281).
predicate(prolog_file_type,2,'Define meaning of file extension',4283,4305).
predicate(source_file,1,'Examine currently loaded source files',4307,4310).
predicate(source_file,2,'Obtain source file of predicate',4312,4318).
predicate(unload_file,1,'Unload a source-file',4320,4331).
predicate(prolog_load_context,2,'Context information for directives',4333,4375).
predicate(source_location,2,'Location of last read term',4377,4382).
predicate(at_halt,1,'Register goal to run at halt/1',4384,4391).
predicate(initialization,1,'Initialization directive',4393,4425).
predicate(initialization,2,'Initialization directive',4427,4441).
predicate(compiling,0,'Is this a compilation run?',4443,4448).
predicate(term_expansion,2,'Hook (user) Convert term before compilation',4465,4486).
predicate(expand_term,2,'Compiler: expand read term into clause(s)',4488,4504).
predicate(goal_expansion,2,'Hook for macro-expanding goals',4506,4523).
predicate(expand_goal,2,'Compiler: expand goal in clause-body',4525,4532).
predicate(compile_aux_clauses,1,'Compile predicates for goal_expansion/2',4534,4539).
predicate(dcg_translate_rule,2,'Source translation of DCG rules',4541,4545).
predicate(preprocessor,2,'Install a preprocessor before the compiler',4547,4564).
predicate(if,1,'Start conditional compilation (directive)',4597,4602).
predicate(elif,1,'Part of conditional compilation (directive)',4604,4620).
predicate(else,0,'Part of conditional compilation (directive)',4622,4624).
predicate(endif,0,'End of conditional compilation (directive)',4626,4628).
predicate(garbage_collect_clauses,0,'Invoke clause garbage collector',4654,4662).
predicate(qcompile,1,'Compile source to Quick Load File',4710,4730).
predicate(qcompile,2,'Compile source to Quick Load File',4732,4735).
predicate(edit,1,'Edit a file, predicate, module (extensible)',4765,4772).
predicate(edit,0,'Edit current script- or associated file',4774,4778).
predicate(locate,3,'Locate targets for edit/1',4780,4793).
predicate(locate,2,'Locate targets for edit/1',4795,4798).
predicate(edit_source,1,'Call editor for edit/1',4800,4817).
predicate(edit_command,2,'Specify editor activation',4819,4833).
predicate(load,0,'Load edit/1 extensions',4835,4848).
predicate(listing,1,'List predicate',4850,4855).
predicate(listing,0,'List program in current module',4857,4859).
predicate(portray_clause,1,'Pretty print a clause',4861,4866).
predicate(portray_clause,2,'Pretty print a clause to a stream',4868,4870).
predicate(var,1,'Type check for unbound variable',4875,4877).
predicate(nonvar,1,'Type check for bound term',4879,4881).
predicate(integer,1,'Type check for integer',4883,4885).
predicate(float,1,'Type check for a floating point number',4887,4889).
predicate(rational,1,'Type check for a rational number',4891,4894).
predicate(rational,3,'Decompose a rational',4896,4901).
predicate(number,1,'Type check for integer or float',4903,4905).
predicate(atom,1,'Type check for an atom',4907,4909).
predicate(blob,2,'Type check for a blob',4911,4913).
predicate(string,1,'Type check for string',4915,4929).
predicate(atomic,1,'Type check for primitive',4931,4936).
predicate(compound,1,'Test for compound term',4938,4941).
predicate(callable,1,'Test for atom or compound term',4943,4946).
predicate(ground,1,'Verify term holds no unbound variables',4948,4950).
predicate(cyclic_term,1,'Test term for cycles',4952,4955).
predicate(acyclic_term,1,'Test term for cycles',4957,4961).
predicate(=,2,'Unification',4969,4976).
predicate(\=,2,'Not unifiable',4978,4980).
predicate(==,2,'Identical',5006,5009).
predicate(\==,2,'Not identical',5011,5013).
predicate(@<,2,'Standard order smaller',5015,5017).
predicate(@=<,2,'Standard order smaller or equal',5019,5022).
predicate(@>,2,'Standard order larger',5024,5026).
predicate(@>=,2,'Standard order larger or equal',5028,5031).
predicate(compare,3,'Compare, using a predicate to determine the order',5033,5036).
predicate(unify_with_occurs_check,2,'Logically sound unification',5049,5086).
predicate(=@=,2,'Structural identical',5088,5129).
predicate(\=@=,2,'Not structural identical',5131,5133).
predicate(subsumes_term,2,'One-sided unification test',5135,5140).
predicate(term_subsumer,3,'Most specific generalization of two terms',5142,5145).
predicate(unifiable,3,'Determining binding required for unification',5147,5152).
predicate(?=,2,'Test of terms can be compared now',5154,5159).
predicate(fail,0,'Always false',5177,5180).
predicate(false,0,'Always false',5182,5184).
predicate(true,0,'Succeed',5186,5189).
predicate(repeat,0,'Succeed, leaving infinite backtrack points',5191,5193).
predicate(!,0,'Cut (discard choicepoints)',5195,5207).
predicate(',',2,'Conjunction of goals',5209,5216).
predicate(;,2,'Disjunction of goals. Same as |/2',5218,5224).
predicate('|',2,'Disjunction of goals. Same as ;/2',5226,5229).
predicate(->,2,'If-then-else',5231,5248).
predicate(*->,2,'Soft-cut',5250,5260).
predicate(\+,1,'Negation by failure. Same as not/1',5262,5266).
predicate(call,1,'Call a goal',5278,5281).
predicate(call,_G46,'Call with additional arguments',5283,5292).
predicate(apply,2,'Call goal with additional arguments',5294,5302).
predicate(not,1,'Negation by failure (argument not provable). Same as \\+/1',5304,5307).
predicate(once,1,'Call a goal deterministically',5309,5323).
predicate(ignore,1,'Call the argument, but always succeed',5325,5333).
predicate(call_with_depth_limit,3,'Prove goal with bounded depth',5335,5363).
predicate(setup_call_cleanup,3,'Undo side-effects safely',5365,5420).
predicate(setup_call_catcher_cleanup,4,'Undo side-effects safely',5422,5453).
predicate(call_cleanup,2,'Guard a goal with a cleaup-handler',5455,5462).
predicate(call_cleanup,3,'Guard a goal with a cleaup-handler',5464,5467).
predicate(catch,3,'Call goal, watching for exceptions',5478,5489).
predicate(throw,1,'Raise an exception (see catch/3)',5491,5510).
predicate(print_message,2,'Print message from (exception) term',5591,5616).
predicate(print_message_lines,3,'Print message to stream',5618,5643).
predicate(message_hook,3,'Intercept print_message/2',5645,5653).
predicate(message_to_string,2,'Translate message-term to string',5655,5659).
predicate(on_signal,3,'Handle a software signal',5746,5780).
predicate(current_signal,3,'Current software signal mapping',5782,5786).
predicate(phrase,2,'Activate grammar-rule set',5869,5871).
predicate(phrase,3,'Activate grammar-rule set (returning rest)',5873,5885).
predicate(abolish,1,'Remove predicate definition from the database',5916,5932).
predicate(abolish,2,'Remove predicate definition from the database',5934,5937).
predicate(redefine_system_predicate,1,'Abolish system definition',5939,5949).
predicate(retract,1,'Remove clause from the database',5951,5955).
predicate(retractall,1,'Remove unifying clauses from the database',5957,5962).
predicate(asserta,1,'Add a clause to the database (first)',5964,5969).
predicate(assertz,1,'Add a clause to the database (last)',5971,5974).
predicate(assert,1,'Add a clause to the database',5976,5979).
predicate(asserta,2,'Add a clause to the database (first)',5981,5985).
predicate(assertz,2,'Add a clause to the database (last)',5987,5990).
predicate(assert,2,'Add a clause to the database, give reference',5992,5994).
predicate(recorda,3,'Record term in the database (first)',5996,6002).
predicate(recorda,2,'Record term in the database (first)',6004,6006).
predicate(recordz,3,'Record term in the database (last)',6008,6011).
predicate(recordz,2,'Record term in the database (last)',6013,6015).
predicate(recorded,3,'Obtain term from the database',6017,6028).
predicate(recorded,2,'Obtain term from the database',6030,6032).
predicate(erase,1,'Erase a database record or clause',6034,6039).
predicate(instance,2,'Fetch clause or record from reference',6041,6044).
predicate(flag,3,'Simple global variable system',6046,6056).
predicate(term_hash,2,'Hash-value of ground term',6087,6102).
predicate(term_hash,4,'Hash-value of term with depth limit',6104,6113).
predicate(variant_sha1,2,'Term-hash for term-variants',6115,6134).
predicate(dynamic,1,'Indicate predicate definition may change',6155,6163).
predicate(compile_predicates,1,'Compile dynamic code to static',6165,6173).
predicate(multifile,1,'Indicate distributed definition of predicate',6175,6179).
predicate(discontiguous,1,'Indicate distributed definition of a predicate',6181,6184).
predicate(public,1,'Declaration that a predicate may be called',6186,6189).
predicate(index,1,'Change clause indexing',6191,6234).
predicate(hash,1,'Index predicate using a hash-table',6236,6245).
predicate(current_atom,1,'Examine existing atoms',6250,6254).
predicate(current_blob,2,'Examine typed blobs',6256,6261).
predicate(current_functor,2,'Examine existing name/arity pairs',6263,6266).
predicate(current_flag,1,'Examine existing flags',6268,6271).
predicate(current_key,1,'Examine existing database keys',6273,6276).
predicate(current_predicate,1,'Examine existing predicates (ISO)',6278,6294).
predicate(current_predicate,2,'Examine existing predicates',6296,6313).
predicate(predicate_property,2,'Query predicate attributes',6315,6440).
predicate(dwim_predicate,2,'Find predicate in ``Do What I Mean\'\' sense',6442,6451).
predicate(clause,2,'Get clauses of a predicate',6453,6457).
predicate(clause,3,'Get clauses of a predicate',6459,6464).
predicate(nth_clause,3,'N-th clause of a predicate',6466,6485).
predicate(clause_property,2,'Get properties of a clause',6487,6507).
predicate(open,4,'Open a file (creating a stream)',6547,6641).
predicate(open,3,'Open a file (creating a stream)',6643,6645).
predicate(open_null_stream,1,'Open a stream to discard output',6647,6665).
predicate(close,1,'Close stream',6667,6675).
predicate(close,2,'Close stream (forced)',6677,6681).
predicate(stream_property,2,'Get stream properties',6683,6792).
predicate(current_stream,3,'Examine open streams',6794,6801).
predicate(is_stream,1,'Type check for a stream handle',6803,6807).
predicate(stream_pair,3,'Create/examine a bi-directional stream',6809,6816).
predicate(set_stream_position,2,'Seek stream to position',6818,6822).
predicate(stream_position_data,3,'Access fields from stream position',6824,6830).
predicate(seek,4,'Modify the current position in a stream',6832,6860).
predicate(set_stream,2,'Set stream attribute',6862,6938).
predicate(set_prolog_IO,3,'Prepare streams for interactive session',6940,6951).
predicate(see,1,'Change the current input stream',7020,7025).
predicate(tell,1,'Change current output stream',7027,7032).
predicate(append,1,'Append to a file',7034,7038).
predicate(seeing,1,'Query the current input stream',7040,7045).
predicate(telling,1,'Query current output stream',7047,7052).
predicate(seen,0,'Close the current input stream',7054,7057).
predicate(told,0,'Close current output',7059,7062).
predicate(set_input,1,'Set current input stream from a stream',7070,7073).
predicate(set_output,1,'Set current output stream from a stream',7075,7078).
predicate(current_input,1,'Get current input stream',7080,7083).
predicate(current_output,1,'Get the current output stream',7085,7087).
predicate(with_output_to,2,'Write to strings and more',7092,7143).
predicate(wait_for_input,3,'Wait for input with optional timeout',7148,7190).
predicate(byte_count,2,'Byte-position in a stream',7192,7197).
predicate(character_count,2,'Get character index on a stream',7199,7204).
predicate(line_count,2,'Line number on stream',7206,7209).
predicate(line_position,2,'Character position in line on stream',7211,7216).
predicate(nl,0,'Generate a newline',7223,7226).
predicate(nl,1,'Generate a newline on a stream',7228,7230).
predicate(put,1,'Write a character',7232,7237).
predicate(put,2,'Write a character on a stream',7239,7241).
predicate(put_byte,1,'Write a byte',7243,7246).
predicate(put_byte,2,'Write a byte on a stream',7248,7251).
predicate(put_char,1,'Write a character',7253,7257).
predicate(put_char,2,'Write a character on a stream',7259,7263).
predicate(put_code,1,'Write a character-code',7265,7269).
predicate(put_code,2,'Write a character-code on a stream',7271,7273).
predicate(tab,1,'Output number of spaces',7275,7279).
predicate(tab,2,'Output number of spaces on a stream',7281,7283).
predicate(flush_output,0,'Output pending characters on current stream',7285,7289).
predicate(flush_output,1,'Output pending characters on specified stream',7291,7294).
predicate(ttyflush,0,'Flush output on terminal',7296,7298).
predicate(get_byte,1,'Read next byte (ISO)',7300,7303).
predicate(get_byte,2,'Read next byte from a stream (ISO)',7305,7308).
predicate(get_code,1,'Read next character (ISO)',7310,7314).
predicate(get_code,2,'Read next character from a stream (ISO)',7316,7318).
predicate(get_char,1,'Read next character as an atom (ISO)',7320,7324).
predicate(get_char,2,'Read next character from a stream (ISO)',7326,7329).
predicate(get0,1,'Read next character',7331,7336).
predicate(get0,2,'Read next character from a stream',7338,7341).
predicate(get,1,'Read first non-blank character',7343,7346).
predicate(get,2,'Read first non-blank character from a stream',7348,7350).
predicate(peek_byte,1,'Read byte without removing',7352,7353).
predicate(peek_byte,2,'Read byte without removing',7355,7356).
predicate(peek_code,1,'Read character-code without removing',7358,7359).
predicate(peek_code,2,'Read character-code without removing',7361,7362).
predicate(peek_char,1,'Read character without removing',7364,7365).
predicate(peek_char,2,'Read character without removing',7367,7374).
predicate(skip,1,'Skip to character in current input',7376,7380).
predicate(skip,2,'Skip to character on stream',7382,7384).
predicate(get_single_char,1,'Read next character from the terminal',7386,7395).
predicate(at_end_of_stream,0,'Test for end of file on input',7397,7401).
predicate(at_end_of_stream,1,'Test for end of file on stream',7403,7408).
predicate(set_end_of_stream,1,'Set physical end of an open file',7410,7414).
predicate(copy_stream_data,3,'Copy n bytes from stream to stream',7416,7421).
predicate(copy_stream_data,2,'Copy all data from stream to stream',7423,7425).
predicate(read_pending_input,3,'Fetch buffered input from a stream',7427,7453).
predicate(write_term,2,'Write term with options',7467,7586).
predicate(write_term,3,'Write term with options to stream',7588,7591).
predicate(write_canonical,1,'Write a term with quotes, ignore operators',7593,7607).
predicate(write_canonical,2,'Write a term with quotes, ignore operators on a stream',7609,7611).
predicate(write,1,'Write term',7613,7616).
predicate(write,2,'Write term to stream',7618,7620).
predicate(writeq,1,'Write term, insert quotes',7622,7627).
predicate(writeq,2,'Write term, insert quotes on stream',7629,7631).
predicate(print,1,'Print a term',7633,7639).
predicate(print,2,'Print a term on a stream',7641,7643).
predicate(portray,1,'Hook (user) Modify behaviour of print/1',7645,7652).
predicate(read,1,'Read Prolog term',7654,7659).
predicate(read,2,'Read Prolog term from stream',7661,7663).
predicate(read_clause,1,'Read clause',7665,7672).
predicate(read_clause,2,'Read clause from stream',7674,7676).
predicate(read_term,2,'Read term with options',7678,7784).
predicate(read_term,3,'Read term with options from stream',7786,7788).
predicate(read_history,6,'Read using history substitution',7790,7805).
predicate(prompt,2,'Change the prompt used by read/1',7807,7815).
predicate(prompt1,1,'Change prompt for 1 line',7817,7820).
predicate(functor,3,'Get name and arity of a term or construct a term ',7825,7832).
predicate(arg,3,'Access argument of a term',7834,7843).
predicate(=..,2,'``Univ.\'\' Term to list conversion',7845,7860).
predicate(numbervars,3,'Number unbound variables of a term',7862,7876).
predicate(numbervars,4,'Number unbound variables of a term',7878,7897).
predicate(var_number,2,'Check that var is numbered by numbervars',7899,7905).
predicate(term_variables,2,'Find unbound variables in a term',7907,7921).
predicate(term_variables,3,'Find unbound variables in a term',7923,7926).
predicate(copy_term,2,'Make a copy of a term',7928,7937).
predicate(setarg,3,'Destructive assignment on term',7949,7965).
predicate(nb_setarg,3,'Non-backtrackable assignment to term',7967,7997).
predicate(nb_linkarg,3,'Non-backtrackable assignment to term',7999,8003).
predicate(duplicate_term,2,'Create a copy of a term',8005,8010).
predicate(same_term,2,'Test terms to be at the same address',8012,8017).
predicate(atom_codes,2,'Convert between atom and list of characters codes',8040,8046).
predicate(atom_chars,2,'Convert between atom and list of characters',8048,8056).
predicate(char_code,2,'Convert between character and character code',8058,8061).
predicate(number_chars,2,'Convert between number and one-char atoms',8063,8070).
predicate(number_codes,2,'Convert between number and character codes',8072,8076).
predicate(atom_number,2,'Convert between atom and number',8078,8087).
predicate(name,2,'Convert between atom and list of character codes',8089,8097).
predicate(term_to_atom,2,'Convert between term and atom',8099,8105).
predicate(atom_to_term,3,'Convert between atom and term',8107,8113).
predicate(atom_concat,3,'Append two atoms',8115,8122).
predicate(atomic_concat,3,'Concatenate two atomic values to an atom',8124,8132).
predicate(atomic_list_concat,2,'Append a list of atoms',8134,8138).
predicate(atomic_list_concat,3,'Append a list of atoms with separator',8140,8159).
predicate(atom_length,2,'Determine length of an atom',8161,8167).
predicate(atom_prefix,2,'Test for start of atom',8169,8172).
predicate(sub_atom,5,'Take a substring from an atom',8174,8187).
predicate(char_type,2,'Classify characters',8202,8296).
predicate(code_type,2,'Classify a character-code',8298,8305).
predicate(downcase_atom,2,'Convert atom to lower-case',8315,8320).
predicate(upcase_atom,2,'Convert atom to upper-case',8322,8324).
predicate(normalize_space,2,'Normalize white space',8329,8334).
predicate(collation_key,2,'Sort key for locale dependent ordering',8342,8355).
predicate(locale_sort,2,'Language dependent sort of atoms',8357,8362).
predicate(string_to_atom,2,'Conversion between string and atom',8408,8412).
predicate(string_to_list,2,'Conversion between string and list of character codes',8414,8418).
predicate(string_length,2,'Determine length of a string',8420,8424).
predicate(string_concat,3,'atom_concat/3 for strings',8426,8435).
predicate(sub_string,5,'Take a substring from a string',8437,8441).
predicate(op,3,'Declare an operator',8479,8544).
predicate(current_op,3,'Examine current operator declarations',8546,8549).
predicate(char_conversion,2,'Provide mapping of input characters',8557,8563).
predicate(current_char_conversion,2,'Query input character mapping',8565,8568).
predicate(between,3,'Integer range checking/generating',8588,8595).
predicate(succ,2,'Logical integer successor relation',8597,8603).
predicate(plus,3,'Logical integer addition',8605,8608).
predicate(>,2,'Arithmetic larger',8619,8621).
predicate(<,2,'Arithmetic smaller',8623,8625).
predicate(=<,2,'Arithmetic smaller or equal',8627,8630).
predicate(>=,2,'Arithmetic larger or equal',8632,8635).
predicate(=\=,2,'Arithmetic not equal',8637,8639).
predicate(=:=,2,'Arithmetic equal',8641,8643).
predicate(is,2,'Evaluate arithmetic expression',8645,8654).
predicate(-,1,'Unary minus',8763,8765).
predicate(+,1,'Unary plus (No-op)',8767,8770).
predicate(+,2,'Addition',8772,8774).
predicate(-,2,'Subtraction',8776,8778).
predicate(*,2,'Multiplication',8780,8782).
predicate(/,2,'Division',8784,8792).
predicate(mod,2,'Remainder of division',8794,8797).
predicate(rem,2,'Remainder of division',8799,8802).
predicate(//,2,'Integer division',8804,8809).
predicate(div,2,'Integer division',8811,8823).
predicate(rdiv,2,'Ration number division',8825,8829).
predicate(gcd,2,'Greatest common divisor',8831,8833).
predicate(abs,1,'Absolute value',8835,8837).
predicate(sign,1,'Extract sign of value',8839,8841).
predicate(max,2,'Maximum of two numbers',8843,8849).
predicate(min,2,'Minimum of two numbers',8851,8854).
predicate('.',2,'Consult. Also list constructor',8856,8863).
predicate(random,1,'Generate random number',8865,8877).
predicate(round,1,'Round to nearest integer',8879,8881).
predicate(integer,1,'Type check for integer',8883,8885).
predicate(float,1,'Type check for a floating point number',8887,8892).
predicate(rational,1,'Type check for a rational number',8894,8912).
predicate(rationalize,1,'Convert to rational number',8914,8928).
predicate(float_fractional_part,1,'Fractional part of a float',8930,8935).
predicate(float_integer_part,1,'Integer part of a float',8937,8940).
predicate(truncate,1,'Truncate float to integer',8942,8946).
predicate(floor,1,'Largest integer below argument',8948,8951).
predicate(ceiling,1,'Smallest integer larger than arg',8953,8956).
predicate(ceil,1,'Smallest integer larger than arg',8958,8960).
predicate(>>,2,'Bitwise right shift',8962,8967).
predicate(<<,2,'Bitwise left shift',8969,8971).
predicate(\/,2,'Bitwise or',8973,8975).
predicate(/\,2,'Bitwise and',8977,8979).
predicate(xor,2,'Bitwise exclusive or',8981,8983).
predicate(\,1,'Bitwise negation',8985,8988).
predicate(sqrt,1,'Square root',8990,8992).
predicate(sin,1,'Sine',8994,8996).
predicate(cos,1,'Cosine',8998,9000).
predicate(tan,1,'Tangent',9002,9004).
predicate(asin,1,'Inverse (arc) sine',9006,9008).
predicate(acos,1,'Inverse (arc) cosine',9010,9012).
predicate(atan,1,'Inverse (arc) tangent',9014,9016).
predicate(atan2,2,'Rectangular to polar conversion',9018,9022).
predicate(atan,2,'Rectangular to polar conversion',9024,9026).
predicate(log,1,'Natural logarithm',9028,9030).
predicate(log10,1,'10 base logarithm',9032,9034).
predicate(exp,1,'Exponent (base $e$)',9036,9038).
predicate(**,2,'Power function',9040,9047).
predicate(powm,3,'Integer exponent and modulo',9049,9054).
predicate(^,2,'Existential quantification (bagof/3, setof/3)',9056,9058).
predicate(pi,0,'Mathematical constant',9060,9062).
predicate(e,0,'Mathematical constant',9064,9066).
predicate(epsilon,0,'Floating point precision',9068,9071).
predicate(cputime,0,'Get CPU time',9073,9077).
predicate(eval,1,'Evaluate term as expression',9079,9091).
predicate(msb,1,'Most significant bit',9093,9098).
predicate(lsb,1,'Least significant bit',9100,9105).
predicate(popcount,1,'Count 1s in a bitvector',9107,9110).
predicate(set_random,1,'Control random number generation',9115,9132).
predicate(is_list,1,'Type check for a list',9150,9164).
predicate(memberchk,2,'Deterministic member/2',9166,9168).
predicate(length,2,'Length of a list',9170,9178).
predicate(sort,2,'Sort elements in a list',9180,9186).
predicate(msort,2,'Sort, do not remove duplicates',9188,9191).
predicate(keysort,2,'Sort, using a key',9193,9207).
predicate(predsort,3,'Sort, using a predicate to determine the order',9209,9214).
predicate(findall,3,'Find all solutions to a goal',9219,9226).
predicate(findall,4,'Difference list version of findall/3',9228,9236).
predicate(bagof,3,'Find all solutions to a goal',9238,9276).
predicate(setof,3,'Find all unique solutions to a goal',9278,9281).
predicate(forall,2,'Prove goal for all solutions of another goal',9286,9294).
predicate(writeln,1,'Write term, followed by a newline',9310,9312).
predicate(writef,1,'Formatted write',9314,9316).
predicate(writef,2,'Formatted write on stream',9318,9377).
predicate(swritef,3,'Formatted write on a string',9379,9387).
predicate(swritef,2,'Formatted write on a string',9389,9391).
predicate(format,1,'Formatted output',9399,9401).
predicate(format,2,'Formatted output with arguments',9403,9541).
predicate(format,3,'Formatted output on a stream',9543,9553).
predicate(format_predicate,2,'Program format/[1,2]',9558,9586).
predicate(current_format_predicate,2,'Enumerate user-defined format codes',9588,9594).
predicate(tty_get_capability,3,'Get terminal parameter',9604,9612).
predicate(tty_goto,2,'Goto position on screen',9614,9618).
predicate(tty_put,2,'Write control string to terminal',9620,9626).
predicate(set_tty,2,'Set `tty\' stream',9628,9631).
predicate(tty_size,2,'Get row/column size of the terminal',9633,9647).
predicate(shell,2,'Execute OS command',9652,9667).
predicate(shell,1,'Execute OS command',9669,9671).
predicate(shell,0,'Execute interactive subshell',9673,9677).
predicate(win_exec,2,'Win32: spawn Windows task',9679,9686).
predicate(win_shell,3,'Win32: open document through Shell',9688,9697).
predicate(win_shell,2,'Win32: open document through Shell',9699,9701).
predicate(win_registry_get_value,3,'Win32: get registry value',9703,9723).
predicate(win_folder,2,'Win32: get special folder by CSIDL',9725,9738).
predicate(getenv,2,'Get shell environment variable',9740,9744).
predicate(setenv,2,'Set shell environment variable',9746,9755).
predicate(unsetenv,1,'Delete shell environment variable',9757,9761).
predicate(setlocale,3,'Set/query C-library regional information',9763,9775).
predicate(unix,1,'OS interaction',9777,9818).
predicate(get_time,1,'Get current time',9892,9895).
predicate(stamp_date_time,3,'Convert time-stamp to date structure',9897,9903).
predicate(date_time_stamp,2,'Convert sate structure to time-stamp',9905,9919).
predicate(date_time_value,3,'Extract info from a date structure',9921,9938).
predicate(format_time,3,'C strftime() like date/time formatter',9940,10102).
predicate(format_time,4,'date/time formatter with explicit locale',10104,10113).
predicate(parse_time,2,'Parse text to a time-stamp',10115,10117).
predicate(parse_time,3,'Parse text to a time-stamp',10119,10138).
predicate(day_of_the_week,2,'Determine ordinal-day from date',10140,10144).
predicate(window_title,2,'Win32: change title of window',10155,10158).
predicate(win_window_pos,1,'Win32: change size and position of window',10160,10183).
predicate(win_has_menu,0,'Win32: true if console menu is available',10185,10187).
predicate(win_insert_menu,2,'swipl-win.exe: add menu',10189,10200).
predicate(win_insert_menu_item,4,'swipl-win.exe: add item to menu',10202,10206).
predicate(access_file,2,'Check access permissions of a file',10211,10221).
predicate(exists_file,1,'Check existence of file',10223,10226).
predicate(file_directory_name,2,'Get directory part of path',10228,10233).
predicate(file_base_name,2,'Get file part of path',10235,10238).
predicate(same_file,2,'Succeeds if arguments refer to same file',10240,10245).
predicate(exists_directory,1,'Check existence of directory',10247,10251).
predicate(delete_file,1,'Remove a file from the file system',10253,10255).
predicate(rename_file,2,'Change name of file',10257,10263).
predicate(size_file,2,'Get size of a file in characters',10265,10267).
predicate(time_file,2,'Get last modification time of file',10269,10273).
predicate(absolute_file_name,2,'Get absolute path name',10275,10283).
predicate(absolute_file_name,3,'Get absolute path name with options',10285,10340).
predicate(is_absolute_file_name,1,'True if arg defines an absolute path',10342,10349).
predicate(file_name_extension,3,'Add, remove or test file extensions',10351,10359).
predicate(directory_files,2,'Get entries of a directory/folder',10361,10367).
predicate(expand_file_name,2,'Wildcard expansion of file names',10369,10386).
predicate(prolog_to_os_filename,2,'Convert between Prolog and OS filenames',10388,10395).
predicate(read_link,3,'Read a symbolic link',10397,10403).
predicate(tmp_file,2,'Create a temporary filename',10405,10415).
predicate(tmp_file_stream,3,'Create a temporary file and open it',10417,10444).
predicate(make_directory,1,'Create a folder on the file system',10446,10450).
predicate(delete_directory,1,'Remove a folder from the file system',10452,10456).
predicate(working_directory,2,'Query/change CWD',10458,10464).
predicate(chdir,1,'Compatibility: change working directory',10466,10468).
predicate(break,0,'Start interactive top-level',10473,10481).
predicate(abort,0,'Abort execution, return to top level',10483,10500).
predicate(halt,0,'Exit from Prolog',10502,10508).
predicate(halt,1,'Exit from Prolog with status',10510,10513).
predicate(prolog,0,'Run interactive top-level',10515,10524).
predicate(expand_query,4,'Expanded entered query',10526,10534).
predicate(expand_answer,2,'Expand answer of query',10536,10541).
predicate(protocol,1,'Make a log of the user interaction',10550,10553).
predicate(protocola,1,'Append log of the user interaction to file',10555,10558).
predicate(noprotocol,0,'Disable logging of user interaction',10560,10563).
predicate(protocolling,1,'On what file is user interaction logged',10565,10568).
predicate(trace,0,'Start the tracer',10579,10583).
predicate(tracing,0,'Query status of the tracer',10585,10588).
predicate(notrace,0,'Stop tracing',10590,10592).
predicate(guitracer,0,'Install hooks for the graphical debugger',10594,10599).
predicate(noguitracer,0,'Disable the graphical debugger',10601,10603).
predicate(trace,1,'Set trace-point on predicate',10605,10607).
predicate(trace,2,'Set/Clear trace-point on ports',10609,10629).
predicate(notrace,1,'Do not debug argument goal',10631,10636).
predicate(debug,0,'Test for debugging mode',10638,10652).
predicate(nodebug,0,'Disable debugging',10654,10657).
predicate(debugging,0,'Show debugger status',10659,10662).
predicate(spy,1,'Force tracer on specified predicate',10664,10667).
predicate(nospy,1,'Remove spy point',10669,10672).
predicate(nospyall,0,'Remove all spy points',10674,10676).
predicate(leash,1,'Change ports visited by the tracer',10678,10686).
predicate(visible,1,'Ports that are visible in the tracer',10688,10691).
predicate(unknown,2,'Trap undefined predicates',10693,10698).
predicate(style_check,1,'Change level of warnings',10700,10742).
predicate(statistics,2,'Obtain collected statistics',10747,10831).
predicate(statistics,0,'Show execution statistics',10833,10835).
predicate(time,1,'Determine time needed to execute goal',10837,10844).
predicate(profile,1,'Obtain execution statistics',10865,10869).
predicate(profile,3,'Obtain execution statistics',10871,10879).
predicate(show_profile,2,'Show results of the profiler',10881,10891).
predicate(show_profile,1,'Show results of the profiler',10893,10895).
predicate(profiler,2,'Obtain/change status of the profiler',10897,10902).
predicate(reset_profiler,0,'Clear statistics obtained by the profiler',10904,10906).
predicate(noprofile,1,'Hide (meta-) predicate for the profiler',10908,10914).
predicate(garbage_collect,0,'Invoke the garbage collector',11017,11024).
predicate(garbage_collect_atoms,0,'Invoke the atom garbage collector',11026,11034).
predicate(trim_stacks,0,'Release unused memory resources',11036,11054).
predicate(set_prolog_stack,2,'Modify stack characteristics',11056,11095).
predicate(prolog_stack_property,2,'Query properties of the stacks',11097,11100).
predicate(open_dde_conversation,3,'Win32: Open DDE channel',11142,11147).
predicate(close_dde_conversation,1,'Win32: Close DDE channel',11149,11154).
predicate(dde_request,3,'Win32: Make a DDE request',11156,11165).
predicate(dde_execute,2,'Win32: Execute command on DDE server',11167,11171).
predicate(dde_poke,3,'Win32: POKE operation on DDE server',11173,11176).
predicate(dde_register_service,2,'Win32: Become a DDE server',11187,11224).
predicate(dde_unregister_service,1,'Win32: Terminate a DDE service',11226,11229).
predicate(dde_current_service,2,'Win32: Examine DDE services provided',11231,11233).
predicate(dde_current_connection,2,'Win32: Examine open DDE connections',11235,11237).
predicate(dwim_match,2,'Atoms match in ``Do What I Mean\'\' sense',11242,11259).
predicate(dwim_match,3,'Atoms match in ``Do What I Mean\'\' sense',11261,11266).
predicate(wildcard_match,2,'Csh(1) style wildcard match',11268,11286).
predicate(sleep,1,'Suspend execution for specified time',11288,11298).
predicate(module,2,'Declare a module',11376,11389).
predicate(use_module,1,'Import a module',11405,11412).
predicate(use_module,2,'Import predicates from a module',11414,11440).
predicate(meta_predicate,1,'Declare access to other predicates',11493,11561).
predicate(module,1,'Query/set current type-in module',11604,11617).
predicate(reexport,1,'Load files and re-export the imported predicates',11640,11644).
predicate(reexport,2,'Load predicates from a file and re-export it',11646,11650).
predicate(set_base_module,1,'Declare the associated global module',11705,11708).
predicate(import_module,2,'Query import modules',11710,11715).
predicate(default_module,2,'Query module inheritance',11717,11722).
predicate(add_import_module,3,'Add module to the auto-import list',11724,11728).
predicate(delete_import_module,2,'Remove module from import list',11730,11737).
predicate(export,1,'Export a predicate from a module',11766,11772).
predicate(import,1,'Import a predicate from a module',11774,11781).
predicate(module_transparent,1,'Indicate module based meta-predicate',11888,11892).
predicate(context_module,1,'Get context module of current goal',11894,11897).
predicate(strip_module,3,'Extract context module and term',11899,11905).
predicate(current_module,1,'Examine existing modules',11913,11918).
predicate(module_property,2,'Find properties of a module',11920,11935).
predicate(attvar,1,'Type test for attributed variable',12126,12130).
predicate(put_attr,3,'Put attribute on a variable',12132,12140).
predicate(get_attr,3,'Fetch named attribute from a variable',12142,12147).
predicate(del_attr,2,'Delete attribute from variable',12149,12155).
predicate(attr_unify_hook,2,'Attributed variable unification hook',12164,12175).
predicate(attr_portray_hook,2,'Attributed variable print hook',12177,12184).
predicate(attribute_goals,3,'Project attributes to goals',12186,12191).
predicate(copy_term,3,'Copy a term and obtain attribute-goals',12196,12208).
predicate(copy_term_nat,2,'Make a copy of a term without attributes',12210,12213).
predicate(term_attvars,2,'Find attributed variables in a term',12215,12222).
predicate(get_attrs,2,'Fetch all attributes of a variable',12232,12236).
predicate(put_attrs,2,'Set/replace all attributes on a variable',12238,12241).
predicate(del_attrs,1,'Delete all attributes from variable',12243,12246).
predicate(freeze,2,'Delay execution until variable is bound',12266,12273).
predicate(frozen,2,'Query delayed goals on var',12275,12278).
predicate(when,2,'Execute goal when condition becomes true',12280,12289).
predicate(dif,2,'Constrain two terms to be different',12291,12303).
predicate(call_residue_vars,2,'Find residual attributed variables',12305,12323).
predicate(b_setval,2,'Assign backtrackable global variable',12364,12370).
predicate(b_getval,2,'Fetch backtrackable global variable',12372,12379).
predicate(nb_setval,2,'Assign non-backtrackable global variable',12381,12385).
predicate(nb_getval,2,'Fetch non-backtrackable global variable',12387,12393).
predicate(nb_linkval,2,'Assign non-backtrackable global variable',12395,12416).
predicate(nb_current,2,'Enumerate non-backtrackable global variables',12418,12421).
predicate(nb_delete,1,'Delete a non-backtrackable global variable',12423,12425).
predicate(chr_option,2,'Specify CHR compilation options',12638,12676).
predicate(chr_constraint,1,'CHR Constraint declaration',12691,12766).
predicate(chr_type,1,'CHR Type declaration',12768,12894).
predicate(chr_trace,0,'Start CHR tracer',13031,13035).
predicate(chr_notrace,0,'Stop CHR tracer',13037,13041).
predicate(chr_leash,1,'Define CHR leashed ports',13043,13050).
predicate(chr_show_store,1,'List suspended CHR constraints',13052,13059).
predicate(find_chr_constraint,1,'Returns a constraint from the store',13061,13064).
predicate(thread_create,3,'Create a new Prolog task',13371,13431).
predicate(thread_self,1,'Get identifier of current thread',13433,13436).
predicate(thread_join,2,'Wait for Prolog task-completion',13438,13464).
predicate(thread_detach,1,'Make thread cleanup after completion',13466,13478).
predicate(thread_exit,1,'Terminate Prolog task with value',13480,13491).
predicate(thread_initialization,1,'Run action at start of thread',13493,13502).
predicate(thread_at_exit,1,'Register goal to be called at exit',13504,13519).
predicate(thread_setconcurrency,2,'Number of active threads',13521,13528).
predicate(thread_property,2,'Examine Prolog threads',13543,13580).
predicate(thread_statistics,3,'Get statistics of another thread',13582,13587).
predicate(mutex_statistics,0,'Print statistics on mutex usage',13589,13596).
predicate(thread_send_message,2,'Send message to another thread',13613,13629).
predicate(thread_get_message,1,'Wait for message',13631,13651).
predicate(thread_peek_message,1,'Test for message',13653,13659).
predicate(message_queue_create,1,'Create queue for thread communication',13661,13666).
predicate(message_queue_create,2,'Create queue for thread communication',13668,13681).
predicate(message_queue_destroy,1,'Destroy queue for thread communication',13683,13688).
predicate(thread_get_message,2,'Wait for message in a queue',13690,13693).
predicate(thread_peek_message,2,'Test for message in a queue',13695,13700).
predicate(message_queue_property,2,'Query message queue properties',13702,13750).
predicate(thread_signal,2,'Execute goal in another thread',13765,13783).
predicate(thread_local,1,'Declare thread-specific clauses for a predicate',13803,13832).
predicate(mutex_create,1,'Create a thread-synchronisation device',13866,13870).
predicate(mutex_create,2,'Create a thread-synchronisation device',13872,13878).
predicate(mutex_destroy,1,'Destroy a mutex',13880,13883).
predicate(with_mutex,2,'Run goal while holding mutex',13885,13896).
predicate(mutex_lock,1,'Become owner of a mutex',13898,13916).
predicate(mutex_trylock,1,'Become owner of a mutex (non-blocking)',13918,13921).
predicate(mutex_unlock,1,'Release ownership of mutex',13923,13927).
predicate(mutex_unlock_all,0,'Release ownership of all mutexes',13929,13933).
predicate(mutex_property,2,'Query mutex properties',13935,13949).
predicate(threads,0,'List running threads',13958,13960).
predicate(join_threads,0,'Join all terminated threads interactively',13962,13969).
predicate(interactor,0,'Start new thread with console and top-level',13971,13975).
predicate(attach_console,0,'Attach I/O console to thread',13989,14004).
predicate(tdebug,1,'Switch a thread into debug mode',14006,14014).
predicate(tdebug,0,'Switch all threads into debug mode',14016,14018).
predicate(tnodebug,1,'Switch off debug mode in a thread',14020,14022).
predicate(tnodebug,0,'Switch off debug mode in all threads',14024,14026).
predicate(tspy,2,'Set spy point and enable debugging in a thread',14028,14034).
predicate(tspy,1,'Set spy point and enable debugging in all threads',14036,14041).
predicate(tprofile,1,'Profile a thread for some period',14052,14056).
predicate(in_pce_thread,1,'Run goal in XPCE thread',14287,14299).
predicate(pce_dispatch,1,'Run XPCE GUI in separate thread',14301,14308).
predicate(pce_call,1,'Run goal in XPCE GUI thread',14310,14318).
predicate(load_foreign_library,1,'library(shlib) Load shared library (.so file)',14462,14463).
predicate(load_foreign_library,2,'library(shlib) Load shared library (.so file)',14465,14491).
predicate(use_foreign_library,1,'Load DLL/shared object (directive)',14493,14494).
predicate(use_foreign_library,2,'Load DLL/shared object (directive)',14496,14509).
predicate(unload_foreign_library,1,'library(shlib) Detach shared library (.so file)',14511,14512).
predicate(unload_foreign_library,2,'library(shlib) Detach shared library (.so file)',14514,14519).
predicate(current_foreign_library,2,'library(shlib) Examine loaded shared libraries (.so files)',14521,14523).
predicate(reload_foreign_libraries,0,'Reload DLLs/shared objects',14525,14528).
predicate(open_shared_object,2,'UNIX: Open shared library (.so file)',14540,14549).
predicate(open_shared_object,3,'UNIX: Open shared library (.so file)',14551,14560).
predicate(close_shared_object,1,'UNIX:  Close shared library (.so file)',14562,14564).
predicate(call_shared_object_function,2,'UNIX:  Call C-function in shared (.so) file',14566,14571).
predicate(qsave_program,2,'Create runtime application',18221,18279).
predicate(qsave_program,1,'Create runtime application',18281,18283).
predicate(autoload,0,'Autoload all predicates now',18285,18327).
predicate(volatile,1,'Predicates that are not saved',18329,18334).
predicate(resource,3,'Declare a program resource',18458,18492).
predicate(open_resource,3,'Open a program resource as a stream',18494,18513).
predicate(aggregate,3,'Aggregate bindings in Goal according to Template.',18703,18706).
predicate(aggregate,4,'Aggregate bindings in Goal according to Template.',18708,18711).
predicate(aggregate_all,3,'Aggregate bindings in Goal according to Template.',18713,18716).
predicate(aggregate_all,4,'Aggregate bindings in Goal according to Template.',18718,18722).
predicate(foreach,2,'True if the conjunction of instances of Goal using the bindings from Generator is true.',18724,18747).
predicate(free_variables,4,'In order to handle variables properly, we have to find all the universally quantified variables in the Generator.',18749,18772).
predicate(include,3,'Filter elements for which Goal succeed.',18787,18793).
predicate(exclude,3,'Filter elements for which Goal fails.',18795,18798).
predicate(partition,4,'Filter elements of List according to Pred.',18800,18804).
predicate(partition,5,'Filter list according to Pred in three sets.',18806,18811).
predicate(maplist,2,'True if Goal can succesfully be applied on all elements of List.',18813,18817).
predicate(maplist,3,'True if Goal can succesfully be applied to all succesive pairs of elements of List1 and List2.',18819,18822).
predicate(maplist,4,'True if Goal can succesfully be applied to all succesive triples of elements of List1..List3.',18824,18827).
predicate(assoc_to_list,2,'Convert association tree to list',18847,18850).
predicate(assoc_to_keys,2,'Translate assoc into a key list',18852,18855).
predicate(assoc_to_values,2,'Translate assoc into a value list',18857,18860).
predicate(empty_assoc,1,'Create/test empty association tree',18862,18864).
predicate(gen_assoc,3,'Enumerate members of association tree',18866,18869).
predicate(get_assoc,3,'Fetch key from association tree',18871,18874).
predicate(get_assoc,5,'Fetch key from association tree',18876,18879).
predicate(list_to_assoc,2,'Create association tree from list',18881,18884).
predicate(map_assoc,2,'Map association tree',18886,18888).
predicate(map_assoc,3,'Map association tree',18890,18893).
predicate(max_assoc,3,'Highest key in association tree',18895,18898).
predicate(min_assoc,3,'Lowest key in association tree',18900,18903).
predicate(ord_list_to_assoc,2,'Convert ordered list to assoc',18905,18908).
predicate(put_assoc,4,'Add Key-Value to association tree',18910,18914).
predicate(broadcast,1,'Send event notification',18938,18944).
predicate(broadcast_request,1,'Request all agents',18946,18960).
predicate(listen,2,'Listen to event notifications',18962,18975).
predicate(listen,3,'Listen to event notifications',18977,19012).
predicate(unlisten,1,'Stop listening to event notifications',19014,19016).
predicate(unlisten,2,'Stop listening to event notifications',19018,19021).
predicate(unlisten,3,'Stop listening to event notifications',19023,19026).
predicate(listening,3,'Who is listening to event notifications?',19028,19031).
predicate(format_to_chars,3,'Use format/2 to write to a list of character codes.',19046,19048).
predicate(format_to_chars,3,'Use format/2 to write to a list of character codes.',19050,19052).
predicate(write_to_chars,2,'Codes is a list of character codes produced by write/1 on Term.',19054,19056).
predicate(write_to_chars,3,'Codes is a difference-list of character codes produced by write/1 on Term.',19058,19061).
predicate(atom_to_chars,2,'Convert Atom into a list of character codes.',19063,19067).
predicate(atom_to_chars,3,'Convert Atom into a difference-list of character codes.',19069,19071).
predicate(number_to_chars,2,'Convert Atom into a list of character codes.',19073,19077).
predicate(number_to_chars,3,'Convert Number into a difference-list of character codes.',19079,19081).
predicate(read_from_chars,2,'Read Codes into Term.',19083,19088).
predicate(read_term_from_chars,3,'Read Codes into Term.',19090,19094).
predicate(open_chars_stream,2,'Open Codes as an input stream.',19096,19103).
predicate(with_output_to_chars,3,'Run Goal with as once/1.',19110,19113).
predicate(with_output_to_chars,4,'As with_output_to_chars/2, but Stream is unified with the temporary stream.',19115,19118).
predicate(check,0,'Program completeness and consistency',19126,19134).
predicate(list_undefined,0,'List undefined predicates',19136,19163).
predicate(list_autoload,0,'List predicates that require autoload',19165,19169).
predicate(list_redefined,0,'List locally redefined predicates',19171,19175).
predicate(in,2,'Var is an element of Domain.',19435,19449).
predicate(ins,2,'The variables in the list Vars are elements of Domain.',19451,19453).
predicate(indomain,1,'Bind Var to all feasible values of its domain on backtracking.',19455,19458).
predicate(label,1,'Equivalent to labeling([], Vars).',19460,19462).
predicate(labeling,2,'Labeling means systematically trying out values for the finite domain variables Vars until all of them are ground.',19464,19548).
predicate(all_different,1,'Vars are pairwise distinct.',19550,19552).
predicate(all_distinct,1,'Like all_different/1, with stronger propagation.',19554,19563).
predicate(sum,3,'The sum of elements of the list Vars is in relation Rel to Expr, where Rel is #=, #=, #$<$, #$>$, Scle{} or #$>$=.',19565,19576).
predicate(scalar_product,4,'Cs is a list of integers, Vs is a list of variables and integers.',19578,19582).
predicate(#>=,2,'X is greater than or equal to Y.',19584,19586).
predicate(#=<,2,'X is less than or equal to Y.',19588,19590).
predicate(#=,2,'X equals Y.',19592,19594).
predicate(#\=,2,'X is not Y.',19596,19598).
predicate(#>,2,'X is greater than Y.',19600,19602).
predicate(#<,2,'X is less than Y.',19604,19615).
predicate(#\,1,'The reifiable constraint Q does _not_ hold.',19617,19625).
predicate(#<==>,2,'P and Q are equivalent.',19627,19666).
predicate(#==>,2,'P implies Q.',19668,19670).
predicate(#<==,2,'Q implies P.',19672,19674).
predicate(#/\,2,'P and Q hold.',19676,19678).
predicate(#\/,2,'P or Q holds.',19680,19689).
predicate(lex_chain,1,'Lists are lexicographically non-decreasing.',19691,19693).
predicate(tuples_in,2,'Relation must be a list of lists of integers.',19695,19734).
predicate(serialized,2,'Constrain a set of intervals to a non-overlapping sequence.',19736,19752).
predicate(element,3,'The N-th element of the list of finite domain variables Vs is V.',19754,19757).
predicate(global_cardinality,2,'Equivalent to global_cardinality(Vs, Pairs, []).',19759,19768).
predicate(global_cardinality,3,'Vs is a list of finite domain variables, Pairs is a list of Key-Num pairs, where Key is an integer and Num is a finite domain variable.',19770,19786).
predicate(circuit,1,'True if the list Vs of finite domain variables induces a Hamiltonian circuit, where the k-th element of Vs denotes the successor of node k.',19788,19802).
predicate(cumulative,1,'Equivalent to cumulative(Tasks, [limit(1)]).',19804,19806).
predicate(cumulative,2,'Tasks is a list of tasks, each of the form task(S_i, D_i, E_i, C_i, T_i).',19808,19821).
predicate(automaton,3,'Equivalent to automaton(_, _, Signature, Nodes, Arcs, [], [], _), a common use case of automaton/8.',19823,19844).
predicate(automaton,8,'True if the finite automaton induced by Nodes and Arcs (extended with Counters) accepts Signature.',19846,19908).
predicate(transpose,2,'Invert the direction of all edges',19910,19969).
predicate(zcompare,3,'Analogous to compare/3, with finite domain variables A and B.',19971,19993).
predicate(chain,2,'Zs is a list of finite domain variables that are a chain with respect to the partial order Relation, in the order they appear in the list.',19995,20005).
predicate(fd_var,1,'True iff Var is a CLP(FD) variable.',20007,20009).
predicate(fd_inf,2,'Inf is the infimum of the current domain of Var.',20011,20013).
predicate(fd_sup,2,'Sup is the supremum of the current domain of Var.',20015,20017).
predicate(fd_size,2,'Size is the number of elements of the current domain of Var, or the atom *sup* if the domain is unbounded.',20019,20022).
predicate(fd_dom,2,'Dom is the current domain (see in/2) of Var.',20024,20030).
predicate(entailed,1,'Check if constraint is entailed',20073,20077).
predicate(inf,2,'Find the infimum of an expression',20079,20083).
predicate(sup,2,'Find the supremum of an expression',20085,20089).
predicate(minimize,1,'Minimizes an expression',20091,20095).
predicate(maximize,1,'Maximizes an expression',20097,20101).
predicate(bb_inf,5,'Infimum of expression for mixed-integer problems',20103,20112).
predicate(bb_inf,4,'Infimum of expression for mixed-integer problems',20114,20117).
predicate(bb_inf,3,'Infimum of expression for mixed-integer problems',20119,20122).
predicate(dump,3,'Dump constraints on variables',20124,20134).
predicate(csv_read_file,2,'Read a CSV file into a list of rows.',20238,20239).
predicate(csv_read_file,3,'Read a CSV file into a list of rows.',20241,20255).
predicate(csv,3,'Prolog DCG to `read/write\' CSV data.',20257,20258).
predicate(csv,4,'Prolog DCG to `read/write\' CSV data.',20260,20289).
predicate(csv_write_file,2,'Write a list of Prolog terms to a CSV file.',20291,20292).
predicate(csv_write_file,3,'Write a list of Prolog terms to a CSV file.',20294,20297).
predicate(debug,3,'Print debugging message on topic',20315,20328).
predicate(debugging,1,'Test where we are debugging topic',20330,20335).
predicate(debug,1,'Select topic for debugging',20337,20344).
predicate(nodebug,1,'Disable debug-topic',20346,20348).
predicate(list_debug_topics,0,'List registered topics for debugging',20350,20353).
predicate(assertion,1,'Make assertions about your program',20355,20369).
predicate(gensym,2,'Generate unique atoms from a base',20384,20389).
predicate(reset_gensym,1,'Reset a gensym key',20391,20395).
predicate(reset_gensym,0,'Reset all gensym keys',20397,20402).
predicate(member,2,'True if Elem is a member of List.',20415,20425).
predicate(append,3,'List1AndList2 is the concatination of List1 and List2.',20427,20429).
predicate(append,2,'Concatenate a list of lists.',20431,20437).
predicate(prefix,2,'True iff Part is a leading substring of Whole.',20439,20442).
predicate(select,3,'Is true when List1, with Elem removed results in List2.',20444,20446).
predicate(selectchk,3,'Semi-deterministic removal of first element in List that unifies Elem.',20448,20451).
predicate(select,4,'Is true when select(X, XList) and select(Y, YList) are true, X and Y appear in the same locations of their respective lists and same_length(XList, YList) is true.',20453,20464).
predicate(nextto,3,'True of Y follows X in List.',20470,20472).
predicate(delete,3,'Is true when Lis1, with all occurences of Elem deleted results in List2.',20474,20484).
predicate(nth0,3,'True when Elem is the Index-th element of List.',20486,20494).
predicate(nth1,3,'Is true when Elem is the Index\'th element of List.',20496,20501).
predicate(last,2,'Last element of a list',20503,20510).
predicate(same_length,2,'Is true when List1 and List2 are lists with the same number of elements.',20512,20519).
predicate(reverse,2,'Is true when the elements of List2 are in reverse order compared to List1.',20521,20524).
predicate(permutation,2,'permutation(Xs, Ys) is true when Xs is a permutation of Ys.',20526,20557).
predicate(flatten,2,'Is true it List2 is a non nested version of List1.',20559,20569).
predicate(sumlist,2,'Sum is the result of adding all numbers in List.',20571,20573).
predicate(max_list,2,'True if Max is the largest number in List.',20575,20577).
predicate(min_list,2,'True if Min is the largest number in List.',20579,20581).
predicate(numlist,3,'List is a list [Low, Low+1, ... High].',20583,20589).
predicate(is_set,1,'True if Set is a proper list without duplicates.',20591,20596).
predicate(list_to_set,2,'Remove duplicates from a list',20598,20604).
predicate(intersection,3,'True if Set3 unifies with the intersection of Set1 and Set2.',20606,20611).
predicate(union,3,'True if Set3 unifies with the union of Set1 and Set2.',20613,20618).
predicate(subset,2,'True if all elements of SubSet belong to Set as well.',20620,20625).
predicate(subtract,3,'Delete all elements from `Set\' that occur in `Delete\' (a set) and unify the result with `Result\'.',20627,20633).
predicate(empty_nb_set,1,'Test/create an empty non-backtrackable set',20662,20664).
predicate(add_nb_set,2,'Add term to a non-backtrackable set',20666,20669).
predicate(add_nb_set,3,'Add term to a non-backtrackable set',20671,20679).
predicate(gen_nb_set,2,'Generate members of non-backtrackable set',20681,20684).
predicate(size_nb_set,2,'Determine size of non-backtrackable set',20686,20688).
predicate(nb_set_to_list,2,'Convert non-backtrackable set to list',20690,20693).
predicate(www_open_url,1,'Open a web-page in a browser',20701,20721).
predicate(option,3,'Get an option from a OptionList.',20765,20771).
predicate(option,2,'Get an option from a OptionList.',20773,20780).
predicate(select_option,3,'Get and remove option from an option list.',20782,20786).
predicate(select_option,4,'Get and remove option with default value.',20788,20792).
predicate(merge_options,3,'Merge two option lists.',20794,20801).
predicate(meta_options,3,'Perform meta-expansion on options that are module-sensitive.',20803,20814).
predicate(opt_arguments,3,'Convenience predicate, assuming that command-line arguments can be accessed by current_prolog_flag/2 (as in swi-prolog).',21114,21129).
predicate(opt_parse,4,'Equivalent to opt_parse(OptsSpec, ApplArgs, Opts, PositionalArgs, []).',21131,21134).
predicate(opt_parse,5,'Parse the arguments Args (as list of atoms) according to OptsSpec.',21136,21171).
predicate(opt_help,2,'Returns a help string (atom), synthesized from the help descriptions in OptsSpec.',21173,21176).
predicate(is_ordset,1,'True if Term is an ordered set.',21195,21200).
predicate(ord_empty,1,'True when List is the empty ordered set.',21202,21205).
predicate(ord_seteq,2,'True if Set1 and Set2 have the same elements.',21207,21212).
predicate(list_to_ord_set,2,'Transform a list into an ordered set.',21214,21217).
predicate(ord_intersect,2,'True if both ordered sets have a non-empty intersection.',21219,21221).
predicate(ord_disjoint,2,'True if Set1 and Set2 have no common elements.',21223,21226).
predicate(ord_intersect,3,'Intersection holds the common elements of Set1 and Set2.',21228,21232).
predicate(ord_intersection,2,'True if Intersection is an ordered set holding all elements common to all sets in PowerSet.',21234,21239).
predicate(ord_intersection,3,'Intersection holds the common elements of Set1 and Set2.',21241,21243).
predicate(ord_intersection,4,'Intersection and difference between two ordered sets.',21245,21251).
predicate(ord_add_element,3,'Insert an element into the set.',21253,21256).
predicate(ord_del_element,3,'Delete an element from an ordered set.',21258,21261).
predicate(ord_memberchk,2,'Check membership.',21263,21269).
predicate(ord_member,2,'True if Element is a member of Set.',21271,21276).
predicate(ord_subset,2,'Is true if all element of Sub are in Super.',21278,21280).
predicate(ord_subtract,3,'Diff is the set holding all elements of InOSet that are not in NotInOSet.',21282,21285).
predicate(ord_union,2,'True if Union is the union of all elements in the superset SetOfSets.',21287,21294).
predicate(ord_union,3,'Union is the union of Set1 and Set2.',21296,21298).
predicate(ord_union,4,'True if Union iff ord_union(Set1, Set2, Union) and ord_subtract(Set2, Set1, New).',21300,21303).
predicate(ord_symdiff,3,'Is true when Difference is the symmetric difference of Set1 and Set2.',21305,21323).
predicate(pairs_keys_values,3,'True if Keys holds the keys of Pairs and Values the values.',21340,21348).
predicate(pairs_values,2,'Remove the keys from a list of Key-Value pairs.',21350,21353).
predicate(pairs_keys,2,'Remove the values from a list of Key-Value pairs.',21355,21358).
predicate(group_pairs_by_key,2,'Group values with the same key.',21360,21375).
predicate(transpose_pairs,2,'Swap Key-Value to Value-Key and sort the result on Value (the new key) using keysort/2.',21377,21380).
predicate(map_list_to_pairs,3,'Create a key-value list by mapping each element of List.',21382,21389).
predicate(phrase_from_file,2,'Process the content of File using the DCG rule Grammar.',21421,21445).
predicate(phrase_from_file,3,'As phrase_from_file/2, providing additional Options.',21447,21453).
predicate(stream_to_lazy_list,2,'Create a lazy list representing the character codes in Stream.',21455,21467).
predicate(xref_source,1,'Cross-reference analysis of source',21502,21507).
predicate(xref_current_source,1,'Examine cross-referenced sources',21509,21511).
predicate(xref_clean,1,'Remove analysis of source',21513,21515).
predicate(xref_defined,3,'Examine defined predicates',21517,21528).
predicate(xref_called,3,'Examine called predicates',21530,21532).
predicate(xref_exported,2,'Examine exported predicates',21534,21536).
predicate(xref_module,2,'Module defined by source',21538,21540).
predicate(xref_built_in,1,'Examine defined built-ins',21542,21547).
predicate(called_by,2,'Hook (prolog) Extend cross-referencer',21555,21568).
predicate(read_line_to_codes,2,'Read line from a stream',21581,21589).
predicate(read_line_to_codes,3,'Read line from a stream',21591,21612).
predicate(read_stream_to_codes,2,'Read contents of stream',21614,21616).
predicate(read_stream_to_codes,3,'Read contents of stream',21618,21620).
predicate(read_file_to_codes,3,'Read contents of file',21622,21628).
predicate(read_file_to_terms,3,'Read contents of file to Prolog terms',21630,21636).
predicate(record,1,'Define named fields in a term',21726,21731).
predicate(registry_get_key,2,'Get principal value of key',21750,21753).
predicate(registry_get_key,3,'Get associated value of key',21755,21757).
predicate(registry_set_key,2,'Set principal value of key',21759,21762).
predicate(registry_set_key,3,'Set associated value of key',21764,21767).
predicate(registry_delete_key,1,'Remove a key',21769,21771).
predicate(shell_register_file_type,4,'Register a file-type',21773,21779).
predicate(shell_register_dde,6,'Register DDE action',21781,21788).
predicate(shell_register_prolog,1,'Register Prolog',21790,21806).
predicate(assignment,2,'Solve assignment problem',21831,21837).
predicate(constraint,3,'Add linear constraint to state',21839,21849).
predicate(constraint,4,'Add named linear constraint to state',21851,21854).
predicate(constraint_add,4,'Extend a named constraint',21856,21860).
predicate(gen_state,1,'Create empty linear program',21862,21865).
predicate(maximize,3,'Maximize objective function in to linear constraints',21867,21872).
predicate(minimize,3,'Minimize objective function in to linear constraints',21874,21876).
predicate(objective,2,'Fetch value of objective function',21878,21881).
predicate(shadow_price,3,'Fetch shadow price in solved state',21883,21887).
predicate(transportation,4,'Solve transportation problem',21889,21897).
predicate(variable_value,3,'Fetch value of variable in solved state',21899,21908).
predicate(thread_pool_create,3,'Create a pool of threads.',22077,22097).
predicate(thread_pool_destroy,1,'Destroy the thread pool named Name.',22099,22103).
predicate(current_thread_pool,1,'True if Name refers to a defined thread pool.',22105,22107).
predicate(thread_pool_property,2,'True if Property is a property of thread pool Name.',22109,22130).
predicate(thread_create_in_pool,4,'Create a thread in Pool.',22132,22146).
predicate(vertices_edges_to_ugraph,3,'Create unweighted graph',22176,22194).
predicate(vertices,2,'Find vertices in graph',22196,22203).
predicate(edges,2,'Find edges in graph',22205,22213).
predicate(add_vertices,3,'Add vertices to graph',22215,22223).
predicate(del_vertices,3,'Delete vertices from graph',22225,22236).
predicate(add_edges,3,'Add edges to graph',22238,22248).
predicate(del_edges,3,'Delete edges from graph',22250,22261).
predicate(transpose,2,'Invert the direction of all edges',22263,22273).
predicate(neighbours,3,'Find neighbors of vertice',22275,22284).
predicate(neighbors,3,'Find neighbors of vertice',22286,22288).
predicate(complement,2,'Inverse presense of edges',22290,22300).
predicate(compose,3,'',22302,22310).
predicate(ugraph_union,3,'Union of two graphs',22312,22319).
predicate(top_sort,2,'Sort graph topologically',22321,22331).
predicate(top_sort,3,'Sort graph topologically',22333,22336).
predicate(transitive_closure,2,'Create transitive closure of graph',22338,22346).
predicate(reachable,3,'Find all reachable vertices',22348,22356).
predicate(global_url,3,'Translate a possibly relative URL into an absolute one.',22379,22383).
predicate(is_absolute_url,1,'True if URL is an absolute URL.',22385,22388).
predicate(http_location,2,'Construct or analyze an HTTP location.',22390,22401).
predicate(parse_url,2,'Construct or analyse a URL.',22403,22459).
predicate(parse_url,3,'Similar to parse_url/2 for relative URLs.',22461,22464).
predicate(www_form_encode,2,'En/decode to/from application/x-www-form-encoded.',22466,22467).
predicate(www_form_encode,2,'En/decode to/from application/x-www-form-encoded.',22469,22480).
predicate(set_url_encoding,2,'Query and set the encoding for URLs.',22482,22489).
predicate(url_iri,2,'Convert between a URL, encoding in US-ASCII and an IRI.',22491,22492).
predicate(url_iri,2,'Convert between a URL, encoding in US-ASCII and an IRI.',22494,22498).
predicate(parse_url_search,2,'Construct or analyze an HTTP search specification.',22500,22504).
predicate(file_name_to_url,2,'Translate between a filename and a file:Sidiv{} URL.',22506,22507).
predicate(file_name_to_url,2,'Translate between a filename and a file:Sidiv{} URL.',22509,22514).
predicate(prolog_current_frame,1,'Reference to goal\'s environment stack',22529,22535).
predicate(prolog_frame_attribute,3,'Obtain information on a goal environment',22537,22615).
predicate(prolog_choice_attribute,3,'Examine the choice-point stack',22617,22638).
predicate(deterministic,1,'Test deterministicy of current clause',22640,22647).
predicate(prolog_trace_interception,4,'library(user) Intercept the Prolog tracer',22652,22754).
predicate(prolog_skip_frame,1,'Perform `skip\' on a frame',22756,22763).
predicate(prolog_skip_level,2,'Indicate deepest recursion to trace',22765,22772).
predicate(prolog_exception_hook,4,'Rewrite exceptions',22782,22823).
predicate(exception,3,'Hook (user) Handle runtime exceptions',22838,22864).
predicate(prolog_list_goal,1,'Hook (user) Intercept tracer \'L\' command',22876,22882).
predicate(debug_control_hook,1,'Hook (prolog) Extend spy/1, etc.',22884,22909).
predicate(help_hook,1,'Hook (prolog) User-hook in the help-system',22911,22926).
predicate(prolog_load_file,2,'Hook (user) Program load_files/2',22935,22943).
predicate(comment_hook,3,'Hook (prolog) handle comments in sources',22945,22954).
predicate(rl_read_init_file,1,'Read readline(3) init file',22964,22968).
predicate(rl_add_history,1,'Add line to readline(3) history',22970,22973).
predicate(rl_write_history,1,'Write readline(3) history',22975,22978).
predicate(rl_read_history,1,'Read readline(3) history',22980,22982).
predicate(expects_dialect,1,'For which Prolog dialect is this code written?',23025,23051).
predicate(exists_source,1,'Check existence of a Prolog source',23053,23057).
predicate(source_exports,2,'Check whether source exports a predicate',23059,23062).
predicate(eval_license,0,'Evaluate licenses of loaded modules',23564,23570).
predicate(license,2,'Define license for named module',23572,23624).
predicate(license,1,'Define license for current file',23626,23629).


% Predicate section/4

section([0],'Title Page',2,40).
section([1],'INTRODUCTION',42,698).
section([1,1],'SWI-Prolog',45,96).
section([1,1,1],'Books about Prolog',81,96).
section([1,2],'Status',98,111).
section([1,3],'Compliance to the ISO standard',113,127).
section([1,4],'Should you be using SWI-Prolog?',129,190).
section([1,5],'The XPCE GUI system for Prolog',192,261).
section([1,6],'Release Notes',263,640).
section([1,7],'Donate to the SWI-Prolog project',642,650).
section([1,8],'Acknowledgements',652,698).
section([2],'OVERVIEW',700,3086).
section([2,1],'Getting started quickly',703,791).
section([2,1,1],'Starting SWI-Prolog',706,763).
section([2,1,1,1],'Starting SWI-Prolog on Unix',709,740).
section([2,1,1,2],'Starting SWI-Prolog on Windows',742,763).
section([2,1,2],'Executing a query',765,791).
section([2,2],'The user\'s initialisation file',793,819).
section([2,3],'Initialisation files and goals',821,854).
section([2,4],'Command-line options',856,1042).
section([2,4,1],'Controlling the stack-sizes',925,952).
section([2,4,2],'Running goals from the commandline',954,976).
section([2,4,3],'Compiler options',978,1027).
section([2,4,4],'Maintenance options',1029,1042).
section([2,5],'GNU Emacs Interface',1044,1071).
section([2,6],'Online Help',1073,1147).
section([2,7],'Command-line history',1149,1174).
section([2,8],'Reuse of top-level bindings',1176,1221).
section([2,9],'Overview of the Debugger',1223,1393).
section([2,10],'Compilation',1395,1588).
section([2,10,1],'During program development',1398,1424).
section([2,10,2],'For running the result',1426,1588).
section([2,10,2,1],'Using PrologScript',1434,1504).
section([2,10,2,2],'Creating a shell-script',1506,1539).
section([2,10,2,3],'Creating a saved-state',1541,1552).
section([2,10,2,4],'Compilation using the -c command-line option',1554,1588).
section([2,11],'Environment Control (Prolog flags)',1590,2254).
section([2,12],'An overview of hook predicates',2256,2323).
section([2,13],'Automatic loading of libraries',2325,2432).
section([2,14],'Garbage Collection',2434,2439).
section([2,15],'Syntax Notes',2441,2676).
section([2,15,1],'ISO Syntax Support',2455,2676).
section([2,15,1,1],'Processor Character Set',2460,2466).
section([2,15,1,2],'Character Escape Syntax',2468,2573).
section([2,15,1,3],'Syntax for non-decimal numbers',2575,2583).
section([2,15,1,4],'Unicode Prolog source',2585,2630).
section([2,15,1,5],'Singleton variable checking',2632,2676).
section([2,16],'Infinite trees (cyclic terms)',2678,2690).
section([2,17],'Wide character support',2692,2814).
section([2,17,1],'Wide character encodings on streams',2719,2814).
section([2,17,1,1],'BOM: Byte Order Mark',2790,2814).
section([2,18],'System limits',2816,2986).
section([2,18,1],'Limits on memory areas',2819,2931).
section([2,18,1,1],'The heap',2918,2931).
section([2,18,2],'Other Limits',2933,2976).
section([2,18,3],'Reserved Names',2978,2986).
section([2,19],'SWI-Prolog and 64-bit machines',2988,3086).
section([2,19,1],'Supported platforms',3000,3008).
section([2,19,2],'Comparing 32- and 64-bits Prolog',3010,3042).
section([2,19,3],'Choosing between 32- and 64-bits Prolog',3044,3086).
section([3],'INITIALISING AND MANAGING A PROLOG PROJECT',3088,3861).
section([3,1],'The project source-files',3103,3267).
section([3,1,1],'File Names and Locations',3113,3190).
section([3,1,1,1],'File Name Extensions',3116,3135).
section([3,1,1,2],'Project Directories',3137,3156).
section([3,1,1,3],'Sub-projects using search-paths',3158,3190).
section([3,1,2],'Project Special Files',3192,3223).
section([3,1,3],'International source files',3225,3267).
section([3,2],'Using modules',3269,3312).
section([3,3],'The test-edit-reload cycle',3314,3380).
section([3,3,1],'Locating things to edit',3330,3348).
section([3,3,2],'Editing and incremental compilation',3350,3380).
section([3,4],'Using the PceEmacs built-in editor',3382,3636).
section([3,4,1],'Activating PceEmacs',3385,3391).
section([3,4,2],'Bluffing through PceEmacs',3393,3511).
section([3,4,2,1],'Edit modes',3406,3429).
section([3,4,2,2],'Frequently used editor commands',3431,3511).
section([3,4,3],'Prolog Mode',3513,3636).
section([3,4,3,1],'Finding your way around',3625,3636).
section([3,5],'The Graphical Debugger',3638,3691).
section([3,5,1],'Invoking the window-based debugger',3654,3691).
section([3,6],'The Prolog Navigator',3693,3699).
section([3,7],'Cross referencer',3701,3783).
section([3,8],'Accessing the IDE from your program',3785,3823).
section([3,9],'Summary of the IDE',3825,3861).
section([4],'BUILT-IN PREDICATES',3863,11298).
section([4,1],'Notation of Predicate Descriptions',3866,3907).
section([4,2],'Character representation',3909,3964).
section([4,3],'Loading Prolog source files',3966,4735).
section([4,3,1],'Conditional compilation and program transformation',4450,4628).
section([4,3,1,1],'Conditional compilation',4566,4628).
section([4,3,2],'Loading files, active code and threads',4630,4688).
section([4,3,2,1],'Threads and reloading running code',4664,4688).
section([4,3,3],'Quick load files',4690,4735).
section([4,4],'Listing and Editor Interface',4737,4870).
section([4,5],'Verify Type of a Term',4872,4961).
section([4,6],'Comparison and Unification of Terms',4963,5159).
section([4,6,1],'Standard Order of Terms',4982,5036).
section([4,6,2],'Special unification and comparison predicates',5038,5159).
section([4,7],'Control Predicates',5161,5266).
section([4,8],'Meta-Call Predicates',5268,5467).
section([4,9],'ISO compliant Exception handling',5469,5726).
section([4,9,1],'Debugging and exceptions',5512,5551).
section([4,9,2],'The exception term',5553,5565).
section([4,9,3],'Printing messages',5567,5726).
section([4,9,3,1],'Printing from libraries',5661,5726).
section([4,10],'Handling signals',5728,5821).
section([4,10,1],'Notes on signal handling',5788,5821).
section([4,11],'DCG Grammar rules',5823,5885).
section([4,12],'Database',5887,6134).
section([4,12,1],'Update view',6058,6077).
section([4,12,2],'Indexing databases',6079,6134).
section([4,13],'Declaring predicates properties',6136,6245).
section([4,14],'Examining the program',6247,6507).
section([4,15],'Input and output',6509,7143).
section([4,15,1],'ISO Input and Output Streams',6523,6951).
section([4,15,2],'Edinburgh-style I/O',6953,7062).
section([4,15,3],'Switching Between Edinburgh and ISO I/O',7064,7087).
section([4,15,4],'Write onto atoms, code-lists, etc.',7089,7143).
section([4,16],'Status of streams',7145,7216).
section([4,17],'Primitive character I/O',7218,7453).
section([4,18],'Term reading and writing',7455,7820).
section([4,19],'Analysing and Constructing Terms',7822,8017).
section([4,19,1],'Non-logical operations on terms',7939,8017).
section([4,20],'Analysing and Constructing Atoms',8019,8187).
section([4,21],'Character properties',8189,8362).
section([4,21,1],'Case conversion',8307,8324).
section([4,21,2],'White space normalization',8326,8334).
section([4,21,3],'Language specific comparison',8336,8362).
section([4,22],'Representing text in strings',8364,8441).
section([4,23],'Operators',8443,8549).
section([4,24],'Character Conversion',8551,8568).
section([4,25],'Arithmetic',8570,9110).
section([4,25,1],'Special purpose integer arithmetic',8580,8608).
section([4,25,2],'General purpose arithmetic',8610,9110).
section([4,25,2,1],'Arithmetic types',8656,8707).
section([4,25,2,2],'Rational number examples',8709,8740).
section([4,25,2,3],'Arithmetic Functions',8742,9110).
section([4,26],'Misc arithmetic support predicates',9112,9141).
section([4,27],'Built-in list operations',9143,9214).
section([4,28],'Finding all Solutions to a Goal',9216,9281).
section([4,29],'Forall',9283,9294).
section([4,30],'Formatted Write',9296,9594).
section([4,30,1],'Writef',9307,9391).
section([4,30,2],'Format',9393,9553).
section([4,30,3],'Programming Format',9555,9594).
section([4,31],'Terminal Control',9596,9647).
section([4,32],'Operating System Interaction',9649,10206).
section([4,32,1],'Dealing with time and date',9820,10144).
section([4,32,1,1],'Time and date data-structures',9859,9887).
section([4,32,1,2],'Time and date predicates',9889,10144).
section([4,32,2],'Controlling the swipl-win.exe console window',10146,10206).
section([4,33],'File System Interaction',10208,10468).
section([4,34],'User Top-level Manipulation',10470,10541).
section([4,35],'Creating a Protocol of the User Interaction',10543,10568).
section([4,36],'Debugging and Tracing Programs',10570,10742).
section([4,37],'Obtaining Runtime Statistics',10744,10844).
section([4,38],'Execution profiling',10846,11012).
section([4,38,1],'Profiling predicates',10857,10914).
section([4,38,2],'Visualizing profiling data',10916,10963).
section([4,38,3],'Information gathering',10965,11012).
section([4,38,3,1],'Profiling in the Windows Implementation',10997,11012).
section([4,39],'Memory Management',11014,11100).
section([4,40],'Windows DDE interface',11102,11237).
section([4,40,1],'DDE client interface',11112,11176).
section([4,40,2],'DDE server mode',11178,11237).
section([4,41],'Miscellaneous',11239,11298).
section([5],'MODULES',11300,11991).
section([5,1],'Why Using Modules?',11324,11344).
section([5,2],'Defining a Module',11346,11389).
section([5,3],'Importing Predicates into a Module',11391,11440).
section([5,4],'Defining a meta-predicate',11442,11561).
section([5,5],'Overruling Module Boundaries',11563,11586).
section([5,6],'Interacting with modules from the toplevel',11588,11617).
section([5,7],'Composing modules from other modules',11619,11650).
section([5,8],'Operators and modules',11652,11682).
section([5,9],'Dynamic importing using import modules',11684,11737).
section([5,10],'Reserved Modules and using the `user\' module',11739,11754).
section([5,11],'An alternative import/export interface',11756,11781).
section([5,12],'Dynamic Modules',11783,11817).
section([5,13],'Transparent predicates:  definition and context module',11819,11905).
section([5,14],'Query the module system',11907,11935).
section([5,15],'Compatibility of the Module System',11937,11991).
section([6],'SPECIAL VARIABLES AND COROUTINING',11993,12440).
section([6,1],'Attributed variables',12040,12246).
section([6,1,1],'Attribute manipulation predicates',12123,12155).
section([6,1,2],'Attributed variable hooks',12157,12191).
section([6,1,3],'Operations on terms with attributed variables',12193,12222).
section([6,1,4],'Special purpose predicates for attributes',12224,12246).
section([6,2],'Coroutining',12248,12323).
section([6,3],'Global variables',12325,12440).
section([6,3,1],'Compatibility of SWI-Prolog Global Variables',12427,12440).
section([7],'CHR: CONSTRAINT HANDLING RULES',12442,13330).
section([7,1],'Introduction',12464,12491).
section([7,2],'Syntax and Semantics',12493,12676).
section([7,2,1],'Syntax',12496,12554).
section([7,2,2],'Semantics',12556,12676).
section([7,3],'CHR in SWI-Prolog Programs',12678,12921).
section([7,3,1],'Embedding in Prolog Programs',12681,12686).
section([7,3,2],'Constraint declaration',12688,12894).
section([7,3,3],'Compilation',12896,12921).
section([7,4],'Debugging',12923,13064).
section([7,4,1],'Ports',12933,12974).
section([7,4,2],'Tracing',12976,13023).
section([7,4,3],'CHR Debugging Predicates',13025,13064).
section([7,5],'Examples',13066,13134).
section([7,6],'Backwards Compatibility',13136,13214).
section([7,6,1],'The Old SICStus CHR implemenation',13139,13182).
section([7,6,2],'The Old ECLiPSe CHR implemenation',13184,13214).
section([7,7],'Programming Tips and Tricks',13216,13259).
section([7,8],'Compiler Errors and Warnings',13261,13330).
section([7,8,1],'CHR Compiler Errors',13267,13330).
section([8],'MULTI-THREADED APPLICATIONS',13332,14318).
section([8,1],'Creating and destroying Prolog threads',13368,13528).
section([8,2],'Monitoring threads',13530,13596).
section([8,3],'Thread communication',13598,13832).
section([8,3,1],'Message queues',13601,13750).
section([8,3,2],'Signalling threads',13752,13783).
section([8,3,3],'Threads and dynamic predicates',13785,13832).
section([8,4],'Thread synchronisation',13834,13949).
section([8,5],'Thread-support library(threadutil)',13951,14056).
section([8,5,1],'Debugging threads',13977,14041).
section([8,5,2],'Profiling threads',14043,14056).
section([8,6],'Unbounded thread creation',14058,14082).
section([8,7],'Multi-threaded mixed C and Prolog applications',14084,14254).
section([8,7,1],'A Prolog thread for each native thread (one-to-one)',14106,14179).
section([8,7,2],'Pooling Prolog engines (many-to-many)',14181,14254).
section([8,7,2,1],'Engines in single-threaded SWI-Prolog',14248,14254).
section([8,8],'Multithreading and the XPCE graphics system',14256,14318).
section([9],'FOREIGN LANGUAGE INTERFACE',14320,18197).
section([9,1],'Overview of the Interface',14339,14364).
section([9,2],'Linking Foreign Modules',14366,14633).
section([9,2,1],'What linking is provided?',14377,14385).
section([9,2,2],'What kind of loading should I be using?',14387,14403).
section([9,2,3],'library(shlib):    Utility library  for  loading  foreign  objects',14405,14528).
section([9,2,4],'Low-level operations on shared libraries',14530,14571).
section([9,2,5],'Static Linking',14573,14633).
section([9,3],'Interface Data types',14635,14802).
section([9,3,1],'Type term_t:  a reference to a Prolog term',14638,14752).
section([9,3,1,1],'Interaction with the garbage collector and stack-shifter',14741,14752).
section([9,3,2],'Other foreign interface types',14754,14802).
section([9,4],'The Foreign Include File',14804,17757).
section([9,4,1],'Argument Passing and Control',14807,14944).
section([9,4,1,1],'Non-deterministic Foreign Predicates',14826,14944).
section([9,4,2],'Atoms and functors',14946,15015).
section([9,4,2,1],'Atoms and atom-garbage collection',14981,15015).
section([9,4,3],'Analysing Terms via the Foreign Interface',15017,15536).
section([9,4,3,1],'Testing the type of a term',15030,15133).
section([9,4,3,2],'Reading data from a term',15135,15296).
section([9,4,3,3],'Exchanging text using length and string',15298,15360).
section([9,4,3,4],'Wide character versions',15362,15410).
section([9,4,3,5],'Reading a list',15412,15482).
section([9,4,3,6],'An example:  defining write/1 in C',15484,15536).
section([9,4,4],'Constructing Terms',15538,15673).
section([9,4,5],'Unifying data',15675,16062).
section([9,4,6],'Convience functions to generate Prolog exceptions',16064,16210).
section([9,4,7],'BLOBS: Using atoms to store arbitrary binary data',16212,16361).
section([9,4,7,1],'Defining a BLOB type',16234,16321).
section([9,4,7,2],'Accessing blobs',16323,16361).
section([9,4,8],'Exchanging GMP numbers',16363,16446).
section([9,4,9],'Calling Prolog from C',16448,16597).
section([9,4,9,1],'Predicate references',16461,16488).
section([9,4,9,2],'Initiating a query from C',16490,16597).
section([9,4,10],'Discarding Data',16599,16659).
section([9,4,11],'Foreign Code and Modules',16661,16700).
section([9,4,12],'Prolog exceptions in foreign code',16702,16829).
section([9,4,13],'Catching Signals (Software Interrupts)',16831,16904).
section([9,4,14],'Miscellaneous',16906,17066).
section([9,4,14,1],'Term Comparison',16909,16920).
section([9,4,14,2],'Recorded database',16922,17015).
section([9,4,14,3],'Getting file names',17017,17066).
section([9,4,15],'Errors and warnings',17068,17081).
section([9,4,16],'Environment Control from Foreign Code',17083,17141).
section([9,4,17],'Querying Prolog',17143,17175).
section([9,4,18],'Registering Foreign Predicates',17177,17285).
section([9,4,19],'Foreign Code Hooks',17287,17365).
section([9,4,20],'Storing foreign data',17367,17554).
section([9,4,20,1],'Examples for storing foreign data',17433,17554).
section([9,4,21],'Embedding SWI-Prolog in other applications',17556,17757).
section([9,4,21,1],'Threading, Signals and embedded Prolog',17718,17757).
section([9,5],'Linking embedded applications using swipl-ld',17759,17978).
section([9,5,1],'A simple example',17892,17978).
section([9,6],'The Prolog `home\' directory',17980,18014).
section([9,7],'Example of Using the Foreign Interface',18016,18079).
section([9,8],'Notes on Using Foreign Code',18081,18197).
section([9,8,1],'Memory Allocation',18084,18115).
section([9,8,2],'Compatibility between Prolog versions',18117,18129).
section([9,8,3],'Debugging and profiling foreign code (valgrind)',18131,18151).
section([9,8,4],'Name Conflicts in C modules',18153,18170).
section([9,8,5],'Compatibility of the Foreign Interface',18172,18197).
section([10],'GENERATING RUNTIME APPLICATIONS',18199,18591).
section([10,1],'Limitations of qsave_program',18336,18352).
section([10,2],'Runtimes and Foreign Code',18354,18420).
section([10,3],'Using program resources',18422,18544).
section([10,3,1],'Predicates Definitions',18455,18513).
section([10,3,2],'The swipl-rc program',18515,18544).
section([10,4],'Finding Application files',18546,18591).
section([10,4,1],'Passing a path to the application',18578,18591).
section([11],'THE SWI-PROLOG LIBRARY',18593,22514).
section([11,1],'library(aggregate):     Aggregation   operators  on   backtrackable',18617,18772).
section([11,1,0,1],'Acknowledgements',18697,18772).
section([11,2],'library(apply):  Apply predicates on a list',18774,18832).
section([11,3],'assoc:  Association lists',18834,18914).
section([11,4],'broadcast:  Broadcast and receive event notifications',18916,19031).
section([11,5],'library(charsio):  I/O on Lists of Character Codes',19033,19118).
section([11,6],'check:  Elementary completeness checks',19120,19175).
section([11,7],'library(clpfd):  Constraint Logic Programming over Finite Domains',19177,20030).
section([11,8],'clpqr:  Constraint Logic Programming over Rationals and Reals',20032,20221).
section([11,8,1],'Solver predicates',20064,20134).
section([11,8,2],'Syntax of the predicate arguments',20136,20175).
section([11,8,3],'Use of unification',20177,20194).
section([11,8,4],'Non-linear constraints',20196,20221).
section([11,9],'library(csv):  Process CSV (Comma-Separated Values) data',20223,20297).
section([11,10],'debug:  Some reusable code to help debugging applications',20299,20369).
section([11,11],'gensym:  Generate unique identifiers',20371,20402).
section([11,12],'library(lists):  List Manipulation',20404,20633).
section([11,13],'nb_set:  Non-backtrackable set',20635,20693).
section([11,14],'www_browser:  Activating your Web-browser',20695,20721).
section([11,15],'library(option):  Option list processing',20723,20814).
section([11,16],'library(optparse):  command line parsing',20816,21176).
section([11,16,1],'Notes and tips',21073,21176).
section([11,17],'library(ordsets):  Ordered set manipulation',21178,21323).
section([11,18],'library(pairs):  Operations on key-value lists',21325,21389).
section([11,19],'pio:  Pure I/O',21391,21467).
section([11,19,1],'library(pure_input):  Pure Input from files',21399,21467).
section([11,20],'prolog_xref:  Cross-reference data collection library',21469,21568).
section([11,20,1],'Extending the library',21549,21568).
section([11,21],'readutil:  Reading lines, streams and files',21570,21636).
section([11,22],'record:  Access named fields in a term',21638,21731).
section([11,23],'registry:  Manipulating the Windows registry',21733,21806).
section([11,24],'simplex:  Solve linear programming problems',21808,22039).
section([11,24,1],'Example 1',21910,21941).
section([11,24,2],'Example 2',21943,22000).
section([11,24,3],'Example 3',22002,22039).
section([11,25],'library(thread_pool):  Resource bounded thread management',22041,22146).
section([11,26],'ugraphs:  Unweighted Graphs',22148,22356).
section([11,27],'library(url):  Analysing and constructing URL',22358,22514).
section([12],'HACKERS CORNER',22516,22982).
section([12,1],'Examining the Environment Stack',22526,22647).
section([12,2],'Intercepting the Tracer',22649,22772).
section([12,3],'Adding context to errors:  prolog_exception_hook',22774,22823).
section([12,4],'Hooks using the exception predicate',22825,22864).
section([12,5],'Hooks for integrating libraries',22866,22926).
section([12,6],'Hooks for loading files',22928,22954).
section([12,7],'Readline Interaction',22956,22982).
section([13],'COMPATIBILITY WITH OTHER PROLOG DIALECTS',22984,23179).
section([13,1],'Some considerations for writing portable code',23064,23179).
section([14],'GLOSSARY OF TERMS',23181,23475).
section([15],'SWI-PROLOG LICENSE CONDITIONS AND TOOLS',23477,23670).
section([15,1],'The SWI-Prolog kernel and foreign libraries',23507,23539).
section([15,1,1],'The SWI-Prolog Prolog libraries',23522,23539).
section([15,2],'Contributing to the SWI-Prolog project',23541,23551).
section([15,3],'Software support to keep track of license conditions',23553,23634).
section([15,4],'License conditions inherited from used code',23636,23670).
section([15,4,1],'Cryptographic routines',23639,23670).
section([16],'SUMMARY',23672,24902).
section([16,1],'Predicates',23675,24390).
section([16,2],'Library predicates',24392,24763).
section([16,2,1],aggregate,24395,24403).
section([16,2,2],apply,24405,24415).
section([16,2,3],assoc,24417,24435).
section([16,2,4],broadcast,24437,24448).
section([16,2,5],charsio,24450,24468).
section([16,2,6],check,24470,24477).
section([16,2,7],csv,24479,24488).
section([16,2,8],lists,24490,24523).
section([16,2,9],option,24525,24533).
section([16,2,10],optparse,24535,24541).
section([16,2,11],ordsets,24543,24568).
section([16,2,12],prologxref,24570,24582).
section([16,2,13],pairs,24584,24592).
section([16,2,14],pio,24594,24602).
section([16,2,14,1],pure_input,24597,24602).
section([16,2,15],readutil,24604,24613).
section([16,2,16],record,24615,24618).
section([16,2,17],registry,24620,24632).
section([16,2,18],ugraphs,24634,24655).
section([16,2,19],url,24657,24670).
section([16,2,20],www_browser,24672,24675).
section([16,2,21],'clp/clpfd',24677,24724).
section([16,2,22],clpqr,24726,24738).
section([16,2,23],'clp/simplex',24740,24754).
section([16,2,24],thread_pool,24756,24763).
section([16,3],'Arithmetic Functions',24765,24835).
section([16,4],'Operators',24837,24902).
section([17],'Bibliography',24904,26208).


% Predicate function/3

function('PL_thread_self',14117,14122).
function('PL_unify_thread_id',14124,14128).
function('PL_thread_attach_engine',14130,14157).
function('PL_thread_destroy_engine',14159,14169).
function('PL_thread_at_exit',14171,14179).
function('PL_create_engine',14208,14217).
function('PL_destroy_engine',14219,14224).
function('PL_set_engine',14226,14246).
function('PL_new_term_ref',14698,14704).
function('PL_new_term_refs',14706,14721).
function('PL_copy_term_ref',14723,14727).
function('PL_reset_term_refs',14729,14739).
function('PL_succeed',14817,14819).
function('PL_fail',14821,14824).
function('PL_retry',14875,14883).
function('PL_retry_address',14885,14889).
function('PL_foreign_control',14891,14896).
function('PL_foreign_context',14898,14903).
function('PL_foreign_context_address',14905,14944).
function('PL_new_atom',14952,14956).
function('PL_atom_chars',14958,14966).
function('PL_new_functor',14968,14971).
function('PL_functor_name',14973,14975).
function('PL_functor_arity',14977,14979).
function('PL_register_atom',14994,14998).
function('PL_unregister_atom',15000,15015).
function('PL_term_type',15033,15076).
function('PL_is_variable',15078,15080).
function('PL_is_ground',15082,15085).
function('PL_is_atom',15087,15089).
function('PL_is_string',15091,15093).
function('PL_is_integer',15095,15097).
function('PL_is_float',15099,15101).
function('PL_is_compound',15103,15105).
function('PL_is_functor',15107,15111).
function('PL_is_list',15113,15116).
function('PL_is_pair',15118,15121).
function('PL_is_atomic',15123,15125).
function('PL_is_number',15127,15129).
function('PL_is_acyclic',15131,15133).
function('PL_get_atom',15142,15149).
function('PL_get_atom_chars',15151,15156).
function('PL_get_string_chars',15158,15164).
function('PL_get_chars',15166,15219).
function('PL_get_list_chars',15221,15224).
function('PL_get_integer',15226,15230).
function('PL_get_long',15232,15238).
function('PL_get_int64',15240,15245).
function('PL_get_intptr',15247,15252).
function('PL_get_bool',15254,15257).
function('PL_get_pointer',15259,15265).
function('PL_get_float',15267,15269).
function('PL_get_functor',15271,15275).
function('PL_get_name_arity',15277,15281).
function('PL_get_module',15283,15286).
function('PL_get_arg',15288,15291).
function('_PL_get_arg',15293,15296).
function('PL_get_atom_nchars',15307,15309).
function('PL_get_list_nchars',15311,15313).
function('PL_get_nchars',15315,15317).
function('PL_put_atom_nchars',15319,15321).
function('PL_put_string_nchars',15323,15325).
function('PL_put_list_ncodes',15327,15329).
function('PL_put_list_nchars',15331,15333).
function('PL_unify_atom_nchars',15335,15337).
function('PL_unify_string_nchars',15339,15341).
function('PL_unify_list_ncodes',15343,15345).
function('PL_unify_list_nchars',15347,15352).
function('PL_new_atom_nchars',15354,15356).
function('PL_atom_nchars',15358,15360).
function('PL_new_atom_wchars',15375,15379).
function('PL_atom_wchars',15381,15389).
function('PL_get_wchars',15391,15394).
function('PL_unify_wchars',15396,15400).
function('PL_unify_wchars_diff',15402,15410).
function('PL_get_list',15439,15442).
function('PL_get_head',15444,15446).
function('PL_get_tail',15448,15450).
function('PL_get_nil',15452,15454).
function('PL_skip_list',15456,15482).
function('PL_put_variable',15550,15553).
function('PL_put_atom',15555,15558).
function('PL_put_atom_chars',15560,15564).
function('PL_put_string_chars',15566,15569).
function('PL_put_string_nchars',15571,15575).
function('PL_put_list_chars',15577,15579).
function('PL_put_integer',15581,15583).
function('PL_put_int64',15585,15587).
function('PL_put_pointer',15589,15592).
function('PL_put_float',15594,15596).
function('PL_put_functor',15598,15603).
function('PL_put_list',15605,15607).
function('PL_put_nil',15609,15611).
function('PL_put_term',15613,15615).
function('PL_cons_functor',15617,15642).
function('PL_cons_functor_v',15644,15649).
function('PL_cons_list',15651,15673).
function('PL_unify',15723,15755).
function('PL_unify_atom',15757,15759).
function('PL_unify_bool',15761,15763).
function('PL_unify_chars',15765,15778).
function('PL_unify_atom_chars',15780,15783).
function('PL_unify_list_chars',15785,15787).
function('PL_unify_string_chars',15789,15793).
function('PL_unify_string_nchars',15795,15799).
function('PL_unify_integer',15801,15803).
function('PL_unify_int64',15805,15807).
function('PL_unify_float',15809,15811).
function('PL_unify_pointer',15813,15816).
function('PL_unify_functor',15818,15823).
function('PL_unify_list',15825,15856).
function('PL_unify_nil',15858,15860).
function('PL_unify_arg',15862,15864).
function('PL_unify_term',15866,16017).
function('PL_chars_to_term',16019,16051).
function('PL_quote',16053,16062).
function('PL_get_atom_ex',16094,16097).
function('PL_get_integer_ex',16099,16103).
function('PL_get_long_ex',16105,16109).
function('PL_get_int64_ex',16111,16115).
function('PL_get_intptr_ex',16117,16121).
function('PL_get_size_ex',16123,16127).
function('PL_get_bool_ex',16129,16132).
function('PL_get_float_ex',16134,16137).
function('PL_get_char_ex',16139,16143).
function('PL_get_pointer_ex',16145,16148).
function('PL_get_list_ex',16150,16153).
function('PL_get_nil_ex',16155,16158).
function('PL_unify_list_ex',16160,16163).
function('PL_unify_nil_ex',16165,16168).
function('PL_unify_bool_ex',16170,16180).
function('PL_instantiation_error',16182,16185).
function('PL_representation_error',16187,16189).
function('PL_type_error',16191,16193).
function('PL_domain_error',16195,16197).
function('PL_existence_error',16199,16201).
function('PL_permission_error',16203,16206).
function('PL_resource_error',16208,16210).
function('PL_unregister_blob_type',16313,16321).
function('PL_is_blob',16331,16334).
function('PL_unify_blob',16336,16339).
function('PL_put_blob',16341,16349).
function('PL_get_blob',16351,16355).
function('PL_blob_data',16357,16361).
function('PL_get_mpz',16420,16426).
function('PL_get_mpq',16428,16435).
function('PL_unify_mpz',16437,16440).
function('PL_unify_mpq',16442,16446).
function('PL_pred',16469,16474).
function('PL_predicate',16476,16479).
function('PL_predicate_info',16481,16488).
function('PL_open_query',16502,16565).
function('PL_next_solution',16567,16572).
function('PL_cut_query',16574,16578).
function('PL_close_query',16580,16583).
function('PL_call_predicate',16585,16589).
function('PL_call',16591,16597).
function('PL_open_foreign_frame',16608,16614).
function('PL_close_foreign_frame',16616,16620).
function('PL_discard_foreign_frame',16622,16625).
function('PL_rewind_foreign_frame',16627,16659).
function('PL_context',16667,16670).
function('PL_strip_module',16672,16691).
function('PL_module_name',16693,16695).
function('PL_new_module',16697,16700).
function('PL_raise_exception',16777,16804).
function('PL_throw',16806,16809).
function('PL_exception',16811,16823).
function('PL_signal',16851,16877).
function('PL_raise',16879,16883).
function('PL_handle_signals',16885,16896).
function('PL_get_signum_ex',16898,16904).
function('PL_compare',16912,16915).
function('PL_same_compound',16917,16920).
function('PL_record',16940,16945).
function('PL_recorded',16947,16953).
function('PL_erase',16955,16990).
function('PL_record_external',16992,17004).
function('PL_recorded_external',17006,17010).
function('PL_erase_external',17012,17015).
function('PL_get_file_name',17025,17058).
function('PL_get_file_nameW',17060,17066).
function('PL_warning',17076,17081).
function('PL_action',17086,17141).
function('PL_query',17146,17175).
function('PL_register_foreign_in_module',17180,17237).
function('PL_register_foreign',17239,17242).
function('PL_register_extensions_in_module',17244,17280).
function('PL_register_extensions',17282,17285).
function('PL_dispatch_hook',17292,17302).
function('PL_abort_hook',17304,17313).
function('PL_abort_unhook',17315,17318).
function('PL_on_halt',17320,17326).
function('PL_agc_hook',17328,17365).
function('PL_initialise',17591,17647).
function('PL_is_initialised',17649,17655).
function('PL_install_readline',17657,17662).
function('PL_toplevel',17664,17667).
function('PL_cleanup',17669,17692).
function('PL_cleanup_fork',17694,17709).
function('PL_halt',17711,17716).
function('PL_malloc',18099,18104).
function('PL_realloc',18106,18110).
function('PL_free',18112,18115).
function('PL_license',23631,23634).


