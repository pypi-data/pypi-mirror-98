# Config file for automatic testing at travis-ci.com

language: python
dist: bionic  # VirtualEnv is too old on xenial

matrix:
   include:
      - python: "3.5"
      - python: "3.6"
      - python: "3.7"
      - python: "3.8"
      - python: "pypy3"
      - python: "3.8"
        env: IPFS_VERSION=compat
      - python: "3.8"
        env: TOXENV=py3-httpx
      - python: "3.8"
        env: TOXENV=styleck
        before_install: ":"
      - python: "3.8"
        env: TOXENV=typeck
        before_install: ":"
     
      # Testing on macOS/Darwin tends to be much slower so only test the bare minimum
      #
      # Minimum testing version is 3.6, since the 3.5 binaries from python.org fail
      # with TLS error when trying to install `tox`.
      #
      # When changing any version here also update the relevant checksum below with
      # the values found on the https://python.org/ website.
      - os: osx
        language: shell
        env: PYTHON_VERSION=3.6.8-macosx10.9
      - os: osx
        language: shell
        env: PYTHON_VERSION=3.8.2-macosx10.9
     
      # Minimum testing version for Windows is 3.7 due to `-X utf8` flag support
      # being a life-saver for unbreaking the stupid INI parser used by all the
      # Python testing tools
      #
      # Python version numbers must exactly match a version in chocolatey as that
      # tool does not support version ranges at this time.
      - os: windows
        language: shell
        env: PYTHON_VERSION=3.7.6.20200110
      - os: windows
        language: shell
        env: PYTHON_VERSION=latest

# Ensure go-IPFS is available for testing
before_install:
   - |-
      ### ==== MODIFY THIS WHEN CHANGING TARGET OR MINIMUM IPFS VERSION ==== ###
      case "${IPFS_VERSION:-latest}" in
         latest)  # Currently targeted version
            VERSION=0.7.0
            SHA512_LINUX=1d5910f27e8d7ea333145f15c6edcbacc1e8db3a99365f0847467bdfa7c73f4d7a05562e46be8e932056c8324ed0769ca1b6758dfb0ac4c2e1b6066b57c4a086
            SHA512_DARWIN=d864b58e832ce49df7ef77c8012ce9e6e7585f693c03ba8e4ebf86f772eebf0d6a00dde279cdc0f16250ad20bac6f67db6b3966848c3e3bcbdc4b4d2dee1cd89
            SHA512_WINDOWS=2262220e0502f00d6d429cfd16d2f0c55fa73cafb100bd72589fd1f7d97b3527dc7d49d60460650796d754f2aa4b03ba07753457691ef7d1a10d10857b819045
         ;;
         compat)  # Earliest supported version
            VERSION=0.4.23
            SHA512_LINUX=5eebebd4d4628a01c3b6615d96123a5c744f64da18fc0950e00d99a36abb02eee694c1bb67549341a645ebb99f30de9198c33b556cdee2609013409a510d1d2b
         ;;
      esac
      ### ------------------------------ END ------------------------------- ###
      
      set -u
      
      # Derive usable parameters from the above constants
      case "${TRAVIS_OS_NAME}" in
         linux)
            export IPFS_DL_PATH="go-ipfs/v${VERSION}/go-ipfs_v${VERSION}_linux-amd64.tar.gz"
            export IPFS_DL_SHA512="${SHA512_LINUX}"
         ;;
         osx)
            export IPFS_DL_PATH="go-ipfs/v${VERSION}/go-ipfs_v${VERSION}_darwin-amd64.tar.gz"
            export IPFS_DL_SHA512="${SHA512_DARWIN}"
            
            # Make the `sha512sum` command available under that name
            export PATH="$(echo /usr/local/Cellar/coreutils/*/libexec/gnubin):${PATH}"
         ;;
         windows)
            export IPFS_DL_PATH="go-ipfs/v${VERSION}/go-ipfs_v${VERSION}_windows-amd64.zip"
            export IPFS_DL_SHA512="${SHA512_WINDOWS}"
         ;;
      esac
      export IPFS_DL_BASENAME="${IPFS_DL_PATH##*/}"
      
      set +u

   # Download the daemon application
   - wget "https://dist.ipfs.io/${IPFS_DL_PATH}" 2>&1
   # Verify its checksum
   - echo "${IPFS_DL_SHA512}  ${IPFS_DL_BASENAME}" | sha512sum -c
   # Extract verified archive
   - |-
      if [[ "${IPFS_DL_BASENAME}" =~ .*\.zip ]];
      then
         unzip "${IPFS_DL_BASENAME}"
      else
         tar -xvf "${IPFS_DL_BASENAME}"
      fi
   # Add IPFS daemon to search path
   - export PATH="${PWD}/go-ipfs:${PATH}"

install:
   # Install suitable Python version for testing on Darwin and Windows;
   # and fixup the environment whichever way required
   - |-
      export PYTHON_VERSION="${PYTHON_VERSION:-${TRAVIS_PYTHON_VERSION}}"
      
      ### ====== MODIFY THIS WHEN CHANGING MACOS PYTHON TEST VERSIONS ====== ###
      case "${PYTHON_VERSION}" in
         3.6.8-macosx10.9) MD5_MACOS="786c4d9183c754f58751d52f509bc971" ;;
         3.8.2-macosx10.9) MD5_MACOS="f12203128b5c639dc08e5a43a2812cc7" ;;
      esac
      ### ------------------------------ END ------------------------------- ###
      
      set -eu
      if [[ "${TRAVIS_OS_NAME}" = "osx" ]];
      then
         # Download and install official Python macOS installation package
         wget "https://www.python.org/ftp/python/${PYTHON_VERSION%%-*}/python-${PYTHON_VERSION}.pkg" -O /tmp/python.pkg
         echo "${MD5_MACOS}  /tmp/python.pkg" | md5sum -c
         sudo installer -pkg /tmp/python.pkg -target /
      elif [[ "${TRAVIS_OS_NAME}" = "windows" ]];
      then
         # Install Windows Python from chocolatey
         VERSION_FLAG=""  # Use latest version
         if [[ "${PYTHON_VERSION:-latest}" != latest ]];
         then  # Use specific version
            VERSION_FLAG="--version=${PYTHON_VERSION}"
         fi
         choco install python ${VERSION_FLAG}
         
         # Fix up Windows line endings incorrectly applied to test files
         find test/functional/fake_dir -type f -exec dos2unix \{\} \+
         
         # Export sanely named python3 shell command
         python3() {
            py -3 -X utf8 "$@"
         }
         export -f python3
      fi
      set +eu

   # Install the test runner
   - python3 -m pip install tox

   # Fixup the tox environment name for PyPy
   - |-
      if [[ -z "${TOXENV+set}" && "${PYTHON_VERSION}" =~ pypy.* ]];
      then
         export TOXENV=pypy3
      fi

script: python3 -m tox -e "${TOXENV:-py3}"

cache:
   pip: true
   directories:
      - $HOME/AppData/Local/Temp/chocolatey
