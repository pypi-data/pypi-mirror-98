{"version":3,"sources":["webpack:///./src/components/panels/MusicMpd/Index.vue","webpack:///./src/components/panels/MusicMpd/Index.vue?49af"],"names":["loading","plugin-name","config","tracks","status","playlists","edited-playlist","editedPlaylist","edited-playlist-tracks","editedPlaylistTracks","track-info","trackInfo","search-results","searchResults","library-results","libraryResults","path","play","pause","stop","previous","next","clear","setVolume","seek","consume","random","repeat","refreshStatus","refresh","removeFromTracklist","addToTracklist","swapTracks","loadPlaylist","playPlaylist","removePlaylist","moveTracklistTracks","saveToPlaylist","playlistEditChanged","addToTracklistFromEditedPlaylist","removeFromPlaylist","$event","playlistAdd","addToPlaylist","playlistTrackMove","search","cd","name","components","Loading","MusicPlugin","mixins","Utils","props","type","Object","default","data","methods","refreshTracks","background","request","entries","reduce","obj","k","v","parseInt","split","map","t","refreshPlaylists","playlist","lastModified","sort","a","b","localeCompare","Promise","all","event","pos","file","resource","volume","position","value","track","length","positions","from_pos","to_pos","_loadPlaylist","confirm","from","to","uri","playlistIdx","query","filter","result","mounted","this","render"],"mappings":"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","file":"static/js/chunk-2d21da1a.7fc760ec.js","sourcesContent":["<template>\n  <Loading v-if=\"loading\" />\n  <MusicPlugin plugin-name=\"music.mpd\" :loading=\"loading\" :config=\"config\" :tracks=\"tracks\" :status=\"status\"\n               :playlists=\"playlists\" :edited-playlist=\"editedPlaylist\" :edited-playlist-tracks=\"editedPlaylistTracks\"\n               :track-info=\"trackInfo\" :search-results=\"searchResults\" :library-results=\"libraryResults\" :path=\"path\"\n               @play=\"play\" @pause=\"pause\" @stop=\"stop\" @previous=\"previous\" @next=\"next\" @clear=\"clear\"\n               @set-volume=\"setVolume\" @seek=\"seek\" @consume=\"consume\" @random=\"random\" @repeat=\"repeat\"\n               @status-update=\"refreshStatus(true)\" @playlist-update=\"refresh(true)\"\n               @new-playing-track=\"refreshStatus(true)\" @remove-from-tracklist=\"removeFromTracklist\"\n               @add-to-tracklist=\"addToTracklist\" @swap-tracks=\"swapTracks\" @load-playlist=\"loadPlaylist\"\n               @play-playlist=\"playPlaylist\" @remove-playlist=\"removePlaylist\" @tracklist-move=\"moveTracklistTracks\"\n               @tracklist-save=\"saveToPlaylist\" @playlist-edit=\"playlistEditChanged\"\n               @add-to-tracklist-from-edited-playlist=\"addToTracklistFromEditedPlaylist\"\n               @remove-from-playlist=\"removeFromPlaylist\" @info=\"trackInfo = $event\" @playlist-add=\"playlistAdd\"\n               @add-to-playlist=\"addToPlaylist\" @playlist-track-move=\"playlistTrackMove\" @search=\"search\"\n               @search-clear=\"searchResults = []\" @cd=\"cd\"/>\n</template>\n\n<script>\nimport MusicPlugin from \"@/components/panels/Music/Index\";\nimport Utils from \"@/Utils\";\nimport Loading from \"@/components/Loading\";\n\nexport default {\n  name: \"MusicMpd\",\n  components: {Loading, MusicPlugin},\n  mixins: [Utils],\n  props: {\n    config: {\n      type: Object,\n      default: () => {},\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      tracks: [],\n      playlists: [],\n      status: {},\n      editedPlaylist: null,\n      editedPlaylistTracks: [],\n      trackInfo: null,\n      searchResults: [],\n      libraryResults: [],\n      path: '/',\n    }\n  },\n\n  methods: {\n    async refreshTracks(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.tracks = await this.request('music.mpd.playlistinfo')\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshStatus(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.status = Object.entries(await this.request('music.mpd.status')).reduce((obj, [k, v]) => {\n          switch (k) {\n            case 'bitrate':\n            case 'volume':\n              obj[k] = parseInt(v)\n              break\n\n            case 'consume':\n            case 'random':\n            case 'repeat':\n            case 'single':\n              obj[k] = !!parseInt(v)\n              break\n\n            case 'song':\n              obj['playingPos'] = parseInt(v)\n              break\n\n            case 'time':\n              [obj['elapsed'], obj['duration']] = v.split(':').map(t => parseInt(t))\n              break\n\n            case 'elapsed':\n              break\n\n            default:\n              obj[k] = v\n              break\n          }\n\n          return obj\n        }, {})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshPlaylists(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.playlists = (await this.request('music.mpd.listplaylists')).map((playlist) => {\n          return {\n            name: playlist.playlist,\n            lastModified: playlist['last-modified'],\n          }\n        }).sort((a, b) => a.name.localeCompare(b.name))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refresh(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        await Promise.all([\n          this.refreshTracks(background),\n          this.refreshStatus(background),\n          this.refreshPlaylists(background),\n        ])\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async play(event) {\n      if (event?.pos != null) {\n        await this.request('music.mpd.play_pos', {pos: event.pos})\n      } else if (event?.file) {\n        await this.request('music.mpd.play', {resource: event.file})\n      } else {\n        await this.request('music.mpd.play')\n      }\n\n      await this.refreshStatus(true)\n    },\n\n    async pause() {\n      await this.request('music.mpd.pause')\n      await this.refreshStatus(true)\n    },\n\n    async stop() {\n      await this.request('music.mpd.stop')\n      await this.refreshStatus(true)\n    },\n\n    async previous() {\n      await this.request('music.mpd.previous')\n      await this.refreshStatus(true)\n    },\n\n    async next() {\n      await this.request('music.mpd.next')\n      await this.refreshStatus(true)\n    },\n\n    async clear() {\n      await this.request('music.mpd.clear')\n      await Promise.all([this.refreshStatus(true), this.refreshTracks(true)])\n    },\n\n    async setVolume(volume) {\n      if (volume === this.status.volume)\n        return\n\n      await this.request('music.mpd.set_volume', {volume: volume})\n      await this.refreshStatus(true)\n    },\n\n    async seek(pos) {\n      await this.request('music.mpd.seek', {position: pos})\n      await this.refreshStatus(true)\n    },\n\n    async repeat(value) {\n      await this.request('music.mpd.repeat', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async random(value) {\n      await this.request('music.mpd.random', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async consume(value) {\n      await this.request('music.mpd.consume', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async addToTracklist(resource) {\n      if (resource.file)\n        resource = resource.file\n\n      await this.request('music.mpd.add', {resource: resource})\n      await this.refresh(true)\n    },\n\n    async addToTracklistFromEditedPlaylist(event) {\n      const track = this.editedPlaylistTracks[event.pos]\n      if (!track)\n        return\n\n      await this.request('music.mpd.add', {resource: track.file})\n      await this.refresh(true)\n\n      if (event.play)\n        await this.request('music.mpd.play_pos', {pos: this.tracks.length-1})\n    },\n\n    async removeFromPlaylist(positions) {\n      await this.request('music.mpd.playlistdelete',\n          {pos: positions, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async removeFromTracklist(positions) {\n      await this.request('music.mpd.delete', {positions: positions.sort()})\n      await this.refresh(true)\n    },\n\n    async swapTracks(positions) {\n      await this.request('music.mpd.move', {from_pos: positions[0], to_pos: positions[1]})\n      await this.refresh(true)\n    },\n\n    async playPlaylist(position) {\n      await this._loadPlaylist(position, true)\n    },\n\n    async loadPlaylist(position) {\n      await this._loadPlaylist(position, false)\n    },\n\n    async _loadPlaylist(position, play) {\n      const playlist = this.playlists[position]\n      await this.request('music.mpd.load', {playlist: playlist.name, play: play})\n      await this.refresh(true)\n    },\n\n    async removePlaylist(position) {\n      const playlist = this.playlists[position]\n      if (!confirm(`Are you REALLY sure that you want to remove the playlist ${playlist.name}?`))\n        return\n\n      await this.request('music.mpd.rm', {playlist: playlist.name})\n      await this.refreshPlaylists(true)\n    },\n\n    async saveToPlaylist(name) {\n      await this.request('music.mpd.save', {name: name})\n      await this.refreshPlaylists(true)\n    },\n\n    async moveTracklistTracks(event) {\n      await this.request('music.mpd.move', {from_pos: event.from, to_pos: event.to})\n      await this.refreshTracks(true)\n    },\n\n    async playlistAdd(track) {\n      await this.request('music.mpd.playlistadd', {uri: track, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async playlistEditChanged(playlist) {\n      this.editedPlaylist = playlist\n      if (playlist == null)\n        return\n\n      this.loading = true\n      try {\n        this.editedPlaylistTracks = await this.request('music.mpd.listplaylistinfo',\n            {name: this.playlists[playlist].name})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async addToPlaylist(event) {\n      await Promise.all(event.playlists.map(async (playlistIdx) => {\n        await this.request('music.mpd.playlistadd', {\n          uri: event.track.file,\n          name: this.playlists[playlistIdx].name\n        })\n\n        await this.playlistEditChanged(playlistIdx)\n      }))\n    },\n\n    async playlistTrackMove(event) {\n      await this.request('music.mpd.playlistmove', {\n        name: this.playlists[event.playlist].name,\n        from_pos: event.from,\n        to_pos: event.to,\n      })\n\n      await this.playlistEditChanged(event.playlist)\n    },\n\n    async search(query) {\n      this.loading = true\n\n      try {\n        this.searchResults = await this.request('music.mpd.search', {filter: query})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async cd(path) {\n      this.loading = true\n\n      try {\n        this.libraryResults = (await this.request('music.mpd.lsinfo', {uri: path})).\n          filter((result) => !result.playlist)\n\n        this.path = path\n      } finally {\n        this.loading = false\n      }\n    },\n  },\n\n  mounted() {\n    this.refresh()\n    this.cd(this.path)\n  },\n}\n</script>\n","import { render } from \"./Index.vue?vue&type=template&id=e343abe6\"\nimport script from \"./Index.vue?vue&type=script&lang=js\"\nexport * from \"./Index.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}