#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016-2019 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/07/11 14:50:43 $
#       $Id: resamplenifti,v 1.19 2016/07/11 14:50:43 frederic Exp $
#

from __future__ import print_function, division
import sys
import getopt
import rapidtide.io as tide_io
import rapidtide.filter as tide_filt
import rapidtide.resample as tide_resample
import nibabel as nib

def usage():
    print("usage: resamplenifti inputfile inputtr outputname outputtr [-a]")
    print("")
    print("required arguments:")
    print("	inputfile	- the name of the input nifti file")
    print("	inputtr		- the tr of the input file in seconds")
    print("	outputfile	- the name of the output nifti file")
    print("	outputtr	- the tr of the output file in seconds")
    print("")
    print("options:")
    print("	-a		- disable antialiasing filter (only relevant if you are downsampling in time)")
    return ()


def main():
    # set default variable values
    antialias = True
    widthlimit = 10.0
    fastresample = True

    # get the command line parameters
    if (len(sys.argv) < 5) or (len(sys.argv) > 6):
        usage()
        exit()

    # handle required args first
    inputfilename = sys.argv[1]
    inputtr = float(sys.argv[2])
    outputfilename = sys.argv[3]
    outputtr = float(sys.argv[4])

    # now scan for optional arguments
    try:
        opts, args = getopt.getopt(sys.argv[5:], "a", ["help"])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    # get the input TR
    inputtr_fromfile, numinputtrs = tide_io.fmritimeinfo(inputfilename)
    print("input data: ", numinputtrs, " timepoints, tr = ", inputtr_fromfile)

    # check to see if we are upsampling or downsampling
    if inputtr > outputtr:  # we are upsampling - antialiasing is unnecessary
        antialias = False
        print('upsampling - antialiasing disabled')

    # prepare the input timepoint list
    inputfreq = 1.0 / inputtr
    inputstarttime = 0.0
    inputendtime = inputstarttime + inputtr * (numinputtrs - 1)
    print("input start,end,tr,numtrs", inputstarttime, inputendtime, inputtr, numinputtrs)
    input_x = r_[0.0:1.0 * numinputtrs] * inputtr - inputstarttime
    input_y = input_x * 0.0

    # prepare the output timepoint list
    outputfreq = 1.0 / outputtr
    outputstarttime = inputstarttime
    outputendtime = inputendtime
    numoutputtrs = np.ceil((outputendtime - outputstarttime) / outputtr) + 1
    print("output start,end,tr,numtrs", outputstarttime, outputendtime, outputtr, numoutputtrs)
    output_x = r_[0.0:1.0 * (numoutputtrs - 1)] * outputtr - outputstarttime
    output_y = output_x * 0.0

    input_img, input_data, input_hdr, thedims, thesizes = tide_io.readfromnifti(inputfilename)
    tr = thesizes[4]
    print("tr from header =", tr)

    xsize = thedims[1]
    ysize = thedims[2]
    numslices = thedims[3]
    timepoints = thedims[4]

    resampledtcs = zeros((xsize, ysize, numslices, len(output_x)), dtype='float')

    if antialias:
        aafiltfunc = tide_filt.getlpfftfunc(inputfreq, inputfreq / 2.5, input_x)

    # cycle over all voxels
    print("now cycling over all voxels")
    for zloc in range(0, numslices):
        print("processing slice ", zloc)
        sliceoffsettime = 0.0
        for yloc in range(0, ysize):
            for xloc in range(0, xsize):
                if antialias:
                    #input_y = tide_filt.doprecalcfftfilt(aafiltfunc, input_data[xloc, yloc, zloc, :])
                    input_y = tide_filt.transferfuncfilt(input_data[xloc, yloc, zloc, :], aafiltfunc)
                else:
                    input_y = input_data[xloc, yloc, zloc, :]
                resampledtcs[xloc, yloc, zloc, :] = tide_resample.doresample(input_x, input_y, output_x)

    # now do the ones with other numbers of time points
    inputaffine = input_img.get_affine()
    resampled_img = nib.Nifti1Image(resampledtcs, inputaffine)
    resampled_hdr = resampled_img.header.copy()
    resampled_hdr['pixdim'][4] = outputtr
    resampled_img.to_filename(outputfilename)


if __name__ == '__main__':
    main()

