#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016-2019 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# $Author: frederic $
# $Date: 2016/07/11 14:50:43 $
#       $Id: resamp1tc,v 1.12 2016/07/11 14:50:43 frederic Exp $
#

from __future__ import print_function, division

import sys
import getopt

import rapidtide.io as tide_io
import rapidtide.resample as tide_resample
import rapidtide.miscmath as tide_math
import rapidtide.filter as tide_filt
import rapidtide.fit as tide_fit
import rapidtide.correlate as tide_corr
import numpy as np
from matplotlib.pyplot import plot, show, figure


def usage():
    print("aligntcs - resample and align two time series")
    print("")
    print("usage: aligntcs infile1 insamplerate1 infile2 insamplereate2 outputfile [--nodisplay]")
    print("")
    print("required arguments:")
    print("    infile1[:COLNUM] - text file containing a timeseries.  Select column COLNUM if multicolumn file")
    print("    insamplerate1    - the sample rate of input file 1 in Hz")
    print("    infile2[:COLNUM] - text file containing a timeseries.  Select column COLNUM if multicolumn file")
    print("    insamplerate2    - the sample rate of input file 1 in Hz")
    print("    outputfile	    - the name of the output text file")
    print("")
    print("options:")
    print("    --nodisplay     - do not plot the data (for noninteractive use)")
    print("")
    return ()


def main():
    display = True
    verbose = False
    searchrange = None

    # get the command line parameters
    nargs = len(sys.argv)
    if nargs < 6:
        usage()
        exit()
    infile1 = sys.argv[1]
    insamplerate1 = float(sys.argv[2])
    infile2 = sys.argv[3]
    insamplerate2 = float(sys.argv[4])
    outputfile = sys.argv[5]
    print(sys.argv, len(sys.argv))

    theprefilter = tide_filt.noncausalfilter()

    # now scan for optional arguments
    try:
        opts, args = getopt.getopt(sys.argv[6:], "r:VLRCF:", ["nodisplay", "help"])
        print('options:', opts)
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -x not recognized"
        usage()
        sys.exit(2)
    
    for o, a in opts:
        if o == "--nodisplay":
            display = False
            print('turning display off')
        elif o == "-r":
            searchrange = float(a)
            print('peak search restricted to +/-', searchrange, ' seconds')
        elif o == "-V":
            theprefilter.settype('vlf')
            if verbose:
                print('prefiltering to vlf band')
        elif o == "-L":
            theprefilter.settype('lfo')
            if verbose:
                print('prefiltering to lfo band')
        elif o == "-R":
            theprefilter.settype('resp')
            if verbose:
                print('prefiltering to respiratory band')
        elif o == "-C":
            theprefilter.settype('cardiac')
            if verbose:
                print('prefiltering to cardiac band')
        elif o == "-F":
            arbvec = a.split(',')
            if len(arbvec) != 2 and len(arbvec) != 4:
                usage()
                sys.exit()
            if len(arbvec) == 2:
                arb_lower = float(arbvec[0])
                arb_upper = float(arbvec[1])
                arb_lowerstop = 0.9 * float(arbvec[0])
                arb_upperstop = 1.1 * float(arbvec[1])
            if len(arbvec) == 4:
                arb_lower = float(arbvec[0])
                arb_upper = float(arbvec[1])
                arb_lowerstop = float(arbvec[2])
                arb_upperstop = float(arbvec[3])
            theprefilter.settype('arb')
            theprefilter.setfreqs(arb_lowerstop, arb_lower, arb_upper, arb_upperstop)
            if verbose:
                print('prefiltering to ', arb_lower, arb_upper, "(stops at ", arb_lowerstop, arb_upperstop, ")")
        else:
            assert False, "unhandled option"

    intimestep1 = 1.0 / insamplerate1
    intimestep2 = 1.0 / insamplerate2

    '''#inputdata1 = tide_io.readvec(infile1)
    #inputdata2 = tide_io.readvec(infile2)

    inputdata1 = np.transpose(tide_io.readvecs(infile1, colspec=colspec))
    if np.shape(inputdata1)[1] > 1:
        print('specify only one column for input file 1')
        sys.exit()
    else:
        inputdata1 = inputdata1[:, 0]

    inputdata2 = np.transpose(tide_io.readvecs(infile2, colspec=colspec))
    if np.shape(inputdata)[1] > 1:
        print('specify only one column for input file 2')
        sys.exit()
    else:
        inputdata2 = inputdata2[:, 0]'''

    inputdata1 = tide_io.readcolfromtextfile(inputfilename1)
    inputdata2 = tide_io.readcolfromtextfile(inputfilename2)

    # determine waveform lengths
    time1 = insamplerate1 * (len(inputdata1) - 1)
    time2 = insamplerate2 * (len(inputdata2) - 1)

    fulltime = np.max([time1, time2])
    # pad waveform1 if it's shorter than waveform2
    if time1 < fulltime:
        paddeddata1 = np.zeros(int(np.ceil(fulltime // intimestep1)), dtype=float)
        paddeddata1[0:len(inputdata1) + 1] = tide_math.corrnormalize(theprefilter.apply(insamplerate1, inputdata1))
    else:
        paddeddata1 = tide_math.corrnormalize(theprefilter.apply(insamplerate1, inputdata1))

    timeaxisfull = np.linspace(0.0, intimestep1 * len(paddeddata1), num=len(paddeddata1), endpoint=False)
    timeaxis1 = np.linspace(0.0, intimestep1 * len(inputdata1), num=len(inputdata1), endpoint=False)
    timeaxis2 = np.linspace(0.0, intimestep2 * len(inputdata2), num=len(inputdata2), endpoint=False)
    paddeddata2 = tide_resample.doresample(timeaxis2, tide_math.corrnormalize(theprefilter.apply(insamplerate2, inputdata2)), timeaxisfull)

    # now paddeddata1 and 2 are on the same timescales
    thexcorr = tide_corr.fastcorrelate(paddeddata1, paddeddata2)
    xcorrlen = len(thexcorr)
    xcorr_x = np.r_[0.0:xcorrlen] * intimestep1 - (xcorrlen * intimestep1) / 2.0 + intimestep1 / 2.0

    if searchrange is None:
        searchrange = (xcorrlen * intimestep1) / 4.0
    maxindex, maxdelay, maxval, maxsigma, maskval, failreason, peakstart, peakend = tide_fit.findmaxlag_gauss(
        xcorr_x, thexcorr, -searchrange, searchrange, 1000.0,
        refine=True,
        useguess=False,
        fastgauss=False,
        displayplots=False)

    print("Crosscorrelation_Rmax:\t", maxval)
    print("Crosscorrelation_maxdelay:\t", maxdelay)

    # now align the second timecourse to the first

    aligneddata2 = tide_resample.doresample(timeaxis2, inputdata2, timeaxis1 - maxdelay)
    tide_io.writevec(aligneddata2, outputfile)

    if display:
        fig = figure()
        ax = fig.add_subplot(111)
        # ax.set_title('GCC')
        plot(xcorr_x, thexcorr, 'k')
        show()
        fig = figure()
        plot(timeaxis1, inputdata1)
        plot(timeaxis1, aligneddata2)
        plot()
        show()

if __name__ == '__main__':
    main()
