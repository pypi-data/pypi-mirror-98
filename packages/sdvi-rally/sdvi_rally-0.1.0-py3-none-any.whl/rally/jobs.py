""" Rally jobs support.

Provides management features for asset jobs

Import example:

>>> from rally import jobs
"""
__all__ = [
    'get_jobs_for_asset',
    'get_job_report'
]

# TODO Ask Rick more about this

import json
from time import sleep

from . import exceptions
from ._context import _getAssetId
from ._session import _getSession
from ._utils import _toDatetime


# TODO what happens if you call getAsset() on an anonymous job
# TODO we should offer a filter here much like getInventory and it should only be one of the categories
#  Is this still valid?
def get_jobs_for_asset():
    """ Retrieve `generator iterator <https://docs.python.org/3/glossary.html#term-generator-iterator>`_ of dicts
    describing all jobs run on this asset. Raises :class:`~rally.exceptions.NotFound` if the asset does not exist

    .. warning::
        :func:`rally.jobs.get_jobs_for_asset` is in Alpha Preview and is not considered suitable for Production use.
        Experimentation in lower environments is encouraged.

    Job dict attributes:
        - category (:py:class:`str`)
        - queuedAt (:py:class:`~datetime.datetime`)
        - startedAt (:py:class:`~datetime.datetime`)
        - completedAt (:py:class:`~datetime.datetime`)
        - cost (:py:class:`int`)
        - currencyType (:py:class:`str`)
        - status (:py:class:`str`)
        - percentComplete (:py:class:`int`)
        - jobUuid (:py:class:`str`)
        - deadlineAt (:py:class:`~datetime.datetime`)
        - preset (:py:class:`str`)
        - provider (:py:class:`str`)
        - rule (:py:class:`str`)
        - user (:py:class:`str`)

    Usage:

    >>> yak_jobs = jobs.get_jobs_for_asset()
    >>> next(yak_jobs)
    {'category': 'Evaluate', 'queuedAt': datetime.datetime(...), ...}
    """
    assetId = _getAssetId()
    if not assetId:
        raise exceptions.NotFound('Asset')

    page = 1
    pageSize = 100

    # Attributes we are interested in
    items = ('category', 'queuedAt', 'startedAt', 'completedAt', 'cost', 'currencyType', 'status', 'percentComplete',
             'jobUuid', 'workflowUuid', 'baseWorkflowUuid', 'deadlineAt')
    # we want the 'name' of these attributes
    itemNames = ('preset', 'provider', 'rule', 'user')
    # For now, we filter for all of these event categories involving the asset
    filter = json.dumps({'movieId': assetId,
                         'category': ['Analyze', 'Evaluate', 'ExternalJob', 'Export', 'QC', 'Transform']})

    while True:
        params = {
            'count': pageSize,
            'filter': filter,
            'offset': (page - 1) * pageSize,
            'page': page,
        }

        events = _getSession().get('v1.0/event', params=params).json()['data']

        if not events:
            return
        else:
            page += 1

        #   convert each event to the dict we want
        for event in events:
            job = {}
            for item in items:
                itemVal = event.get(item)
                if item in ('queuedAt', 'startedAt', 'completedAt', 'deadlineAt'):
                    job[item] = _toDatetime(itemVal)
                elif itemVal is not None:
                    job[item] = itemVal
            for itemName in itemNames:
                itemVal = (event.get(itemName) or {}).get('name')
                if itemVal is not None:
                    job[itemName] = itemVal

            yield job

        # slow down: you move too fast, tight loop
        sleep(5)


# TODO what is the use case for this function vs getting the IDs like can you say give me the job reports

# TODO this must return a PRESIGNED URL
# TODO what happens if you find more than one and documents?
#   switch to specify a jobUuid so we don't have to worry about there is more than one output
def get_job_report(provider_type, label, report_format, preset_name=None):
    """ Retrieve a job report. Reports are generated by various analyze and QC jobs.

    .. warning::
        :func:`rally.jobs.get_job_report` is in Alpha Preview and is not considered suitable for Production use.
        Experimentation in lower environments is encouraged.

    :param provider_type: Provider type name that generated the report. Use one of: 'SdviAnalyze',
     'Aurora', 'Baton', 'ClamAv', 'Rekognition', 'SdviSimpleQc', 'Transcribe', 'Vidchecker', 'VideoIntelligence', etc.
    :type provider_type: str
    :param label: Input file label used by the report generating job.
    :type label: str
    :param report_format: Format of the report. Use one of: 'summary', 'raw'.
    :type report_format: str
    :param preset_name: Name of the preset used by the job that generated the report. Defaults to None
    :type preset_name: str, optional.

    Usage:

    >>> jobs.get_job_report('SdviAnalyze', 'Yak', 'raw')
    b'...<Report Contents>...'
    """
    assetId = _getAssetId()
    if not assetId:
        raise exceptions.NotFound('Asset')

    params = {
        'assetId': _getAssetId(),
        'inputFileLabel': label,
        'providerType': provider_type,
        'reportFormat': report_format,
        'presetName': preset_name if preset_name else None
    }
    return _getSession().get(f'v1.0/jobs/report', params=params).content
