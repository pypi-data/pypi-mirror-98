# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-MIB
# by libsmi2pysnmp-0.1.3 at Wed Aug 10 11:29:10 2016,
# Python version sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxChassisOKTraps, jnxChassisTraps, jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxChassisOKTraps", "jnxChassisTraps", "jnxMibs")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DateAndTime, DisplayString, TextualConvention, TimeInterval, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "TimeInterval", "TimeStamp")

# Types

class JnxChassisId(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,18,16,17,14,15,39,42,13,12,2,36,35,38,37,32,31,34,33,21,22,19,20,6,7,4,5,23,24,41,40,8,9,10,11,29,30,25,26,27,28,)
    namedValues = NamedValues(("unknown", 1), ("jcs3", 10), ("jcs4", 11), ("node0", 12), ("node1", 13), ("sfc0", 14), ("sfc1", 15), ("sfc2", 16), ("sfc3", 17), ("sfc4", 18), ("lcc4", 19), ("singleChassis", 2), ("lcc5", 20), ("lcc6", 21), ("lcc7", 22), ("lcc8", 23), ("lcc9", 24), ("lcc10", 25), ("lcc11", 26), ("lcc12", 27), ("lcc13", 28), ("lcc14", 29), ("scc", 3), ("lcc15", 30), ("member0", 31), ("member1", 32), ("member2", 33), ("member3", 34), ("member4", 35), ("member5", 36), ("member6", 37), ("member7", 38), ("nodeDevice", 39), ("lcc0", 4), ("interconnectDevice", 40), ("controlPlaneDevice", 41), ("directorDevice", 42), ("lcc1", 5), ("lcc2", 6), ("lcc3", 7), ("jcs1", 8), ("jcs2", 9), )
    

# Objects

jnxBoxAnatomy = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 1)).setRevisions(("2015-04-28 00:00","2015-04-06 00:00","2015-04-01 00:00","2015-04-01 00:00","2015-01-14 00:00","2014-12-04 00:00","2014-07-30 00:00","2014-05-20 00:00","2014-04-08 00:00","2013-11-19 00:00","2013-10-15 00:00","2013-09-24 00:00","2013-07-17 00:00","2013-05-22 00:00","2013-03-22 00:00","2013-02-28 00:00","2013-01-07 00:00","2012-12-10 00:00","2012-11-07 00:00","2012-10-12 00:00","2012-08-24 00:00","2012-08-24 00:00","2012-02-21 00:00","2012-02-15 00:00","2011-09-09 00:00","2010-10-22 00:00","2009-01-09 00:00","2008-12-31 00:00","2008-08-01 00:00","2008-07-31 00:00","2006-11-20 00:00","2005-07-19 00:00","2005-07-18 00:00","2004-09-17 00:00","2004-06-30 00:00","2004-03-23 00:00",))
if mibBuilder.loadTexts: jnxBoxAnatomy.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxBoxAnatomy.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxBoxAnatomy.setDescription("The MIB modules representing Juniper Networks'\nimplementation of enterprise specific MIBs \nsupported by a single SNMP agent.")
jnxBoxClass = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxClass.setDescription("The class of the box, indicating which product line\nthe box is about, for example, 'Internet Router'.")
jnxBoxDescr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxDescr.setDescription("The name, model, or detailed description of the box,\nindicating which product the box is about, for example\n'M40'.")
jnxBoxSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxSerialNo.setDescription("The serial number of this subject, blank if unknown \nor unavailable.")
jnxBoxRevision = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxRevision.setDescription("The revision of this subject, blank if unknown or\nunavailable.")
jnxBoxInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxInstalled.setDescription("The value of sysUpTime when the subject was last\ninstalled, up-and-running.  Zero if unknown or \nalready up-and-running when the agent was up.")
jnxContainersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6))
if mibBuilder.loadTexts: jnxContainersTable.setDescription("A list of containers entries.")
jnxContainersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1)).setIndexNames((0, "JUNIPER-MIB", "jnxContainersIndex"))
if mibBuilder.loadTexts: jnxContainersEntry.setDescription("An entry of containers table.")
jnxContainersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersIndex.setDescription("The index for this entry.")
jnxContainersView = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersView.setDescription("The view(s) from which the specific container\nappears.\n\nThis variable indicates that the specific container\nis embedded and accessible from the corresponding\nview(s).\n\nThe value is a bit map represented as a sum.\nIf multiple bits are set, the specified\ncontainer(s) are located and accessible from \nthat set of views.\n\nThe various values representing the bit positions\nand its corresponding views are:\n    1   front\n    2   rear\n    4   top\n    8   bottom\n   16   leftHandSide\n   32   rightHandSide\n\nNote 1: \nLefHandSide and rightHandSide are referred\nto based on the view from the front.\n\nNote 2: \nIf the specified containers are scattered \naround various views, the numbering is according\nto the following sequence:\n    front -> rear -> top -> bottom\n	  -> leftHandSide -> rightHandSide\nFor each view plane, the numbering sequence is\nfirst from left to right, and then from up to down.\n\nNote 3: \nEven though the value in chassis hardware (e.g. \nslot number) may be labelled from 0, 1, 2, and up,\nall the indices in MIB start with 1 (not 0) \naccording to network management convention.")
jnxContainersLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersLevel.setDescription("The abstraction level of the box or chassis.\nIt is enumerated from the outside to the inside, \nfrom the outer layer to the inner layer.\nFor example, top level (i.e. level 0) refers to \nchassis frame, level 1 FPC slot within chassis \nframe, level 2 PIC space within FPC slot.")
jnxContainersWithin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersWithin.setDescription("The index of its next higher level container \nhousing	this entry.  The associated \njnxContainersIndex in the jnxContainersTable \nrepresents its next higher level container.")
jnxContainersType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersType.setDescription("The type of this container.")
jnxContainersDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersDescr.setDescription("The name or detailed description of this\nsubject.")
jnxContainersCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersCount.setDescription("The maximum number of containers of this level\nper container of the next higher level.  \ne.g. if there are six level 2 containers in \nlevel 1 container, then jnxContainersCount for\nlevel 2 is six.")
jnxContentsLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsLastChange.setDescription("The value of sysUpTime when the box contents \ntable last changed.  Zero if unknown or already \nexisting when the agent was up.")
jnxContentsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8))
if mibBuilder.loadTexts: jnxContentsTable.setDescription("A list of contents entries.")
jnxContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1)).setIndexNames((0, "JUNIPER-MIB", "jnxContentsContainerIndex"), (0, "JUNIPER-MIB", "jnxContentsL1Index"), (0, "JUNIPER-MIB", "jnxContentsL2Index"), (0, "JUNIPER-MIB", "jnxContentsL3Index"))
if mibBuilder.loadTexts: jnxContentsEntry.setDescription("An entry of contents table.")
jnxContentsContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsContainerIndex.setDescription("The associated jnxContainersIndex in the \njnxContainersTable.")
jnxContentsL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL1Index.setDescription("The level one index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxContentsL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL2Index.setDescription("The level two index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxContentsL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL3Index.setDescription("The level three index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxContentsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsType.setDescription("The type of this subject.  zeroDotZero\nif unknown.")
jnxContentsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsDescr.setDescription("The name or detailed description of this\nsubject.")
jnxContentsSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsSerialNo.setDescription("The serial number of this subject, blank if \nunknown or unavailable.")
jnxContentsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsRevision.setDescription("The revision of this subject, blank if unknown \nor unavailable.")
jnxContentsInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsInstalled.setDescription("The value of sysUpTime when the subject was last \ninstalled, up-and-running.  Zero if unknown\nor already up-and-running when the agent was up.")
jnxContentsPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsPartNo.setDescription("The part number of this subject, blank if unknown \nor unavailable.")
jnxContentsChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 11), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxContentsChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxContentsChassisCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisCleiCode.setDescription("The clei code of this subject, blank if unknown\nor unavailable.\n\nA CLEI code is an intelligent code that consists of 10\nalphanumeric characters with 4 data elements.  The first data\nelement is considered the basic code with the first 2 characters\nindicating the technology or equipment type, and the third and\nfourth characters denoting the functional sub-category.  The\nsecond data element represents the features, and its three\ncharacters denote functional capabilities or changes.  The third\ndata element has one character and denotes a reference to a\nmanufacturer, system ID, specification, or drawing.  The fourth\ndata element consists of two characters and contains complementary\ndata.  These two characters provide a means of differentiating or\nproviding uniqueness between the eight character CLEI codes by\nidentifying the manufacturing vintage of the product.  Names are\nassigned via procedures defined in [GR485].\n\nThe assigned maintenance agent for the CLEI code, Telcordia\nTechnologies, is responsible for assigning certain equipment and\nother identifiers (e.g., location, manufacturer/supplier) for the\ntelecommunications industry.")
jnxContentsModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsModel.setDescription("The FRU model name of this subject, blank if unknown\nor unavailable.")
jnxLEDLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDLastChange.setDescription("The value of sysUpTime when the box LED table \nlast changed.  Zero if unknown or already at \nthat state when the agent was up.")
jnxLEDTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10))
if mibBuilder.loadTexts: jnxLEDTable.setDescription("A list of status entries.")
jnxLEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1)).setIndexNames((0, "JUNIPER-MIB", "jnxLEDAssociateTable"), (0, "JUNIPER-MIB", "jnxLEDAssociateIndex"), (0, "JUNIPER-MIB", "jnxLEDL1Index"), (0, "JUNIPER-MIB", "jnxLEDL2Index"), (0, "JUNIPER-MIB", "jnxLEDL3Index"))
if mibBuilder.loadTexts: jnxLEDEntry.setDescription("An entry of status table.")
jnxLEDAssociateTable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("other", 1), ("jnxContainersTable", 2), ("jnxContentsTable", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDAssociateTable.setDescription("The associated table that this entry is \nrelated.")
jnxLEDAssociateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDAssociateIndex.setDescription("The index of the associated table that this\nentry is related.")
jnxLEDL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL1Index.setDescription("The level one index of the associated\ntable that this entry is related.  Zero \nif unavailable or inapplicable.")
jnxLEDL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL2Index.setDescription("The level two index of the associated\ntable that this entry is related.  Zero \nif unavailable or inapplicable.")
jnxLEDL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL3Index.setDescription("The level three index of the associated\ntable that this entry is related.  Zero\nif unavailable or inapplicable.")
jnxLEDOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDOriginator.setDescription("The originator of the this entry.")
jnxLEDDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDDescr.setDescription("The name or detailed description of this subject.")
jnxLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(6,10,12,8,3,9,5,7,1,2,11,4,)).subtype(namedValues=NamedValues(("other", 1), ("blinkingRed", 10), ("blinkingBlue", 11), ("blinkingAmber", 12), ("green", 2), ("yellow", 3), ("red", 4), ("blue", 5), ("amber", 6), ("off", 7), ("blinkingGreen", 8), ("blinkingYellow", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDState.setDescription("The state of the LED indicator.")
jnxLEDStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,12,10,8,4,11,1,7,6,2,9,5,)).subtype(namedValues=NamedValues(("blue", 1), ("blinkingAmber", 10), ("blinkingYellow", 11), ("blinkingRed", 12), ("green", 2), ("amber", 3), ("yellow", 4), ("red", 5), ("other", 6), ("off", 7), ("blinkingBlue", 8), ("blinkingGreen", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDStateOrdered.setDescription("The state of the LED indicator.  Identical to jnxLEDState, but\nwith enums ordered from 'most operational' to 'least\noperational' states.")
jnxFilledLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledLastChange.setDescription("The value of sysUpTime when the box filled \nstatus table last changed.  Zero if unknown or\nalready at that state when the agent was up.")
jnxFilledTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12))
if mibBuilder.loadTexts: jnxFilledTable.setDescription("A list of filled status entries.")
jnxFilledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1)).setIndexNames((0, "JUNIPER-MIB", "jnxFilledContainerIndex"), (0, "JUNIPER-MIB", "jnxFilledL1Index"), (0, "JUNIPER-MIB", "jnxFilledL2Index"), (0, "JUNIPER-MIB", "jnxFilledL3Index"))
if mibBuilder.loadTexts: jnxFilledEntry.setDescription("An entry of filled status table.")
jnxFilledContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledContainerIndex.setDescription("The associated jnxContainersIndex in the \njnxContainersTable.")
jnxFilledL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL1Index.setDescription("The level one index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFilledL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL2Index.setDescription("The level two index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFilledL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL3Index.setDescription("The level three index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFilledDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledDescr.setDescription("The name or detailed description of this\nsubject.")
jnxFilledState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("filled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledState.setDescription("The filled state of this subject.")
jnxFilledChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 7), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxFilledChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxOperatingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13))
if mibBuilder.loadTexts: jnxOperatingTable.setDescription("A list of operating status entries.")
jnxOperatingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1)).setIndexNames((0, "JUNIPER-MIB", "jnxOperatingContentsIndex"), (0, "JUNIPER-MIB", "jnxOperatingL1Index"), (0, "JUNIPER-MIB", "jnxOperatingL2Index"), (0, "JUNIPER-MIB", "jnxOperatingL3Index"))
if mibBuilder.loadTexts: jnxOperatingEntry.setDescription("An entry of operating status table.")
jnxOperatingContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingContentsIndex.setDescription("The associated jnxContentsContainerIndex in the \njnxContentsTable.")
jnxOperatingL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL1Index.setDescription("The level one index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxOperatingL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL2Index.setDescription("The level two index associated with this \nsubject.  Zero if unavailable or inapplicable.")
jnxOperatingL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL3Index.setDescription("The level three index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxOperatingDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingDescr.setDescription("The name or detailed description of this subject.")
jnxOperatingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,2,3,1,7,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("running", 2), ("ready", 3), ("reset", 4), ("runningAtFullSpeed", 5), ("down", 6), ("standby", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingState.setDescription("The operating state of this subject.")
jnxOperatingTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingTemp.setDescription("The temperature in Celsius (degrees C) of this \nsubject.  Zero if unavailable or inapplicable.")
jnxOperatingCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingCPU.setDescription("The CPU utilization in percentage of this \nsubject.  Zero if unavailable or inapplicable.")
jnxOperatingISR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingISR.setDescription("The CPU utilization in percentage of this subject\nspending in interrupt service routine (ISR).\nZero if unavailable or inapplicable.")
jnxOperatingDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingDRAMSize.setDescription("The DRAM size in bytes of this subject.\nZero if unavailable or inapplicable.")
jnxOperatingBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingBuffer.setDescription("The buffer pool utilization in percentage\nof this subject.  Zero if unavailable or \ninapplicable.")
jnxOperatingHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingHeap.setDescription("The heap utilization in percentage of \nthis subject.  Zero if unavailable or \ninapplicable.")
jnxOperatingUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingUpTime.setDescription("The time interval in 10-millisecond period\nthat this subject has been up and running.  \nZero if unavailable or inapplicable.")
jnxOperatingLastRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingLastRestart.setDescription("The value of sysUpTime when this subject \nlast restarted.  Zero if unavailable or \ninapplicable.")
jnxOperatingMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingMemory.setDescription("The installed memory size in Megabytes \nof this subject.  Zero if unavailable or\ninapplicable.")
jnxOperatingStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,1,4,2,7,6,)).subtype(namedValues=NamedValues(("running", 1), ("standby", 2), ("ready", 3), ("runningAtFullSpeed", 4), ("reset", 5), ("down", 6), ("unknown", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingStateOrdered.setDescription("The operating state of this subject.  Identical to\njnxOperatingState, but with enums ordered from 'most\noperational' to 'least operational' states.")
jnxOperatingChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 17), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxOperatingChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxOperatingRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingRestartTime.setDescription("The time at which this entity\nlast restarted.")
jnxOperating1MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating1MinLoadAvg.setDescription("The CPU Load Average over the last 1 minutes\nHere it will be shown as percentage value\nZero if unavailable or inapplicable.")
jnxOperating5MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating5MinLoadAvg.setDescription("The CPU Load Average over the last 5 minutes\nHere it will be shown as percentage value\nZero if unavailable or inapplicable.")
jnxOperating15MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating15MinLoadAvg.setDescription("The CPU Load Average over the last 15 minutes\nHere it will be shown as percentage value\nZero if unavailable or inapplicable.")
jnxOperating1MinAvgCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating1MinAvgCPU.setDescription("The CPU utilization in percentage of this\nsubject averaged over last 1 minutes. Zero if\nunavailable or inapplicable.")
jnxOperating5MinAvgCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating5MinAvgCPU.setDescription("The CPU utilization in percentage of this\nsubject averaged over last 5 minutes.  Zero if\nunavailable or inapplicable.")
jnxOperating15MinAvgCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating15MinAvgCPU.setDescription("The CPU utilization in percentage of this\nsubject averaged over last 15 minutes.  Zero\nif unavailable or inapplicable.")
jnxOperatingFRUPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingFRUPower.setDescription("The present power of each FRU. Here it will\nbe shown in terms of voltage. Zero if unavailable\nor inapplicable")
jnxOperatingBufferCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingBufferCP.setDescription("The buffer pool utilization in percentage\nof this subject in control plane.  Zero if \nunavailable or inapplicable.")
jnxOperatingMemoryCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingMemoryCP.setDescription("The Allocated memory size for control plane\nin Megabytes. Zero if unavailable or\n	inapplicable.")
jnxRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14))
if mibBuilder.loadTexts: jnxRedundancyTable.setDescription("A list of redundancy information entries.")
jnxRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1)).setIndexNames((0, "JUNIPER-MIB", "jnxRedundancyContentsIndex"), (0, "JUNIPER-MIB", "jnxRedundancyL1Index"), (0, "JUNIPER-MIB", "jnxRedundancyL2Index"), (0, "JUNIPER-MIB", "jnxRedundancyL3Index"))
if mibBuilder.loadTexts: jnxRedundancyEntry.setDescription("An entry in the redundancy information table.")
jnxRedundancyContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyContentsIndex.setDescription("The associated jnxContentsContainerIndex in the \njnxContentsTable.")
jnxRedundancyL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL1Index.setDescription("The level one index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxRedundancyL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL2Index.setDescription("The level two index associated with this \nsubject.  Zero if unavailable or inapplicable.")
jnxRedundancyL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL3Index.setDescription("The level three index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxRedundancyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyDescr.setDescription("The name or detailed description of this subject.")
jnxRedundancyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,5,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4), ("notApplicable", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyConfig.setDescription("The election priority of redundancy configuration for\nthis subject.  The value 'notApplicable' means no\nspecific instance is configured to be master or\nbackup; whichever component boots up first becomes a\nmaster.")
jnxRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyState.setDescription("The current running state for this subject.")
jnxRedundancySwitchoverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverCount.setDescription("The total number of switchover as perceived by\nthis subject since routing engine is up and running.\nThe switchover is defined as a change in state of\njnxRedundancyState from master to backup or vice\nversa.	Its value is reset when the routing engine\nis reset or rebooted.")
jnxRedundancySwitchoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverTime.setDescription("The value of sysUpTime when the jnxRedundancyState\nof this subject was last switched over from master\nto backup or vice versa.  Zero if unknown or never\nswitched over since the routing engine is up and\nrunning.")
jnxRedundancySwitchoverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("other", 1), ("neverSwitched", 2), ("userSwitched", 3), ("autoSwitched", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverReason.setDescription("The reason of the last switchover for this subject.")
jnxRedundancyKeepaliveHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveHeartbeat.setDescription("The period of sending keepalive messages between\nthe master and backup subsystems.  It is a system-wide\npreset value in seconds used by internal mastership\nresolution.  Zero if unavailable or inapplicable.")
jnxRedundancyKeepaliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveTimeout.setDescription("The timeout period in seconds, by the keepalive \nwatchdog timer, before initiating a switch over to \nthe backup subsystem.  Zero if unavailable or \ninapplicable.")
jnxRedundancyKeepaliveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveElapsed.setDescription("The elapsed time in seconds by this subject since \nreceiving the last keepalive message from the other\nsubsystems.  Zero if unavailable or inapplicable.")
jnxRedundancyKeepaliveLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveLoss.setDescription("The total number of losses on keepalive messages \nbetween the master and backup subsystems as perceived\nby this subject since the system is up and running.  \nZero if unavailable or inapplicable.")
jnxRedundancyChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 15), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxRedundancyChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxFruTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15))
if mibBuilder.loadTexts: jnxFruTable.setDescription("A list of FRU status entries.")
jnxFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1)).setIndexNames((0, "JUNIPER-MIB", "jnxFruContentsIndex"), (0, "JUNIPER-MIB", "jnxFruL1Index"), (0, "JUNIPER-MIB", "jnxFruL2Index"), (0, "JUNIPER-MIB", "jnxFruL3Index"))
if mibBuilder.loadTexts: jnxFruEntry.setDescription("An entry in the FRU status table.")
jnxFruContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruContentsIndex.setDescription("The associated jnxContentsContainerIndex in the \njnxContentsTable.")
jnxFruL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL1Index.setDescription("The level one index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFruL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL2Index.setDescription("The level two index associated with this \nsubject.  Zero if unavailable or inapplicable.")
jnxFruL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL3Index.setDescription("The level three index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruName.setDescription("The name or detailed description of this subject.")
jnxFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(12,6,14,3,5,15,11,20,19,7,4,1,13,2,8,17,9,18,16,10,)).subtype(namedValues=NamedValues(("other", 1), ("processorMezzanineBoardForSIB", 10), ("portInterfaceCard", 11), ("craftInterfacePanel", 12), ("fan", 13), ("lineCardChassis", 14), ("forwardingEngineBoard", 15), ("protectedSystemDomain", 16), ("powerDistributionUnit", 17), ("powerSupplyModule", 18), ("switchFabricBoard", 19), ("clockGenerator", 2), ("adapterCard", 20), ("flexiblePicConcentrator", 3), ("switchingAndForwardingModule", 4), ("controlBoard", 5), ("routingEngine", 6), ("powerEntryModule", 7), ("frontPanelModule", 8), ("switchInterfaceBoard", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruType.setDescription("The FRU type for this subject.")
jnxFruSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruSlot.setDescription("The slot number of this subject.  This is equivalent\nto jnxFruL1Index in meaning.  Zero if unavailable or \ninapplicable.")
jnxFruState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(5,9,4,3,10,1,7,6,8,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("standby", 10), ("empty", 2), ("present", 3), ("ready", 4), ("announceOnline", 5), ("online", 6), ("anounceOffline", 7), ("offline", 8), ("diagnostic", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruState.setDescription("The current state for this subject.")
jnxFruTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruTemp.setDescription("The temperature in Celsius (degrees C) of this \nsubject.  Zero if unavailable or inapplicable.")
jnxFruOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(52,25,54,64,83,23,22,11,76,28,16,13,46,33,84,9,95,20,88,27,29,17,10,34,24,21,90,31,18,82,43,15,80,73,5,96,26,40,86,92,47,44,51,77,69,91,100,72,41,75,37,63,62,6,8,56,98,1,49,87,89,50,78,68,61,66,55,57,2,53,99,71,35,30,3,67,36,7,4,19,60,74,38,12,32,70,97,48,39,79,58,14,59,81,42,65,94,45,93,85,)).subtype(namedValues=NamedValues(("unknown", 1), ("overtempShutdown", 10), ("fruFpcPEMIncompatible", 100), ("masterClockDown", 11), ("singleSfmModeChange", 12), ("packetSchedulingModeChange", 13), ("physicalRemoval", 14), ("unresponsiveRestart", 15), ("sonetClockAbsent", 16), ("rddPowerOff", 17), ("majorErrors", 18), ("minorErrors", 19), ("none", 2), ("lccHardRestart", 20), ("lccVersionMismatch", 21), ("powerCycle", 22), ("reconnect", 23), ("overvoltage", 24), ("pfeVersionMismatch", 25), ("febRddCfgChange", 26), ("fpcMisconfig", 27), ("fruReconnectFail", 28), ("fruFwddReset", 29), ("error", 3), ("fruFebSwitch", 30), ("fruFebOffline", 31), ("fruInServSoftUpgradeError", 32), ("fruChasdPowerRatingExceed", 33), ("fruConfigOffline", 34), ("fruServiceRestartRequest", 35), ("spuResetRequest", 36), ("spuFlowdDown", 37), ("spuSpi4Down", 38), ("spuWatchdogTimeout", 39), ("noPower", 4), ("spuCoreDump", 40), ("fpgaSpi4LinkDown", 41), ("i3Spi4LinkDown", 42), ("cppDisconnect", 43), ("cpuNotBoot", 44), ("spuCoreDumpComplete", 45), ("rstOnSpcSpuFailure", 46), ("softRstOnSpcSpuFailure", 47), ("hwAuthenticationFailure", 48), ("reconnectFpcFail", 49), ("configPowerOff", 5), ("fpcAppFailed", 50), ("fpcKernelCrash", 51), ("spuFlowdDownNoCore", 52), ("spuFlowdCoreDumpIncomplete", 53), ("spuFlowdCoreDumpComplete", 54), ("spuIdpdDownNoCore", 55), ("spuIdpdCoreDumpIncomplete", 56), ("spuIdpdCoreDumpComplete", 57), ("spuCoreDumpIncomplete", 58), ("spuIdpdDown", 59), ("configHoldInReset", 6), ("fruPfeReset", 60), ("fruReconnectNotReady", 61), ("fruSfLinkDown", 62), ("fruFabricDown", 63), ("fruAntiCounterfeitRetry", 64), ("fruFPCChassisClusterDisable", 65), ("spuFipsError", 66), ("fruFPCFabricDownOffline", 67), ("febCfgChange", 68), ("routeLocalizationRoleChange", 69), ("cliCommand", 7), ("fruFpcUnsupported", 70), ("psdVersionMismatch", 71), ("fruResetThresholdExceeded", 72), ("picBounce", 73), ("badVoltage", 74), ("fruFPCReducedFabricBW", 75), ("fruAutoheal", 76), ("builtinPicBounce", 77), ("fruFabricDegraded", 78), ("fruFPCFabricDegradedOffline", 79), ("buttonPress", 8), ("fruUnsupportedSlot", 80), ("fruRouteLocalizationMisCfg", 81), ("fruTypeConfigMismatch", 82), ("lccModeChanged", 83), ("hwFault", 84), ("fruPICOfflineOnEccErrors", 85), ("fruFpcIncompatible", 86), ("fruFpcFanTrayPEMIncompatible", 87), ("fruUnsupportedFirmware", 88), ("openflowConfigChange", 89), ("cliRestart", 9), ("fruFpcScbIncompatible", 90), ("fruReUnresponsive", 91), ("hwError", 92), ("fruErrorManagerReqFPCReset", 93), ("fruIncompatibleWithPEM", 94), ("fruIncompatibleWithSIB", 95), ("sibIncompatibleWithOtherSIB", 96), ("fruPfeErrors", 97), ("vpnLocalizationRoleChange", 98), ("fruFpcFanTrayIncompatible", 99), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruOfflineReason.setDescription("The offline reason of this subject.")
jnxFruLastPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruLastPowerOff.setDescription("The value of sysUpTime when this subject was last \npowered off.  Zero if unavailable or inapplicable.")
jnxFruLastPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruLastPowerOn.setDescription("The value of sysUpTime when this subject was last \npowered on.  Zero if unavailable or inapplicable.")
jnxFruPowerUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruPowerUpTime.setDescription("The time interval in 10-millisecond period\nthat this subject has been up and running\nsince the last power on time.  Zero if \nunavailable or inapplicable.")
jnxFruChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 14), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxFruChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxFruPsdAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruPsdAssignment.setDescription("The PSD assignment of this subject. Zero if unavailable or\nnot applicable.")
jnxBoxKernelMemoryUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxKernelMemoryUsedPercent.setDescription("The percentage of kernel memory used\nof this subject.  0 if unavailable or\ninapplicable.")
jnxBoxSystemDomainType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("rootSystemDomain", 2), ("protectedSystemDomain", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxSystemDomainType.setDescription("The system domain type of this subject, notApplicable will\nbe returned if this feature is not supported.")
jnxBoxPersonality = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxPersonality.setDescription("The personality of the box, indicating which product line it is currently acting as\nfor example, 'MX40'.")

# Augmentions

# Notifications

jnxPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 1)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxPowerSupplyFailure.setDescription("A jnxPowerSupplyFailure trap signifies that\nthe SNMP entity, acting in an agent role, has\ndetected that the specified power supply in the\nchassis has been in the failure (bad DC output) \ncondition.")
jnxFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 2)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxFanFailure.setDescription("A jnxFanFailure trap signifies that the SNMP\nentity, acting in an agent role, has detected\nthat the specified cooling fan or impeller in \nthe chassis has been in the failure (not spinning) \ncondition.")
jnxOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 3)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingTemp"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxOverTemperature.setDescription("A jnxOverTemperature trap signifies that the \nSNMP entity, acting in an agent role, has \ndetected that the specified hardware component\nin the chassis has experienced over temperature\ncondition.")
jnxRedundancySwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 4)).setObjects(*(("JUNIPER-MIB", "jnxRedundancyDescr"), ("JUNIPER-MIB", "jnxRedundancySwitchoverReason"), ("JUNIPER-MIB", "jnxRedundancyContentsIndex"), ("JUNIPER-MIB", "jnxRedundancyL1Index"), ("JUNIPER-MIB", "jnxRedundancyL2Index"), ("JUNIPER-MIB", "jnxRedundancyState"), ("JUNIPER-MIB", "jnxRedundancyConfig"), ("JUNIPER-MIB", "jnxRedundancySwitchoverCount"), ("JUNIPER-MIB", "jnxRedundancyL3Index"), ("JUNIPER-MIB", "jnxRedundancySwitchoverTime"), ) )
if mibBuilder.loadTexts: jnxRedundancySwitchover.setDescription("A jnxRedundancySwitchover trap signifies that \nthe SNMP entity, acting in an agent role, has \ndetected that the specified hardware component\nin the chassis has experienced a redundancy \nswitchover event defined as a change in state\nof jnxRedundancyState from master to backup or\nvice versa.")
jnxFruRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 5)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruRemoval.setDescription("A jnxFruRemoval trap signifies that the SNMP \nentity, acting in an agent role, has detected \nthat the specified FRU (Field Replaceable Unit)\nhas been removed from the chassis.")
jnxFruInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 6)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruInsertion.setDescription("A jnxFruInsertion trap signifies that the SNMP \nentity,	acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has been \ninserted into the chassis.")
jnxFruPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 7)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruLastPowerOn"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruPowerOff.setDescription("A jnxFruPowerOff trap signifies that the SNMP \nentity, acting in an agent role, has detected \nthat the specified FRU (Field Replaceable Unit)\nhas been powered off in the chassis.")
jnxFruPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 8)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruLastPowerOn"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruPowerOn.setDescription("A jnxFruPowerOn trap signifies that the SNMP \nentity,	acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has been \npowered on in the chassis.")
jnxFruFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 9)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruFailed.setDescription("This indicates the specified FRU (Field Replaceable Unit)\nhas failed in the chassis. Most probably this is due toi\nsome hard error such as fru is not powering up or not\nable to load ukernel. In these cases, fru is replaced.")
jnxFruOffline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 10)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruLastPowerOn"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruOffline.setDescription("A jnxFruOffline trap signifies that the SNMP\nentity, acting in an agent role, has detected\nthat the specified FRU (Field Replaceable Unit)\nhas gone offline in the chassis.")
jnxFruOnline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 11)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruOnline.setDescription("A jnxFruOnline trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has\ngone online in the chassis.")
jnxFruCheck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 12)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruCheck.setDescription("A jnxFruCheck trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has\nencountered some operational errors and gone into\ncheck state in the chassis.")
jnxFEBSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 13)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFEBSwitchover.setDescription("A jnxFEBSwitchover trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FEB (Forwarding Engine Board) has\nswitched over.")
jnxHardDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 14)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxHardDiskFailed.setDescription("A jnxHardDiskFailed trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe Disk in the specified Routing Engine has\nencountered some operational errors and gone into\nfailed state in the chassis.")
jnxHardDiskMissing = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 15)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxHardDiskMissing.setDescription("A DiskMissing trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nhard disk in the specified outing Engine is missing\nfrom boot device list.")
jnxBootFromBackup = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 16)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxBootFromBackup.setDescription("A jnxBootFromBackup trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified  routing-engine/member has booted from\nthe back up root partition")
jnxFmLinkErr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 17)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFmLinkErr.setDescription("A LinkErr trap signifies that the SNMP\nentity, acting in an agent role, has detected\nlink errors.")
jnxFmCellDropErr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 18)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFmCellDropErr.setDescription("A CellDropErr trap signifies that the SNMP\nentity, acting in an agent role, has detected \ncell drop errors.")
jnxExtSrcLockLost = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 19)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxExtSrcLockLost.setDescription("A ExtSrcLockLost trap signifies that the SNMP\nentity, acting in an agent role, has detected that\na lock for an external clock source has been lost.")
jnxPlaneOffline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 20)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruLastPowerOn"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxPlaneOffline.setDescription("A jnxPlaneOffline trap signifies that the SNMP\nentity, acting in an agent role, has detected\nthat the specified Fabric plane\nhas gone offline in the chassis.")
jnxPlaneOnline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 21)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxPlaneOnline.setDescription("A jnxPlaneOnline trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified Fabric Plane has\ngone online in the chassis.")
jnxPlaneCheck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 22)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxPlaneCheck.setDescription("A jnxPlaneCheck trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified Fabric plane has\nencountered some operational errors and gone into\ncheck state in the chassis.")
jnxPlaneFault = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 23)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxPlaneFault.setDescription("A jnxPlaneCheck trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified Fabric plane has\nencountered some operational errors and gone into\nfault state in the chassis.")
jnxPowerSupplyInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 24)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxPowerSupplyInputFailure.setDescription("A jnxPowerSupplyInputFailure trap signifies that\nthe SNMP entity, acting in an agent role, has\ndetected that the specified power supply's input feed \nin the chassis has been in the failure condition.")
jnxFmAsicErr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 25)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFmAsicErr.setDescription("A jnxFmAsicErr trap signifies that the SNMP\nentity, acting in an agent role, has detected \nerrors in a switching device within the fabric.")
jnxMountVarOffHardDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 26)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxMountVarOffHardDiskFailed.setDescription("A jnxMountVarOffHardDiskFailed signifies that the SNMP\nentity, acting in an agent role, has detected that\nmount of /var failed off harddisk, emergency /var created.")
jnxPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 1)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxPowerSupplyOK.setDescription("A jnxPowerSupplyOK trap signifies that the \nSNMP entity, acting in an agent role, has\ndetected that the specified power supply in the\nchassis has recovered from the failure (bad DC output) \ncondition.")
jnxFanOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 2)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxFanOK.setDescription("A jnxFanOK trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified cooling fan or impeller in the chassis\nhas recovered from the failure (not spinning) condition.")
jnxTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 3)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingTemp"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxTemperatureOK.setDescription("A jnxTemperatureOK trap signifies that the \nSNMP entity, acting in an agent role, has \ndetected that the specified hardware component\nin the chassis has recovered from over temperature\ncondition.")
jnxFruOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 4)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxFruOK.setDescription("A jnxFruOK trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has\nrecovered from previous operational errors and it\nis in ok state in the chassis.")
jnxExtSrcLockAcquired = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 5)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxExtSrcLockAcquired.setDescription("A ExtSrcLockAcquired trap signifies that the SNMP\nentity, acting in an agent role, has detected that\na lock for an external clock source has been acquired.")
jnxHardDiskOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 6)).setObjects(*(("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruType"), ) )
if mibBuilder.loadTexts: jnxHardDiskOK.setDescription("A jnxHardDiskOK trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe Disk in the specified Routing Engine has\nrecovered from the failure condition.")
jnxPowerSupplyInputOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 7)).setObjects(*(("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsContainerIndex"), ) )
if mibBuilder.loadTexts: jnxPowerSupplyInputOK.setDescription("A jnxPowerSupplyInputOK trap signifies that the \nSNMP entity, acting in an agent role, has detected \nthat the specified power supply's input feed in the\nchassis has recovered from the failure condition.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-MIB", PYSNMP_MODULE_ID=jnxBoxAnatomy)

# Types
mibBuilder.exportSymbols("JUNIPER-MIB", JnxChassisId=JnxChassisId)

# Objects
mibBuilder.exportSymbols("JUNIPER-MIB", jnxBoxAnatomy=jnxBoxAnatomy, jnxBoxClass=jnxBoxClass, jnxBoxDescr=jnxBoxDescr, jnxBoxSerialNo=jnxBoxSerialNo, jnxBoxRevision=jnxBoxRevision, jnxBoxInstalled=jnxBoxInstalled, jnxContainersTable=jnxContainersTable, jnxContainersEntry=jnxContainersEntry, jnxContainersIndex=jnxContainersIndex, jnxContainersView=jnxContainersView, jnxContainersLevel=jnxContainersLevel, jnxContainersWithin=jnxContainersWithin, jnxContainersType=jnxContainersType, jnxContainersDescr=jnxContainersDescr, jnxContainersCount=jnxContainersCount, jnxContentsLastChange=jnxContentsLastChange, jnxContentsTable=jnxContentsTable, jnxContentsEntry=jnxContentsEntry, jnxContentsContainerIndex=jnxContentsContainerIndex, jnxContentsL1Index=jnxContentsL1Index, jnxContentsL2Index=jnxContentsL2Index, jnxContentsL3Index=jnxContentsL3Index, jnxContentsType=jnxContentsType, jnxContentsDescr=jnxContentsDescr, jnxContentsSerialNo=jnxContentsSerialNo, jnxContentsRevision=jnxContentsRevision, jnxContentsInstalled=jnxContentsInstalled, jnxContentsPartNo=jnxContentsPartNo, jnxContentsChassisId=jnxContentsChassisId, jnxContentsChassisDescr=jnxContentsChassisDescr, jnxContentsChassisCleiCode=jnxContentsChassisCleiCode, jnxContentsModel=jnxContentsModel, jnxLEDLastChange=jnxLEDLastChange, jnxLEDTable=jnxLEDTable, jnxLEDEntry=jnxLEDEntry, jnxLEDAssociateTable=jnxLEDAssociateTable, jnxLEDAssociateIndex=jnxLEDAssociateIndex, jnxLEDL1Index=jnxLEDL1Index, jnxLEDL2Index=jnxLEDL2Index, jnxLEDL3Index=jnxLEDL3Index, jnxLEDOriginator=jnxLEDOriginator, jnxLEDDescr=jnxLEDDescr, jnxLEDState=jnxLEDState, jnxLEDStateOrdered=jnxLEDStateOrdered, jnxFilledLastChange=jnxFilledLastChange, jnxFilledTable=jnxFilledTable, jnxFilledEntry=jnxFilledEntry, jnxFilledContainerIndex=jnxFilledContainerIndex, jnxFilledL1Index=jnxFilledL1Index, jnxFilledL2Index=jnxFilledL2Index, jnxFilledL3Index=jnxFilledL3Index, jnxFilledDescr=jnxFilledDescr, jnxFilledState=jnxFilledState, jnxFilledChassisId=jnxFilledChassisId, jnxFilledChassisDescr=jnxFilledChassisDescr, jnxOperatingTable=jnxOperatingTable, jnxOperatingEntry=jnxOperatingEntry, jnxOperatingContentsIndex=jnxOperatingContentsIndex, jnxOperatingL1Index=jnxOperatingL1Index, jnxOperatingL2Index=jnxOperatingL2Index, jnxOperatingL3Index=jnxOperatingL3Index, jnxOperatingDescr=jnxOperatingDescr, jnxOperatingState=jnxOperatingState, jnxOperatingTemp=jnxOperatingTemp, jnxOperatingCPU=jnxOperatingCPU, jnxOperatingISR=jnxOperatingISR, jnxOperatingDRAMSize=jnxOperatingDRAMSize, jnxOperatingBuffer=jnxOperatingBuffer, jnxOperatingHeap=jnxOperatingHeap, jnxOperatingUpTime=jnxOperatingUpTime, jnxOperatingLastRestart=jnxOperatingLastRestart, jnxOperatingMemory=jnxOperatingMemory, jnxOperatingStateOrdered=jnxOperatingStateOrdered, jnxOperatingChassisId=jnxOperatingChassisId, jnxOperatingChassisDescr=jnxOperatingChassisDescr, jnxOperatingRestartTime=jnxOperatingRestartTime, jnxOperating1MinLoadAvg=jnxOperating1MinLoadAvg, jnxOperating5MinLoadAvg=jnxOperating5MinLoadAvg, jnxOperating15MinLoadAvg=jnxOperating15MinLoadAvg, jnxOperating1MinAvgCPU=jnxOperating1MinAvgCPU, jnxOperating5MinAvgCPU=jnxOperating5MinAvgCPU, jnxOperating15MinAvgCPU=jnxOperating15MinAvgCPU, jnxOperatingFRUPower=jnxOperatingFRUPower, jnxOperatingBufferCP=jnxOperatingBufferCP, jnxOperatingMemoryCP=jnxOperatingMemoryCP, jnxRedundancyTable=jnxRedundancyTable, jnxRedundancyEntry=jnxRedundancyEntry, jnxRedundancyContentsIndex=jnxRedundancyContentsIndex, jnxRedundancyL1Index=jnxRedundancyL1Index, jnxRedundancyL2Index=jnxRedundancyL2Index, jnxRedundancyL3Index=jnxRedundancyL3Index, jnxRedundancyDescr=jnxRedundancyDescr, jnxRedundancyConfig=jnxRedundancyConfig, jnxRedundancyState=jnxRedundancyState, jnxRedundancySwitchoverCount=jnxRedundancySwitchoverCount, jnxRedundancySwitchoverTime=jnxRedundancySwitchoverTime, jnxRedundancySwitchoverReason=jnxRedundancySwitchoverReason, jnxRedundancyKeepaliveHeartbeat=jnxRedundancyKeepaliveHeartbeat, jnxRedundancyKeepaliveTimeout=jnxRedundancyKeepaliveTimeout, jnxRedundancyKeepaliveElapsed=jnxRedundancyKeepaliveElapsed, jnxRedundancyKeepaliveLoss=jnxRedundancyKeepaliveLoss, jnxRedundancyChassisId=jnxRedundancyChassisId, jnxRedundancyChassisDescr=jnxRedundancyChassisDescr, jnxFruTable=jnxFruTable, jnxFruEntry=jnxFruEntry, jnxFruContentsIndex=jnxFruContentsIndex, jnxFruL1Index=jnxFruL1Index, jnxFruL2Index=jnxFruL2Index, jnxFruL3Index=jnxFruL3Index, jnxFruName=jnxFruName, jnxFruType=jnxFruType, jnxFruSlot=jnxFruSlot, jnxFruState=jnxFruState, jnxFruTemp=jnxFruTemp, jnxFruOfflineReason=jnxFruOfflineReason, jnxFruLastPowerOff=jnxFruLastPowerOff, jnxFruLastPowerOn=jnxFruLastPowerOn, jnxFruPowerUpTime=jnxFruPowerUpTime, jnxFruChassisId=jnxFruChassisId, jnxFruChassisDescr=jnxFruChassisDescr, jnxFruPsdAssignment=jnxFruPsdAssignment, jnxBoxKernelMemoryUsedPercent=jnxBoxKernelMemoryUsedPercent, jnxBoxSystemDomainType=jnxBoxSystemDomainType, jnxBoxPersonality=jnxBoxPersonality)

# Notifications
mibBuilder.exportSymbols("JUNIPER-MIB", jnxPowerSupplyFailure=jnxPowerSupplyFailure, jnxFanFailure=jnxFanFailure, jnxOverTemperature=jnxOverTemperature, jnxRedundancySwitchover=jnxRedundancySwitchover, jnxFruRemoval=jnxFruRemoval, jnxFruInsertion=jnxFruInsertion, jnxFruPowerOff=jnxFruPowerOff, jnxFruPowerOn=jnxFruPowerOn, jnxFruFailed=jnxFruFailed, jnxFruOffline=jnxFruOffline, jnxFruOnline=jnxFruOnline, jnxFruCheck=jnxFruCheck, jnxFEBSwitchover=jnxFEBSwitchover, jnxHardDiskFailed=jnxHardDiskFailed, jnxHardDiskMissing=jnxHardDiskMissing, jnxBootFromBackup=jnxBootFromBackup, jnxFmLinkErr=jnxFmLinkErr, jnxFmCellDropErr=jnxFmCellDropErr, jnxExtSrcLockLost=jnxExtSrcLockLost, jnxPlaneOffline=jnxPlaneOffline, jnxPlaneOnline=jnxPlaneOnline, jnxPlaneCheck=jnxPlaneCheck, jnxPlaneFault=jnxPlaneFault, jnxPowerSupplyInputFailure=jnxPowerSupplyInputFailure, jnxFmAsicErr=jnxFmAsicErr, jnxMountVarOffHardDiskFailed=jnxMountVarOffHardDiskFailed, jnxPowerSupplyOK=jnxPowerSupplyOK, jnxFanOK=jnxFanOK, jnxTemperatureOK=jnxTemperatureOK, jnxFruOK=jnxFruOK, jnxExtSrcLockAcquired=jnxExtSrcLockAcquired, jnxHardDiskOK=jnxHardDiskOK, jnxPowerSupplyInputOK=jnxPowerSupplyInputOK)

