# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  Buildnis
# File:     commandline.py
# Date:     20.Feb.2021
###############################################################################

from __future__ import annotations

import argparse
import logging
import pathlib
import sys

from buildnis.modules import EXT_ERR_LD_FILE, VERSION
from buildnis.modules.config import DEFAULT_CONFIG_FILE
from buildnis.modules.helpers.commandline_arguments import CommandlineArguments


################################################################################
def parseCommandLine() -> CommandlineArguments:
    """Parses the command line arguments.

    Parses the command line arguments, exits the program if an illegal argument
    has been given.

    Parameters:
        arguments: the command line arguments passed to the program

    Returns:
       An `CommandlineArguments` instance containing the command line arguments as
       attributes.
    """
    description = """Buildnis is a build system used to build software.

Examples:

    To build using the default config file \"{default_config}\":
        python -m buildnis

        This is the same as:
        python -m buildnis {default_config}

    To load the project config file in the directory 'local_test':
        python -m buildnis local_test/project_config.json

    To configure the build system:
        python -m buildnis --configure

    To build the default targets:
        python -m buildnis --build

    To build the targets named 'executable' and 'library':
        python -m buildnis --build executable library

        This is the same as
        python -m buildnis --build executable --build library

    To install the default targets:
        python -m buildnis --install

    To install the targets named 'executable' and 'library':
        python -m buildnis --install executable library

        This is the same as
        python -m buildnis --install executable --install library

    To clean up, delete all files generated by the build:
        python -m buildnis --clean

    To delete the generated configuration too:
        python -m buildnis --distclean

""".format(
        default_config=DEFAULT_CONFIG_FILE
    )

    cmd_line_parser = argparse.ArgumentParser(
        prog="python -m buildnis",
        formatter_class=argparse.RawTextHelpFormatter,
        description=description,
        epilog="See website https://github.com/Release-Candidate/Buildnis for a detailed description.",
    )

    cmd_line_parser.add_argument(
        "--version",
        action="version",
        version="Buildnis {version}".format(version=VERSION),
    )

    cmd_line_parser.add_argument(
        "project_config_file",
        metavar="PROJECT_CONFIG_FILE",
        nargs="?",
        help='path to the project config JSON file to use for the build. If no file is given, the default: "{default_config}" is used'.format(
            default_config=DEFAULT_CONFIG_FILE
        ),
        default=DEFAULT_CONFIG_FILE,
    )

    log_group = cmd_line_parser.add_argument_group(
        "Logging options", "Options that are about logging"
    )

    log_group.add_argument(
        "--log-file",
        dest="log_file",
        default="",
        metavar="LOG_FILE",
        help="If this is set, the program writes verbose messages to LOG_FILE, does not change output to the console. Default is none.",
    )

    log_exc_subgroup = log_group.add_mutually_exclusive_group()

    log_exc_subgroup.add_argument(
        "-q",
        "--quiet",
        default="False",
        action="store_true",
        dest="is_quiet",
        help="Run quiet, only output error messages.",
    )
    log_exc_subgroup.add_argument(
        "-v",
        "--verbose",
        default=0,
        action="count",
        dest="verbosity",
        help='Increase verbosity of the program, get more messages. Can be used more than once, like "-vv"',
    )
    log_exc_subgroup.add_argument(
        "--debug",
        default=False,
        action="store_true",
        dest="debug",
        help='Set logging level to the highest available, the same as "-vv"',
    )

    path_group = cmd_line_parser.add_argument_group(
        "Paths", "Sets paths to read from or write to"
    )

    path_group.add_argument(
        "--generated-conf-dir",
        metavar="DIR_PATH",
        dest="conf_dir",
        help="The directory in which the autogenerated configuration files will be stored. Default: the same directory the project config PROJECT_CONFIG_FILE is in.",
    )

    path_group.add_argument(
        "--conf-script-dir",
        metavar="DIR_PATH",
        dest="conf_scripts_dir",
        help="The directory in which additional build tool configure scripts are shearched for. Default: none, use only included ones.",
    )

    phase_group = cmd_line_parser.add_argument_group(
        "Phases of the build", "Only run one of the phases of a full build."
    )

    phase_group.add_argument(
        "--configure",
        help="Configure the project.",
        default=False,
        action="store_true",
        dest="do_configure",
    )
    phase_group.add_argument(
        "--build",
        help="Build the project. If a list of targets is given, these targets are build. The default is to build the default target.",
        nargs="*",
        dest="build_targets",
        metavar="TARGET",
        action="append",
    )
    phase_group.add_argument(
        "--install",
        help="Install the given targets. If no target is given, installs the project's default target.",
        dest="install_targets",
        metavar="TARGET",
        nargs="*",
        action="append",
    )
    phase_group.add_argument(
        "--clean",
        help="Clean the project. Deletes all files and directories generated during the build.",
        default=False,
        action="store_true",
        dest="do_clean",
    )
    phase_group.add_argument(
        "--distclean",
        help="Start from scratch, delete generated configuration. Deletes all files and directories generated during the build and the configuration.",
        default=False,
        action="store_true",
        dest="do_distclean",
    )

    cmdline_args = cmd_line_parser.parse_args()

    if cmdline_args.verbosity == 0:
        cmdline_args.log_level = logging.WARNING
    elif cmdline_args.verbosity == 1:
        cmdline_args.log_level = logging.INFO
    else:
        cmdline_args.log_level = logging.DEBUG

    # attention: cmdline_args.verbosity == 0 per default, that overwrites log_level!
    if cmdline_args.is_quiet is True:
        cmdline_args.log_level = logging.ERROR

    if cmdline_args.debug is True:
        cmdline_args.log_level = logging.DEBUG

    return checkCmdLineArgs(cmd_line_parser, cmdline_args)


################################################################################
def checkCmdLineArgs(
    cmd_line_parser: argparse.ArgumentParser, cmdline_args: object
) -> CommandlineArguments:
    """Sets all needed attributes to a default value if they aren't present.

    Args:
        cmd_line_parser (argparse.ArgumentParser): the `argparse.ArgumentParser`
                                                    instance to use
        cmdline_args (object): the object returned by `cmd_line_parser.parse_args`

    Returns:
        CommandlineArguments: the checked and filled `CommandlineArguments` instance
    """
    ret_val = CommandlineArguments(cmdline_args)

    if ret_val.build_targets is None:
        ret_val.do_build = False
        ret_val.build_targets = []
    else:
        ret_val.do_build = True

    if ret_val.install_targets is None:
        ret_val.do_install = False
        ret_val.install_targets = []
    else:
        ret_val.do_install = True

    if ret_val.conf_dir is None:
        ret_val.conf_dir = ""

    if ret_val.conf_scripts_dir is None:
        ret_val.conf_scripts_dir = ""

    if (
        ret_val.do_configure is False
        and ret_val.do_build is False
        and ret_val.do_install is False
    ):
        ret_val.do_check_what_to_do = True

    if not pathlib.Path(ret_val.project_config_file).is_file():
        cmd_line_parser.print_help(file=sys.stderr)
        cmd_line_parser.exit(
            status=EXT_ERR_LD_FILE,
            message='ERROR: configuration file "{config}" not found or is not a file!'.format(
                config=ret_val.project_config_file
            ),
        )

    return ret_val
