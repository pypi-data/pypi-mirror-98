# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  Buildnis
# File:     commandline_arguments.py
# Date:     09.Mar.2021
###############################################################################

from __future__ import annotations

import logging
import pathlib
import pprint
import sys
from typing import List

from buildnis.modules.config import DEFAULT_CONFIG_FILE, FilePath
from buildnis.modules.helpers.files import deleteDirs, deleteFiles
from buildnis.modules.helpers.logging import getProgramLogger


class CommandlineArguments:
    """Holds information about the command line arguments passed to the program.

    Its attributes are the possible command line arguments of the program.

    Attributes:
        project_config_file (FilePath): the path to the project config file to
                                        use
        conf_dir (FilePath): the path to the directory to write generated
                                configurations to
        conf_scripts_dir (FilePath): the path to the directory to search for additional
                                    build tool configure scripts.
        log_file (FilePath): the path to the log file to write.
        log_level (int): the minimum log level
        do_configure (bool): run only  the configure phase of the build
        do_build (bool): run only the build phase of the build
        build_targets (List[str]): list of build targets that should be build
        do_install (bool): only run the install phase of the build
        install_targets (List[str]): the list of targets to install
        do_clean (bool): delete all files generated by the build phase
        do_distclean (bool): delete all generated files (build and configuration)
        do_check_what_to_do (bool): do everything that has not been done yet.
    """

    ############################################################################
    def __init__(self, src: object) -> None:
        """Initializes all attributes to a sane default value.

        Args:
            src (object): the object to use to fill the values of the command
                            line argument instance
        """
        self.initAttribs(src)

        self.do_check_what_to_do: bool = False

        self.checkTargetArgs(name="build_targets")

        self.checkTargetArgs(name="install_targets")

    ############################################################################
    def initAttribs(self, src: object) -> None:
        """Initializes all attributes to default values if not set from the
        command-line, that means, that attribute isn't an attribute of `src`.

        Args:
            src (object): The object holding the parsed command-line arguments.
        """
        self.setConfigs(src)
        try:
            self.log_file: FilePath = src.log_file
        except AttributeError:
            self.log_file: FilePath = ""
        try:
            self.log_level: int = src.log_level
        except AttributeError:
            self.log_level: int = logging.INFO

        self.setStages(src)

        try:
            self.build_targets: List(str) = src.build_targets
        except AttributeError:
            self.build_targets: List(str) = None
        try:
            self.install_targets: List(str) = src.install_targets
        except AttributeError:
            self.install_targets: List(str) = None

    ############################################################################
    def setConfigs(self, src: object) -> None:
        """Set configuration related arguments.

        Args:
            src (object): The original object holding the command line arguments.
        """
        try:
            self.project_config_file: FilePath = src.project_config_file
        except AttributeError:
            self.project_config_file: FilePath = DEFAULT_CONFIG_FILE
        try:
            self.conf_dir: FilePath = src.conf_dir
        except AttributeError:
            self.conf_dir: FilePath = ""
        try:
            self.conf_scripts_dir: FilePath = src.conf_scripts_dir
        except AttributeError:
            self.conf_scripts_dir: FilePath = ""

    ############################################################################
    def setStages(self, src: object) -> None:
        """Set arguments for the stages of the build.

        Args:
            src (object): The original object holding the command line arguments.
        """
        try:
            self.do_configure: bool = src.do_configure
        except AttributeError:
            self.do_configure: bool = False
        try:
            self.do_build: bool = src.do_build
        except AttributeError:
            self.do_build: bool = False
        try:
            self.do_install: bool = src.do_install
        except AttributeError:
            self.do_install: bool = False
        self.setCleanStages(src)

    ############################################################################
    def setCleanStages(self, src: object) -> None:
        """Set arguments for the clean stages of the build.

        Args:
            src (object): The original object holding the command line arguments.
        """
        try:
            self.do_clean: bool = src.do_clean
        except AttributeError:
            self.do_clean: bool = False
        try:
            self.do_distclean: bool = src.do_distclean
            if self.do_distclean is True:
                self.do_clean = True
        except AttributeError:
            self.do_distclean: bool = False

    ############################################################################
    def checkTargetArgs(self, name: str) -> None:
        """Checks the list stored in the attribute with the given name and
        flattens it to a single list if it contains another list.

        Args:
            name (str): the name of the attribute to check the stored list of
        """
        tmp_targets = []
        if getattr(self, name) is not None and getattr(self, name) != []:
            self.flattenList(name, tmp_targets)

    ############################################################################
    def flattenList(self, name: str, tmp_targets: List):
        """Flattens the given list to a single list.

        Args:
            name (str): The attribute's name, the list to flatten.
            tmp_targets (List): Where to sore the flattened list.
        """
        for target in getattr(self, name):
            if target != []:
                self.doAppendTarget(tmp_targets, target)
        setattr(self, name, tmp_targets)

    ############################################################################
    @staticmethod
    def doAppendTarget(tmp_targets: List, target: object) -> None:
        """Appends a target to the list of targets.

        Args:
            tmp_targets (List): the list of targets to append
            target (object): the target to check if it is a list or a single element.
        """
        if isinstance(target, List):
            for sub_target in target:
                tmp_targets.append(sub_target)
        else:
            tmp_targets.append(target)


################################################################################
def setupLogger(commandline_args: CommandlineArguments) -> logging.Logger:
    """Sets up the logger.

    Args:
        commandline_args (CommandlineArguments): The object holding the command line
                                                arguments.

    Returns:
        logging.Logger: The commandline object instance to use.
    """
    logger = getProgramLogger(commandline_args.log_level, commandline_args.log_file)

    pretty_args = pprint.pformat(commandline_args.__dict__, indent=4, sort_dicts=False)
    logger.debug('Commandline arguments: "{args}"'.format(args=pretty_args))

    logger.info(
        'Setting log level to "{lvl}"'.format(
            lvl=logging.getLevelName(commandline_args.log_level)
        )
    )

    logger.warning(
        'Using project config "{config}"'.format(
            config=commandline_args.project_config_file
        )
    )

    return logger


################################################################################
def deleteLogfiles(commandline_args: CommandlineArguments) -> None:
    """Deletes the log file, if one has been configured from the command-line.

    Args:
        commandline_args (CommandlineArguments): Instance holding the command-line
                                arguments, to check, if a log file has been used.
    """
    try:
        if commandline_args.log_file != "" and commandline_args.log_file is not None:
            print(
                'distclean: trying to delete logfile "{name}"'.format(
                    name=commandline_args.log_file
                )
            )
            pathlib.Path(commandline_args.log_file).unlink(missing_ok=True)
    except Exception as excp:
        print(
            'ERROR: distclean: error "{error}" trying to delete log file "{name}"'.format(
                error=excp, name=commandline_args.log_file
            ),
            file=sys.sys.stderr,
        )


################################################################################
def deleteConfigs(
    commandline_args: CommandlineArguments,
    logger: logging.Logger,
    list_of_generated_files: List[FilePath],
    list_of_generated_dirs: List[FilePath],
):
    """Deletes all configuration files and directories.

    Args:
        commandline_args (object): Command line argument object instance
        logger (logging.Logger): The logger to use and stop
        list_of_generated_files (List[FilePath]): The list of files to delete
        list_of_generated_dirs (List[FilePath]): The list of directories to delete.
                            Attention: each directory must be empty!
    """
    if commandline_args.do_distclean is True:
        try:
            deleteFiles(logger, list_of_generated_files)
            deleteDirs(logger, list_of_generated_dirs)
        except Exception as excp:
            logger.error(
                'error "{error}" trying to delete a file ro directory'.format(
                    error=excp
                )
            )


################################################################################
def doDistClean(
    commandline_args: CommandlineArguments,
    logger: logging.Logger,
    list_of_generated_files: List[FilePath],
    list_of_generated_dirs: List[FilePath],
) -> None:
    """Helper: if argument `distclean` is set, delete all generated files.

    WARNING: Shuts down the logging mechanism, no more logging after this function!

    Args:
        commandline_args (object): Command line argument object instance
        logger (logging.Logger): The logger to use and stop
        list_of_generated_files (List[FilePath]): The list of files to delete
        list_of_generated_dirs (List[FilePath]): The list of directories to delete.
                            Attention: each directory must be empty!
    """
    deleteConfigs(
        commandline_args, logger, list_of_generated_files, list_of_generated_dirs
    )

    logging.shutdown()

    if commandline_args.do_clean:
        deleteLogfiles(commandline_args)
