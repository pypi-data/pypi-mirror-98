# coding: utf-8

"""
    SparkWorks Core (CaRGO) API

    Access Interface for the SparkWorks IoT Data Analytics Platform  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: info@sparkworks.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FoodDiaryDataCriteriaDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_uuid': 'str',
        '_from': 'int',
        'to': 'int'
    }

    attribute_map = {
        'resource_uuid': 'resourceUuid',
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, resource_uuid=None, _from=None, to=None):  # noqa: E501
        """FoodDiaryDataCriteriaDTO - a model defined in Swagger"""  # noqa: E501
        self._resource_uuid = None
        self.__from = None
        self._to = None
        self.discriminator = None
        if resource_uuid is not None:
            self.resource_uuid = resource_uuid
        self._from = _from
        self.to = to

    @property
    def resource_uuid(self):
        """Gets the resource_uuid of this FoodDiaryDataCriteriaDTO.  # noqa: E501

        The UUID of the food diary Resource  # noqa: E501

        :return: The resource_uuid of this FoodDiaryDataCriteriaDTO.  # noqa: E501
        :rtype: str
        """
        return self._resource_uuid

    @resource_uuid.setter
    def resource_uuid(self, resource_uuid):
        """Sets the resource_uuid of this FoodDiaryDataCriteriaDTO.

        The UUID of the food diary Resource  # noqa: E501

        :param resource_uuid: The resource_uuid of this FoodDiaryDataCriteriaDTO.  # noqa: E501
        :type: str
        """

        self._resource_uuid = resource_uuid

    @property
    def _from(self):
        """Gets the _from of this FoodDiaryDataCriteriaDTO.  # noqa: E501

        The UNIX timestamp of the start date for filtering  # noqa: E501

        :return: The _from of this FoodDiaryDataCriteriaDTO.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this FoodDiaryDataCriteriaDTO.

        The UNIX timestamp of the start date for filtering  # noqa: E501

        :param _from: The _from of this FoodDiaryDataCriteriaDTO.  # noqa: E501
        :type: int
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this FoodDiaryDataCriteriaDTO.  # noqa: E501

        The UNIX timestamp of the end date for filtering  # noqa: E501

        :return: The to of this FoodDiaryDataCriteriaDTO.  # noqa: E501
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this FoodDiaryDataCriteriaDTO.

        The UNIX timestamp of the end date for filtering  # noqa: E501

        :param to: The to of this FoodDiaryDataCriteriaDTO.  # noqa: E501
        :type: int
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FoodDiaryDataCriteriaDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FoodDiaryDataCriteriaDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
