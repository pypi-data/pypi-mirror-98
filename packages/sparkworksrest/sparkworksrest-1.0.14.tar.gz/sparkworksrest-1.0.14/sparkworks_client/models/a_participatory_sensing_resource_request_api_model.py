# coding: utf-8

"""
    SparkWorks Core API

    Management Service for the SparkWorks Processing Engine  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: info@sparkworks.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AParticipatorySensingResourceRequestAPIModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_uuid': 'str',
        'name': 'str',
        'observes': 'str',
        'uom': 'str'
    }

    attribute_map = {
        'group_uuid': 'groupUuid',
        'name': 'name',
        'observes': 'observes',
        'uom': 'uom'
    }

    def __init__(self, group_uuid=None, name=None, observes=None, uom=None):  # noqa: E501
        """AParticipatorySensingResourceRequestAPIModel - a model defined in Swagger"""  # noqa: E501

        self._group_uuid = None
        self._name = None
        self._observes = None
        self._uom = None
        self.discriminator = None

        if group_uuid is not None:
            self.group_uuid = group_uuid
        self.name = name
        self.observes = observes
        self.uom = uom

    @property
    def group_uuid(self):
        """Gets the group_uuid of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501

        The UUID of the Group of the Resource  # noqa: E501

        :return: The group_uuid of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._group_uuid

    @group_uuid.setter
    def group_uuid(self, group_uuid):
        """Sets the group_uuid of this AParticipatorySensingResourceRequestAPIModel.

        The UUID of the Group of the Resource  # noqa: E501

        :param group_uuid: The group_uuid of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :type: str
        """

        self._group_uuid = group_uuid

    @property
    def name(self):
        """Gets the name of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501

        The Resource name  # noqa: E501

        :return: The name of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AParticipatorySensingResourceRequestAPIModel.

        The Resource name  # noqa: E501

        :param name: The name of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def observes(self):
        """Gets the observes of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501

        The name of a Spark Works platform property assigned to the Resource to describe the observed property  # noqa: E501

        :return: The observes of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._observes

    @observes.setter
    def observes(self, observes):
        """Sets the observes of this AParticipatorySensingResourceRequestAPIModel.

        The name of a Spark Works platform property assigned to the Resource to describe the observed property  # noqa: E501

        :param observes: The observes of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :type: str
        """
        if observes is None:
            raise ValueError("Invalid value for `observes`, must not be `None`")  # noqa: E501

        self._observes = observes

    @property
    def uom(self):
        """Gets the uom of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501

        The Unit of Measurement of the Resource  # noqa: E501

        :return: The uom of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this AParticipatorySensingResourceRequestAPIModel.

        The Unit of Measurement of the Resource  # noqa: E501

        :param uom: The uom of this AParticipatorySensingResourceRequestAPIModel.  # noqa: E501
        :type: str
        """
        if uom is None:
            raise ValueError("Invalid value for `uom`, must not be `None`")  # noqa: E501

        self._uom = uom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AParticipatorySensingResourceRequestAPIModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AParticipatorySensingResourceRequestAPIModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
