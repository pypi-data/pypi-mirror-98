# coding: utf-8

"""
    SparkWorks Core (CaRGO) API

    Access Interface for the SparkWorks IoT Data Analytics Platform  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: info@sparkworks.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SleepDataResponseDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user': 'str',
        'local_time': 'datetime',
        'start_time': 'datetime',
        'date_of_sleep': 'str',
        'data': 'SleepDataDTO'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'local_time': 'localTime',
        'start_time': 'startTime',
        'date_of_sleep': 'dateOfSleep',
        'data': 'data'
    }

    def __init__(self, id=None, user=None, local_time=None, start_time=None, date_of_sleep=None, data=None):  # noqa: E501
        """SleepDataResponseDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user = None
        self._local_time = None
        self._start_time = None
        self._date_of_sleep = None
        self._data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user is not None:
            self.user = user
        if local_time is not None:
            self.local_time = local_time
        if start_time is not None:
            self.start_time = start_time
        if date_of_sleep is not None:
            self.date_of_sleep = date_of_sleep
        if data is not None:
            self.data = data

    @property
    def id(self):
        """Gets the id of this SleepDataResponseDTO.  # noqa: E501


        :return: The id of this SleepDataResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SleepDataResponseDTO.


        :param id: The id of this SleepDataResponseDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this SleepDataResponseDTO.  # noqa: E501


        :return: The user of this SleepDataResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SleepDataResponseDTO.


        :param user: The user of this SleepDataResponseDTO.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def local_time(self):
        """Gets the local_time of this SleepDataResponseDTO.  # noqa: E501


        :return: The local_time of this SleepDataResponseDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """Sets the local_time of this SleepDataResponseDTO.


        :param local_time: The local_time of this SleepDataResponseDTO.  # noqa: E501
        :type: datetime
        """

        self._local_time = local_time

    @property
    def start_time(self):
        """Gets the start_time of this SleepDataResponseDTO.  # noqa: E501


        :return: The start_time of this SleepDataResponseDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SleepDataResponseDTO.


        :param start_time: The start_time of this SleepDataResponseDTO.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def date_of_sleep(self):
        """Gets the date_of_sleep of this SleepDataResponseDTO.  # noqa: E501


        :return: The date_of_sleep of this SleepDataResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._date_of_sleep

    @date_of_sleep.setter
    def date_of_sleep(self, date_of_sleep):
        """Sets the date_of_sleep of this SleepDataResponseDTO.


        :param date_of_sleep: The date_of_sleep of this SleepDataResponseDTO.  # noqa: E501
        :type: str
        """

        self._date_of_sleep = date_of_sleep

    @property
    def data(self):
        """Gets the data of this SleepDataResponseDTO.  # noqa: E501


        :return: The data of this SleepDataResponseDTO.  # noqa: E501
        :rtype: SleepDataDTO
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SleepDataResponseDTO.


        :param data: The data of this SleepDataResponseDTO.  # noqa: E501
        :type: SleepDataDTO
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SleepDataResponseDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SleepDataResponseDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
