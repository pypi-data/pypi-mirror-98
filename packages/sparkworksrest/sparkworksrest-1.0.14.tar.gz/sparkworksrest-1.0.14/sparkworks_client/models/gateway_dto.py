# coding: utf-8

"""
    SparkWorks Core API

    Management Service for the SparkWorks Processing Engine  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: info@sparkworks.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GatewayDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_date': 'datetime',
        'deleted': 'bool',
        'group_uuid': 'str',
        'last_modified_by': 'str',
        'last_modified_date': 'datetime',
        'system_name': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'deleted': 'deleted',
        'group_uuid': 'groupUuid',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate',
        'system_name': 'systemName',
        'uuid': 'uuid'
    }

    def __init__(self, created_by=None, created_date=None, deleted=None, group_uuid=None, last_modified_by=None, last_modified_date=None, system_name=None, uuid=None):  # noqa: E501
        """GatewayDTO - a model defined in Swagger"""  # noqa: E501

        self._created_by = None
        self._created_date = None
        self._deleted = None
        self._group_uuid = None
        self._last_modified_by = None
        self._last_modified_date = None
        self._system_name = None
        self._uuid = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if deleted is not None:
            self.deleted = deleted
        if group_uuid is not None:
            self.group_uuid = group_uuid
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if system_name is not None:
            self.system_name = system_name
        if uuid is not None:
            self.uuid = uuid

    @property
    def created_by(self):
        """Gets the created_by of this GatewayDTO.  # noqa: E501


        :return: The created_by of this GatewayDTO.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GatewayDTO.


        :param created_by: The created_by of this GatewayDTO.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this GatewayDTO.  # noqa: E501


        :return: The created_date of this GatewayDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GatewayDTO.


        :param created_date: The created_date of this GatewayDTO.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def deleted(self):
        """Gets the deleted of this GatewayDTO.  # noqa: E501


        :return: The deleted of this GatewayDTO.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this GatewayDTO.


        :param deleted: The deleted of this GatewayDTO.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def group_uuid(self):
        """Gets the group_uuid of this GatewayDTO.  # noqa: E501


        :return: The group_uuid of this GatewayDTO.  # noqa: E501
        :rtype: str
        """
        return self._group_uuid

    @group_uuid.setter
    def group_uuid(self, group_uuid):
        """Sets the group_uuid of this GatewayDTO.


        :param group_uuid: The group_uuid of this GatewayDTO.  # noqa: E501
        :type: str
        """

        self._group_uuid = group_uuid

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this GatewayDTO.  # noqa: E501


        :return: The last_modified_by of this GatewayDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this GatewayDTO.


        :param last_modified_by: The last_modified_by of this GatewayDTO.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this GatewayDTO.  # noqa: E501


        :return: The last_modified_date of this GatewayDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this GatewayDTO.


        :param last_modified_date: The last_modified_date of this GatewayDTO.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def system_name(self):
        """Gets the system_name of this GatewayDTO.  # noqa: E501


        :return: The system_name of this GatewayDTO.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this GatewayDTO.


        :param system_name: The system_name of this GatewayDTO.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def uuid(self):
        """Gets the uuid of this GatewayDTO.  # noqa: E501


        :return: The uuid of this GatewayDTO.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this GatewayDTO.


        :param uuid: The uuid of this GatewayDTO.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GatewayDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
