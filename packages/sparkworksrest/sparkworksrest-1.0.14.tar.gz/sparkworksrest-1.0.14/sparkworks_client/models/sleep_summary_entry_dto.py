# coding: utf-8

"""
    SparkWorks Core (CaRGO) API

    Access Interface for the SparkWorks IoT Data Analytics Platform  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: info@sparkworks.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SleepSummaryEntryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'minutes': 'int',
        'thirty_day_avg_minutes': 'int'
    }

    attribute_map = {
        'count': 'count',
        'minutes': 'minutes',
        'thirty_day_avg_minutes': 'thirtyDayAvgMinutes'
    }

    def __init__(self, count=None, minutes=None, thirty_day_avg_minutes=None):  # noqa: E501
        """SleepSummaryEntryDTO - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._minutes = None
        self._thirty_day_avg_minutes = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if minutes is not None:
            self.minutes = minutes
        if thirty_day_avg_minutes is not None:
            self.thirty_day_avg_minutes = thirty_day_avg_minutes

    @property
    def count(self):
        """Gets the count of this SleepSummaryEntryDTO.  # noqa: E501


        :return: The count of this SleepSummaryEntryDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SleepSummaryEntryDTO.


        :param count: The count of this SleepSummaryEntryDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def minutes(self):
        """Gets the minutes of this SleepSummaryEntryDTO.  # noqa: E501


        :return: The minutes of this SleepSummaryEntryDTO.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this SleepSummaryEntryDTO.


        :param minutes: The minutes of this SleepSummaryEntryDTO.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def thirty_day_avg_minutes(self):
        """Gets the thirty_day_avg_minutes of this SleepSummaryEntryDTO.  # noqa: E501


        :return: The thirty_day_avg_minutes of this SleepSummaryEntryDTO.  # noqa: E501
        :rtype: int
        """
        return self._thirty_day_avg_minutes

    @thirty_day_avg_minutes.setter
    def thirty_day_avg_minutes(self, thirty_day_avg_minutes):
        """Sets the thirty_day_avg_minutes of this SleepSummaryEntryDTO.


        :param thirty_day_avg_minutes: The thirty_day_avg_minutes of this SleepSummaryEntryDTO.  # noqa: E501
        :type: int
        """

        self._thirty_day_avg_minutes = thirty_day_avg_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SleepSummaryEntryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SleepSummaryEntryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
